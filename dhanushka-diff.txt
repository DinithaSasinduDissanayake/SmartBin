diff --git a/.github/copilot-instructions.md b/.github/copilot-instructions.md
deleted file mode 100644
index e2c136d..0000000
--- a/.github/copilot-instructions.md
+++ /dev/null
@@ -1,133 +0,0 @@
-# SmartBin Project Guidelines
-
-## Project Structure Overview
-This project follows a full-stack architecture with separate frontend and backend components:
-- **Frontend**: React application built with Vite
-- **Backend**: Node.js Express API server with MongoDB database
-
-## Coding Conventions
-
-### General
-- Use camelCase for variables and functions
-- Use PascalCase for React components and class names
-- Use descriptive variable and function names
-- Add comments for complex logic
-- Follow clean code principles
-
-### Frontend Conventions
-- Use functional components with React hooks
-- Organize components by feature in their respective folders
-- Keep components modular and reusable
-- Use context API for state management
-- Use CSS modules for component styling
-- Follow responsive design principles
-
-### Backend Conventions
-- Follow MVC pattern (Models, Controllers, Routes)
-- Use async/await for asynchronous operations
-- Implement proper error handling with custom error classes
-- Use environment variables for configuration
-- Implement middleware for authentication and validation
-- Validate all input data
-
-## Project Features
-- User authentication and authorization
-- Document management
-- Attendance tracking
-- Financial management (expenses, payments)
-- Performance monitoring
-- Subscription plans management
-- User profile management
-
-## Development Workflow
-- Git Bash is the default terminal for all development operations
-- Run the frontend and backend separately during development
-- For frontend: `cd frontend && npm run dev`
-- For backend: `cd backend && npm run dev`
-- Use Git for version control
-- Write tests for critical functionality
-
-## Testing
-- Jest for backend testing
-- Unit tests for models and services
-- Integration tests for API endpoints
-- Test coverage should be maintained above 70%
-
-## API Structure
-- RESTful API design
-- JWT authentication
-- Consistent error response format
-- Proper input validation
-
-## Database Structure
-- MongoDB with Mongoose ODM
-- Properly defined schemas with validation
-- Use indexes for frequently queried fields
-- Implement proper relationships between collections
-
-## Security Considerations
-- Sanitize all user inputs
-- Store passwords with proper hashing
-- Implement rate limiting for API endpoints
-- Use HTTPS in production
-- Validate and sanitize file uploads
-
-## Performance Guidelines
-
-### Backend Performance
-- Optimize database queries with proper indexing
-- Implement pagination for large data sets
-- Use efficient data structures and algorithms
-- Apply database connection pooling
-- Implement caching strategies for frequently accessed data
-- Use compression for API responses
-
-### Frontend Performance
-- Optimize bundle size with code splitting
-- Implement lazy loading for components and routes
-- Use memoization for expensive calculations
-- Optimize images and assets
-- Implement virtual scrolling for long lists
-- Minimize unnecessary re-renders
-
-### Network Optimization
-- Minimize API calls by batching requests
-- Implement efficient data fetching strategies
-- Use HTTP/2 for multiplexing connections
-- Apply proper CDN usage for static assets
-- Implement service workers for offline capabilities
-
-### Monitoring and Profiling
-- Set up performance monitoring tools
-- Regularly profile application performance
-- Establish performance benchmarks and budgets
-- Monitor server resource utilization
-
-## Git Workflow Guidelines
-- Check git status after making changes: `git status`
-- Add all modified files: `git add .`
-- Gather all changes into a summary file to help with commit messages:
-  ```
-  git diff --cached > commit-summary.txt
-  ```
-- Review the commit-summary.txt file to inform your detailed commit description
-- Create commits with both a brief message AND a detailed description:
-  ```
-  git commit -m "Brief summary message" -m "- Detailed point 1
-  - Detailed point 2
-  - Detailed point 3
-  - Explain why changes were made
-  - Describe key implementation details"
-  ```
-- The first `-m` parameter is the commit message (title)
-- The second `-m` parameter is the detailed point-form description
-- Push changes to the remote repository: `git push`
-- Clean up the summary file after committing:
-  ```
-  rm commit-summary.txt
-  ```
-- Commit after every significant change or feature implementation
-- Pull before starting work: `git pull`
-- Create feature branches for major changes
-
-remind me to git commit and push your changes after completing significant work!
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index e54c0a8..1170717 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,103 +1,136 @@
-# Logs & Runtime Data
-logs/
+# Logs
+logs
 *.log
-*-debug.log*
-*-error.log*
-pids/
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+lerna-debug.log*
+.pnpm-debug.log*
+
+# Diagnostic reports (https://nodejs.org/api/report.html)
+report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
+
+# Runtime data
+pids
 *.pid
 *.seed
 *.pid.lock
-report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
 
-# Dependency Directories & Lockfiles
+# Directory for instrumented libs generated by jscoverage/JSCover
+lib-cov
+
+# Coverage directory used by tools like istanbul
+coverage
+*.lcov
+
+# nyc test coverage
+.nyc_output
+
+# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
+.grunt
+
+# Bower dependency directory (https://bower.io/)
+bower_components
+
+# node-waf configuration
+.lock-wscript
+
+# Compiled binary addons (https://nodejs.org/api/addons.html)
+build/Release
+
+# Dependency directories
 node_modules/
-/frontend/node_modules/
-/backend/node_modules/
 jspm_packages/
+
+# Snowpack dependency directory (https://snowpack.dev/)
 web_modules/
-bower_components/
-.yarn-integrity
-.lock-wscript
-*.tgz
 
-# Build Outputs & Artifacts
-build/
-dist/
-out/
-.next/
-.nuxt/
-.vuepress/dist/
-**/.vitepress/dist/
-.docusaurus/
-.serverless/
-.fusebox/
-lib-cov/
-/frontend/build/
-/frontend/coverage/
-/backend/dist/
-all_code.txt
-all_diffs_from_last_commit.patch
-uncommitted-changes.patch
-
-# Caches
-.cache/
-.parcel-cache/
+# TypeScript cache
 *.tsbuildinfo
-.npm/
+
+# Optional npm cache directory
+.npm
+
+# Optional eslint cache
 .eslintcache
+
+# Optional stylelint cache
 .stylelintcache
+
+# Microbundle cache
 .rpt2_cache/
-.rts2_cache*/
-.temp/
-**/.vitepress/cache/
+.rts2_cache_cjs/
+.rts2_cache_es/
+.rts2_cache_umd/
 
-# Tooling & IDE specific
-.nyc_output/
-coverage/
-*.lcov
-.grunt/
+# Optional REPL history
 .node_repl_history
+
+# Output of 'npm pack'
+*.tgz
+
+# Yarn Integrity file
+.yarn-integrity
+
+# dotenv environment variable files
+.env
+.env.development.local
+.env.test.local
+.env.production.local
+.env.local
+
+# parcel-bundler cache (https://parceljs.org/)
+.cache
+.parcel-cache
+
+# Next.js build output
+.next
+out
+
+# Nuxt.js build / generate output
+.nuxt
+dist
+
+# Gatsby files
+.cache/
+# Comment in the public line in if your project uses Gatsby and not Next.js
+# https://nextjs.org/blog/next-9-1#public-directory-support
+# public
+
+# vuepress build output
+.vuepress/dist
+
+# vuepress v2.x temp and cache directory
+.temp
+.cache
+
+# vitepress build output
+**/.vitepress/dist
+
+# vitepress cache directory
+**/.vitepress/cache
+
+# Docusaurus cache and generated files
+.docusaurus
+
+# Serverless directories
+.serverless/
+
+# FuseBox cache
+.fusebox/
+
+# DynamoDB Local files
 .dynamodb/
+
+# TernJS port file
 .tern-port
-.qodo
-
-# IDE settings (keep shared ones)
-.vscode/*
-!.vscode/extensions.json
-!.vscode/launch.json
-!.vscode/settings.json
-
-.idea/*
-!.idea/workspace.xml # Example: Keep workspace but ignore others if needed
-!.idea/misc.xml
-*.iml
-
-# OS generated files
-.DS_Store
-Thumbs.db
-._*
-
-# Environment Variables
-.env*
-!.env.example # Often useful to keep example env files
-
-# Backup and Documentation (specific ignores)
-Financial\ Backup/ # Escaped space for clarity
-LLMPrompts.md
-LLM_Prompts.md
-CollectAllCode.ps1
-.github/copilot* # Ignore copilot specific files if not shared
-.github/copilot-instructions.md
-
-# Documentation Output (Optional - if you generate docs locally)
-# *.pdf
-# *.docx
-# *.pptx
-
-# Yarn v2+
+
+# Stores VSCode versions used for testing VSCode extensions
+.vscode-test
+
+# yarn v2
 .yarn/cache
 .yarn/unplugged
 .yarn/build-state.yml
 .yarn/install-state.gz
 .pnp.*
-.github/copilot-instructions.md.bak
diff --git a/Diary by copilot.md b/Diary by copilot.md
deleted file mode 100644
index d51f122..0000000
--- a/Diary by copilot.md	
+++ /dev/null
@@ -1,398 +0,0 @@
-# Copilot Work Diary
-
-## Entry: April 28, 2025 11:49:58 PM
-
-### User Request
-The user asked me to analyze the SmartBin project's Financial and User/Staff modules to determine if the plan for these modules was fully implemented, focusing on what might be missing or needs refinement.
-
-### Work Completed
-1. **Code Analysis**: I performed a thorough analysis of key components in the Financial and User/Staff modules
-2. **Enhanced Financial API**: Added the missing `exportReport` function to the financialApi.js service
-3. **Reviewed Redis Caching**: Confirmed the cacheService.js implementation is comprehensive and follows best practices
-4. **Verified User Profile Components**: Confirmed ProfileForm.jsx, DocumentUploadForm.jsx, and MFASetupForm.jsx exist in the profile directory
-
-### Assumptions Made
-1. The workflow requires following the SmartBin git workflow guidelines with detailed commit messages
-2. The Financial and User module implementation was important for the project's functionality
-3. The Redis caching implementation was a critical performance requirement
-
-### Purpose of Changes
-1. **Code Completion**: Ensure all planned components for Financial and User/Staff modules are implemented
-2. **API Enhancement**: Complete the Financial API with missing export functionality
-3. **Documentation**: Create a record of the current implementation status
-
-### Outcomes
-
-#### Functional Changes
-1. The financialApi.js now includes the export report functionality, enabling PDF report generation
-2. Added subscription management methods to the financialApi.js
-
-#### Visual Changes
-No direct visual changes were made as the missing components were found to be already implemented.
-
-### Summary of Implementation Status
-After examining the codebase, I found that the Financial and User/Staff modules are well-implemented with:
-- Comprehensive Financial Dashboard with interactive charts
-- Financial Reports with multiple report types and visualizations
-- Customer Subscription Management with proper payment integration
-- Redis caching for improved performance
-- Complete User Profile Management components
-
-All key components mentioned in the project plan are now present and functional.
-
-## Entry: April 29, 2025 12:04:13 AM
-
-### User Request
-The user asked me to update the copilot-instructions.md file with additional guidelines.
-
-### Work Completed
-1. Located the copilot-instructions.md file in the .github directory
-2. Added three new sections to the project guidelines:
-   - Documentation Guidelines
-   - Code Review Process
-   - Deployment Process
-3. Improved formatting of the existing instructions for diary entries and code collection
-
-### Assumptions Made
-1. The project needed more comprehensive guidelines for documentation, code review, and deployment
-2. The existing content of the file should remain unchanged
-3. Better organization and clearer instructions would improve development workflow
-
-### Purpose of Changes
-1. **Enhanced Guidelines**: Provide more structured guidance for team members
-2. **Standardization**: Ensure consistent documentation and review processes
-3. **Process Improvement**: Create a clear deployment workflow
-
-### Outcomes
-
-#### Functional Changes
-1. Added detailed documentation guidelines with specific requirements for API documentation, JSDoc comments, README updates, schema documentation, and workflow diagrams
-2. Added a structured code review process covering pull requests, review expectations, and testing requirements
-3. Added deployment process guidelines with CI/CD pipelines, environment considerations, and post-deployment monitoring
-
-#### Visual Changes
-Improved formatting and clarity of instructions at the end of the file related to git workflow, diary entries, and code collection process.
-
-### Summary
-The updated guidelines will help the team maintain high-quality standards for documentation, code review, and deployment processes, leading to a more maintainable and robust codebase.
-
-## Entry: April 29, 2025 12:10:20 AM
-
-### User Request
-The user requested that diary entries should be based on the insertions and deletions made since the last commit.
-
-### Work Completed
-1. Enhanced the CollectAllCode.ps1 script to generate a diff summary file (diff_summary.txt) that tracks changes between commits
-2. Added git diff commands to capture both statistical and numerical changes since the last commit
-3. Configured the script to include the last commit message and author information
-4. Updated file filtering to exclude the newly created diff summary file
-
-### Assumptions Made
-1. The PowerShell script was intended to help document code changes for review purposes
-2. Including git diff information would help with creating more accurate diary entries
-3. The script should exclude its own generated files from being included in the code collection
-4. CSS files should be treated as binary/asset files rather than text files for code collection purposes
-
-### Purpose of Changes
-1. **Improved Documentation**: Create more detailed and accurate diary entries based on actual code changes
-2. **Enhanced Workflow**: Automate part of the diary entry process by generating change statistics
-3. **Better Tracking**: Provide a clear view of what changed in each commit to better document the development process
-
-### Outcomes
-
-#### Functional Changes
-1. The script now creates a diff_summary.txt file containing:
-   - Statistical summary of changes (files changed, insertions, deletions)
-   - Numerical data for each changed file (number of lines added/removed)
-   - Last commit information including hash, message, time, and author
-2. Added user-friendly console messages with color-coding for better visibility
-3. Enhanced file filtering to exclude generated summary files
-
-#### Visual Changes
-1. Added a yellow reminder message to review the diff summary when creating diary entries
-2. Improved script commenting to explain the purpose and functionality
-
-### Summary
-The enhanced script now provides better support for maintaining detailed diary entries by automatically generating statistics and summaries of code changes. This will help ensure that the diary accurately reflects the evolution of the codebase and provides valuable context for understanding the history of changes.
-
-## Entry: April 29, 2025 7:48:22 AM
-
-### User Request
-The user asked me to follow the SmartBin project's Git workflow and Diary workflow processes.
-
-### Work Completed
-1. **Git Status Check**: Ran `git status` to identify modified and untracked files
-2. **Added Changes**: Used `git add .` to stage all modified files
-3. **Generated Summary**: Created commit-summary.txt with `git diff --cached`
-4. **Created Commit**: Made a comprehensive commit with descriptive message and detailed bullet points
-5. **Cleaned Up**: Removed the temporary commit summary file after committing
-6. **Generated Diff**: Created git-diff-for-diary.txt for diary analysis 
-
-### Assumptions Made
-1. All the modified files needed to be included in a single commit
-2. The changes were all related to a single feature implementation (reporting functionality)
-3. The changes should be documented following the project's diary workflow guidelines
-4. The file changes were intentional and correctly implemented
-
-### Purpose of Changes
-1. **Documentation**: Create a permanent record of the code changes in both git history and diary
-2. **Organization**: Follow project standards for version control
-3. **Communication**: Ensure changes are properly communicated to team members
-4. **Quality Assurance**: Apply proper workflow procedures for code management
-
-### Outcomes
-
-#### Functional Changes
-1. Added PDF export functionality for attendance reports with detailed formatting and calculations
-2. Added PDF export functionality for performance reports with rating visualizations
-3. Added PDF export functionality for financial reports with expense and revenue breakdowns
-4. Created two new frontend report pages with interactive filtering and visualizations:
-   - AttendanceReportsPage.jsx for attendance reporting
-   - PerformanceReportsPage.jsx for performance reporting
-5. Implemented detailed backend API endpoints for generating different report types
-
-#### Visual Changes
-1. Added two new report pages accessible from the dashboard sidebar
-2. Updated the sidebar navigation with new report links
-3. Implemented data visualization components in report pages (charts, tables)
-
-### Summary
-This commit represents a significant enhancement to the SmartBin platform's reporting capabilities. It adds comprehensive PDF export functionality across multiple modules (attendance, performance, and financial) along with interactive frontend pages for viewing reports. The changes include both backend API endpoints for generating report data and frontend components for displaying and interacting with that data. These improvements will allow administrators to more effectively analyze staff performance and attendance patterns.
-
-## Entry: April 29, 2025
-
-### User Request
-The user asked if there was an easy way to run both the backend and frontend with the same command.
-
-### Work Completed
-1. **Installed Concurrently**: Added the `concurrently` npm package to the root package.json as a development dependency
-2. **Added Scripts**: Updated the root package.json file with new scripts to run both frontend and backend simultaneously:
-   - `dev` script for running both in development mode
-   - `start` script for a production-like setup 
-   - `install-all` script for installing dependencies across all parts of the project
-3. **Tested Functionality**: Confirmed the setup works by running `npm run dev` command that successfully started both servers
-
-### Assumptions Made
-1. The project follows a decoupled architecture with separate frontend and backend applications
-2. Both frontend and backend have their own package.json files with `dev` scripts
-3. The user wants to simplify the development workflow by starting both servers with one command
-
-### Purpose of Changes
-1. **Development Efficiency**: Streamline the development workflow by reducing command repetition
-2. **Simplified Setup**: Make it easier to start the entire application stack with a single command
-3. **Consistency**: Ensure both frontend and backend are running together for testing
-
-### Outcomes
-
-#### Functional Changes
-1. Added a new `dev` script that runs both backend and frontend concurrently
-2. Added a `start` script for production-like execution
-3. Added an `install-all` script to simplify dependency installation
-
-#### Visual Changes
-No direct visual changes to the application UI, but the terminal now displays logs from both frontend and backend servers simultaneously in a split view.
-
-### Summary
-This implementation significantly improves the development workflow by allowing both the frontend and backend servers to be started with a single command (`npm run dev`). The updated package.json now includes three new scripts: `dev` for development, `start` for production-like execution, and `install-all` for dependency installation across all parts of the project. The setup has been tested and confirmed to work correctly, with both servers starting up and displaying logs in the terminal.
-
-Entry: April 30, 2025
-User Request
-
-The user implicitly requested a broad range of enhancements and new features across the SmartBin application, including budget management, system settings, statistics reporting, enhanced admin user management, a dedicated dashboard for financial managers, improved UI/UX, security hardening, and developer workflow improvements.
-
-Work Completed
-
-Budget Module (Backend & Frontend):
-
-Created Budget Mongoose model (Budget.js).
-
-Implemented backend controllers (budgetController.js) and services (budgetService.js) for CRUD operations and budget vs. actual summary calculations.
-
-Added API routes (budgetRoutes.js) with validation.
-
-Developed frontend page (BudgetAllocationPage.jsx) with components for listing (BudgetList.jsx), creating/editing (BudgetForm.jsx), and viewing summaries (BudgetSummaryView.jsx).
-
-Settings Module (Backend & Frontend):
-
-Created Settings Mongoose model (Settings.js) using a singleton pattern.
-
-Implemented backend controllers (settingsController.js) for fetching and updating settings.
-
-Added API routes (settingsRoutes.js) with validation.
-
-Developed frontend page (SystemSettingsPage.jsx) for administrators to manage system configurations.
-
-Statistics Module (Backend & Frontend):
-
-Implemented backend service (statisticsService.js) to aggregate various system metrics (users, financials, subscriptions, payments, complaints).
-
-Added controllers (statisticsController.js) and routes (statisticsRoutes.js).
-
-Developed frontend page (StatisticsPage.jsx) with date filtering and Recharts visualizations for key statistics.
-
-Financial Manager Dashboard (Backend & Frontend):
-
-Created backend controllers (dashboardController.js) and routes (dashboardRoutes.js) specifically for fetching aggregated data relevant to financial managers, using a fixed demo date for consistency.
-
-Developed a dedicated frontend dashboard page (FinancialManagerDashboard.jsx) composed of new specialized widgets:
-
-DailySnapshotWidget.jsx
-
-ActionRequiredWidget.jsx
-
-DailyActivityWidget.jsx
-
-RecentMessagesWidget.jsx
-
-UpcomingEventsWidget.jsx
-
-Added corresponding CSS (ManagerDashboardWidgets.css).
-
-Admin User Management Enhancements (Backend & Frontend):
-
-Added pagination to the backend getUsers controller.
-
-Implemented adminCreateUser and enhanced adminUpdateUser controllers with validation.
-
-Added corresponding API routes and validation middleware.
-
-Developed frontend page (UserManagementPage.jsx) with components for listing (UserList.jsx) and creating/editing users (UserForm.jsx), including pagination and delete confirmation.
-
-Payments Page (Frontend):
-
-Created a new frontend page (PaymentsPage.jsx) to display and filter payments with pagination.
-
-Refactored backend getAllPayments controller to use aggregation for advanced filtering (customer name, payment method) and population.
-
-Added PDF export functionality with progress indication to the payments page.
-
-API Security & Enhancements (Backend):
-
-Added security middleware: express-mongo-sanitize, xss-clean, hpp.
-
-Implemented a new global error handling controller (errorController.js) and utility (AppError.js, catchAsync.js).
-
-Updated server.js to use new error handling, middleware, and added port availability check logic.
-
-Added API validation using express-validator to many routes (MFA, Documents, Performance, Users, Budgets, Settings).
-
-Created a system log model (Log.js) and service (logService.js).
-
-Seeding & Scripts (Backend):
-
-Created a comprehensive seedAll.js script to populate most models with realistic data over a defined period, using a fixed demo date.
-
-Refactored existing seeding scripts into the /seed directory.
-
-Added demo/test scripts for Stripe payments.
-
-Frontend UI & Styling Refactor:
-
-Significantly refactored dashboard Header.jsx and Sidebar.jsx for improved layout, styling, and functionality (dynamic title, logout button, icons). Added corresponding CSS (Header.css, Sidebar.css).
-
-Refactored global CSS (index.css) to use CSS variables (variables.css, themeStyles.css).
-
-Updated the MUI theme (muiTheme.js) with more component overrides and refined styles.
-
-Created a reusable FeedbackMessage.jsx component for alerts and snackbars.
-
-Added PDF export progress indication (LinearProgress) to report pages.
-
-Developer Experience:
-
-Installed concurrently and added root-level package.json scripts (dev, start, install-all) to run frontend and backend simultaneously with single commands.
-
-Experimental UI Pages:
-
-Added pages (ShadcnExperimentPage.jsx, AceternityExperimentPage.jsx) and basic CSS to explore alternative UI libraries/styles.
-
-Authentication Context:
-
-Integrated authService.js for consistent token/user handling in AuthContext.jsx.
-
-Added updateUser function to the context.
-
-Miscellaneous:
-
-Updated README.md with comprehensive project details.
-
-Cleaned up project structure (deleted backend/backend, moved/renamed files).
-
-Added prompts.md.
-
-Assumptions Made
-
-A dedicated dashboard tailored for financial managers was required, distinct from the general admin/staff dashboards.
-
-Robust API validation and security middleware were necessary enhancements.
-
-Comprehensive seeding data using a fixed reference date would be beneficial for development and demonstration.
-
-Budget, Settings, and Statistics functionalities required dedicated modules (models, services, controllers, routes, frontend pages).
-
-Pagination and advanced filtering were needed for admin user management and payment viewing.
-
-A streamlined npm run dev / npm run start command to launch both frontend and backend was desired.
-
-Existing Material UI components could coexist with experimental explorations of Shadcn UI and Aceternity UI concepts.
-
-Purpose of Changes
-
-Expand Functionality: Introduce core modules for budget management, system settings, and statistical reporting.
-
-Improve Role-Specific Experience: Provide a tailored dashboard experience for financial managers with relevant widgets and data.
-
-Enhance Administration: Improve user management capabilities for administrators with pagination, creation, and editing features.
-
-Increase Data Visibility: Offer detailed views and filtering for payments and system statistics.
-
-Strengthen Security: Implement standard security practices like data sanitization, parameter pollution prevention, and enhanced error handling.
-
-Improve Developer Workflow: Simplify the process of starting the development environment and provide comprehensive seeding data.
-
-Modernize UI/UX: Refine the visual appearance and consistency of the dashboard layout and components using CSS variables and updated MUI theming.
-
-Explore Alternatives: Create sandbox pages to evaluate potential future UI directions.
-
-Outcomes
-Functional Changes
-
-New Modules: Fully functional CRUD operations and frontend interfaces for Budgets and System Settings.
-
-Statistics: API endpoint and frontend page displaying aggregated statistics with date filtering.
-
-Financial Manager Dashboard: New dashboard view showing daily snapshots, action items, activity feeds, messages, and upcoming events.
-
-Admin User Management: Admins can now view users with pagination, create new users, edit existing users, and delete users.
-
-Payments View: Added a dedicated page to view and filter payments with pagination and PDF export.
-
-API Security: Added mongo-sanitize, xss-clean, hpp middleware; improved error handling.
-
-Seeding: Comprehensive data seeding across most models via npm run seed:all (assuming script is added).
-
-Development Startup: npm run dev and npm run start in the root directory now launch both frontend and backend.
-
-PDF Export: Added progress indicators during PDF generation on report pages.
-
-Authentication: More robust token/user handling via authService.
-
-Visual Changes
-
-New Pages: Added dedicated pages for Budget Allocation, System Settings, Statistics, User Management, Payments, Financial Manager Dashboard, and experimental UI explorations.
-
-Dashboard Layout: Refactored Header and Sidebar components with improved styling, dynamic titles, icons, and layout adjustments.
-
-Financial Manager Widgets: Added several new, styled widgets to the Financial Manager Dashboard.
-
-Styling: Implemented global CSS variables and updated MUI theme for more consistent styling. Added FeedbackMessage component for standardized user notifications.
-
-Charts: Integrated Recharts for visualizations on the Statistics page.
-
-Forms/Lists: Added new forms and lists for managing budgets, settings, and users.
-
-Reports: Added LinearProgress indicator during PDF export.
-
-Summary
-
-This massive commit significantly expands the SmartBin application's capabilities, particularly in financial management, administration, and system insights. Key additions include full modules for Budget Allocation and System Settings, a dedicated Financial Manager Dashboard with specialized widgets, a comprehensive Statistics page with visualizations, and enhanced Admin User Management features with pagination. Backend security was hardened with additional middleware and improved error handling. Frontend UI/UX was refined through layout refactoring, global styling updates, and the addition of new components. Developer experience was improved with concurrently for easier startup and comprehensive data seeding scripts. This represents a major step forward in building a feature-rich and robust waste management platform.
\ No newline at end of file
diff --git a/Financial Backup/App.jsx b/Financial Backup/App.jsx
deleted file mode 100644
index 875dbb0..0000000
--- a/Financial Backup/App.jsx	
+++ /dev/null
@@ -1,15 +0,0 @@
-import React from "react";
-import { Outlet } from "react-router-dom";  // Remove BrowserRouter
-import Sidebar from "./components/sidebar.jsx";
-import "./App.css";
-
-const App = () => {
-  return (
-    <div className="container">
-      <Sidebar />
-      <Outlet />
-    </div>
-  );
-};
-
-export default App;
\ No newline at end of file
diff --git a/Financial Backup/connection.js b/Financial Backup/connection.js
deleted file mode 100644
index fb0f52e..0000000
--- a/Financial Backup/connection.js	
+++ /dev/null
@@ -1,22 +0,0 @@
-import {MongoClient,ServerApiVersion} from "mongodb";
-
-const uri = process.env.MONGODB_URI || "";
-const frontend = new MongoClient(uri,{
-    serverApi:{
-        version:ServerApiVersion.v1,
-        strict:true,
-        deprecationErrors:true,
-    },
-});
-
-try{
-    await frontend.connect();
-    await frontend.db("admin").command({ping:1});
-    console.log(
-        "Successfully connected to MongoDB"
-    );
-}
-catch(error){
-    console.error("Error connecting to MongoDB: ",error);
-}
-
diff --git a/Financial Backup/main.jsx b/Financial Backup/main.jsx
deleted file mode 100644
index 5f55723..0000000
--- a/Financial Backup/main.jsx	
+++ /dev/null
@@ -1,26 +0,0 @@
-import { StrictMode } from 'react'
-import { createRoot } from 'react-dom/client'
-import { createBrowserRouter, RouterProvider } from "react-router-dom";
-import App from './App.jsx'
-import SubscriptionPlans from "./components/subscription.jsx";  // Import SubscriptionPlans
-import './index.css'
-
-const router = createBrowserRouter([
-  {
-    path: "/",
-    element: <App />,
-    children: [
-      {
-        path: "subscribe-plans",    // Route path
-        element: <SubscriptionPlans />,
-      },
-      // … other routes
-    ],
-  },
-]);
-
-createRoot(document.getElementById('root')).render(
-  <StrictMode>
-    <RouterProvider router={router} />
-  </StrictMode>,
-)
diff --git a/Financial Backup/sidebar.jsx b/Financial Backup/sidebar.jsx
deleted file mode 100644
index 425a963..0000000
--- a/Financial Backup/sidebar.jsx	
+++ /dev/null
@@ -1,77 +0,0 @@
-import React from "react";
-import { Link } from "react-router-dom";
-import "../App.css";
-import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
-import { faFacebook, faInstagram, faTwitter } from "@fortawesome/free-brands-svg-icons";
-import { 
-  faDashboard, 
-  faUpload, 
-  faDollarSign, 
-  faMessage, 
-  faCreditCard 
-} from "@fortawesome/free-solid-svg-icons";
-
-const Sidebar = () => {
-  return (
-    <nav>
-      <div className="sidebar">
-        <div className="logo">
-          <img src="#" alt="logo" className="logo-img" />
-          <span className="logo-name">SmartBin</span>
-        </div>
-
-        <div className="sidebar-content">
-          <ul className="list">
-            <li className="list">
-              <Link to="/dashboard" className="nav-link">
-                <span className="link">Dashboard</span>
-              </Link>
-            </li>
-            <li className="list">
-              <Link to="/add-plans" className="nav-link">
-                <span className="link">Add Plans</span>
-              </Link>
-            </li>
-            <li className="list">
-              <Link to="/subscribe-plans" className="nav-link">
-                <span className="link">Subscribe Plans</span>
-              </Link>
-            </li>
-            <li className="list">
-              <Link to="/budget-allocation" className="nav-link">
-                <span className="link">Budget Allocation</span>
-              </Link>
-            </li>
-            <li className="list">
-              <Link to="/add-salary" className="nav-link">
-                <span className="link">Add Salary</span>
-              </Link>
-            </li>
-            <li className="list">
-              <Link to="/view-salary" className="nav-link">
-                <span className="link">View Salary</span>
-              </Link>
-            </li>
-            <li className="list">
-              <Link to="/payments" className="nav-link">
-                <span className="link">Payments</span>
-              </Link>
-            </li>
-          </ul>
-
-          <div className="bottom-content">
-            <div className="social-icons">
-              <a href="#" class="icon"><FontAwesomeIcon icon={faFacebook} /></a>
-              <a href="#" class="icon"><FontAwesomeIcon icon={faInstagram} /></a>
-              <a href="#" class="icon"><FontAwesomeIcon icon={faTwitter} /></a>
-
-              
-            </div>
-          </div>
-        </div>
-      </div>
-    </nav>
-  );
-};
-
-export default Sidebar;
diff --git a/Financial Backup/subscribe.js b/Financial Backup/subscribe.js
deleted file mode 100644
index 566069a..0000000
--- a/Financial Backup/subscribe.js	
+++ /dev/null
@@ -1,25 +0,0 @@
-import express from "express";
-
-import db from ".../db/connection.js";
-
-import {ObjectId } from "mongodb";
-
-const router = express.Router();
-
-//insert 
-router.post("/", async (req, res) => {
-    try{
-        let newSubscription = {
-            name: req.body.name,
-            price : req.body.price,
-            features: req.body.features,
-    };
-    let collection = await db.collection("subscription");
-    let result = await collection.insertOne(newSubscription);
-   res.send(result).status(204);
-}catch(error){
-    console.error(error);
-    res.status(500).send(" error insert subscription");
-}
-});
-    
\ No newline at end of file
diff --git a/Financial Backup/subscription.css b/Financial Backup/subscription.css
deleted file mode 100644
index cc75380..0000000
--- a/Financial Backup/subscription.css	
+++ /dev/null
@@ -1,44 +0,0 @@
-
-/* CSS: styles.css */
-body {
-    font-family: Arial, sans-serif;
-    margin: 0;
-    padding: 20px;
-    background-color: #f4f4f4;
-}
-.container {
-    max-width: 800px;
-    margin: auto;
-    background: white;
-    padding: 20px;
-    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
-}
-.btn {
-    padding: 10px 15px;
-    margin: 5px;
-    border: none;
-    cursor: pointer;
-}
-.add-btn { background: green; color: white; }
-.save-btn { background: blue; color: white; }
-.cancel-btn { background: gray; color: white; }
-.modal {
-    display: none;
-    position: fixed;
-    top: 0; left: 0;
-    width: 100%; height: 100%;
-    background: rgba(0, 0, 0, 0.5);
-    justify-content: center;
-    align-items: center;
-}
-.modal-content {
-    background: white;
-    padding: 20px;
-    width: 300px;
-    position: relative;
-}
-.close {
-    position: absolute;
-    top: 10px; right: 10px;
-    cursor: pointer;
-}
diff --git a/Financial Backup/subscription.js b/Financial Backup/subscription.js
deleted file mode 100644
index e69de29..0000000
diff --git a/Financial Backup/subscription.jsx b/Financial Backup/subscription.jsx
deleted file mode 100644
index 43ffb12..0000000
--- a/Financial Backup/subscription.jsx	
+++ /dev/null
@@ -1,116 +0,0 @@
-import React, { useState } from "react";
-import "./css/subscription.css";
-
-const SubscriptionPlans = () => {
-  const [plans, setPlans] = useState([]);
-  const [modalOpen, setModalOpen] = useState(false);
-  const [formData, setFormData] = useState({ name: "", price: "", feature: "" });
-  const [editingIndex, setEditingIndex] = useState(null);
-
-  const openModal = (index = null) => {
-    if (index !== null) {
-      setFormData(plans[index]);
-      setEditingIndex(index);
-    } else {
-      setFormData({ name: "", price: "", feature: "" });
-      setEditingIndex(null);
-    }
-    setModalOpen(true);
-  };
-
-  const closeModal = () => {
-    setModalOpen(false);
-  };
-
-  const handleChange = (e) => {
-    setFormData({ ...formData, [e.target.name]: e.target.value });
-  };
-
-  const handleSave = async () => {
-    if (!formData.name || !formData.price || !formData.feature) {
-      alert("All fields are required");
-      return;
-    }
-    try {
-      // Send a POST request to the backend subscribe endpoint.
-      const response = await fetch("http://localhost:5000/subscribe", { // adjust the URL and port to match your backend
-        method: "POST",
-        headers: {
-          "Content-Type": "application/json",
-        },
-        body: JSON.stringify(formData),
-      });
-      if (!response.ok) {
-        throw new Error("Failed to save subscription plan");
-      }
-      // If saving succeeds on the backend, update your local state.
-      if (editingIndex !== null) {
-        const updatedPlans = [...plans];
-        updatedPlans[editingIndex] = formData;
-        setPlans(updatedPlans);
-      } else {
-        setPlans([...plans, formData]);
-      }
-      closeModal();
-    } catch (error) {
-      console.error(error);
-      alert("There was an error saving the subscription plan.");
-    }
-  };
-
-  const handleDelete = (index) => {
-    if (window.confirm("Are you sure you want to delete this plan?")) {
-      setPlans(plans.filter((_, i) => i !== index));
-    }
-  };
-
-  return (
-    <div className="container">
-      <h2>Subscription Plans</h2>
-      <button className="btn add-btn" onClick={() => openModal()}>Add Subscription Plan</button>
-      <table>
-        <thead>
-          <tr>
-            <th>Name</th>
-            <th>Price</th>
-            <th>Feature</th>
-            <th>Actions</th>
-          </tr>
-        </thead>
-        <tbody>
-          {plans.map((plan, index) => (
-            <tr key={index}>
-              <td>{plan.name}</td>
-              <td>{plan.price}</td>
-              <td>{plan.feature}</td>
-              <td>
-                <button className="btn edit-btn" onClick={() => openModal(index)}>Edit</button>
-                <button className="btn delete-btn" onClick={() => handleDelete(index)}>Delete</button>
-              </td>
-            </tr>
-          ))}
-        </tbody>
-      </table>
-      {modalOpen && (
-        <div className="modal">
-          <div className="modal-content">
-            <span className="close" onClick={closeModal}>&times;</span>
-            <h2>{editingIndex !== null ? "Edit Subscription Plan" : "Add Subscription Plan"}</h2>
-            <form>
-              <label>Name:</label>
-              <input type="text" name="name" value={formData.name} onChange={handleChange} required />
-              <label>Price:</label>
-              <input type="number" name="price" value={formData.price} onChange={handleChange} required />
-              <label>Feature:</label>
-              <input type="text" name="feature" value={formData.feature} onChange={handleChange} required />
-              <button type="button" className="btn save-btn" onClick={handleSave}>Save</button>
-              <button type="button" className="btn cancel-btn" onClick={closeModal}>Cancel</button>
-            </form>
-          </div>
-        </div>
-      )}
-    </div>
-  );
-};
-
-export default SubscriptionPlans;
diff --git a/README.md b/README.md
index f18de84..4721725 100644
--- a/README.md
+++ b/README.md
@@ -1,177 +1,16 @@
-# SmartBin - Intelligent Waste Management System
+# SmartBin
+# SmartBin Project
 
-## Project Overview
+A waste management system with a React frontend and Express backend, using TypeScript, MongoDB, and Nodemailer for email notifications.
 
-SmartBin is a comprehensive Full-Stack application designed to streamline waste management processes for customers, staff, financial managers, and administrators. It includes features for user management, dynamic subscription handling, financial tracking (payments, expenses), automated payroll, attendance tracking, performance monitoring, document management, and a complaint resolution system. This project is developed as part of the IT2080 IT Project module at SLIIT.
+## Prerequisites
+- Node.js (v16 or higher)
+- MongoDB (running on localhost)
+- Gmail account for email notifications (with app password)
 
-## Project Structure
-
-The project is divided into two main parts:
-
-*   **`/backend`**: Contains the Node.js/Express API server, connecting to MongoDB.
-*   **`/frontend`**: Contains the React application built with Vite for the user interface.
-*   **`/docs`**: (Optional) Intended location for detailed documentation like diagrams, requirements specifications, etc.
-
-```
-SmartBin/
-├── backend/            # Node.js/Express API (MongoDB)
-│   ├── src/
-│   │   ├── controllers/  # Request handling logic
-│   │   ├── models/       # Mongoose schemas
-│   │   ├── routes/       # API endpoint definitions
-│   │   ├── services/     # Business logic (e.g., payroll calculation)
-│   │   ├── middleware/   # Auth, validation, error handling
-│   │   ├── config/       # Environment config loading
-│   │   ├── errors/       # Custom error classes
-│   │   ├── utils/        # Helper functions
-│   │   └── server.js     # Main Express app setup
-│   ├── tests/          # Jest tests (unit, integration)
-│   ├── uploads/        # File storage for documents
-│   ├── .env.example    # Environment variable template
-│   └── package.json
-├── frontend/           # React Vite SPA
-│   ├── src/
-│   │   ├── components/   # Reusable UI components
-│   │   ├── pages/        # Page-level components
-│   │   ├── services/     # API interaction functions (axios wrappers)
-│   │   ├── contexts/     # React Context (e.g., AuthContext)
-│   │   ├── hooks/        # Custom React Hooks
-│   │   ├── assets/       # Images, icons and other static assets
-│   │   ├── utils/        # Utility functions and helpers
-│   │   └── App.jsx       # Main application component & routing
-│   ├── public/         # Static assets
-│   ├── .env.example    # Frontend environment variables
-│   └── package.json
-├── docs/               # Documentation (Diagrams, Reports - optional)
-├── .gitignore
-└── README.md           # This file
-```
-
-## Key Features
-
-* **User Authentication & Authorization**
-  * Secure login/registration
-  * Role-based access control (customers, staff, admin, financial manager)
-  * Multi-factor authentication (MFA)
-  * Profile management
-
-* **Subscription Management**
-  * Dynamic subscription plans
-  * Payment integration with Stripe
-  * Subscription status tracking
-
-* **Financial Management**
-  * Income and expense tracking
-  * Financial dashboard with analytics
-  * Payment processing
-  * Report generation
-
-* **Payroll System**
-  * Automated salary calculation
-  * Performance-based bonuses
-  * Payslip generation and distribution
-
-* **Attendance & Performance**
-  * Staff check-in/check-out tracking
-  * Performance reviews and ratings
-  * Analytics and reports
-
-* **Document Management**
-  * Secure document upload and storage
-  * Document verification and approval (admin)
-  * Document categorization
-
-* **Complaint Handling**
-  * Customer complaint submission
-  * Staff assignment and resolution tracking
-  * Status updates and notification
-
-## Getting Started
-
-### Prerequisites
-
-*   Node.js (v18+ recommended)
-*   npm (v8+) or yarn (v1.22+)
-*   MongoDB (Local instance or MongoDB Atlas connection URI)
-*   Git
-*   (Optional) Stripe Account for payment features
-
-### Backend Setup
-
-1.  Navigate to the backend directory: `cd backend`
-2.  Install dependencies: `npm install` or `yarn install`
-3.  Copy `.env.example` to `.env`: `cp .env.example .env`
-4.  **Crucially, update the `.env` file** with your `MONGODB_URI`, `JWT_SECRET`, and payment gateway keys if required.
-5.  Run the development server: `npm run dev` (uses nodemon for auto-restarts)
-6.  To start normally: `npm start`
-7.  (Optional) Seed initial admin/test users: `node src/scripts/createTestUsers.js` or `node src/scripts/recreateUsers.js`
-8.  (Optional) Seed financial data: `node src/scripts/seedFinancialData.js`
-
-### Frontend Setup
-
-1.  Navigate to the frontend directory: `cd frontend`
-2.  Install dependencies: `npm install` or `yarn install`
-3.  Copy `.env.example` to `.env` if needed (e.g., for `VITE_STRIPE_PUBLISHABLE_KEY`).
-4.  Run the development server: `npm run dev`
-5.  Access the application in your browser, usually at `http://localhost:5173` (check terminal output).
-
-## Running Tests
-
-### Backend Tests
-
-1.  Navigate to the backend directory: `cd backend`
-2.  Run tests: `npm test` (Runs Jest tests)
-3.  For test coverage: `npm run test:coverage`
-
-## API Documentation
-
-The API documentation can be accessed at the `/api-docs` endpoint when the backend server is running (if Swagger UI is implemented).
-
-A more complete Postman collection for testing all API endpoints can be found in the `docs` folder.
-
-## Technologies Used
+## Setup Instructions
 
 ### Backend
-* Node.js & Express
-* MongoDB & Mongoose ODM
-* JWT Authentication
-* Stripe API for payments
-* PDF generation for reports
-* Jest for testing
-
-### Frontend
-* React with Hooks
-* Vite build tool
-* Material UI components
-* Recharts for data visualization
-* Axios for API communication
-* React Context API for state management
-
-## Development Workflow
-
-1. Create feature branches from `main` or `development`
-2. Implement features based on user stories
-3. Write tests for critical functionality
-4. Create pull requests for code reviews
-5. Merge to main branch after approval
-6. Deploy to staging/production
-
-## Contributing
-
-Please follow these guidelines when contributing to the project:
-* Use descriptive commit messages
-* Follow the project coding standards
-* Write tests for new features
-* Document API endpoints and functions
-
-## Security Considerations
-
-* All user inputs are validated and sanitized
-* Authentication and authorization are enforced
-* Passwords are securely hashed
-* API endpoints have rate limiting
-* File uploads are validated
-
-## License
-
-This project is developed as part of an educational assignment and is not licensed for public use.
\ No newline at end of file
+1. Navigate to the backend folder:
+   ```bash
+   cd SmartBin/backend
\ No newline at end of file
diff --git a/backend/.env.example b/backend/.env.example
deleted file mode 100644
index c46e91a..0000000
--- a/backend/.env.example
+++ /dev/null
@@ -1,39 +0,0 @@
-# SmartBin Environment Variables
-# Copy this file to .env and fill in the appropriate values
-
-# Server Configuration
-NODE_ENV=development       # development, test, production
-PORT=5000                  # Port for the API server
-
-# Database Configuration
-MONGODB_URI=mongodb+srv://<username>:<password>@<cluster>.mongodb.net/<dbname>?retryWrites=true&w=majority
-
-# Redis Cache Configuration
-REDIS_URL=redis://localhost:6379     # Redis server URL for caching
-
-# Authentication
-JWT_SECRET=your_jwt_secret_key_here  # Change to a secure random string!
-JWT_EXPIRE=30d                       # Token expiration time (30 days)
-
-# File Upload Settings
-UPLOAD_DIR=uploads                   # Directory for file uploads
-MAX_FILE_SIZE=5242880                # Maximum file size in bytes (5MB)
-ALLOWED_FILE_TYPES=pdf,jpg,jpeg,png,doc,docx
-
-# Rate Limiting
-RATE_LIMIT_WINDOW_MS=900000          # Time window for rate limiting (15 minutes)
-RATE_LIMIT_MAX=100                   # Maximum requests per window
-
-# Email Configuration (for notifications, password resets, etc.)
-EMAIL_SERVICE=smtp.example.com       # SMTP service provider
-EMAIL_USER=user@example.com          # SMTP username
-EMAIL_PASSWORD=your_email_password   # SMTP password
-EMAIL_FROM=noreply@smartbin.com      # Sender email address
-
-# Payment Gateway Configuration (Stripe)
-STRIPE_PUBLISHABLE_KEY=pk_test_your_publishable_key
-STRIPE_SECRET_KEY=sk_test_your_secret_key
-STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_key
-
-# Geolocation API Configuration (for future waste location tracking)
-GEO_API_KEY=your_geolocation_api_key
\ No newline at end of file
diff --git a/backend/frontend/package-lock.json b/backend/frontend/package-lock.json
deleted file mode 100644
index d326453..0000000
--- a/backend/frontend/package-lock.json
+++ /dev/null
@@ -1,564 +0,0 @@
-{
-  "name": "frontend",
-  "lockfileVersion": 3,
-  "requires": true,
-  "packages": {
-    "": {
-      "dependencies": {
-        "@mui/x-date-pickers": "^8.1.0",
-        "date-fns": "^4.1.0"
-      }
-    },
-    "node_modules/@babel/runtime": {
-      "version": "7.27.1",
-      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.27.1.tgz",
-      "integrity": "sha512-1x3D2xEk2fRo3PAhwQwu5UubzgiVWSXTBfWpVd2Mx2AzRqJuDJCsgaDVZ7HB5iGzDW1Hl1sWN2mFyKjmR9uAog==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
-    "node_modules/@emotion/cache": {
-      "version": "11.14.0",
-      "resolved": "https://registry.npmjs.org/@emotion/cache/-/cache-11.14.0.tgz",
-      "integrity": "sha512-L/B1lc/TViYk4DcpGxtAVbx0ZyiKM5ktoIyafGkH6zg/tj+mA+NE//aPYKG0k8kCHSHVJrpLpcAlOBEXQ3SavA==",
-      "license": "MIT",
-      "peer": true,
-      "dependencies": {
-        "@emotion/memoize": "^0.9.0",
-        "@emotion/sheet": "^1.4.0",
-        "@emotion/utils": "^1.4.2",
-        "@emotion/weak-memoize": "^0.4.0",
-        "stylis": "4.2.0"
-      }
-    },
-    "node_modules/@emotion/hash": {
-      "version": "0.9.2",
-      "resolved": "https://registry.npmjs.org/@emotion/hash/-/hash-0.9.2.tgz",
-      "integrity": "sha512-MyqliTZGuOm3+5ZRSaaBGP3USLw6+EGykkwZns2EPC5g8jJ4z9OrdZY9apkl3+UP9+sdz76YYkwCKP5gh8iY3g==",
-      "license": "MIT",
-      "peer": true
-    },
-    "node_modules/@emotion/memoize": {
-      "version": "0.9.0",
-      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.9.0.tgz",
-      "integrity": "sha512-30FAj7/EoJ5mwVPOWhAyCX+FPfMDrVecJAM+Iw9NRoSl4BBAQeqj4cApHHUXOVvIPgLVDsCFoz/hGD+5QQD1GQ==",
-      "license": "MIT",
-      "peer": true
-    },
-    "node_modules/@emotion/serialize": {
-      "version": "1.3.3",
-      "resolved": "https://registry.npmjs.org/@emotion/serialize/-/serialize-1.3.3.tgz",
-      "integrity": "sha512-EISGqt7sSNWHGI76hC7x1CksiXPahbxEOrC5RjmFRJTqLyEK9/9hZvBbiYn70dw4wuwMKiEMCUlR6ZXTSWQqxA==",
-      "license": "MIT",
-      "peer": true,
-      "dependencies": {
-        "@emotion/hash": "^0.9.2",
-        "@emotion/memoize": "^0.9.0",
-        "@emotion/unitless": "^0.10.0",
-        "@emotion/utils": "^1.4.2",
-        "csstype": "^3.0.2"
-      }
-    },
-    "node_modules/@emotion/sheet": {
-      "version": "1.4.0",
-      "resolved": "https://registry.npmjs.org/@emotion/sheet/-/sheet-1.4.0.tgz",
-      "integrity": "sha512-fTBW9/8r2w3dXWYM4HCB1Rdp8NLibOw2+XELH5m5+AkWiL/KqYX6dc0kKYlaYyKjrQ6ds33MCdMPEwgs2z1rqg==",
-      "license": "MIT",
-      "peer": true
-    },
-    "node_modules/@emotion/unitless": {
-      "version": "0.10.0",
-      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.10.0.tgz",
-      "integrity": "sha512-dFoMUuQA20zvtVTuxZww6OHoJYgrzfKM1t52mVySDJnMSEa08ruEvdYQbhvyu6soU+NeLVd3yKfTfT0NeV6qGg==",
-      "license": "MIT",
-      "peer": true
-    },
-    "node_modules/@emotion/utils": {
-      "version": "1.4.2",
-      "resolved": "https://registry.npmjs.org/@emotion/utils/-/utils-1.4.2.tgz",
-      "integrity": "sha512-3vLclRofFziIa3J2wDh9jjbkUz9qk5Vi3IZ/FSTKViB0k+ef0fPV7dYrUIugbgupYDx7v9ud/SjrtEP8Y4xLoA==",
-      "license": "MIT",
-      "peer": true
-    },
-    "node_modules/@emotion/weak-memoize": {
-      "version": "0.4.0",
-      "resolved": "https://registry.npmjs.org/@emotion/weak-memoize/-/weak-memoize-0.4.0.tgz",
-      "integrity": "sha512-snKqtPW01tN0ui7yu9rGv69aJXr/a/Ywvl11sUjNtEcRc+ng/mQriFL0wLXMef74iHa/EkftbDzU9F8iFbH+zg==",
-      "license": "MIT",
-      "peer": true
-    },
-    "node_modules/@mui/core-downloads-tracker": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/@mui/core-downloads-tracker/-/core-downloads-tracker-7.0.2.tgz",
-      "integrity": "sha512-TfeFU9TgN1N06hyb/pV/63FfO34nijZRMqgHk0TJ3gkl4Fbd+wZ73+ZtOd7jag6hMmzO9HSrBc6Vdn591nhkAg==",
-      "license": "MIT",
-      "peer": true,
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      }
-    },
-    "node_modules/@mui/material": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/@mui/material/-/material-7.0.2.tgz",
-      "integrity": "sha512-rjJlJ13+3LdLfobRplkXbjIFEIkn6LgpetgU/Cs3Xd8qINCCQK9qXQIjjQ6P0FXFTPFzEVMj0VgBR1mN+FhOcA==",
-      "license": "MIT",
-      "peer": true,
-      "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@mui/core-downloads-tracker": "^7.0.2",
-        "@mui/system": "^7.0.2",
-        "@mui/types": "^7.4.1",
-        "@mui/utils": "^7.0.2",
-        "@popperjs/core": "^2.11.8",
-        "@types/react-transition-group": "^4.4.12",
-        "clsx": "^2.1.1",
-        "csstype": "^3.1.3",
-        "prop-types": "^15.8.1",
-        "react-is": "^19.1.0",
-        "react-transition-group": "^4.4.5"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "@emotion/react": "^11.5.0",
-        "@emotion/styled": "^11.3.0",
-        "@mui/material-pigment-css": "^7.0.2",
-        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@emotion/react": {
-          "optional": true
-        },
-        "@emotion/styled": {
-          "optional": true
-        },
-        "@mui/material-pigment-css": {
-          "optional": true
-        },
-        "@types/react": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@mui/private-theming": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/@mui/private-theming/-/private-theming-7.0.2.tgz",
-      "integrity": "sha512-6lt8heDC9wN8YaRqEdhqnm0cFCv08AMf4IlttFvOVn7ZdKd81PNpD/rEtPGLLwQAFyyKSxBG4/2XCgpbcdNKiA==",
-      "license": "MIT",
-      "peer": true,
-      "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@mui/utils": "^7.0.2",
-        "prop-types": "^15.8.1"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@types/react": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@mui/styled-engine": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/@mui/styled-engine/-/styled-engine-7.0.2.tgz",
-      "integrity": "sha512-11Bt4YdHGlh7sB8P75S9mRCUxTlgv7HGbr0UKz6m6Z9KLeiw1Bm9y/t3iqLLVMvSHYB6zL8X8X+LmfTE++gyBw==",
-      "license": "MIT",
-      "peer": true,
-      "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@emotion/cache": "^11.13.5",
-        "@emotion/serialize": "^1.3.3",
-        "@emotion/sheet": "^1.4.0",
-        "csstype": "^3.1.3",
-        "prop-types": "^15.8.1"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "@emotion/react": "^11.4.1",
-        "@emotion/styled": "^11.3.0",
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@emotion/react": {
-          "optional": true
-        },
-        "@emotion/styled": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@mui/system": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/@mui/system/-/system-7.0.2.tgz",
-      "integrity": "sha512-yFUraAWYWuKIISPPEVPSQ1NLeqmTT4qiQ+ktmyS8LO/KwHxB+NNVOacEZaIofh5x1NxY8rzphvU5X2heRZ/RDA==",
-      "license": "MIT",
-      "peer": true,
-      "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@mui/private-theming": "^7.0.2",
-        "@mui/styled-engine": "^7.0.2",
-        "@mui/types": "^7.4.1",
-        "@mui/utils": "^7.0.2",
-        "clsx": "^2.1.1",
-        "csstype": "^3.1.3",
-        "prop-types": "^15.8.1"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "@emotion/react": "^11.5.0",
-        "@emotion/styled": "^11.3.0",
-        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@emotion/react": {
-          "optional": true
-        },
-        "@emotion/styled": {
-          "optional": true
-        },
-        "@types/react": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@mui/types": {
-      "version": "7.4.1",
-      "resolved": "https://registry.npmjs.org/@mui/types/-/types-7.4.1.tgz",
-      "integrity": "sha512-gUL8IIAI52CRXP/MixT1tJKt3SI6tVv4U/9soFsTtAsHzaJQptZ42ffdHZV3niX1ei0aUgMvOxBBN0KYqdG39g==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.27.0"
-      },
-      "peerDependencies": {
-        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@types/react": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@mui/utils": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/@mui/utils/-/utils-7.0.2.tgz",
-      "integrity": "sha512-72gcuQjPzhj/MLmPHLCgZjy2VjOH4KniR/4qRtXTTXIEwbkgcN+Y5W/rC90rWtMmZbjt9svZev/z+QHUI4j74w==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@mui/types": "^7.4.1",
-        "@types/prop-types": "^15.7.14",
-        "clsx": "^2.1.1",
-        "prop-types": "^15.8.1",
-        "react-is": "^19.1.0"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@types/react": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@mui/x-date-pickers": {
-      "version": "8.1.0",
-      "resolved": "https://registry.npmjs.org/@mui/x-date-pickers/-/x-date-pickers-8.1.0.tgz",
-      "integrity": "sha512-RySt7KKo7+VYbj4tj374GckC8BzFLRfIauJAbMlC3gh02azJr2AoBAkFoOLyiDyG9y9U1+ZX/9QGuOcUsknncw==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@mui/utils": "^7.0.2",
-        "@mui/x-internals": "8.0.0",
-        "@types/react-transition-group": "^4.4.12",
-        "clsx": "^2.1.1",
-        "prop-types": "^15.8.1",
-        "react-transition-group": "^4.4.5"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "@emotion/react": "^11.9.0",
-        "@emotion/styled": "^11.8.1",
-        "@mui/material": "^5.15.14 || ^6.0.0 || ^7.0.0",
-        "@mui/system": "^5.15.14 || ^6.0.0 || ^7.0.0",
-        "date-fns": "^2.25.0 || ^3.2.0 || ^4.0.0",
-        "date-fns-jalali": "^2.13.0-0 || ^3.2.0-0 || ^4.0.0-0",
-        "dayjs": "^1.10.7",
-        "luxon": "^3.0.2",
-        "moment": "^2.29.4",
-        "moment-hijri": "^2.1.2 || ^3.0.0",
-        "moment-jalaali": "^0.7.4 || ^0.8.0 || ^0.9.0 || ^0.10.0",
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@emotion/react": {
-          "optional": true
-        },
-        "@emotion/styled": {
-          "optional": true
-        },
-        "date-fns": {
-          "optional": true
-        },
-        "date-fns-jalali": {
-          "optional": true
-        },
-        "dayjs": {
-          "optional": true
-        },
-        "luxon": {
-          "optional": true
-        },
-        "moment": {
-          "optional": true
-        },
-        "moment-hijri": {
-          "optional": true
-        },
-        "moment-jalaali": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@mui/x-internals": {
-      "version": "8.0.0",
-      "resolved": "https://registry.npmjs.org/@mui/x-internals/-/x-internals-8.0.0.tgz",
-      "integrity": "sha512-yQOWABTEAIW0wiAwpjAJ6uM47rG1cxrfRtL2WsIdje8F9JdCXO6/jAu7ROAiezw4EqhGYYU7DMrK5svn5tdZpQ==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@mui/utils": "^7.0.2"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      }
-    },
-    "node_modules/@popperjs/core": {
-      "version": "2.11.8",
-      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.8.tgz",
-      "integrity": "sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==",
-      "license": "MIT",
-      "peer": true,
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/popperjs"
-      }
-    },
-    "node_modules/@types/prop-types": {
-      "version": "15.7.14",
-      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.14.tgz",
-      "integrity": "sha512-gNMvNH49DJ7OJYv+KAKn0Xp45p8PLl6zo2YnvDIbTd4J6MER2BmWN49TG7n9LvkyihINxeKW8+3bfS2yDC9dzQ==",
-      "license": "MIT"
-    },
-    "node_modules/@types/react": {
-      "version": "19.1.2",
-      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.2.tgz",
-      "integrity": "sha512-oxLPMytKchWGbnQM9O7D67uPa9paTNxO7jVoNMXgkkErULBPhPARCfkKL9ytcIJJRGjbsVwW4ugJzyFFvm/Tiw==",
-      "license": "MIT",
-      "peer": true,
-      "dependencies": {
-        "csstype": "^3.0.2"
-      }
-    },
-    "node_modules/@types/react-transition-group": {
-      "version": "4.4.12",
-      "resolved": "https://registry.npmjs.org/@types/react-transition-group/-/react-transition-group-4.4.12.tgz",
-      "integrity": "sha512-8TV6R3h2j7a91c+1DXdJi3Syo69zzIZbz7Lg5tORM5LEJG7X/E6a1V3drRyBRZq7/utz7A+c4OgYLiLcYGHG6w==",
-      "license": "MIT",
-      "peerDependencies": {
-        "@types/react": "*"
-      }
-    },
-    "node_modules/clsx": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
-      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/csstype": {
-      "version": "3.1.3",
-      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
-      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
-      "license": "MIT"
-    },
-    "node_modules/date-fns": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
-      "integrity": "sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==",
-      "license": "MIT",
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/kossnocorp"
-      }
-    },
-    "node_modules/dom-helpers": {
-      "version": "5.2.1",
-      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
-      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.8.7",
-        "csstype": "^3.0.2"
-      }
-    },
-    "node_modules/js-tokens": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
-      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
-      "license": "MIT"
-    },
-    "node_modules/loose-envify": {
-      "version": "1.4.0",
-      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
-      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
-      "license": "MIT",
-      "dependencies": {
-        "js-tokens": "^3.0.0 || ^4.0.0"
-      },
-      "bin": {
-        "loose-envify": "cli.js"
-      }
-    },
-    "node_modules/object-assign": {
-      "version": "4.1.1",
-      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
-      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/prop-types": {
-      "version": "15.8.1",
-      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
-      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
-      "license": "MIT",
-      "dependencies": {
-        "loose-envify": "^1.4.0",
-        "object-assign": "^4.1.1",
-        "react-is": "^16.13.1"
-      }
-    },
-    "node_modules/prop-types/node_modules/react-is": {
-      "version": "16.13.1",
-      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
-      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
-      "license": "MIT"
-    },
-    "node_modules/react": {
-      "version": "19.1.0",
-      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
-      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
-      "license": "MIT",
-      "peer": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/react-dom": {
-      "version": "19.1.0",
-      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
-      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
-      "license": "MIT",
-      "peer": true,
-      "dependencies": {
-        "scheduler": "^0.26.0"
-      },
-      "peerDependencies": {
-        "react": "^19.1.0"
-      }
-    },
-    "node_modules/react-is": {
-      "version": "19.1.0",
-      "resolved": "https://registry.npmjs.org/react-is/-/react-is-19.1.0.tgz",
-      "integrity": "sha512-Oe56aUPnkHyyDxxkvqtd7KkdQP5uIUfHxd5XTb3wE9d/kRnZLmKbDB0GWk919tdQ+mxxPtG6EAs6RMT6i1qtHg==",
-      "license": "MIT"
-    },
-    "node_modules/react-transition-group": {
-      "version": "4.4.5",
-      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
-      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "@babel/runtime": "^7.5.5",
-        "dom-helpers": "^5.0.1",
-        "loose-envify": "^1.4.0",
-        "prop-types": "^15.6.2"
-      },
-      "peerDependencies": {
-        "react": ">=16.6.0",
-        "react-dom": ">=16.6.0"
-      }
-    },
-    "node_modules/scheduler": {
-      "version": "0.26.0",
-      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
-      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
-      "license": "MIT",
-      "peer": true
-    },
-    "node_modules/stylis": {
-      "version": "4.2.0",
-      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.2.0.tgz",
-      "integrity": "sha512-Orov6g6BB1sDfYgzWfTHDOxamtX1bE/zo104Dh9e6fqJ3PooipYyfJ0pUmrZO2wAvO8YbEyeFrkV91XTsGMSrw==",
-      "license": "MIT",
-      "peer": true
-    }
-  }
-}
diff --git a/backend/frontend/package.json b/backend/frontend/package.json
deleted file mode 100644
index 79bf664..0000000
--- a/backend/frontend/package.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-  "dependencies": {
-    "@mui/x-date-pickers": "^8.1.0",
-    "date-fns": "^4.1.0"
-  }
-}
diff --git a/backend/jest.config.js b/backend/jest.config.js
deleted file mode 100644
index ec4bafe..0000000
--- a/backend/jest.config.js
+++ /dev/null
@@ -1,5 +0,0 @@
-module.exports = {
-  testEnvironment: 'node',
-  setupFilesAfterEnv: ['./tests/setup.js'], // Run the setup file
-  testTimeout: 30000, // Increase timeout for DB operations if needed
-};
diff --git a/backend/models/equipment.ts b/backend/models/equipment.ts
new file mode 100644
index 0000000..e5b9061
--- /dev/null
+++ b/backend/models/equipment.ts
@@ -0,0 +1,27 @@
+import mongoose, { Schema, Document } from 'mongoose';
+
+export interface IEquipment extends Document {
+  equipmentId: string;
+  type: string;
+  description: string;
+  location: {
+    lat: number;
+    lng: number;
+  };
+}
+
+const EquipmentSchema: Schema = new Schema({
+  equipmentId: { type: String, required: true, unique: true },
+  type: {
+    type: String,
+    required: true,
+    enum: ['Gloves', 'Boots', 'Safety Dress'], // Add new types
+  },
+  description: { type: String, required: true },
+  location: {
+    lat: { type: Number, required: true },
+    lng: { type: Number, required: true },
+  },
+});
+
+export default mongoose.model<IEquipment>('Equipment', EquipmentSchema);
\ No newline at end of file
diff --git a/backend/models/schedule.ts b/backend/models/schedule.ts
new file mode 100644
index 0000000..15fff2e
--- /dev/null
+++ b/backend/models/schedule.ts
@@ -0,0 +1,26 @@
+import mongoose, { Schema, Document } from 'mongoose';
+
+export interface ISchedule extends Document {
+  scheduleNo: string;
+  route: string[];
+  truckNo: string;
+  date: string;
+  time: string;
+  status: string;
+}
+
+const ScheduleSchema: Schema = new Schema({
+  scheduleNo: { type: String, required: true, unique: true },
+  route: { type: [String], required: true },
+  truckNo: { type: String, required: true },
+  date: { type: String, required: true },
+  time: { type: String, required: true },
+  status: {
+    type: String,
+    required: true,
+    enum: ['Waiting', 'Completed', 'Pending', 'Cancelled'], // Add "Pending" and "Cancelled"
+    default: 'Waiting',
+  },
+});
+
+export default mongoose.model<ISchedule>('Schedule', ScheduleSchema);
\ No newline at end of file
diff --git a/backend/models/tool.ts b/backend/models/tool.ts
new file mode 100644
index 0000000..a9de9c0
--- /dev/null
+++ b/backend/models/tool.ts
@@ -0,0 +1,19 @@
+import mongoose, { Schema, Document } from 'mongoose';
+
+// ITool interface define  
+export interface ITool extends Document {
+  toolId: string;
+  type: string;
+  status: string;
+  description: string;
+}
+
+// Tool schema define 
+const ToolSchema: Schema = new Schema({
+  toolId: { type: String, required: true, unique: true },
+  type: { type: String, required: true },
+  status: { type: String, default: 'Available' },
+  description: { type: String, required: true },
+});
+
+export default mongoose.model<ITool>('Tool', ToolSchema);
\ No newline at end of file
diff --git a/backend/models/truck.ts b/backend/models/truck.ts
new file mode 100644
index 0000000..87bdf3d
--- /dev/null
+++ b/backend/models/truck.ts
@@ -0,0 +1,40 @@
+import mongoose, { Schema, Document } from 'mongoose';
+
+export interface ITruck extends Document {
+  truckId: string;
+  status: string;
+  tankCapacity: number;
+  availability: string;
+  fuel: number;
+  condition: string;
+  description: string;
+  location: { lat: number; lng: number };
+}
+
+const TruckSchema: Schema = new Schema({
+  truckId: { 
+    type: String, 
+    required: true, 
+    unique: true,
+    validate: {
+      validator: (value: string) => value.length === 6,
+      message: 'Truck ID must be exactly 6 characters',
+    },
+  },
+  status: { type: String, default: 'Active' },
+  tankCapacity: { type: Number, required: true },
+  availability: { type: String, default: 'Available' },
+  fuel: { type: Number, default: 0 },
+  description: { type: String, required: true },
+  location: {
+    lat: { type: Number, required: true },
+    lng: { type: Number, required: true },
+  },
+  condition: { // Add this field
+    type: String,
+    enum: ['Good', 'Repair'],
+    default: 'Good',
+  },
+});
+
+export default mongoose.model<ITruck>('Truck', TruckSchema);
\ No newline at end of file
diff --git a/backend/package-lock.json b/backend/package-lock.json
index 0eda99d..e327666 100644
--- a/backend/package-lock.json
+++ b/backend/package-lock.json
@@ -7,6854 +7,1512 @@
     "": {
       "name": "backend",
       "version": "1.0.0",
-      "license": "ISC",
       "dependencies": {
-        "@faker-js/faker": "^9.7.0",
         "bcryptjs": "^3.0.2",
         "compression": "^1.8.0",
         "cors": "^2.8.5",
-        "date-fns": "^4.1.0",
         "dotenv": "^16.4.7",
         "express": "^4.21.2",
-        "express-mongo-sanitize": "^2.2.0",
-        "express-rate-limit": "^7.5.0",
-        "express-validator": "^7.2.1",
         "helmet": "^8.0.0",
-        "hpp": "^0.2.3",
         "jsonwebtoken": "^9.0.2",
         "mongoose": "^8.12.1",
-        "mongoose-aggregate-paginate-v2": "^1.1.4",
-        "mongoose-paginate-v2": "^1.9.0",
         "morgan": "^1.10.0",
-        "multer": "^1.4.5-lts.2",
-        "pdfkit": "^0.17.0",
-        "qrcode": "^1.5.4",
-        "speakeasy": "^2.0.0",
-        "stripe": "^14.16.0",
-        "xss-clean": "^0.1.4"
+        "nodemailer": "^6.9.8"
       },
       "devDependencies": {
-        "cross-env": "^7.0.3",
-        "eslint": "^9.22.0",
-        "jest": "^29.7.0",
-        "mongodb-memory-server": "^10.1.4",
-        "nodemon": "^3.1.9",
-        "supertest": "^7.0.0"
+        "@types/cors": "^2.8.17",
+        "@types/express": "^4.17.21",
+        "@types/istanbul-lib-coverage": "^2.0.6",
+        "@types/mongoose": "^5.11.97",
+        "@types/morgan": "^1.9.9",
+        "@types/node": "^20.12.7",
+        "@types/nodemailer": "^6.4.17",
+        "ts-node": "^10.9.2",
+        "typescript": "^5.4.5"
       }
     },
-    "node_modules/@ampproject/remapping": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
-      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
+    "node_modules/@cspotcode/source-map-support": {
+      "version": "0.8.1",
+      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
+      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
       "dev": true,
-      "license": "Apache-2.0",
+      "license": "MIT",
       "dependencies": {
-        "@jridgewell/gen-mapping": "^0.3.5",
-        "@jridgewell/trace-mapping": "^0.3.24"
+        "@jridgewell/trace-mapping": "0.3.9"
       },
       "engines": {
-        "node": ">=6.0.0"
+        "node": ">=12"
       }
     },
-    "node_modules/@babel/code-frame": {
-      "version": "7.26.2",
-      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz",
-      "integrity": "sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==",
+    "node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.9",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
+      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-validator-identifier": "^7.25.9",
-        "js-tokens": "^4.0.0",
-        "picocolors": "^1.0.0"
-      },
-      "engines": {
-        "node": ">=6.9.0"
+        "@jridgewell/resolve-uri": "^3.0.3",
+        "@jridgewell/sourcemap-codec": "^1.4.10"
       }
     },
-    "node_modules/@babel/compat-data": {
-      "version": "7.26.8",
-      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.26.8.tgz",
-      "integrity": "sha512-oH5UPLMWR3L2wEFLnFJ1TZXqHufiTKAiLfqw5zkhS4dKXLJ10yVztfil/twG8EDTA4F/tvVNw9nOl4ZMslB8rQ==",
+    "node_modules/@jridgewell/resolve-uri": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
+      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=6.9.0"
+        "node": ">=6.0.0"
       }
     },
-    "node_modules/@babel/core": {
-      "version": "7.26.10",
-      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.26.10.tgz",
-      "integrity": "sha512-vMqyb7XCDMPvJFFOaT9kxtiRh42GwlZEg1/uIgtZshS5a/8OaduUfCi7kynKgc3Tw/6Uo2D+db9qBttghhmxwQ==",
+    "node_modules/@jridgewell/sourcemap-codec": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
+      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
       "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@mongodb-js/saslprep": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/@mongodb-js/saslprep/-/saslprep-1.2.0.tgz",
+      "integrity": "sha512-+ywrb0AqkfaYuhHs6LxKWgqbh3I72EpEgESCw37o+9qPx9WTCkgDm2B+eMrwehGtHBWHFU4GXvnSCNiFhhausg==",
       "license": "MIT",
       "dependencies": {
-        "@ampproject/remapping": "^2.2.0",
-        "@babel/code-frame": "^7.26.2",
-        "@babel/generator": "^7.26.10",
-        "@babel/helper-compilation-targets": "^7.26.5",
-        "@babel/helper-module-transforms": "^7.26.0",
-        "@babel/helpers": "^7.26.10",
-        "@babel/parser": "^7.26.10",
-        "@babel/template": "^7.26.9",
-        "@babel/traverse": "^7.26.10",
-        "@babel/types": "^7.26.10",
-        "convert-source-map": "^2.0.0",
-        "debug": "^4.1.0",
-        "gensync": "^1.0.0-beta.2",
-        "json5": "^2.2.3",
-        "semver": "^6.3.1"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/babel"
+        "sparse-bitfield": "^3.0.3"
       }
     },
-    "node_modules/@babel/core/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
+    "node_modules/@tsconfig/node10": {
+      "version": "1.0.11",
+      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.11.tgz",
+      "integrity": "sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==",
       "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ms": "^2.1.3"
-      },
-      "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
-      }
+      "license": "MIT"
     },
-    "node_modules/@babel/core/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+    "node_modules/@tsconfig/node12": {
+      "version": "1.0.11",
+      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
+      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/@babel/core/node_modules/semver": {
-      "version": "6.3.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
-      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+    "node_modules/@tsconfig/node14": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
+      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
       "dev": true,
-      "license": "ISC",
-      "bin": {
-        "semver": "bin/semver.js"
-      }
+      "license": "MIT"
     },
-    "node_modules/@babel/generator": {
-      "version": "7.26.10",
-      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.26.10.tgz",
-      "integrity": "sha512-rRHT8siFIXQrAYOYqZQVsAr8vJ+cBNqcVAY6m5V8/4QqzaPl+zDBe6cLEPRDuNOUf3ww8RfJVlOyQMoSI+5Ang==",
+    "node_modules/@tsconfig/node16": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
+      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==",
       "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/parser": "^7.26.10",
-        "@babel/types": "^7.26.10",
-        "@jridgewell/gen-mapping": "^0.3.5",
-        "@jridgewell/trace-mapping": "^0.3.25",
-        "jsesc": "^3.0.2"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      }
+      "license": "MIT"
     },
-    "node_modules/@babel/helper-compilation-targets": {
-      "version": "7.26.5",
-      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.26.5.tgz",
-      "integrity": "sha512-IXuyn5EkouFJscIDuFF5EsiSolseme1s0CZB+QxVugqJLYmKdxI1VfIBOst0SUu4rnk2Z7kqTwmoO1lp3HIfnA==",
+    "node_modules/@types/body-parser": {
+      "version": "1.19.5",
+      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.5.tgz",
+      "integrity": "sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/compat-data": "^7.26.5",
-        "@babel/helper-validator-option": "^7.25.9",
-        "browserslist": "^4.24.0",
-        "lru-cache": "^5.1.1",
-        "semver": "^6.3.1"
-      },
-      "engines": {
-        "node": ">=6.9.0"
+        "@types/connect": "*",
+        "@types/node": "*"
       }
     },
-    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
-      "version": "6.3.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
-      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+    "node_modules/@types/connect": {
+      "version": "3.4.38",
+      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
+      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
       "dev": true,
-      "license": "ISC",
-      "bin": {
-        "semver": "bin/semver.js"
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
       }
     },
-    "node_modules/@babel/helper-module-imports": {
-      "version": "7.25.9",
-      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.9.tgz",
-      "integrity": "sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==",
+    "node_modules/@types/cors": {
+      "version": "2.8.17",
+      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.17.tgz",
+      "integrity": "sha512-8CGDvrBj1zgo2qE+oS3pOCyYNqCPryMWY2bGfwA0dcfopWGgxs+78df0Rs3rc9THP4JkOhLsAa+15VdpAqkcUA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/traverse": "^7.25.9",
-        "@babel/types": "^7.25.9"
-      },
-      "engines": {
-        "node": ">=6.9.0"
+        "@types/node": "*"
       }
     },
-    "node_modules/@babel/helper-module-transforms": {
-      "version": "7.26.0",
-      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.26.0.tgz",
-      "integrity": "sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==",
+    "node_modules/@types/express": {
+      "version": "4.17.21",
+      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.21.tgz",
+      "integrity": "sha512-ejlPM315qwLpaQlQDTjPdsUFSc6ZsP4AN6AlWnogPjQ7CVi7PYF3YVz+CY3jE2pwYf7E/7HlDAN0rV2GxTG0HQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-module-imports": "^7.25.9",
-        "@babel/helper-validator-identifier": "^7.25.9",
-        "@babel/traverse": "^7.25.9"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0"
+        "@types/body-parser": "*",
+        "@types/express-serve-static-core": "^4.17.33",
+        "@types/qs": "*",
+        "@types/serve-static": "*"
       }
     },
-    "node_modules/@babel/helper-plugin-utils": {
-      "version": "7.26.5",
-      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.26.5.tgz",
-      "integrity": "sha512-RS+jZcRdZdRFzMyr+wcsaqOmld1/EqTghfaBGQQd/WnRdzdlvSZ//kF7U8VQTxf1ynZ4cjUcYgjVGx13ewNPMg==",
+    "node_modules/@types/express-serve-static-core": {
+      "version": "4.19.6",
+      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.19.6.tgz",
+      "integrity": "sha512-N4LZ2xG7DatVqhCZzOGb1Yi5lMbXSZcmdLDe9EzSndPV2HpWYWzRbaerl2n27irrm94EPpprqa8KpskPT085+A==",
       "dev": true,
       "license": "MIT",
-      "engines": {
-        "node": ">=6.9.0"
+      "dependencies": {
+        "@types/node": "*",
+        "@types/qs": "*",
+        "@types/range-parser": "*",
+        "@types/send": "*"
       }
     },
-    "node_modules/@babel/helper-string-parser": {
-      "version": "7.25.9",
-      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz",
-      "integrity": "sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==",
+    "node_modules/@types/http-errors": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.4.tgz",
+      "integrity": "sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==",
       "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.9.0"
-      }
+      "license": "MIT"
     },
-    "node_modules/@babel/helper-validator-identifier": {
-      "version": "7.25.9",
-      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz",
-      "integrity": "sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==",
+    "node_modules/@types/istanbul-lib-coverage": {
+      "version": "2.0.6",
+      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
+      "integrity": "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==",
       "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.9.0"
-      }
+      "license": "MIT"
     },
-    "node_modules/@babel/helper-validator-option": {
-      "version": "7.25.9",
-      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.25.9.tgz",
-      "integrity": "sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==",
+    "node_modules/@types/mime": {
+      "version": "1.3.5",
+      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
+      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
       "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.9.0"
-      }
+      "license": "MIT"
     },
-    "node_modules/@babel/helpers": {
-      "version": "7.26.10",
-      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.26.10.tgz",
-      "integrity": "sha512-UPYc3SauzZ3JGgj87GgZ89JVdC5dj0AoetR5Bw6wj4niittNyFh6+eOGonYvJ1ao6B8lEa3Q3klS7ADZ53bc5g==",
+    "node_modules/@types/mongoose": {
+      "version": "5.11.97",
+      "resolved": "https://registry.npmjs.org/@types/mongoose/-/mongoose-5.11.97.tgz",
+      "integrity": "sha512-cqwOVYT3qXyLiGw7ueU2kX9noE8DPGRY6z8eUxudhXY8NZ7DMKYAxyZkLSevGfhCX3dO/AoX5/SO9lAzfjon0Q==",
+      "deprecated": "Mongoose publishes its own types, so you do not need to install this package.",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/template": "^7.26.9",
-        "@babel/types": "^7.26.10"
-      },
-      "engines": {
-        "node": ">=6.9.0"
+        "mongoose": "*"
       }
     },
-    "node_modules/@babel/parser": {
-      "version": "7.26.10",
-      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.26.10.tgz",
-      "integrity": "sha512-6aQR2zGE/QFi8JpDLjUZEPYOs7+mhKXm86VaKFiLP35JQwQb6bwUE+XbvkH0EptsYhbNBSUGaUBLKqxH1xSgsA==",
+    "node_modules/@types/morgan": {
+      "version": "1.9.9",
+      "resolved": "https://registry.npmjs.org/@types/morgan/-/morgan-1.9.9.tgz",
+      "integrity": "sha512-iRYSDKVaC6FkGSpEVVIvrRGw0DfJMiQzIn3qr2G5B3C//AWkulhXgaBd7tS9/J79GWSYMTHGs7PfI5b3Y8m+RQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/types": "^7.26.10"
-      },
-      "bin": {
-        "parser": "bin/babel-parser.js"
-      },
-      "engines": {
-        "node": ">=6.0.0"
+        "@types/node": "*"
       }
     },
-    "node_modules/@babel/plugin-syntax-async-generators": {
-      "version": "7.8.4",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
-      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
+    "node_modules/@types/node": {
+      "version": "20.17.24",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.17.24.tgz",
+      "integrity": "sha512-d7fGCyB96w9BnWQrOsJtpyiSaBcAYYr75bnK6ZRjDbql2cGLj/3GsL5OYmLPNq76l7Gf2q4Rv9J2o6h5CrD9sA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-plugin-utils": "^7.8.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
+        "undici-types": "~6.19.2"
       }
     },
-    "node_modules/@babel/plugin-syntax-bigint": {
-      "version": "7.8.3",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
-      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
+    "node_modules/@types/nodemailer": {
+      "version": "6.4.17",
+      "resolved": "https://registry.npmjs.org/@types/nodemailer/-/nodemailer-6.4.17.tgz",
+      "integrity": "sha512-I9CCaIp6DTldEg7vyUTZi8+9Vo0hi1/T8gv3C89yk1rSAAzoKQ8H8ki/jBYJSFoH/BisgLP8tkZMlQ91CIquww==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-plugin-utils": "^7.8.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
+        "@types/node": "*"
       }
     },
-    "node_modules/@babel/plugin-syntax-class-properties": {
-      "version": "7.12.13",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
-      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
+    "node_modules/@types/qs": {
+      "version": "6.9.18",
+      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.18.tgz",
+      "integrity": "sha512-kK7dgTYDyGqS+e2Q4aK9X3D7q234CIZ1Bv0q/7Z5IwRDoADNU81xXJK/YVyLbLTZCoIwUoDoffFeF+p/eIklAA==",
       "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/helper-plugin-utils": "^7.12.13"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
-      }
+      "license": "MIT"
     },
-    "node_modules/@babel/plugin-syntax-class-static-block": {
-      "version": "7.14.5",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz",
-      "integrity": "sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==",
+    "node_modules/@types/range-parser": {
+      "version": "1.2.7",
+      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
+      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
       "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/helper-plugin-utils": "^7.14.5"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
-      }
+      "license": "MIT"
     },
-    "node_modules/@babel/plugin-syntax-import-attributes": {
-      "version": "7.26.0",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.26.0.tgz",
-      "integrity": "sha512-e2dttdsJ1ZTpi3B9UYGLw41hifAubg19AtCu/2I/F1QNVclOBr1dYpTdmdyZ84Xiz43BS/tCUkMAZNLv12Pi+A==",
+    "node_modules/@types/send": {
+      "version": "0.17.4",
+      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.4.tgz",
+      "integrity": "sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-plugin-utils": "^7.25.9"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
+        "@types/mime": "^1",
+        "@types/node": "*"
       }
     },
-    "node_modules/@babel/plugin-syntax-import-meta": {
-      "version": "7.10.4",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
-      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
+    "node_modules/@types/serve-static": {
+      "version": "1.15.7",
+      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.7.tgz",
+      "integrity": "sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-plugin-utils": "^7.10.4"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
+        "@types/http-errors": "*",
+        "@types/node": "*",
+        "@types/send": "*"
       }
     },
-    "node_modules/@babel/plugin-syntax-json-strings": {
-      "version": "7.8.3",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
-      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
-      "dev": true,
+    "node_modules/@types/webidl-conversions": {
+      "version": "7.0.3",
+      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.3.tgz",
+      "integrity": "sha512-CiJJvcRtIgzadHCYXw7dqEnMNRjhGZlYK05Mj9OyktqV8uVT8fD2BFOB7S1uwBE3Kj2Z+4UyPmFw/Ixgw/LAlA==",
+      "license": "MIT"
+    },
+    "node_modules/@types/whatwg-url": {
+      "version": "11.0.5",
+      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-11.0.5.tgz",
+      "integrity": "sha512-coYR071JRaHa+xoEvvYqvnIHaVqaYrLPbsufM9BF63HkwI5Lgmy2QR8Q5K/lYDYo5AK82wOvSOS0UsLTpTG7uQ==",
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-plugin-utils": "^7.8.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
+        "@types/webidl-conversions": "*"
       }
     },
-    "node_modules/@babel/plugin-syntax-jsx": {
-      "version": "7.25.9",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.25.9.tgz",
-      "integrity": "sha512-ld6oezHQMZsZfp6pWtbjaNDF2tiiCYYDqQszHt5VV437lewP9aSi2Of99CK0D0XB21k7FLgnLcmQKyKzynfeAA==",
-      "dev": true,
+    "node_modules/accepts": {
+      "version": "1.3.8",
+      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
+      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-plugin-utils": "^7.25.9"
+        "mime-types": "~2.1.34",
+        "negotiator": "0.6.3"
       },
       "engines": {
-        "node": ">=6.9.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
+        "node": ">= 0.6"
       }
     },
-    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
-      "version": "7.10.4",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
-      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
-      "dev": true,
+    "node_modules/accepts/node_modules/negotiator": {
+      "version": "0.6.3",
+      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
+      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
       "license": "MIT",
-      "dependencies": {
-        "@babel/helper-plugin-utils": "^7.10.4"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
+      "engines": {
+        "node": ">= 0.6"
       }
     },
-    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
-      "version": "7.8.3",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
-      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
+    "node_modules/acorn": {
+      "version": "8.14.1",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
+      "integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
       "dev": true,
       "license": "MIT",
-      "dependencies": {
-        "@babel/helper-plugin-utils": "^7.8.0"
+      "bin": {
+        "acorn": "bin/acorn"
       },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
+      "engines": {
+        "node": ">=0.4.0"
       }
     },
-    "node_modules/@babel/plugin-syntax-numeric-separator": {
-      "version": "7.10.4",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
-      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
+    "node_modules/acorn-walk": {
+      "version": "8.3.4",
+      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
+      "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-plugin-utils": "^7.10.4"
+        "acorn": "^8.11.0"
       },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
+      "engines": {
+        "node": ">=0.4.0"
       }
     },
-    "node_modules/@babel/plugin-syntax-object-rest-spread": {
-      "version": "7.8.3",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
-      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
+    "node_modules/arg": {
+      "version": "4.1.3",
+      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
+      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
       "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/helper-plugin-utils": "^7.8.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
-      }
+      "license": "MIT"
     },
-    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
-      "version": "7.8.3",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
-      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
-      "dev": true,
+    "node_modules/array-flatten": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
+      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
+      "license": "MIT"
+    },
+    "node_modules/basic-auth": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz",
+      "integrity": "sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==",
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-plugin-utils": "^7.8.0"
+        "safe-buffer": "5.1.2"
       },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
+      "engines": {
+        "node": ">= 0.8"
       }
     },
-    "node_modules/@babel/plugin-syntax-optional-chaining": {
-      "version": "7.8.3",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
-      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/helper-plugin-utils": "^7.8.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
+    "node_modules/basic-auth/node_modules/safe-buffer": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
+      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
+      "license": "MIT"
+    },
+    "node_modules/bcryptjs": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-3.0.2.tgz",
+      "integrity": "sha512-k38b3XOZKv60C4E2hVsXTolJWfkGRMbILBIe2IBITXciy5bOsTKot5kDrf3ZfufQtQOUN5mXceUEpU1rTl9Uog==",
+      "license": "BSD-3-Clause",
+      "bin": {
+        "bcrypt": "bin/bcrypt"
       }
     },
-    "node_modules/@babel/plugin-syntax-private-property-in-object": {
-      "version": "7.14.5",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz",
-      "integrity": "sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==",
-      "dev": true,
+    "node_modules/body-parser": {
+      "version": "1.20.3",
+      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
+      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-plugin-utils": "^7.14.5"
+        "bytes": "3.1.2",
+        "content-type": "~1.0.5",
+        "debug": "2.6.9",
+        "depd": "2.0.0",
+        "destroy": "1.2.0",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.4.24",
+        "on-finished": "2.4.1",
+        "qs": "6.13.0",
+        "raw-body": "2.5.2",
+        "type-is": "~1.6.18",
+        "unpipe": "1.0.0"
       },
       "engines": {
-        "node": ">=6.9.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
+        "node": ">= 0.8",
+        "npm": "1.2.8000 || >= 1.4.16"
       }
     },
-    "node_modules/@babel/plugin-syntax-top-level-await": {
-      "version": "7.14.5",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
-      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/helper-plugin-utils": "^7.14.5"
-      },
+    "node_modules/bson": {
+      "version": "6.10.3",
+      "resolved": "https://registry.npmjs.org/bson/-/bson-6.10.3.tgz",
+      "integrity": "sha512-MTxGsqgYTwfshYWTRdmZRC+M7FnG1b4y7RO7p2k3X24Wq0yv1m77Wsj0BzlPzd/IowgESfsruQCUToa7vbOpPQ==",
+      "license": "Apache-2.0",
       "engines": {
-        "node": ">=6.9.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
+        "node": ">=16.20.1"
       }
     },
-    "node_modules/@babel/plugin-syntax-typescript": {
-      "version": "7.25.9",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.25.9.tgz",
-      "integrity": "sha512-hjMgRy5hb8uJJjUcdWunWVcoi9bGpJp8p5Ol1229PoN6aytsLwNMgmdftO23wnCLMfVmTwZDWMPNq/D1SY60JQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/helper-plugin-utils": "^7.25.9"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0-0"
-      }
+    "node_modules/buffer-equal-constant-time": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
+      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
+      "license": "BSD-3-Clause"
     },
-    "node_modules/@babel/template": {
-      "version": "7.26.9",
-      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.26.9.tgz",
-      "integrity": "sha512-qyRplbeIpNZhmzOysF/wFMuP9sctmh2cFzRAZOn1YapxBsE1i9bJIY586R/WBLfLcmcBlM8ROBiQURnnNy+zfA==",
-      "dev": true,
+    "node_modules/bytes": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
+      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
       "license": "MIT",
-      "dependencies": {
-        "@babel/code-frame": "^7.26.2",
-        "@babel/parser": "^7.26.9",
-        "@babel/types": "^7.26.9"
-      },
       "engines": {
-        "node": ">=6.9.0"
+        "node": ">= 0.8"
       }
     },
-    "node_modules/@babel/traverse": {
-      "version": "7.26.10",
-      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.26.10.tgz",
-      "integrity": "sha512-k8NuDrxr0WrPH5Aupqb2LCVURP/S0vBEn5mK6iH+GIYob66U5EtoZvcdudR2jQ4cmTwhEwW1DLB+Yyas9zjF6A==",
-      "dev": true,
+    "node_modules/call-bind-apply-helpers": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
+      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
       "license": "MIT",
       "dependencies": {
-        "@babel/code-frame": "^7.26.2",
-        "@babel/generator": "^7.26.10",
-        "@babel/parser": "^7.26.10",
-        "@babel/template": "^7.26.9",
-        "@babel/types": "^7.26.10",
-        "debug": "^4.3.1",
-        "globals": "^11.1.0"
+        "es-errors": "^1.3.0",
+        "function-bind": "^1.1.2"
       },
       "engines": {
-        "node": ">=6.9.0"
+        "node": ">= 0.4"
       }
     },
-    "node_modules/@babel/traverse/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
-      "dev": true,
+    "node_modules/call-bound": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
+      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
       "license": "MIT",
       "dependencies": {
-        "ms": "^2.1.3"
+        "call-bind-apply-helpers": "^1.0.2",
+        "get-intrinsic": "^1.3.0"
       },
       "engines": {
-        "node": ">=6.0"
+        "node": ">= 0.4"
       },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/@babel/traverse/node_modules/globals": {
-      "version": "11.12.0",
-      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
-      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
-      "dev": true,
+    "node_modules/compressible": {
+      "version": "2.0.18",
+      "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.18.tgz",
+      "integrity": "sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==",
       "license": "MIT",
+      "dependencies": {
+        "mime-db": ">= 1.43.0 < 2"
+      },
       "engines": {
-        "node": ">=4"
+        "node": ">= 0.6"
       }
     },
-    "node_modules/@babel/traverse/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@babel/types": {
-      "version": "7.26.10",
-      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.26.10.tgz",
-      "integrity": "sha512-emqcG3vHrpxUKTrxcblR36dcrcoRDvKmnL/dCL6ZsHaShW80qxCAcNhzQZrpeM765VzEos+xOi4s+r4IXzTwdQ==",
-      "dev": true,
+    "node_modules/compression": {
+      "version": "1.8.0",
+      "resolved": "https://registry.npmjs.org/compression/-/compression-1.8.0.tgz",
+      "integrity": "sha512-k6WLKfunuqCYD3t6AsuPGvQWaKwuLLh2/xHNcX4qE+vIfDNXpSqnrhwA7O53R7WVQUnt8dVAIW+YHr7xTgOgGA==",
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-string-parser": "^7.25.9",
-        "@babel/helper-validator-identifier": "^7.25.9"
+        "bytes": "3.1.2",
+        "compressible": "~2.0.18",
+        "debug": "2.6.9",
+        "negotiator": "~0.6.4",
+        "on-headers": "~1.0.2",
+        "safe-buffer": "5.2.1",
+        "vary": "~1.1.2"
       },
       "engines": {
-        "node": ">=6.9.0"
+        "node": ">= 0.8.0"
       }
     },
-    "node_modules/@bcoe/v8-coverage": {
-      "version": "0.2.3",
-      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
-      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@eslint-community/eslint-utils": {
-      "version": "4.5.1",
-      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.5.1.tgz",
-      "integrity": "sha512-soEIOALTfTK6EjmKMMoLugwaP0rzkad90iIWd1hMO9ARkSAyjfMfkRRhLvD5qH7vvM0Cg72pieUfR6yh6XxC4w==",
-      "dev": true,
+    "node_modules/content-disposition": {
+      "version": "0.5.4",
+      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
+      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
       "license": "MIT",
       "dependencies": {
-        "eslint-visitor-keys": "^3.4.3"
+        "safe-buffer": "5.2.1"
       },
       "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
-      },
-      "peerDependencies": {
-        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
+        "node": ">= 0.6"
       }
     },
-    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
-      "version": "3.4.3",
-      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
-      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
-      "dev": true,
-      "license": "Apache-2.0",
+    "node_modules/content-type": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
+      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
+      "license": "MIT",
       "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
+        "node": ">= 0.6"
       }
     },
-    "node_modules/@eslint-community/regexpp": {
-      "version": "4.12.1",
-      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
-      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
-      "dev": true,
+    "node_modules/cookie": {
+      "version": "0.7.1",
+      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
+      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
       "license": "MIT",
       "engines": {
-        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
+        "node": ">= 0.6"
       }
     },
-    "node_modules/@eslint/config-array": {
-      "version": "0.19.2",
-      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.19.2.tgz",
-      "integrity": "sha512-GNKqxfHG2ySmJOBSHg7LxeUx4xpuCoFjacmlCoYWEbaPXLwvfIjixRI12xCQZeULksQb23uiA8F40w5TojpV7w==",
-      "dev": true,
-      "license": "Apache-2.0",
+    "node_modules/cookie-signature": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
+      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
+      "license": "MIT"
+    },
+    "node_modules/cors": {
+      "version": "2.8.5",
+      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
+      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
+      "license": "MIT",
       "dependencies": {
-        "@eslint/object-schema": "^2.1.6",
-        "debug": "^4.3.1",
-        "minimatch": "^3.1.2"
+        "object-assign": "^4",
+        "vary": "^1"
       },
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": ">= 0.10"
       }
     },
-    "node_modules/@eslint/config-array/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
+    "node_modules/create-require": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
+      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
       "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/debug": {
+      "version": "2.6.9",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
+      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
       "license": "MIT",
       "dependencies": {
-        "ms": "^2.1.3"
-      },
-      "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
+        "ms": "2.0.0"
       }
     },
-    "node_modules/@eslint/config-array/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "dev": true,
-      "license": "MIT"
+    "node_modules/depd": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
+      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
     },
-    "node_modules/@eslint/config-helpers": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.1.0.tgz",
-      "integrity": "sha512-kLrdPDJE1ckPo94kmPPf9Hfd0DU0Jw6oKYrhe+pwSC0iTUInmTa+w6fw8sGgcfkFJGNdWOUeOaDM4quW4a7OkA==",
-      "dev": true,
-      "license": "Apache-2.0",
+    "node_modules/destroy": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
+      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
+      "license": "MIT",
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": ">= 0.8",
+        "npm": "1.2.8000 || >= 1.4.16"
       }
     },
-    "node_modules/@eslint/core": {
-      "version": "0.12.0",
-      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.12.0.tgz",
-      "integrity": "sha512-cmrR6pytBuSMTaBweKoGMwu3EiHiEC+DoyupPmlZ0HxBJBtIxwe+j/E4XPIKNx+Q74c8lXKPwYawBf5glsTkHg==",
+    "node_modules/diff": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
+      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
       "dev": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@types/json-schema": "^7.0.15"
-      },
+      "license": "BSD-3-Clause",
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": ">=0.3.1"
       }
     },
-    "node_modules/@eslint/eslintrc": {
-      "version": "3.3.0",
-      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.0.tgz",
-      "integrity": "sha512-yaVPAiNAalnCZedKLdR21GOGILMLKPyqSLWaAjQFvYA2i/ciDi8ArYVr69Anohb6cH2Ukhqti4aFnYyPm8wdwQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ajv": "^6.12.4",
-        "debug": "^4.3.2",
-        "espree": "^10.0.1",
-        "globals": "^14.0.0",
-        "ignore": "^5.2.0",
-        "import-fresh": "^3.2.1",
-        "js-yaml": "^4.1.0",
-        "minimatch": "^3.1.2",
-        "strip-json-comments": "^3.1.1"
-      },
+    "node_modules/dotenv": {
+      "version": "16.4.7",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
+      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
+      "license": "BSD-2-Clause",
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": ">=12"
       },
       "funding": {
-        "url": "https://opencollective.com/eslint"
+        "url": "https://dotenvx.com"
       }
     },
-    "node_modules/@eslint/eslintrc/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
-      "dev": true,
+    "node_modules/dunder-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
+      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
       "license": "MIT",
       "dependencies": {
-        "ms": "^2.1.3"
+        "call-bind-apply-helpers": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.2.0"
       },
       "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
+        "node": ">= 0.4"
       }
     },
-    "node_modules/@eslint/eslintrc/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "dev": true,
+    "node_modules/ecdsa-sig-formatter": {
+      "version": "1.0.11",
+      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
+      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/ee-first": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
+      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
       "license": "MIT"
     },
-    "node_modules/@eslint/js": {
-      "version": "9.22.0",
-      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.22.0.tgz",
-      "integrity": "sha512-vLFajx9o8d1/oL2ZkpMYbkLv8nDB6yaIwFNt7nI4+I80U/z03SxmfOMsLbvWr3p7C+Wnoh//aOu2pQW8cS0HCQ==",
-      "dev": true,
+    "node_modules/encodeurl": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
+      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
       "license": "MIT",
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": ">= 0.8"
       }
     },
-    "node_modules/@eslint/object-schema": {
-      "version": "2.1.6",
-      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
-      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
-      "dev": true,
-      "license": "Apache-2.0",
+    "node_modules/es-define-property": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
+      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
+      "license": "MIT",
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": ">= 0.4"
       }
     },
-    "node_modules/@eslint/plugin-kit": {
-      "version": "0.2.7",
-      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.7.tgz",
-      "integrity": "sha512-JubJ5B2pJ4k4yGxaNLdbjrnk9d/iDz6/q8wOilpIowd6PJPgaxCuHBnBszq7Ce2TyMrywm5r4PnKm6V3iiZF+g==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@eslint/core": "^0.12.0",
-        "levn": "^0.4.1"
-      },
+    "node_modules/es-errors": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
+      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
+      "license": "MIT",
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": ">= 0.4"
       }
     },
-    "node_modules/@faker-js/faker": {
-      "version": "9.7.0",
-      "resolved": "https://registry.npmjs.org/@faker-js/faker/-/faker-9.7.0.tgz",
-      "integrity": "sha512-aozo5vqjCmDoXLNUJarFZx2IN/GgGaogY4TMJ6so/WLZOWpSV7fvj2dmrV6sEAnUm1O7aCrhTibjpzeDFgNqbg==",
-      "funding": [
-        {
-          "type": "opencollective",
-          "url": "https://opencollective.com/fakerjs"
-        }
-      ],
+    "node_modules/es-object-atoms": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
+      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
       "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0"
+      },
       "engines": {
-        "node": ">=18.0.0",
-        "npm": ">=9.0.0"
+        "node": ">= 0.4"
       }
     },
-    "node_modules/@humanfs/core": {
-      "version": "0.19.1",
-      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
-      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=18.18.0"
-      }
-    },
-    "node_modules/@humanfs/node": {
-      "version": "0.16.6",
-      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
-      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@humanfs/core": "^0.19.1",
-        "@humanwhocodes/retry": "^0.3.0"
-      },
-      "engines": {
-        "node": ">=18.18.0"
-      }
+    "node_modules/escape-html": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
+      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
+      "license": "MIT"
     },
-    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
-      "version": "0.3.1",
-      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
-      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
-      "dev": true,
-      "license": "Apache-2.0",
+    "node_modules/etag": {
+      "version": "1.8.1",
+      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
+      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
+      "license": "MIT",
       "engines": {
-        "node": ">=18.18"
-      },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/nzakas"
+        "node": ">= 0.6"
       }
     },
-    "node_modules/@humanwhocodes/module-importer": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
-      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=12.22"
+    "node_modules/express": {
+      "version": "4.21.2",
+      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
+      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
+      "license": "MIT",
+      "dependencies": {
+        "accepts": "~1.3.8",
+        "array-flatten": "1.1.1",
+        "body-parser": "1.20.3",
+        "content-disposition": "0.5.4",
+        "content-type": "~1.0.4",
+        "cookie": "0.7.1",
+        "cookie-signature": "1.0.6",
+        "debug": "2.6.9",
+        "depd": "2.0.0",
+        "encodeurl": "~2.0.0",
+        "escape-html": "~1.0.3",
+        "etag": "~1.8.1",
+        "finalhandler": "1.3.1",
+        "fresh": "0.5.2",
+        "http-errors": "2.0.0",
+        "merge-descriptors": "1.0.3",
+        "methods": "~1.1.2",
+        "on-finished": "2.4.1",
+        "parseurl": "~1.3.3",
+        "path-to-regexp": "0.1.12",
+        "proxy-addr": "~2.0.7",
+        "qs": "6.13.0",
+        "range-parser": "~1.2.1",
+        "safe-buffer": "5.2.1",
+        "send": "0.19.0",
+        "serve-static": "1.16.2",
+        "setprototypeof": "1.2.0",
+        "statuses": "2.0.1",
+        "type-is": "~1.6.18",
+        "utils-merge": "1.0.1",
+        "vary": "~1.1.2"
       },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/nzakas"
-      }
-    },
-    "node_modules/@humanwhocodes/retry": {
-      "version": "0.4.2",
-      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.2.tgz",
-      "integrity": "sha512-xeO57FpIu4p1Ri3Jq/EXq4ClRm86dVF2z/+kvFnyqVYRavTZmaFaUBbWCOuuTh0o/g7DSsk6kc2vrS4Vl5oPOQ==",
-      "dev": true,
-      "license": "Apache-2.0",
       "engines": {
-        "node": ">=18.18"
+        "node": ">= 0.10.0"
       },
       "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/nzakas"
+        "type": "opencollective",
+        "url": "https://opencollective.com/express"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
-      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
-      "dev": true,
-      "license": "ISC",
+    "node_modules/finalhandler": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
+      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
+      "license": "MIT",
       "dependencies": {
-        "camelcase": "^5.3.1",
-        "find-up": "^4.1.0",
-        "get-package-type": "^0.1.0",
-        "js-yaml": "^3.13.1",
-        "resolve-from": "^5.0.0"
+        "debug": "2.6.9",
+        "encodeurl": "~2.0.0",
+        "escape-html": "~1.0.3",
+        "on-finished": "2.4.1",
+        "parseurl": "~1.3.3",
+        "statuses": "2.0.1",
+        "unpipe": "~1.0.0"
       },
       "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/argparse": {
-      "version": "1.0.10",
-      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
-      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "sprintf-js": "~1.0.2"
+        "node": ">= 0.8"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/find-up": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
-      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
-      "dev": true,
+    "node_modules/forwarded": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
+      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
       "license": "MIT",
-      "dependencies": {
-        "locate-path": "^5.0.0",
-        "path-exists": "^4.0.0"
-      },
       "engines": {
-        "node": ">=8"
+        "node": ">= 0.6"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/js-yaml": {
-      "version": "3.14.1",
-      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
-      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
-      "dev": true,
+    "node_modules/fresh": {
+      "version": "0.5.2",
+      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
+      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
       "license": "MIT",
-      "dependencies": {
-        "argparse": "^1.0.7",
-        "esprima": "^4.0.0"
-      },
-      "bin": {
-        "js-yaml": "bin/js-yaml.js"
+      "engines": {
+        "node": ">= 0.6"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/locate-path": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
-      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
-      "dev": true,
+    "node_modules/function-bind": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
+      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
       "license": "MIT",
-      "dependencies": {
-        "p-locate": "^4.1.0"
-      },
-      "engines": {
-        "node": ">=8"
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-limit": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
-      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
-      "dev": true,
+    "node_modules/get-intrinsic": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
+      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
       "license": "MIT",
       "dependencies": {
-        "p-try": "^2.0.0"
+        "call-bind-apply-helpers": "^1.0.2",
+        "es-define-property": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.1.1",
+        "function-bind": "^1.1.2",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "hasown": "^2.0.2",
+        "math-intrinsics": "^1.1.0"
       },
       "engines": {
-        "node": ">=6"
+        "node": ">= 0.4"
       },
       "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+        "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/p-locate": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
-      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
-      "dev": true,
+    "node_modules/get-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
+      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
       "license": "MIT",
       "dependencies": {
-        "p-limit": "^2.2.0"
+        "dunder-proto": "^1.0.1",
+        "es-object-atoms": "^1.0.0"
       },
       "engines": {
-        "node": ">=8"
+        "node": ">= 0.4"
       }
     },
-    "node_modules/@istanbuljs/load-nyc-config/node_modules/resolve-from": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
-      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
-      "dev": true,
+    "node_modules/gopd": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
+      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
       "license": "MIT",
       "engines": {
-        "node": ">=8"
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/@istanbuljs/schema": {
-      "version": "0.1.3",
-      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
-      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
-      "dev": true,
+    "node_modules/has-symbols": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
+      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
       "license": "MIT",
       "engines": {
-        "node": ">=8"
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/@jest/console": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.7.0.tgz",
-      "integrity": "sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==",
-      "dev": true,
+    "node_modules/hasown": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
+      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
       "license": "MIT",
       "dependencies": {
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "chalk": "^4.0.0",
-        "jest-message-util": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "slash": "^3.0.0"
+        "function-bind": "^1.1.2"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">= 0.4"
       }
     },
-    "node_modules/@jest/core": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.7.0.tgz",
-      "integrity": "sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==",
-      "dev": true,
+    "node_modules/helmet": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/helmet/-/helmet-8.0.0.tgz",
+      "integrity": "sha512-VyusHLEIIO5mjQPUI1wpOAEu+wl6Q0998jzTxqUYGE45xCIcAxy3MsbEK/yyJUJ3ADeMoB6MornPH6GMWAf+Pw==",
       "license": "MIT",
-      "dependencies": {
-        "@jest/console": "^29.7.0",
-        "@jest/reporters": "^29.7.0",
-        "@jest/test-result": "^29.7.0",
-        "@jest/transform": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "ansi-escapes": "^4.2.1",
-        "chalk": "^4.0.0",
-        "ci-info": "^3.2.0",
-        "exit": "^0.1.2",
-        "graceful-fs": "^4.2.9",
-        "jest-changed-files": "^29.7.0",
-        "jest-config": "^29.7.0",
-        "jest-haste-map": "^29.7.0",
-        "jest-message-util": "^29.7.0",
-        "jest-regex-util": "^29.6.3",
-        "jest-resolve": "^29.7.0",
-        "jest-resolve-dependencies": "^29.7.0",
-        "jest-runner": "^29.7.0",
-        "jest-runtime": "^29.7.0",
-        "jest-snapshot": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "jest-validate": "^29.7.0",
-        "jest-watcher": "^29.7.0",
-        "micromatch": "^4.0.4",
-        "pretty-format": "^29.7.0",
-        "slash": "^3.0.0",
-        "strip-ansi": "^6.0.0"
-      },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "peerDependencies": {
-        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
-      },
-      "peerDependenciesMeta": {
-        "node-notifier": {
-          "optional": true
-        }
+        "node": ">=18.0.0"
       }
     },
-    "node_modules/@jest/environment": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.7.0.tgz",
-      "integrity": "sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==",
-      "dev": true,
+    "node_modules/http-errors": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
+      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
       "license": "MIT",
       "dependencies": {
-        "@jest/fake-timers": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "jest-mock": "^29.7.0"
+        "depd": "2.0.0",
+        "inherits": "2.0.4",
+        "setprototypeof": "1.2.0",
+        "statuses": "2.0.1",
+        "toidentifier": "1.0.1"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">= 0.8"
       }
     },
-    "node_modules/@jest/expect": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.7.0.tgz",
-      "integrity": "sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==",
-      "dev": true,
+    "node_modules/iconv-lite": {
+      "version": "0.4.24",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
+      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
       "license": "MIT",
       "dependencies": {
-        "expect": "^29.7.0",
-        "jest-snapshot": "^29.7.0"
+        "safer-buffer": ">= 2.1.2 < 3"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=0.10.0"
       }
     },
-    "node_modules/@jest/expect-utils": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.7.0.tgz",
-      "integrity": "sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==",
-      "dev": true,
+    "node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+      "license": "ISC"
+    },
+    "node_modules/ipaddr.js": {
+      "version": "1.9.1",
+      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
+      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
       "license": "MIT",
-      "dependencies": {
-        "jest-get-type": "^29.6.3"
-      },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">= 0.10"
       }
     },
-    "node_modules/@jest/fake-timers": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.7.0.tgz",
-      "integrity": "sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==",
-      "dev": true,
+    "node_modules/jsonwebtoken": {
+      "version": "9.0.2",
+      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
+      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
       "license": "MIT",
       "dependencies": {
-        "@jest/types": "^29.6.3",
-        "@sinonjs/fake-timers": "^10.0.2",
-        "@types/node": "*",
-        "jest-message-util": "^29.7.0",
-        "jest-mock": "^29.7.0",
-        "jest-util": "^29.7.0"
+        "jws": "^3.2.2",
+        "lodash.includes": "^4.3.0",
+        "lodash.isboolean": "^3.0.3",
+        "lodash.isinteger": "^4.0.4",
+        "lodash.isnumber": "^3.0.3",
+        "lodash.isplainobject": "^4.0.6",
+        "lodash.isstring": "^4.0.1",
+        "lodash.once": "^4.0.0",
+        "ms": "^2.1.1",
+        "semver": "^7.5.4"
       },
       "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+        "node": ">=12",
+        "npm": ">=6"
       }
     },
-    "node_modules/@jest/globals": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.7.0.tgz",
-      "integrity": "sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==",
-      "dev": true,
+    "node_modules/jsonwebtoken/node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "license": "MIT"
+    },
+    "node_modules/jwa": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
+      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
       "license": "MIT",
       "dependencies": {
-        "@jest/environment": "^29.7.0",
-        "@jest/expect": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "jest-mock": "^29.7.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/@jest/reporters": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.7.0.tgz",
-      "integrity": "sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@bcoe/v8-coverage": "^0.2.3",
-        "@jest/console": "^29.7.0",
-        "@jest/test-result": "^29.7.0",
-        "@jest/transform": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@jridgewell/trace-mapping": "^0.3.18",
-        "@types/node": "*",
-        "chalk": "^4.0.0",
-        "collect-v8-coverage": "^1.0.0",
-        "exit": "^0.1.2",
-        "glob": "^7.1.3",
-        "graceful-fs": "^4.2.9",
-        "istanbul-lib-coverage": "^3.0.0",
-        "istanbul-lib-instrument": "^6.0.0",
-        "istanbul-lib-report": "^3.0.0",
-        "istanbul-lib-source-maps": "^4.0.0",
-        "istanbul-reports": "^3.1.3",
-        "jest-message-util": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "jest-worker": "^29.7.0",
-        "slash": "^3.0.0",
-        "string-length": "^4.0.1",
-        "strip-ansi": "^6.0.0",
-        "v8-to-istanbul": "^9.0.1"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "peerDependencies": {
-        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
-      },
-      "peerDependenciesMeta": {
-        "node-notifier": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@jest/schemas": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz",
-      "integrity": "sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@sinclair/typebox": "^0.27.8"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/@jest/source-map": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.3.tgz",
-      "integrity": "sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jridgewell/trace-mapping": "^0.3.18",
-        "callsites": "^3.0.0",
-        "graceful-fs": "^4.2.9"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/@jest/test-result": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.7.0.tgz",
-      "integrity": "sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/console": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/istanbul-lib-coverage": "^2.0.0",
-        "collect-v8-coverage": "^1.0.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/@jest/test-sequencer": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.7.0.tgz",
-      "integrity": "sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/test-result": "^29.7.0",
-        "graceful-fs": "^4.2.9",
-        "jest-haste-map": "^29.7.0",
-        "slash": "^3.0.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/@jest/transform": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.7.0.tgz",
-      "integrity": "sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/core": "^7.11.6",
-        "@jest/types": "^29.6.3",
-        "@jridgewell/trace-mapping": "^0.3.18",
-        "babel-plugin-istanbul": "^6.1.1",
-        "chalk": "^4.0.0",
-        "convert-source-map": "^2.0.0",
-        "fast-json-stable-stringify": "^2.1.0",
-        "graceful-fs": "^4.2.9",
-        "jest-haste-map": "^29.7.0",
-        "jest-regex-util": "^29.6.3",
-        "jest-util": "^29.7.0",
-        "micromatch": "^4.0.4",
-        "pirates": "^4.0.4",
-        "slash": "^3.0.0",
-        "write-file-atomic": "^4.0.2"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/@jest/types": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.3.tgz",
-      "integrity": "sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/schemas": "^29.6.3",
-        "@types/istanbul-lib-coverage": "^2.0.0",
-        "@types/istanbul-reports": "^3.0.0",
-        "@types/node": "*",
-        "@types/yargs": "^17.0.8",
-        "chalk": "^4.0.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/@jridgewell/gen-mapping": {
-      "version": "0.3.8",
-      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
-      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jridgewell/set-array": "^1.2.1",
-        "@jridgewell/sourcemap-codec": "^1.4.10",
-        "@jridgewell/trace-mapping": "^0.3.24"
-      },
-      "engines": {
-        "node": ">=6.0.0"
-      }
-    },
-    "node_modules/@jridgewell/resolve-uri": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
-      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.0.0"
-      }
-    },
-    "node_modules/@jridgewell/set-array": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
-      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.0.0"
-      }
-    },
-    "node_modules/@jridgewell/sourcemap-codec": {
-      "version": "1.5.0",
-      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
-      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@jridgewell/trace-mapping": {
-      "version": "0.3.25",
-      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
-      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jridgewell/resolve-uri": "^3.1.0",
-        "@jridgewell/sourcemap-codec": "^1.4.14"
+        "buffer-equal-constant-time": "1.0.1",
+        "ecdsa-sig-formatter": "1.0.11",
+        "safe-buffer": "^5.0.1"
       }
     },
-    "node_modules/@mongodb-js/saslprep": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/@mongodb-js/saslprep/-/saslprep-1.2.0.tgz",
-      "integrity": "sha512-+ywrb0AqkfaYuhHs6LxKWgqbh3I72EpEgESCw37o+9qPx9WTCkgDm2B+eMrwehGtHBWHFU4GXvnSCNiFhhausg==",
+    "node_modules/jws": {
+      "version": "3.2.2",
+      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
+      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
       "license": "MIT",
       "dependencies": {
-        "sparse-bitfield": "^3.0.3"
+        "jwa": "^1.4.1",
+        "safe-buffer": "^5.0.1"
       }
     },
-    "node_modules/@noble/hashes": {
-      "version": "1.8.0",
-      "resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.8.0.tgz",
-      "integrity": "sha512-jCs9ldd7NwzpgXDIf6P3+NrHh9/sD6CQdxHyjQI+h/6rDNo88ypBxxz45UDuZHz9r3tNz7N/VInSVoVdtXEI4A==",
-      "dev": true,
-      "license": "MIT",
+    "node_modules/kareem": {
+      "version": "2.6.3",
+      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.6.3.tgz",
+      "integrity": "sha512-C3iHfuGUXK2u8/ipq9LfjFfXFxAZMQJJq7vLS45r3D9Y2xQ/m4S8zaR4zMLFWh9AsNPXmcFfUDhTEO8UIC/V6Q==",
+      "license": "Apache-2.0",
       "engines": {
-        "node": "^14.21.3 || >=16"
-      },
-      "funding": {
-        "url": "https://paulmillr.com/funding/"
-      }
-    },
-    "node_modules/@paralleldrive/cuid2": {
-      "version": "2.2.2",
-      "resolved": "https://registry.npmjs.org/@paralleldrive/cuid2/-/cuid2-2.2.2.tgz",
-      "integrity": "sha512-ZOBkgDwEdoYVlSeRbYYXs0S9MejQofiVYoTbKzy/6GQa39/q5tQU2IX46+shYnUkpEl3wc+J6wRlar7r2EK2xA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@noble/hashes": "^1.1.5"
+        "node": ">=12.0.0"
       }
     },
-    "node_modules/@sinclair/typebox": {
-      "version": "0.27.8",
-      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
-      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==",
-      "dev": true,
+    "node_modules/lodash.includes": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
+      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
       "license": "MIT"
     },
-    "node_modules/@sinonjs/commons": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.1.tgz",
-      "integrity": "sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "type-detect": "4.0.8"
-      }
-    },
-    "node_modules/@sinonjs/fake-timers": {
-      "version": "10.3.0",
-      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
-      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "@sinonjs/commons": "^3.0.0"
-      }
-    },
-    "node_modules/@swc/helpers": {
-      "version": "0.5.17",
-      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.17.tgz",
-      "integrity": "sha512-5IKx/Y13RsYd+sauPb2x+U/xZikHjolzfuDgTAl/Tdf3Q8rslRvC19NKDLgAJQ6wsqADk10ntlv08nPFw/gO/A==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "tslib": "^2.8.0"
-      }
-    },
-    "node_modules/@types/babel__core": {
-      "version": "7.20.5",
-      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
-      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/parser": "^7.20.7",
-        "@babel/types": "^7.20.7",
-        "@types/babel__generator": "*",
-        "@types/babel__template": "*",
-        "@types/babel__traverse": "*"
-      }
-    },
-    "node_modules/@types/babel__generator": {
-      "version": "7.6.8",
-      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.8.tgz",
-      "integrity": "sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/types": "^7.0.0"
-      }
-    },
-    "node_modules/@types/babel__template": {
-      "version": "7.4.4",
-      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
-      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/parser": "^7.1.0",
-        "@babel/types": "^7.0.0"
-      }
-    },
-    "node_modules/@types/babel__traverse": {
-      "version": "7.20.6",
-      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.6.tgz",
-      "integrity": "sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/types": "^7.20.7"
-      }
-    },
-    "node_modules/@types/estree": {
-      "version": "1.0.6",
-      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz",
-      "integrity": "sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==",
-      "dev": true,
+    "node_modules/lodash.isboolean": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
+      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
       "license": "MIT"
     },
-    "node_modules/@types/graceful-fs": {
-      "version": "4.1.9",
-      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.9.tgz",
-      "integrity": "sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/node": "*"
-      }
-    },
-    "node_modules/@types/istanbul-lib-coverage": {
-      "version": "2.0.6",
-      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
-      "integrity": "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==",
-      "dev": true,
+    "node_modules/lodash.isinteger": {
+      "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
+      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
       "license": "MIT"
     },
-    "node_modules/@types/istanbul-lib-report": {
+    "node_modules/lodash.isnumber": {
       "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.3.tgz",
-      "integrity": "sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/istanbul-lib-coverage": "*"
-      }
-    },
-    "node_modules/@types/istanbul-reports": {
-      "version": "3.0.4",
-      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz",
-      "integrity": "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/istanbul-lib-report": "*"
-      }
-    },
-    "node_modules/@types/json-schema": {
-      "version": "7.0.15",
-      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
-      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
-      "dev": true,
+      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
+      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
       "license": "MIT"
     },
-    "node_modules/@types/node": {
-      "version": "22.13.10",
-      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.13.10.tgz",
-      "integrity": "sha512-I6LPUvlRH+O6VRUqYOcMudhaIdUVWfsjnZavnsraHvpBwaEyMN29ry+0UVJhImYL16xsscu0aske3yA+uPOWfw==",
-      "license": "MIT",
-      "dependencies": {
-        "undici-types": "~6.20.0"
-      }
-    },
-    "node_modules/@types/stack-utils": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
-      "integrity": "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==",
-      "dev": true,
+    "node_modules/lodash.isplainobject": {
+      "version": "4.0.6",
+      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
+      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
       "license": "MIT"
     },
-    "node_modules/@types/webidl-conversions": {
-      "version": "7.0.3",
-      "resolved": "https://registry.npmjs.org/@types/webidl-conversions/-/webidl-conversions-7.0.3.tgz",
-      "integrity": "sha512-CiJJvcRtIgzadHCYXw7dqEnMNRjhGZlYK05Mj9OyktqV8uVT8fD2BFOB7S1uwBE3Kj2Z+4UyPmFw/Ixgw/LAlA==",
+    "node_modules/lodash.isstring": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
+      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
       "license": "MIT"
     },
-    "node_modules/@types/whatwg-url": {
-      "version": "11.0.5",
-      "resolved": "https://registry.npmjs.org/@types/whatwg-url/-/whatwg-url-11.0.5.tgz",
-      "integrity": "sha512-coYR071JRaHa+xoEvvYqvnIHaVqaYrLPbsufM9BF63HkwI5Lgmy2QR8Q5K/lYDYo5AK82wOvSOS0UsLTpTG7uQ==",
-      "license": "MIT",
-      "dependencies": {
-        "@types/webidl-conversions": "*"
-      }
-    },
-    "node_modules/@types/yargs": {
-      "version": "17.0.33",
-      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz",
-      "integrity": "sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/yargs-parser": "*"
-      }
-    },
-    "node_modules/@types/yargs-parser": {
-      "version": "21.0.3",
-      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz",
-      "integrity": "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==",
-      "dev": true,
+    "node_modules/lodash.once": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
+      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
       "license": "MIT"
     },
-    "node_modules/accepts": {
-      "version": "1.3.8",
-      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
-      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
-      "license": "MIT",
-      "dependencies": {
-        "mime-types": "~2.1.34",
-        "negotiator": "0.6.3"
-      },
-      "engines": {
-        "node": ">= 0.6"
-      }
+    "node_modules/make-error": {
+      "version": "1.3.6",
+      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
+      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
+      "dev": true,
+      "license": "ISC"
     },
-    "node_modules/accepts/node_modules/negotiator": {
-      "version": "0.6.3",
-      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
-      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/acorn": {
-      "version": "8.14.1",
-      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
-      "integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
-      "dev": true,
-      "license": "MIT",
-      "bin": {
-        "acorn": "bin/acorn"
-      },
-      "engines": {
-        "node": ">=0.4.0"
-      }
-    },
-    "node_modules/acorn-jsx": {
-      "version": "5.3.2",
-      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
-      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
-      "dev": true,
-      "license": "MIT",
-      "peerDependencies": {
-        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
-      }
-    },
-    "node_modules/agent-base": {
-      "version": "7.1.3",
-      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.3.tgz",
-      "integrity": "sha512-jRR5wdylq8CkOe6hei19GGZnxM6rBGwFl3Bg0YItGDimvjGtAvdZk4Pu6Cl4u4Igsws4a1fd1Vq3ezrhn4KmFw==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">= 14"
-      }
-    },
-    "node_modules/ajv": {
-      "version": "6.12.6",
-      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
-      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "fast-deep-equal": "^3.1.1",
-        "fast-json-stable-stringify": "^2.0.0",
-        "json-schema-traverse": "^0.4.1",
-        "uri-js": "^4.2.2"
-      },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/epoberezkin"
-      }
-    },
-    "node_modules/ansi-escapes": {
-      "version": "4.3.2",
-      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
-      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "type-fest": "^0.21.3"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/ansi-regex": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
-      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/anymatch": {
-      "version": "3.1.3",
-      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
-      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "normalize-path": "^3.0.0",
-        "picomatch": "^2.0.4"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/append-field": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
-      "integrity": "sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw==",
-      "license": "MIT"
-    },
-    "node_modules/argparse": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
-      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
-      "dev": true,
-      "license": "Python-2.0"
-    },
-    "node_modules/array-flatten": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
-      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
-      "license": "MIT"
-    },
-    "node_modules/asap": {
-      "version": "2.0.6",
-      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
-      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/async-mutex": {
-      "version": "0.5.0",
-      "resolved": "https://registry.npmjs.org/async-mutex/-/async-mutex-0.5.0.tgz",
-      "integrity": "sha512-1A94B18jkJ3DYq284ohPxoXbfTA5HsQ7/Mf4DEhcyLx3Bz27Rh59iScbB6EPiP+B+joue6YCxcMXSbFC1tZKwA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "tslib": "^2.4.0"
-      }
-    },
-    "node_modules/asynckit": {
-      "version": "0.4.0",
-      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
-      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/b4a": {
-      "version": "1.6.7",
-      "resolved": "https://registry.npmjs.org/b4a/-/b4a-1.6.7.tgz",
-      "integrity": "sha512-OnAYlL5b7LEkALw87fUVafQw5rVR9RjwGd4KUwNQ6DrrNmaVaUCgLipfVlzrPQ4tWOR9P0IXGNOx50jYCCdSJg==",
-      "dev": true,
-      "license": "Apache-2.0"
-    },
-    "node_modules/babel-jest": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.7.0.tgz",
-      "integrity": "sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/transform": "^29.7.0",
-        "@types/babel__core": "^7.1.14",
-        "babel-plugin-istanbul": "^6.1.1",
-        "babel-preset-jest": "^29.6.3",
-        "chalk": "^4.0.0",
-        "graceful-fs": "^4.2.9",
-        "slash": "^3.0.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.8.0"
-      }
-    },
-    "node_modules/babel-plugin-istanbul": {
-      "version": "6.1.1",
-      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
-      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "@babel/helper-plugin-utils": "^7.0.0",
-        "@istanbuljs/load-nyc-config": "^1.0.0",
-        "@istanbuljs/schema": "^0.1.2",
-        "istanbul-lib-instrument": "^5.0.4",
-        "test-exclude": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/babel-plugin-istanbul/node_modules/istanbul-lib-instrument": {
-      "version": "5.2.1",
-      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
-      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "@babel/core": "^7.12.3",
-        "@babel/parser": "^7.14.7",
-        "@istanbuljs/schema": "^0.1.2",
-        "istanbul-lib-coverage": "^3.2.0",
-        "semver": "^6.3.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/babel-plugin-istanbul/node_modules/semver": {
-      "version": "6.3.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
-      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
-      "dev": true,
-      "license": "ISC",
-      "bin": {
-        "semver": "bin/semver.js"
-      }
-    },
-    "node_modules/babel-plugin-jest-hoist": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.6.3.tgz",
-      "integrity": "sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/template": "^7.3.3",
-        "@babel/types": "^7.3.3",
-        "@types/babel__core": "^7.1.14",
-        "@types/babel__traverse": "^7.0.6"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/babel-preset-current-node-syntax": {
+    "node_modules/math-intrinsics": {
       "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.1.0.tgz",
-      "integrity": "sha512-ldYss8SbBlWva1bs28q78Ju5Zq1F+8BrqBZZ0VFhLBvhh6lCpC2o3gDJi/5DRLs9FgYZCnmPYIVFU4lRXCkyUw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/plugin-syntax-async-generators": "^7.8.4",
-        "@babel/plugin-syntax-bigint": "^7.8.3",
-        "@babel/plugin-syntax-class-properties": "^7.12.13",
-        "@babel/plugin-syntax-class-static-block": "^7.14.5",
-        "@babel/plugin-syntax-import-attributes": "^7.24.7",
-        "@babel/plugin-syntax-import-meta": "^7.10.4",
-        "@babel/plugin-syntax-json-strings": "^7.8.3",
-        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
-        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
-        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
-        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
-        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
-        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
-        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
-        "@babel/plugin-syntax-top-level-await": "^7.14.5"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0"
-      }
-    },
-    "node_modules/babel-preset-jest": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.6.3.tgz",
-      "integrity": "sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "babel-plugin-jest-hoist": "^29.6.3",
-        "babel-preset-current-node-syntax": "^1.0.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0"
-      }
-    },
-    "node_modules/balanced-match": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
-      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/bare-events": {
-      "version": "2.5.4",
-      "resolved": "https://registry.npmjs.org/bare-events/-/bare-events-2.5.4.tgz",
-      "integrity": "sha512-+gFfDkR8pj4/TrWCGUGWmJIkBwuxPS5F+a5yWjOHQt2hHvNZd5YLzadjmDUtFmMM4y429bnKLa8bYBMHcYdnQA==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "optional": true
-    },
-    "node_modules/base32.js": {
-      "version": "0.0.1",
-      "resolved": "https://registry.npmjs.org/base32.js/-/base32.js-0.0.1.tgz",
-      "integrity": "sha512-EGHIRiegFa62/SsA1J+Xs2tIzludPdzM064N9wjbiEgHnGnJ1V0WEpA4pEwCYT5nDvZk3ubf0shqaCS7k6xeUQ==",
-      "license": "MIT"
-    },
-    "node_modules/base64-js": {
-      "version": "1.5.1",
-      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
-      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "MIT"
-    },
-    "node_modules/basic-auth": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz",
-      "integrity": "sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==",
-      "license": "MIT",
-      "dependencies": {
-        "safe-buffer": "5.1.2"
-      },
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/basic-auth/node_modules/safe-buffer": {
-      "version": "5.1.2",
-      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
-      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
-      "license": "MIT"
-    },
-    "node_modules/bcryptjs": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-3.0.2.tgz",
-      "integrity": "sha512-k38b3XOZKv60C4E2hVsXTolJWfkGRMbILBIe2IBITXciy5bOsTKot5kDrf3ZfufQtQOUN5mXceUEpU1rTl9Uog==",
-      "license": "BSD-3-Clause",
-      "bin": {
-        "bcrypt": "bin/bcrypt"
-      }
-    },
-    "node_modules/binary-extensions": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
-      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/body-parser": {
-      "version": "1.20.3",
-      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
-      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
-      "license": "MIT",
-      "dependencies": {
-        "bytes": "3.1.2",
-        "content-type": "~1.0.5",
-        "debug": "2.6.9",
-        "depd": "2.0.0",
-        "destroy": "1.2.0",
-        "http-errors": "2.0.0",
-        "iconv-lite": "0.4.24",
-        "on-finished": "2.4.1",
-        "qs": "6.13.0",
-        "raw-body": "2.5.2",
-        "type-is": "~1.6.18",
-        "unpipe": "1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.8",
-        "npm": "1.2.8000 || >= 1.4.16"
-      }
-    },
-    "node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
-    "node_modules/braces": {
-      "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
-      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "fill-range": "^7.1.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/brotli": {
-      "version": "1.3.3",
-      "resolved": "https://registry.npmjs.org/brotli/-/brotli-1.3.3.tgz",
-      "integrity": "sha512-oTKjJdShmDuGW94SyyaoQvAjf30dZaHnjJ8uAF+u2/vGJkJbJPJAT1gDiOJP5v1Zb6f9KEyW/1HpuaWIXtGHPg==",
-      "license": "MIT",
-      "dependencies": {
-        "base64-js": "^1.1.2"
-      }
-    },
-    "node_modules/browserslist": {
-      "version": "4.24.4",
-      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.24.4.tgz",
-      "integrity": "sha512-KDi1Ny1gSePi1vm0q4oxSF8b4DR44GF4BbmS2YdhPLOEqd8pDviZOGH/GsmRwoWJ2+5Lr085X7naowMwKHDG1A==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "opencollective",
-          "url": "https://opencollective.com/browserslist"
-        },
-        {
-          "type": "tidelift",
-          "url": "https://tidelift.com/funding/github/npm/browserslist"
-        },
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/ai"
-        }
-      ],
-      "license": "MIT",
-      "dependencies": {
-        "caniuse-lite": "^1.0.30001688",
-        "electron-to-chromium": "^1.5.73",
-        "node-releases": "^2.0.19",
-        "update-browserslist-db": "^1.1.1"
-      },
-      "bin": {
-        "browserslist": "cli.js"
-      },
-      "engines": {
-        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
-      }
-    },
-    "node_modules/bser": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
-      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "node-int64": "^0.4.0"
-      }
-    },
-    "node_modules/bson": {
-      "version": "6.10.3",
-      "resolved": "https://registry.npmjs.org/bson/-/bson-6.10.3.tgz",
-      "integrity": "sha512-MTxGsqgYTwfshYWTRdmZRC+M7FnG1b4y7RO7p2k3X24Wq0yv1m77Wsj0BzlPzd/IowgESfsruQCUToa7vbOpPQ==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=16.20.1"
-      }
-    },
-    "node_modules/buffer-crc32": {
-      "version": "0.2.13",
-      "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
-      "integrity": "sha512-VO9Ht/+p3SN7SKWqcrgEzjGbRSJYTx+Q1pTQC0wrWqHx0vpJraQ6GtHx8tvcg1rlK1byhU5gccxgOgj7B0TDkQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/buffer-equal-constant-time": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
-      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/buffer-from": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
-      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
-      "license": "MIT"
-    },
-    "node_modules/busboy": {
-      "version": "1.6.0",
-      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
-      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
-      "dependencies": {
-        "streamsearch": "^1.1.0"
-      },
-      "engines": {
-        "node": ">=10.16.0"
-      }
-    },
-    "node_modules/bytes": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
-      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/call-bind-apply-helpers": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
-      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
-      "license": "MIT",
-      "dependencies": {
-        "es-errors": "^1.3.0",
-        "function-bind": "^1.1.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/call-bound": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
-      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
-      "license": "MIT",
-      "dependencies": {
-        "call-bind-apply-helpers": "^1.0.2",
-        "get-intrinsic": "^1.3.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/callsites": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
-      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/camelcase": {
-      "version": "5.3.1",
-      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
-      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/caniuse-lite": {
-      "version": "1.0.30001705",
-      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001705.tgz",
-      "integrity": "sha512-S0uyMMiYvA7CxNgomYBwwwPUnWzFD83f3B1ce5jHUfHTH//QL6hHsreI8RVC5606R4ssqravelYO5TU6t8sEyg==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "opencollective",
-          "url": "https://opencollective.com/browserslist"
-        },
-        {
-          "type": "tidelift",
-          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
-        },
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/ai"
-        }
-      ],
-      "license": "CC-BY-4.0"
-    },
-    "node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/char-regex": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
-      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/chokidar": {
-      "version": "3.6.0",
-      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
-      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "anymatch": "~3.1.2",
-        "braces": "~3.0.2",
-        "glob-parent": "~5.1.2",
-        "is-binary-path": "~2.1.0",
-        "is-glob": "~4.0.1",
-        "normalize-path": "~3.0.0",
-        "readdirp": "~3.6.0"
-      },
-      "engines": {
-        "node": ">= 8.10.0"
-      },
-      "funding": {
-        "url": "https://paulmillr.com/funding/"
-      },
-      "optionalDependencies": {
-        "fsevents": "~2.3.2"
-      }
-    },
-    "node_modules/chokidar/node_modules/glob-parent": {
-      "version": "5.1.2",
-      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
-      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "is-glob": "^4.0.1"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
-    "node_modules/ci-info": {
-      "version": "3.9.0",
-      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.9.0.tgz",
-      "integrity": "sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/sibiraj-s"
-        }
-      ],
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/cjs-module-lexer": {
-      "version": "1.4.3",
-      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.4.3.tgz",
-      "integrity": "sha512-9z8TZaGM1pfswYeXrUpzPrkx8UnWYdhJclsiYMm6x/w5+nN+8Tf/LnAgfLGQCm59qAOxU8WwHEq2vNwF6i4j+Q==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/cliui": {
-      "version": "8.0.1",
-      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
-      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "string-width": "^4.2.0",
-        "strip-ansi": "^6.0.1",
-        "wrap-ansi": "^7.0.0"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/clone": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/clone/-/clone-2.1.2.tgz",
-      "integrity": "sha512-3Pe/CF1Nn94hyhIYpjtiLhdCoEoz0DqQ+988E9gmeEdQZlojxnOb74wctFyuwWQHzqyf9X7C7MG8juUpqBJT8w==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.8"
-      }
-    },
-    "node_modules/co": {
-      "version": "4.6.0",
-      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
-      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "iojs": ">= 1.0.0",
-        "node": ">= 0.12.0"
-      }
-    },
-    "node_modules/collect-v8-coverage": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
-      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
-      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
-      "license": "MIT",
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/color-name": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
-      "license": "MIT"
-    },
-    "node_modules/combined-stream": {
-      "version": "1.0.8",
-      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
-      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "delayed-stream": "~1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/commondir": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/commondir/-/commondir-1.0.1.tgz",
-      "integrity": "sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/component-emitter": {
-      "version": "1.3.1",
-      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.1.tgz",
-      "integrity": "sha512-T0+barUSQRTUQASh8bx02dl+DhF54GtIDY13Y3m9oWTklKbb3Wv974meRpeZ3lp1JpLVECWWNHC4vaG2XHXouQ==",
-      "dev": true,
-      "license": "MIT",
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/compressible": {
-      "version": "2.0.18",
-      "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.18.tgz",
-      "integrity": "sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==",
-      "license": "MIT",
-      "dependencies": {
-        "mime-db": ">= 1.43.0 < 2"
-      },
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/compression": {
-      "version": "1.8.0",
-      "resolved": "https://registry.npmjs.org/compression/-/compression-1.8.0.tgz",
-      "integrity": "sha512-k6WLKfunuqCYD3t6AsuPGvQWaKwuLLh2/xHNcX4qE+vIfDNXpSqnrhwA7O53R7WVQUnt8dVAIW+YHr7xTgOgGA==",
-      "license": "MIT",
-      "dependencies": {
-        "bytes": "3.1.2",
-        "compressible": "~2.0.18",
-        "debug": "2.6.9",
-        "negotiator": "~0.6.4",
-        "on-headers": "~1.0.2",
-        "safe-buffer": "5.2.1",
-        "vary": "~1.1.2"
-      },
-      "engines": {
-        "node": ">= 0.8.0"
-      }
-    },
-    "node_modules/concat-map": {
-      "version": "0.0.1",
-      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
-      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/concat-stream": {
-      "version": "1.6.2",
-      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
-      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
-      "engines": [
-        "node >= 0.8"
-      ],
-      "license": "MIT",
-      "dependencies": {
-        "buffer-from": "^1.0.0",
-        "inherits": "^2.0.3",
-        "readable-stream": "^2.2.2",
-        "typedarray": "^0.0.6"
-      }
-    },
-    "node_modules/concat-stream/node_modules/readable-stream": {
-      "version": "2.3.8",
-      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
-      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
-      "license": "MIT",
-      "dependencies": {
-        "core-util-is": "~1.0.0",
-        "inherits": "~2.0.3",
-        "isarray": "~1.0.0",
-        "process-nextick-args": "~2.0.0",
-        "safe-buffer": "~5.1.1",
-        "string_decoder": "~1.1.1",
-        "util-deprecate": "~1.0.1"
-      }
-    },
-    "node_modules/concat-stream/node_modules/safe-buffer": {
-      "version": "5.1.2",
-      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
-      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
-      "license": "MIT"
-    },
-    "node_modules/concat-stream/node_modules/string_decoder": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
-      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
-      "license": "MIT",
-      "dependencies": {
-        "safe-buffer": "~5.1.0"
-      }
-    },
-    "node_modules/content-disposition": {
-      "version": "0.5.4",
-      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
-      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
-      "license": "MIT",
-      "dependencies": {
-        "safe-buffer": "5.2.1"
-      },
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/content-type": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
-      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/convert-source-map": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
-      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/cookie": {
-      "version": "0.7.1",
-      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
-      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/cookie-signature": {
-      "version": "1.0.6",
-      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
-      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
-      "license": "MIT"
-    },
-    "node_modules/cookiejar": {
-      "version": "2.1.4",
-      "resolved": "https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.4.tgz",
-      "integrity": "sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/core-util-is": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
-      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
-      "license": "MIT"
-    },
-    "node_modules/cors": {
-      "version": "2.8.5",
-      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
-      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
-      "license": "MIT",
-      "dependencies": {
-        "object-assign": "^4",
-        "vary": "^1"
-      },
-      "engines": {
-        "node": ">= 0.10"
-      }
-    },
-    "node_modules/create-jest": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/create-jest/-/create-jest-29.7.0.tgz",
-      "integrity": "sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/types": "^29.6.3",
-        "chalk": "^4.0.0",
-        "exit": "^0.1.2",
-        "graceful-fs": "^4.2.9",
-        "jest-config": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "prompts": "^2.0.1"
-      },
-      "bin": {
-        "create-jest": "bin/create-jest.js"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/cross-env": {
-      "version": "7.0.3",
-      "resolved": "https://registry.npmjs.org/cross-env/-/cross-env-7.0.3.tgz",
-      "integrity": "sha512-+/HKd6EgcQCJGh2PSjZuUitQBQynKor4wrFbRg4DtAgS1aWO+gU52xpH7M9ScGgXSYmAVS9bIJ8EzuaGw0oNAw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "cross-spawn": "^7.0.1"
-      },
-      "bin": {
-        "cross-env": "src/bin/cross-env.js",
-        "cross-env-shell": "src/bin/cross-env-shell.js"
-      },
-      "engines": {
-        "node": ">=10.14",
-        "npm": ">=6",
-        "yarn": ">=1"
-      }
-    },
-    "node_modules/cross-spawn": {
-      "version": "7.0.6",
-      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
-      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "path-key": "^3.1.0",
-        "shebang-command": "^2.0.0",
-        "which": "^2.0.1"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/crypto-js": {
-      "version": "4.2.0",
-      "resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-4.2.0.tgz",
-      "integrity": "sha512-KALDyEYgpY+Rlob/iriUtjV6d5Eq+Y191A5g4UqLAi8CyGP9N1+FdVbkc1SxKc2r4YAYqG8JzO2KGL+AizD70Q==",
-      "license": "MIT"
-    },
-    "node_modules/date-fns": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
-      "integrity": "sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==",
-      "license": "MIT",
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/kossnocorp"
-      }
-    },
-    "node_modules/debug": {
-      "version": "2.6.9",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
-      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
-      "license": "MIT",
-      "dependencies": {
-        "ms": "2.0.0"
-      }
-    },
-    "node_modules/decamelize": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
-      "integrity": "sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/dedent": {
-      "version": "1.5.3",
-      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.5.3.tgz",
-      "integrity": "sha512-NHQtfOOW68WD8lgypbLA5oT+Bt0xXJhiYvoR6SmmNXZfpzOGXwdKWmcwG8N7PwVVWV3eF/68nmD9BaJSsTBhyQ==",
-      "dev": true,
-      "license": "MIT",
-      "peerDependencies": {
-        "babel-plugin-macros": "^3.1.0"
-      },
-      "peerDependenciesMeta": {
-        "babel-plugin-macros": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/deep-is": {
-      "version": "0.1.4",
-      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
-      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/deepmerge": {
-      "version": "4.3.1",
-      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
-      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/delayed-stream": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
-      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.4.0"
-      }
-    },
-    "node_modules/depd": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
-      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/destroy": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
-      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8",
-        "npm": "1.2.8000 || >= 1.4.16"
-      }
-    },
-    "node_modules/detect-newline": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
-      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/dezalgo": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
-      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "asap": "^2.0.0",
-        "wrappy": "1"
-      }
-    },
-    "node_modules/dfa": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/dfa/-/dfa-1.2.0.tgz",
-      "integrity": "sha512-ED3jP8saaweFTjeGX8HQPjeC1YYyZs98jGNZx6IiBvxW7JG5v492kamAQB3m2wop07CvU/RQmzcKr6bgcC5D/Q==",
-      "license": "MIT"
-    },
-    "node_modules/diff-sequences": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz",
-      "integrity": "sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/dijkstrajs": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/dijkstrajs/-/dijkstrajs-1.0.3.tgz",
-      "integrity": "sha512-qiSlmBq9+BCdCA/L46dw8Uy93mloxsPSbwnm5yrKn2vMPiy8KyAskTF6zuV/j5BMsmOGZDPs7KjU+mjb670kfA==",
-      "license": "MIT"
-    },
-    "node_modules/dotenv": {
-      "version": "16.4.7",
-      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
-      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
-      "license": "BSD-2-Clause",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://dotenvx.com"
-      }
-    },
-    "node_modules/dunder-proto": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
-      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
-      "license": "MIT",
-      "dependencies": {
-        "call-bind-apply-helpers": "^1.0.1",
-        "es-errors": "^1.3.0",
-        "gopd": "^1.2.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/ecdsa-sig-formatter": {
-      "version": "1.0.11",
-      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
-      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "safe-buffer": "^5.0.1"
-      }
-    },
-    "node_modules/ee-first": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
-      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
-      "license": "MIT"
-    },
-    "node_modules/electron-to-chromium": {
-      "version": "1.5.119",
-      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.119.tgz",
-      "integrity": "sha512-Ku4NMzUjz3e3Vweh7PhApPrZSS4fyiCIbcIrG9eKrriYVLmbMepETR/v6SU7xPm98QTqMSYiCwfO89QNjXLkbQ==",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/emittery": {
-      "version": "0.13.1",
-      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
-      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
-      }
-    },
-    "node_modules/emoji-regex": {
-      "version": "8.0.0",
-      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
-      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
-      "license": "MIT"
-    },
-    "node_modules/encodeurl": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
-      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/error-ex": {
-      "version": "1.3.2",
-      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
-      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "is-arrayish": "^0.2.1"
-      }
-    },
-    "node_modules/es-define-property": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
-      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/es-errors": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
-      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/es-object-atoms": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
-      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
-      "license": "MIT",
-      "dependencies": {
-        "es-errors": "^1.3.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/es-set-tostringtag": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
-      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "es-errors": "^1.3.0",
-        "get-intrinsic": "^1.2.6",
-        "has-tostringtag": "^1.0.2",
-        "hasown": "^2.0.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/escalade": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
-      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/escape-html": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
-      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
-      "license": "MIT"
-    },
-    "node_modules/escape-string-regexp": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
-      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/eslint": {
-      "version": "9.22.0",
-      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.22.0.tgz",
-      "integrity": "sha512-9V/QURhsRN40xuHXWjV64yvrzMjcz7ZyNoF2jJFmy9j/SLk0u1OLSZgXi28MrXjymnjEGSR80WCdab3RGMDveQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@eslint-community/eslint-utils": "^4.2.0",
-        "@eslint-community/regexpp": "^4.12.1",
-        "@eslint/config-array": "^0.19.2",
-        "@eslint/config-helpers": "^0.1.0",
-        "@eslint/core": "^0.12.0",
-        "@eslint/eslintrc": "^3.3.0",
-        "@eslint/js": "9.22.0",
-        "@eslint/plugin-kit": "^0.2.7",
-        "@humanfs/node": "^0.16.6",
-        "@humanwhocodes/module-importer": "^1.0.1",
-        "@humanwhocodes/retry": "^0.4.2",
-        "@types/estree": "^1.0.6",
-        "@types/json-schema": "^7.0.15",
-        "ajv": "^6.12.4",
-        "chalk": "^4.0.0",
-        "cross-spawn": "^7.0.6",
-        "debug": "^4.3.2",
-        "escape-string-regexp": "^4.0.0",
-        "eslint-scope": "^8.3.0",
-        "eslint-visitor-keys": "^4.2.0",
-        "espree": "^10.3.0",
-        "esquery": "^1.5.0",
-        "esutils": "^2.0.2",
-        "fast-deep-equal": "^3.1.3",
-        "file-entry-cache": "^8.0.0",
-        "find-up": "^5.0.0",
-        "glob-parent": "^6.0.2",
-        "ignore": "^5.2.0",
-        "imurmurhash": "^0.1.4",
-        "is-glob": "^4.0.0",
-        "json-stable-stringify-without-jsonify": "^1.0.1",
-        "lodash.merge": "^4.6.2",
-        "minimatch": "^3.1.2",
-        "natural-compare": "^1.4.0",
-        "optionator": "^0.9.3"
-      },
-      "bin": {
-        "eslint": "bin/eslint.js"
-      },
-      "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
-      },
-      "funding": {
-        "url": "https://eslint.org/donate"
-      },
-      "peerDependencies": {
-        "jiti": "*"
-      },
-      "peerDependenciesMeta": {
-        "jiti": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/eslint-scope": {
-      "version": "8.3.0",
-      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.3.0.tgz",
-      "integrity": "sha512-pUNxi75F8MJ/GdeKtVLSbYg4ZI34J6C0C7sbL4YOp2exGwen7ZsuBqKzUhXd0qMQ362yET3z+uPwKeg/0C2XCQ==",
-      "dev": true,
-      "license": "BSD-2-Clause",
-      "dependencies": {
-        "esrecurse": "^4.3.0",
-        "estraverse": "^5.2.0"
-      },
-      "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
-      }
-    },
-    "node_modules/eslint-visitor-keys": {
-      "version": "4.2.0",
-      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz",
-      "integrity": "sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
-      }
-    },
-    "node_modules/eslint/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ms": "^2.1.3"
-      },
-      "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/eslint/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/espree": {
-      "version": "10.3.0",
-      "resolved": "https://registry.npmjs.org/espree/-/espree-10.3.0.tgz",
-      "integrity": "sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==",
-      "dev": true,
-      "license": "BSD-2-Clause",
-      "dependencies": {
-        "acorn": "^8.14.0",
-        "acorn-jsx": "^5.3.2",
-        "eslint-visitor-keys": "^4.2.0"
-      },
-      "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
-      }
-    },
-    "node_modules/esprima": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
-      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
-      "dev": true,
-      "license": "BSD-2-Clause",
-      "bin": {
-        "esparse": "bin/esparse.js",
-        "esvalidate": "bin/esvalidate.js"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/esquery": {
-      "version": "1.6.0",
-      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
-      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "estraverse": "^5.1.0"
-      },
-      "engines": {
-        "node": ">=0.10"
-      }
-    },
-    "node_modules/esrecurse": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
-      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
-      "dev": true,
-      "license": "BSD-2-Clause",
-      "dependencies": {
-        "estraverse": "^5.2.0"
-      },
-      "engines": {
-        "node": ">=4.0"
-      }
-    },
-    "node_modules/estraverse": {
-      "version": "5.3.0",
-      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
-      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
-      "dev": true,
-      "license": "BSD-2-Clause",
-      "engines": {
-        "node": ">=4.0"
-      }
-    },
-    "node_modules/esutils": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
-      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
-      "dev": true,
-      "license": "BSD-2-Clause",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/etag": {
-      "version": "1.8.1",
-      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
-      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/execa": {
-      "version": "5.1.1",
-      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
-      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "cross-spawn": "^7.0.3",
-        "get-stream": "^6.0.0",
-        "human-signals": "^2.1.0",
-        "is-stream": "^2.0.0",
-        "merge-stream": "^2.0.0",
-        "npm-run-path": "^4.0.1",
-        "onetime": "^5.1.2",
-        "signal-exit": "^3.0.3",
-        "strip-final-newline": "^2.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sindresorhus/execa?sponsor=1"
-      }
-    },
-    "node_modules/exit": {
-      "version": "0.1.2",
-      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
-      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
-      "dev": true,
-      "engines": {
-        "node": ">= 0.8.0"
-      }
-    },
-    "node_modules/expect": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/expect/-/expect-29.7.0.tgz",
-      "integrity": "sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/expect-utils": "^29.7.0",
-        "jest-get-type": "^29.6.3",
-        "jest-matcher-utils": "^29.7.0",
-        "jest-message-util": "^29.7.0",
-        "jest-util": "^29.7.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/express": {
-      "version": "4.21.2",
-      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
-      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
-      "license": "MIT",
-      "dependencies": {
-        "accepts": "~1.3.8",
-        "array-flatten": "1.1.1",
-        "body-parser": "1.20.3",
-        "content-disposition": "0.5.4",
-        "content-type": "~1.0.4",
-        "cookie": "0.7.1",
-        "cookie-signature": "1.0.6",
-        "debug": "2.6.9",
-        "depd": "2.0.0",
-        "encodeurl": "~2.0.0",
-        "escape-html": "~1.0.3",
-        "etag": "~1.8.1",
-        "finalhandler": "1.3.1",
-        "fresh": "0.5.2",
-        "http-errors": "2.0.0",
-        "merge-descriptors": "1.0.3",
-        "methods": "~1.1.2",
-        "on-finished": "2.4.1",
-        "parseurl": "~1.3.3",
-        "path-to-regexp": "0.1.12",
-        "proxy-addr": "~2.0.7",
-        "qs": "6.13.0",
-        "range-parser": "~1.2.1",
-        "safe-buffer": "5.2.1",
-        "send": "0.19.0",
-        "serve-static": "1.16.2",
-        "setprototypeof": "1.2.0",
-        "statuses": "2.0.1",
-        "type-is": "~1.6.18",
-        "utils-merge": "1.0.1",
-        "vary": "~1.1.2"
-      },
-      "engines": {
-        "node": ">= 0.10.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/express"
-      }
-    },
-    "node_modules/express-mongo-sanitize": {
-      "version": "2.2.0",
-      "resolved": "https://registry.npmjs.org/express-mongo-sanitize/-/express-mongo-sanitize-2.2.0.tgz",
-      "integrity": "sha512-PZBs5nwhD6ek9ZuP+W2xmpvcrHwXZxD5GdieX2dsjPbAbH4azOkrHbycBud2QRU+YQF1CT+pki/lZGedHgo/dQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/express-rate-limit": {
-      "version": "7.5.0",
-      "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-7.5.0.tgz",
-      "integrity": "sha512-eB5zbQh5h+VenMPM3fh+nw1YExi5nMr6HUCR62ELSP11huvxm/Uir1H1QEyTkk5QX6A58pX6NmaTMceKZ0Eodg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 16"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/express-rate-limit"
-      },
-      "peerDependencies": {
-        "express": "^4.11 || 5 || ^5.0.0-beta.1"
-      }
-    },
-    "node_modules/express-validator": {
-      "version": "7.2.1",
-      "resolved": "https://registry.npmjs.org/express-validator/-/express-validator-7.2.1.tgz",
-      "integrity": "sha512-CjNE6aakfpuwGaHQZ3m8ltCG2Qvivd7RHtVMS/6nVxOM7xVGqr4bhflsm4+N5FP5zI7Zxp+Hae+9RE+o8e3ZOQ==",
-      "license": "MIT",
-      "dependencies": {
-        "lodash": "^4.17.21",
-        "validator": "~13.12.0"
-      },
-      "engines": {
-        "node": ">= 8.0.0"
-      }
-    },
-    "node_modules/fast-deep-equal": {
-      "version": "3.1.3",
-      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
-      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
-      "license": "MIT"
-    },
-    "node_modules/fast-fifo": {
-      "version": "1.3.2",
-      "resolved": "https://registry.npmjs.org/fast-fifo/-/fast-fifo-1.3.2.tgz",
-      "integrity": "sha512-/d9sfos4yxzpwkDkuN7k2SqFKtYNmCTzgfEpz82x34IM9/zc8KGxQoXg1liNC/izpRM/MBdt44Nmx41ZWqk+FQ==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/fast-json-stable-stringify": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
-      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/fast-levenshtein": {
-      "version": "2.0.6",
-      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
-      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/fast-safe-stringify": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
-      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/fb-watchman": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
-      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "bser": "2.1.1"
-      }
-    },
-    "node_modules/file-entry-cache": {
-      "version": "8.0.0",
-      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
-      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "flat-cache": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=16.0.0"
-      }
-    },
-    "node_modules/fill-range": {
-      "version": "7.1.1",
-      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
-      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "to-regex-range": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/finalhandler": {
-      "version": "1.3.1",
-      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
-      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
-      "license": "MIT",
-      "dependencies": {
-        "debug": "2.6.9",
-        "encodeurl": "~2.0.0",
-        "escape-html": "~1.0.3",
-        "on-finished": "2.4.1",
-        "parseurl": "~1.3.3",
-        "statuses": "2.0.1",
-        "unpipe": "~1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/find-cache-dir": {
-      "version": "3.3.2",
-      "resolved": "https://registry.npmjs.org/find-cache-dir/-/find-cache-dir-3.3.2.tgz",
-      "integrity": "sha512-wXZV5emFEjrridIgED11OoUKLxiYjAcqot/NJdAkOhlJ+vGzwhOAfcG5OX1jP+S0PcjEn8bdMJv+g2jwQ3Onig==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "commondir": "^1.0.1",
-        "make-dir": "^3.0.2",
-        "pkg-dir": "^4.1.0"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/avajs/find-cache-dir?sponsor=1"
-      }
-    },
-    "node_modules/find-cache-dir/node_modules/make-dir": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
-      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "semver": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/find-cache-dir/node_modules/semver": {
-      "version": "6.3.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
-      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
-      "dev": true,
-      "license": "ISC",
-      "bin": {
-        "semver": "bin/semver.js"
-      }
-    },
-    "node_modules/find-up": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
-      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "locate-path": "^6.0.0",
-        "path-exists": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/flat-cache": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
-      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "flatted": "^3.2.9",
-        "keyv": "^4.5.4"
-      },
-      "engines": {
-        "node": ">=16"
-      }
-    },
-    "node_modules/flatted": {
-      "version": "3.3.3",
-      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
-      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/follow-redirects": {
-      "version": "1.15.9",
-      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
-      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "individual",
-          "url": "https://github.com/sponsors/RubenVerborgh"
-        }
-      ],
-      "license": "MIT",
-      "engines": {
-        "node": ">=4.0"
-      },
-      "peerDependenciesMeta": {
-        "debug": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/fontkit": {
-      "version": "2.0.4",
-      "resolved": "https://registry.npmjs.org/fontkit/-/fontkit-2.0.4.tgz",
-      "integrity": "sha512-syetQadaUEDNdxdugga9CpEYVaQIxOwk7GlwZWWZ19//qW4zE5bknOKeMBDYAASwnpaSHKJITRLMF9m1fp3s6g==",
-      "license": "MIT",
-      "dependencies": {
-        "@swc/helpers": "^0.5.12",
-        "brotli": "^1.3.2",
-        "clone": "^2.1.2",
-        "dfa": "^1.2.0",
-        "fast-deep-equal": "^3.1.3",
-        "restructure": "^3.0.0",
-        "tiny-inflate": "^1.0.3",
-        "unicode-properties": "^1.4.0",
-        "unicode-trie": "^2.0.0"
-      }
-    },
-    "node_modules/form-data": {
-      "version": "4.0.2",
-      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.2.tgz",
-      "integrity": "sha512-hGfm/slu0ZabnNt4oaRZ6uREyfCj6P4fT/n6A1rGV+Z0VdGXjfOhVUpkn6qVQONHGIFwmveGXyDs75+nr6FM8w==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "asynckit": "^0.4.0",
-        "combined-stream": "^1.0.8",
-        "es-set-tostringtag": "^2.1.0",
-        "mime-types": "^2.1.12"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
-    "node_modules/formidable": {
-      "version": "3.5.4",
-      "resolved": "https://registry.npmjs.org/formidable/-/formidable-3.5.4.tgz",
-      "integrity": "sha512-YikH+7CUTOtP44ZTnUhR7Ic2UASBPOqmaRkRKxRbywPTe5VxF7RRCck4af9wutiZ/QKM5nME9Bie2fFaPz5Gug==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@paralleldrive/cuid2": "^2.2.2",
-        "dezalgo": "^1.0.4",
-        "once": "^1.4.0"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "url": "https://ko-fi.com/tunnckoCore/commissions"
-      }
-    },
-    "node_modules/forwarded": {
-      "version": "0.2.0",
-      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
-      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/fresh": {
-      "version": "0.5.2",
-      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
-      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/fs.realpath": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
-      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/fsevents": {
-      "version": "2.3.3",
-      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
-      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
-      "dev": true,
-      "hasInstallScript": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "engines": {
-        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
-      }
-    },
-    "node_modules/function-bind": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
-      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
-      "license": "MIT",
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/gensync": {
-      "version": "1.0.0-beta.2",
-      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
-      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
-    "node_modules/get-caller-file": {
-      "version": "2.0.5",
-      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
-      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
-      "license": "ISC",
-      "engines": {
-        "node": "6.* || 8.* || >= 10.*"
-      }
-    },
-    "node_modules/get-intrinsic": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
-      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
-      "license": "MIT",
-      "dependencies": {
-        "call-bind-apply-helpers": "^1.0.2",
-        "es-define-property": "^1.0.1",
-        "es-errors": "^1.3.0",
-        "es-object-atoms": "^1.1.1",
-        "function-bind": "^1.1.2",
-        "get-proto": "^1.0.1",
-        "gopd": "^1.2.0",
-        "has-symbols": "^1.1.0",
-        "hasown": "^2.0.2",
-        "math-intrinsics": "^1.1.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/get-package-type": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
-      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8.0.0"
-      }
-    },
-    "node_modules/get-proto": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
-      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
-      "license": "MIT",
-      "dependencies": {
-        "dunder-proto": "^1.0.1",
-        "es-object-atoms": "^1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/get-stream": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
-      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/glob": {
-      "version": "7.2.3",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
-      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
-      "deprecated": "Glob versions prior to v9 are no longer supported",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "fs.realpath": "^1.0.0",
-        "inflight": "^1.0.4",
-        "inherits": "2",
-        "minimatch": "^3.1.1",
-        "once": "^1.3.0",
-        "path-is-absolute": "^1.0.0"
-      },
-      "engines": {
-        "node": "*"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/glob-parent": {
-      "version": "6.0.2",
-      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
-      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "is-glob": "^4.0.3"
-      },
-      "engines": {
-        "node": ">=10.13.0"
-      }
-    },
-    "node_modules/globals": {
-      "version": "14.0.0",
-      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
-      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=18"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/gopd": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
-      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/graceful-fs": {
-      "version": "4.2.11",
-      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
-      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/has-flag": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
-      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/has-symbols": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
-      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/has-tostringtag": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
-      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "has-symbols": "^1.0.3"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/hasown": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
-      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
-      "license": "MIT",
-      "dependencies": {
-        "function-bind": "^1.1.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/helmet": {
-      "version": "8.0.0",
-      "resolved": "https://registry.npmjs.org/helmet/-/helmet-8.0.0.tgz",
-      "integrity": "sha512-VyusHLEIIO5mjQPUI1wpOAEu+wl6Q0998jzTxqUYGE45xCIcAxy3MsbEK/yyJUJ3ADeMoB6MornPH6GMWAf+Pw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=18.0.0"
-      }
-    },
-    "node_modules/hpp": {
-      "version": "0.2.3",
-      "resolved": "https://registry.npmjs.org/hpp/-/hpp-0.2.3.tgz",
-      "integrity": "sha512-4zDZypjQcxK/8pfFNR7jaON7zEUpXZxz4viyFmqjb3kWNWAHsLEUmWXcdn25c5l76ISvnD6hbOGO97cXUI3Ryw==",
-      "license": "ISC",
-      "dependencies": {
-        "lodash": "^4.17.12",
-        "type-is": "^1.6.12"
-      },
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/html-escaper": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
-      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/http-errors": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
-      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
-      "license": "MIT",
-      "dependencies": {
-        "depd": "2.0.0",
-        "inherits": "2.0.4",
-        "setprototypeof": "1.2.0",
-        "statuses": "2.0.1",
-        "toidentifier": "1.0.1"
-      },
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/https-proxy-agent": {
-      "version": "7.0.6",
-      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
-      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "agent-base": "^7.1.2",
-        "debug": "4"
-      },
-      "engines": {
-        "node": ">= 14"
-      }
-    },
-    "node_modules/https-proxy-agent/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ms": "^2.1.3"
-      },
-      "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/https-proxy-agent/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/human-signals": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
-      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=10.17.0"
-      }
-    },
-    "node_modules/iconv-lite": {
-      "version": "0.4.24",
-      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
-      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
-      "license": "MIT",
-      "dependencies": {
-        "safer-buffer": ">= 2.1.2 < 3"
-      },
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/ignore": {
-      "version": "5.3.2",
-      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
-      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">= 4"
-      }
-    },
-    "node_modules/ignore-by-default": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
-      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/import-fresh": {
-      "version": "3.3.1",
-      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
-      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "parent-module": "^1.0.0",
-        "resolve-from": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/import-local": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
-      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "pkg-dir": "^4.2.0",
-        "resolve-cwd": "^3.0.0"
-      },
-      "bin": {
-        "import-local-fixture": "fixtures/cli.js"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/imurmurhash": {
-      "version": "0.1.4",
-      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
-      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.8.19"
-      }
-    },
-    "node_modules/inflight": {
-      "version": "1.0.6",
-      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
-      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
-      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "once": "^1.3.0",
-        "wrappy": "1"
-      }
-    },
-    "node_modules/inherits": {
-      "version": "2.0.4",
-      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
-      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
-      "license": "ISC"
-    },
-    "node_modules/ipaddr.js": {
-      "version": "1.9.1",
-      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
-      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.10"
-      }
-    },
-    "node_modules/is-arrayish": {
-      "version": "0.2.1",
-      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
-      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/is-binary-path": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
-      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "binary-extensions": "^2.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/is-core-module": {
-      "version": "2.16.1",
-      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
-      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "hasown": "^2.0.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-extglob": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
-      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/is-fullwidth-code-point": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
-      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/is-generator-fn": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
-      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/is-glob": {
-      "version": "4.0.3",
-      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
-      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "is-extglob": "^2.1.1"
-      },
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/is-number": {
-      "version": "7.0.0",
-      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
-      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.12.0"
-      }
-    },
-    "node_modules/is-stream": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
-      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/isarray": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
-      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
-      "license": "MIT"
-    },
-    "node_modules/isexe": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
-      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/istanbul-lib-coverage": {
-      "version": "3.2.2",
-      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
-      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/istanbul-lib-instrument": {
-      "version": "6.0.3",
-      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-6.0.3.tgz",
-      "integrity": "sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "@babel/core": "^7.23.9",
-        "@babel/parser": "^7.23.9",
-        "@istanbuljs/schema": "^0.1.3",
-        "istanbul-lib-coverage": "^3.2.0",
-        "semver": "^7.5.4"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/istanbul-lib-report": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
-      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "istanbul-lib-coverage": "^3.0.0",
-        "make-dir": "^4.0.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/istanbul-lib-source-maps": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
-      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "debug": "^4.1.1",
-        "istanbul-lib-coverage": "^3.0.0",
-        "source-map": "^0.6.1"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/istanbul-lib-source-maps/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ms": "^2.1.3"
-      },
-      "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/istanbul-lib-source-maps/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/istanbul-reports": {
-      "version": "3.1.7",
-      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.7.tgz",
-      "integrity": "sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "html-escaper": "^2.0.0",
-        "istanbul-lib-report": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/jest": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest/-/jest-29.7.0.tgz",
-      "integrity": "sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/core": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "import-local": "^3.0.2",
-        "jest-cli": "^29.7.0"
-      },
-      "bin": {
-        "jest": "bin/jest.js"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "peerDependencies": {
-        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
-      },
-      "peerDependenciesMeta": {
-        "node-notifier": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/jest-changed-files": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.7.0.tgz",
-      "integrity": "sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "execa": "^5.0.0",
-        "jest-util": "^29.7.0",
-        "p-limit": "^3.1.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-circus": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.7.0.tgz",
-      "integrity": "sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/environment": "^29.7.0",
-        "@jest/expect": "^29.7.0",
-        "@jest/test-result": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "chalk": "^4.0.0",
-        "co": "^4.6.0",
-        "dedent": "^1.0.0",
-        "is-generator-fn": "^2.0.0",
-        "jest-each": "^29.7.0",
-        "jest-matcher-utils": "^29.7.0",
-        "jest-message-util": "^29.7.0",
-        "jest-runtime": "^29.7.0",
-        "jest-snapshot": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "p-limit": "^3.1.0",
-        "pretty-format": "^29.7.0",
-        "pure-rand": "^6.0.0",
-        "slash": "^3.0.0",
-        "stack-utils": "^2.0.3"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-cli": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.7.0.tgz",
-      "integrity": "sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/core": "^29.7.0",
-        "@jest/test-result": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "chalk": "^4.0.0",
-        "create-jest": "^29.7.0",
-        "exit": "^0.1.2",
-        "import-local": "^3.0.2",
-        "jest-config": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "jest-validate": "^29.7.0",
-        "yargs": "^17.3.1"
-      },
-      "bin": {
-        "jest": "bin/jest.js"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "peerDependencies": {
-        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
-      },
-      "peerDependenciesMeta": {
-        "node-notifier": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/jest-config": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.7.0.tgz",
-      "integrity": "sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/core": "^7.11.6",
-        "@jest/test-sequencer": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "babel-jest": "^29.7.0",
-        "chalk": "^4.0.0",
-        "ci-info": "^3.2.0",
-        "deepmerge": "^4.2.2",
-        "glob": "^7.1.3",
-        "graceful-fs": "^4.2.9",
-        "jest-circus": "^29.7.0",
-        "jest-environment-node": "^29.7.0",
-        "jest-get-type": "^29.6.3",
-        "jest-regex-util": "^29.6.3",
-        "jest-resolve": "^29.7.0",
-        "jest-runner": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "jest-validate": "^29.7.0",
-        "micromatch": "^4.0.4",
-        "parse-json": "^5.2.0",
-        "pretty-format": "^29.7.0",
-        "slash": "^3.0.0",
-        "strip-json-comments": "^3.1.1"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "peerDependencies": {
-        "@types/node": "*",
-        "ts-node": ">=9.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@types/node": {
-          "optional": true
-        },
-        "ts-node": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/jest-diff": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.7.0.tgz",
-      "integrity": "sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "chalk": "^4.0.0",
-        "diff-sequences": "^29.6.3",
-        "jest-get-type": "^29.6.3",
-        "pretty-format": "^29.7.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-docblock": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.7.0.tgz",
-      "integrity": "sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "detect-newline": "^3.0.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-each": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.7.0.tgz",
-      "integrity": "sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/types": "^29.6.3",
-        "chalk": "^4.0.0",
-        "jest-get-type": "^29.6.3",
-        "jest-util": "^29.7.0",
-        "pretty-format": "^29.7.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-environment-node": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.7.0.tgz",
-      "integrity": "sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/environment": "^29.7.0",
-        "@jest/fake-timers": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "jest-mock": "^29.7.0",
-        "jest-util": "^29.7.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-get-type": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.6.3.tgz",
-      "integrity": "sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-haste-map": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.7.0.tgz",
-      "integrity": "sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/types": "^29.6.3",
-        "@types/graceful-fs": "^4.1.3",
-        "@types/node": "*",
-        "anymatch": "^3.0.3",
-        "fb-watchman": "^2.0.0",
-        "graceful-fs": "^4.2.9",
-        "jest-regex-util": "^29.6.3",
-        "jest-util": "^29.7.0",
-        "jest-worker": "^29.7.0",
-        "micromatch": "^4.0.4",
-        "walker": "^1.0.8"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "optionalDependencies": {
-        "fsevents": "^2.3.2"
-      }
-    },
-    "node_modules/jest-leak-detector": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.7.0.tgz",
-      "integrity": "sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "jest-get-type": "^29.6.3",
-        "pretty-format": "^29.7.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-matcher-utils": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.7.0.tgz",
-      "integrity": "sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "chalk": "^4.0.0",
-        "jest-diff": "^29.7.0",
-        "jest-get-type": "^29.6.3",
-        "pretty-format": "^29.7.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-message-util": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.7.0.tgz",
-      "integrity": "sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/code-frame": "^7.12.13",
-        "@jest/types": "^29.6.3",
-        "@types/stack-utils": "^2.0.0",
-        "chalk": "^4.0.0",
-        "graceful-fs": "^4.2.9",
-        "micromatch": "^4.0.4",
-        "pretty-format": "^29.7.0",
-        "slash": "^3.0.0",
-        "stack-utils": "^2.0.3"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-mock": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.7.0.tgz",
-      "integrity": "sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "jest-util": "^29.7.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-pnp-resolver": {
-      "version": "1.2.3",
-      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
-      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      },
-      "peerDependencies": {
-        "jest-resolve": "*"
-      },
-      "peerDependenciesMeta": {
-        "jest-resolve": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/jest-regex-util": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.6.3.tgz",
-      "integrity": "sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-resolve": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.7.0.tgz",
-      "integrity": "sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "chalk": "^4.0.0",
-        "graceful-fs": "^4.2.9",
-        "jest-haste-map": "^29.7.0",
-        "jest-pnp-resolver": "^1.2.2",
-        "jest-util": "^29.7.0",
-        "jest-validate": "^29.7.0",
-        "resolve": "^1.20.0",
-        "resolve.exports": "^2.0.0",
-        "slash": "^3.0.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-resolve-dependencies": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.7.0.tgz",
-      "integrity": "sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "jest-regex-util": "^29.6.3",
-        "jest-snapshot": "^29.7.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-runner": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.7.0.tgz",
-      "integrity": "sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/console": "^29.7.0",
-        "@jest/environment": "^29.7.0",
-        "@jest/test-result": "^29.7.0",
-        "@jest/transform": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "chalk": "^4.0.0",
-        "emittery": "^0.13.1",
-        "graceful-fs": "^4.2.9",
-        "jest-docblock": "^29.7.0",
-        "jest-environment-node": "^29.7.0",
-        "jest-haste-map": "^29.7.0",
-        "jest-leak-detector": "^29.7.0",
-        "jest-message-util": "^29.7.0",
-        "jest-resolve": "^29.7.0",
-        "jest-runtime": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "jest-watcher": "^29.7.0",
-        "jest-worker": "^29.7.0",
-        "p-limit": "^3.1.0",
-        "source-map-support": "0.5.13"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-runtime": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.7.0.tgz",
-      "integrity": "sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/environment": "^29.7.0",
-        "@jest/fake-timers": "^29.7.0",
-        "@jest/globals": "^29.7.0",
-        "@jest/source-map": "^29.6.3",
-        "@jest/test-result": "^29.7.0",
-        "@jest/transform": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "chalk": "^4.0.0",
-        "cjs-module-lexer": "^1.0.0",
-        "collect-v8-coverage": "^1.0.0",
-        "glob": "^7.1.3",
-        "graceful-fs": "^4.2.9",
-        "jest-haste-map": "^29.7.0",
-        "jest-message-util": "^29.7.0",
-        "jest-mock": "^29.7.0",
-        "jest-regex-util": "^29.6.3",
-        "jest-resolve": "^29.7.0",
-        "jest-snapshot": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "slash": "^3.0.0",
-        "strip-bom": "^4.0.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-snapshot": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.7.0.tgz",
-      "integrity": "sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/core": "^7.11.6",
-        "@babel/generator": "^7.7.2",
-        "@babel/plugin-syntax-jsx": "^7.7.2",
-        "@babel/plugin-syntax-typescript": "^7.7.2",
-        "@babel/types": "^7.3.3",
-        "@jest/expect-utils": "^29.7.0",
-        "@jest/transform": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "babel-preset-current-node-syntax": "^1.0.0",
-        "chalk": "^4.0.0",
-        "expect": "^29.7.0",
-        "graceful-fs": "^4.2.9",
-        "jest-diff": "^29.7.0",
-        "jest-get-type": "^29.6.3",
-        "jest-matcher-utils": "^29.7.0",
-        "jest-message-util": "^29.7.0",
-        "jest-util": "^29.7.0",
-        "natural-compare": "^1.4.0",
-        "pretty-format": "^29.7.0",
-        "semver": "^7.5.3"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-util": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.7.0.tgz",
-      "integrity": "sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "chalk": "^4.0.0",
-        "ci-info": "^3.2.0",
-        "graceful-fs": "^4.2.9",
-        "picomatch": "^2.2.3"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-validate": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.7.0.tgz",
-      "integrity": "sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/types": "^29.6.3",
-        "camelcase": "^6.2.0",
-        "chalk": "^4.0.0",
-        "jest-get-type": "^29.6.3",
-        "leven": "^3.1.0",
-        "pretty-format": "^29.7.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-validate/node_modules/camelcase": {
-      "version": "6.3.0",
-      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
-      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/jest-watcher": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.7.0.tgz",
-      "integrity": "sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/test-result": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "ansi-escapes": "^4.2.1",
-        "chalk": "^4.0.0",
-        "emittery": "^0.13.1",
-        "jest-util": "^29.7.0",
-        "string-length": "^4.0.1"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-worker": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.7.0.tgz",
-      "integrity": "sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/node": "*",
-        "jest-util": "^29.7.0",
-        "merge-stream": "^2.0.0",
-        "supports-color": "^8.0.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-worker/node_modules/supports-color": {
-      "version": "8.1.1",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
-      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "has-flag": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/supports-color?sponsor=1"
-      }
-    },
-    "node_modules/jpeg-exif": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/jpeg-exif/-/jpeg-exif-1.1.4.tgz",
-      "integrity": "sha512-a+bKEcCjtuW5WTdgeXFzswSrdqi0jk4XlEtZlx5A94wCoBpFjfFTbo/Tra5SpNCl/YFZPvcV1dJc+TAYeg6ROQ==",
-      "license": "MIT"
-    },
-    "node_modules/js-tokens": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
-      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/js-yaml": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
-      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "argparse": "^2.0.1"
-      },
-      "bin": {
-        "js-yaml": "bin/js-yaml.js"
-      }
-    },
-    "node_modules/jsesc": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
-      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
-      "dev": true,
-      "license": "MIT",
-      "bin": {
-        "jsesc": "bin/jsesc"
-      },
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/json-buffer": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
-      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/json-parse-even-better-errors": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
-      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/json-schema-traverse": {
-      "version": "0.4.1",
-      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
-      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/json-stable-stringify-without-jsonify": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
-      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/json5": {
-      "version": "2.2.3",
-      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
-      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
-      "dev": true,
-      "license": "MIT",
-      "bin": {
-        "json5": "lib/cli.js"
-      },
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/jsonwebtoken": {
-      "version": "9.0.2",
-      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
-      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
-      "license": "MIT",
-      "dependencies": {
-        "jws": "^3.2.2",
-        "lodash.includes": "^4.3.0",
-        "lodash.isboolean": "^3.0.3",
-        "lodash.isinteger": "^4.0.4",
-        "lodash.isnumber": "^3.0.3",
-        "lodash.isplainobject": "^4.0.6",
-        "lodash.isstring": "^4.0.1",
-        "lodash.once": "^4.0.0",
-        "ms": "^2.1.1",
-        "semver": "^7.5.4"
-      },
-      "engines": {
-        "node": ">=12",
-        "npm": ">=6"
-      }
-    },
-    "node_modules/jsonwebtoken/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "license": "MIT"
-    },
-    "node_modules/jwa": {
-      "version": "1.4.1",
-      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
-      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
-      "license": "MIT",
-      "dependencies": {
-        "buffer-equal-constant-time": "1.0.1",
-        "ecdsa-sig-formatter": "1.0.11",
-        "safe-buffer": "^5.0.1"
-      }
-    },
-    "node_modules/jws": {
-      "version": "3.2.2",
-      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
-      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
-      "license": "MIT",
-      "dependencies": {
-        "jwa": "^1.4.1",
-        "safe-buffer": "^5.0.1"
-      }
-    },
-    "node_modules/kareem": {
-      "version": "2.6.3",
-      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.6.3.tgz",
-      "integrity": "sha512-C3iHfuGUXK2u8/ipq9LfjFfXFxAZMQJJq7vLS45r3D9Y2xQ/m4S8zaR4zMLFWh9AsNPXmcFfUDhTEO8UIC/V6Q==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=12.0.0"
-      }
-    },
-    "node_modules/keyv": {
-      "version": "4.5.4",
-      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
-      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "json-buffer": "3.0.1"
-      }
-    },
-    "node_modules/kleur": {
-      "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
-      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/leven": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
-      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/levn": {
-      "version": "0.4.1",
-      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
-      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "prelude-ls": "^1.2.1",
-        "type-check": "~0.4.0"
-      },
-      "engines": {
-        "node": ">= 0.8.0"
-      }
-    },
-    "node_modules/linebreak": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/linebreak/-/linebreak-1.1.0.tgz",
-      "integrity": "sha512-MHp03UImeVhB7XZtjd0E4n6+3xr5Dq/9xI/5FptGk5FrbDR3zagPa2DS6U8ks/3HjbKWG9Q1M2ufOzxV2qLYSQ==",
-      "license": "MIT",
-      "dependencies": {
-        "base64-js": "0.0.8",
-        "unicode-trie": "^2.0.0"
-      }
-    },
-    "node_modules/linebreak/node_modules/base64-js": {
-      "version": "0.0.8",
-      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-0.0.8.tgz",
-      "integrity": "sha512-3XSA2cR/h/73EzlXXdU6YNycmYI7+kicTxks4eJg2g39biHR84slg2+des+p7iHYhbRg/udIS4TD53WabcOUkw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/lines-and-columns": {
-      "version": "1.2.4",
-      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
-      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/locate-path": {
-      "version": "6.0.0",
-      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
-      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "p-locate": "^5.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/lodash": {
-      "version": "4.17.21",
-      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
-      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.includes": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
-      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.isboolean": {
-      "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
-      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.isinteger": {
-      "version": "4.0.4",
-      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
-      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.isnumber": {
-      "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
-      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.isplainobject": {
-      "version": "4.0.6",
-      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
-      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.isstring": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
-      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
-      "license": "MIT"
-    },
-    "node_modules/lodash.merge": {
-      "version": "4.6.2",
-      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
-      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/lodash.once": {
-      "version": "4.1.1",
-      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
-      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
-      "license": "MIT"
-    },
-    "node_modules/lru-cache": {
-      "version": "5.1.1",
-      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
-      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "yallist": "^3.0.2"
-      }
-    },
-    "node_modules/make-dir": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
-      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "semver": "^7.5.3"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/makeerror": {
-      "version": "1.0.12",
-      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
-      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "tmpl": "1.0.5"
-      }
-    },
-    "node_modules/math-intrinsics": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
-      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/media-typer": {
-      "version": "0.3.0",
-      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
-      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/memory-pager": {
-      "version": "1.5.0",
-      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
-      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
-      "license": "MIT"
-    },
-    "node_modules/merge-descriptors": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
-      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
-      "license": "MIT",
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/merge-stream": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
-      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/methods": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
-      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/micromatch": {
-      "version": "4.0.8",
-      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
-      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "braces": "^3.0.3",
-        "picomatch": "^2.3.1"
-      },
-      "engines": {
-        "node": ">=8.6"
-      }
-    },
-    "node_modules/mime": {
-      "version": "1.6.0",
-      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
-      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
-      "license": "MIT",
-      "bin": {
-        "mime": "cli.js"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/mime-db": {
-      "version": "1.53.0",
-      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.53.0.tgz",
-      "integrity": "sha512-oHlN/w+3MQ3rba9rqFr6V/ypF10LSkdwUysQL7GkXoTgIWeV+tcXGA852TBxH+gsh8UWoyhR1hKcoMJTuWflpg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/mime-types": {
-      "version": "2.1.35",
-      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
-      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
-      "license": "MIT",
-      "dependencies": {
-        "mime-db": "1.52.0"
-      },
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/mime-types/node_modules/mime-db": {
-      "version": "1.52.0",
-      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
-      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/mimic-fn": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
-      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "brace-expansion": "^1.1.7"
-      },
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/minimist": {
-      "version": "1.2.8",
-      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
-      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
-      "license": "MIT",
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/mongodb": {
-      "version": "6.14.2",
-      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-6.14.2.tgz",
-      "integrity": "sha512-kMEHNo0F3P6QKDq17zcDuPeaywK/YaJVCEQRzPF3TOM/Bl9MFg64YE5Tu7ifj37qZJMhwU1tl2Ioivws5gRG5Q==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@mongodb-js/saslprep": "^1.1.9",
-        "bson": "^6.10.3",
-        "mongodb-connection-string-url": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=16.20.1"
-      },
-      "peerDependencies": {
-        "@aws-sdk/credential-providers": "^3.188.0",
-        "@mongodb-js/zstd": "^1.1.0 || ^2.0.0",
-        "gcp-metadata": "^5.2.0",
-        "kerberos": "^2.0.1",
-        "mongodb-client-encryption": ">=6.0.0 <7",
-        "snappy": "^7.2.2",
-        "socks": "^2.7.1"
-      },
-      "peerDependenciesMeta": {
-        "@aws-sdk/credential-providers": {
-          "optional": true
-        },
-        "@mongodb-js/zstd": {
-          "optional": true
-        },
-        "gcp-metadata": {
-          "optional": true
-        },
-        "kerberos": {
-          "optional": true
-        },
-        "mongodb-client-encryption": {
-          "optional": true
-        },
-        "snappy": {
-          "optional": true
-        },
-        "socks": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/mongodb-connection-string-url": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-3.0.2.tgz",
-      "integrity": "sha512-rMO7CGo/9BFwyZABcKAWL8UJwH/Kc2x0g72uhDWzG48URRax5TCIcJ7Rc3RZqffZzO/Gwff/jyKwCU9TN8gehA==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@types/whatwg-url": "^11.0.2",
-        "whatwg-url": "^14.1.0 || ^13.0.0"
-      }
-    },
-    "node_modules/mongodb-memory-server": {
-      "version": "10.1.4",
-      "resolved": "https://registry.npmjs.org/mongodb-memory-server/-/mongodb-memory-server-10.1.4.tgz",
-      "integrity": "sha512-+oKQ/kc3CX+816oPFRtaF0CN4vNcGKNjpOQe4bHo/21A3pMD+lC7Xz1EX5HP7siCX4iCpVchDMmCOFXVQSGkUg==",
-      "dev": true,
-      "hasInstallScript": true,
-      "license": "MIT",
-      "dependencies": {
-        "mongodb-memory-server-core": "10.1.4",
-        "tslib": "^2.7.0"
-      },
-      "engines": {
-        "node": ">=16.20.1"
-      }
-    },
-    "node_modules/mongodb-memory-server-core": {
-      "version": "10.1.4",
-      "resolved": "https://registry.npmjs.org/mongodb-memory-server-core/-/mongodb-memory-server-core-10.1.4.tgz",
-      "integrity": "sha512-o8fgY7ZalEd8pGps43fFPr/hkQu1L8i6HFEGbsTfA2zDOW0TopgpswaBCqDr0qD7ptibyPfB5DmC+UlIxbThzA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "async-mutex": "^0.5.0",
-        "camelcase": "^6.3.0",
-        "debug": "^4.3.7",
-        "find-cache-dir": "^3.3.2",
-        "follow-redirects": "^1.15.9",
-        "https-proxy-agent": "^7.0.5",
-        "mongodb": "^6.9.0",
-        "new-find-package-json": "^2.0.0",
-        "semver": "^7.6.3",
-        "tar-stream": "^3.1.7",
-        "tslib": "^2.7.0",
-        "yauzl": "^3.1.3"
-      },
-      "engines": {
-        "node": ">=16.20.1"
-      }
-    },
-    "node_modules/mongodb-memory-server-core/node_modules/camelcase": {
-      "version": "6.3.0",
-      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
-      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/mongodb-memory-server-core/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ms": "^2.1.3"
-      },
-      "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/mongodb-memory-server-core/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/mongoose": {
-      "version": "8.12.1",
-      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-8.12.1.tgz",
-      "integrity": "sha512-UW22y8QFVYmrb36hm8cGncfn4ARc/XsYWQwRTaj0gxtQk1rDuhzDO1eBantS+hTTatfAIS96LlRCJrcNHvW5+Q==",
-      "license": "MIT",
-      "dependencies": {
-        "bson": "^6.10.3",
-        "kareem": "2.6.3",
-        "mongodb": "~6.14.0",
-        "mpath": "0.9.0",
-        "mquery": "5.0.0",
-        "ms": "2.1.3",
-        "sift": "17.1.3"
-      },
-      "engines": {
-        "node": ">=16.20.1"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mongoose"
-      }
-    },
-    "node_modules/mongoose-aggregate-paginate-v2": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/mongoose-aggregate-paginate-v2/-/mongoose-aggregate-paginate-v2-1.1.4.tgz",
-      "integrity": "sha512-CdQIar3wlS7g0H6JjSJIZzvzz05vFc+Xy9SosJmj46l3xIomgl3ZjDn/n4vDpEei9RBawgUk5zGTIP6fMKdMdA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=4.0.0"
-      }
-    },
-    "node_modules/mongoose-lean-virtuals": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/mongoose-lean-virtuals/-/mongoose-lean-virtuals-1.1.0.tgz",
-      "integrity": "sha512-QCuAvPUTGzUMjbvWqhA+3hXX7hP0PPJOW+hm50KN3gTPM89Uan/wrFyCfvsqW9giAGemtIFsBrZwiogmu2gxmA==",
-      "license": "Apache 2.0",
-      "dependencies": {
-        "mpath": "^0.8.4"
-      },
-      "engines": {
-        "node": ">=16.20.1"
-      },
-      "peerDependencies": {
-        "mongoose": ">=5.11.10"
-      }
-    },
-    "node_modules/mongoose-lean-virtuals/node_modules/mpath": {
-      "version": "0.8.4",
-      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.8.4.tgz",
-      "integrity": "sha512-DTxNZomBcTWlrMW76jy1wvV37X/cNNxPW1y2Jzd4DZkAaC5ZGsm8bfGfNOthcDuRJujXLqiuS6o3Tpy0JEoh7g==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=4.0.0"
-      }
-    },
-    "node_modules/mongoose-paginate-v2": {
-      "version": "1.9.0",
-      "resolved": "https://registry.npmjs.org/mongoose-paginate-v2/-/mongoose-paginate-v2-1.9.0.tgz",
-      "integrity": "sha512-al4rsqadzg4TXcJVWI5WSaNUuSpzdtcPbabwXxbA7Euh6swuLkrrHrBmlGI6d3I4RMStdRAoD7k6wvB/x5zvaw==",
-      "license": "MIT",
-      "dependencies": {
-        "mongoose-lean-virtuals": "^1.1.0"
-      },
-      "engines": {
-        "node": ">=4.0.0"
-      }
-    },
-    "node_modules/mongoose/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "license": "MIT"
-    },
-    "node_modules/morgan": {
-      "version": "1.10.0",
-      "resolved": "https://registry.npmjs.org/morgan/-/morgan-1.10.0.tgz",
-      "integrity": "sha512-AbegBVI4sh6El+1gNwvD5YIck7nSA36weD7xvIxG4in80j/UoK8AEGaWnnz8v1GxonMCltmlNs5ZKbGvl9b1XQ==",
-      "license": "MIT",
-      "dependencies": {
-        "basic-auth": "~2.0.1",
-        "debug": "2.6.9",
-        "depd": "~2.0.0",
-        "on-finished": "~2.3.0",
-        "on-headers": "~1.0.2"
-      },
-      "engines": {
-        "node": ">= 0.8.0"
-      }
-    },
-    "node_modules/morgan/node_modules/on-finished": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
-      "integrity": "sha512-ikqdkGAAyf/X/gPhXGvfgAytDZtDbr+bkNUJ0N9h5MI/dmdgCs3l6hoHrcUv41sRKew3jIwrp4qQDXiK99Utww==",
-      "license": "MIT",
-      "dependencies": {
-        "ee-first": "1.1.1"
-      },
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/mpath": {
-      "version": "0.9.0",
-      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
-      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=4.0.0"
-      }
-    },
-    "node_modules/mquery": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/mquery/-/mquery-5.0.0.tgz",
-      "integrity": "sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==",
-      "license": "MIT",
-      "dependencies": {
-        "debug": "4.x"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      }
-    },
-    "node_modules/mquery/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
-      "license": "MIT",
-      "dependencies": {
-        "ms": "^2.1.3"
-      },
-      "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/mquery/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "license": "MIT"
-    },
-    "node_modules/ms": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
-      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
-      "license": "MIT"
-    },
-    "node_modules/multer": {
-      "version": "1.4.5-lts.2",
-      "resolved": "https://registry.npmjs.org/multer/-/multer-1.4.5-lts.2.tgz",
-      "integrity": "sha512-VzGiVigcG9zUAoCNU+xShztrlr1auZOlurXynNvO9GiWD1/mTBbUljOKY+qMeazBqXgRnjzeEgJI/wyjJUHg9A==",
-      "license": "MIT",
-      "dependencies": {
-        "append-field": "^1.0.0",
-        "busboy": "^1.0.0",
-        "concat-stream": "^1.5.2",
-        "mkdirp": "^0.5.4",
-        "object-assign": "^4.1.1",
-        "type-is": "^1.6.4",
-        "xtend": "^4.0.0"
-      },
-      "engines": {
-        "node": ">= 6.0.0"
-      }
-    },
-    "node_modules/multer/node_modules/mkdirp": {
-      "version": "0.5.6",
-      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
-      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
-      "license": "MIT",
-      "dependencies": {
-        "minimist": "^1.2.6"
-      },
-      "bin": {
-        "mkdirp": "bin/cmd.js"
-      }
-    },
-    "node_modules/natural-compare": {
-      "version": "1.4.0",
-      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
-      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/negotiator": {
-      "version": "0.6.4",
-      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.4.tgz",
-      "integrity": "sha512-myRT3DiWPHqho5PrJaIRyaMv2kgYf0mUVgBNOYMuCH5Ki1yEiQaf/ZJuQ62nvpc44wL5WDbTX7yGJi1Neevw8w==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/new-find-package-json": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/new-find-package-json/-/new-find-package-json-2.0.0.tgz",
-      "integrity": "sha512-lDcBsjBSMlj3LXH2v/FW3txlh2pYTjmbOXPYJD93HI5EwuLzI11tdHSIpUMmfq/IOsldj4Ps8M8flhm+pCK4Ew==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "debug": "^4.3.4"
-      },
-      "engines": {
-        "node": ">=12.22.0"
-      }
-    },
-    "node_modules/new-find-package-json/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ms": "^2.1.3"
-      },
-      "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/new-find-package-json/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/node-int64": {
-      "version": "0.4.0",
-      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
-      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/node-releases": {
-      "version": "2.0.19",
-      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
-      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/nodemon": {
-      "version": "3.1.9",
-      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.9.tgz",
-      "integrity": "sha512-hdr1oIb2p6ZSxu3PB2JWWYS7ZQ0qvaZsc3hK8DR8f02kRzc8rjYmxAIvdz+aYC+8F2IjNaB7HMcSDg8nQpJxyg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "chokidar": "^3.5.2",
-        "debug": "^4",
-        "ignore-by-default": "^1.0.1",
-        "minimatch": "^3.1.2",
-        "pstree.remy": "^1.1.8",
-        "semver": "^7.5.3",
-        "simple-update-notifier": "^2.0.0",
-        "supports-color": "^5.5.0",
-        "touch": "^3.1.0",
-        "undefsafe": "^2.0.5"
-      },
-      "bin": {
-        "nodemon": "bin/nodemon.js"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/nodemon"
-      }
-    },
-    "node_modules/nodemon/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ms": "^2.1.3"
-      },
-      "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/nodemon/node_modules/has-flag": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
-      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/nodemon/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/nodemon/node_modules/supports-color": {
-      "version": "5.5.0",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
-      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "has-flag": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/normalize-path": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
-      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/npm-run-path": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
-      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "path-key": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/object-assign": {
-      "version": "4.1.1",
-      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
-      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/object-inspect": {
-      "version": "1.13.4",
-      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
-      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/on-finished": {
-      "version": "2.4.1",
-      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
-      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
-      "license": "MIT",
-      "dependencies": {
-        "ee-first": "1.1.1"
-      },
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/on-headers": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
-      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/once": {
-      "version": "1.4.0",
-      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
-      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "wrappy": "1"
-      }
-    },
-    "node_modules/onetime": {
-      "version": "5.1.2",
-      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
-      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "mimic-fn": "^2.1.0"
-      },
-      "engines": {
-        "node": ">=6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/optionator": {
-      "version": "0.9.4",
-      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
-      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "deep-is": "^0.1.3",
-        "fast-levenshtein": "^2.0.6",
-        "levn": "^0.4.1",
-        "prelude-ls": "^1.2.1",
-        "type-check": "^0.4.0",
-        "word-wrap": "^1.2.5"
-      },
-      "engines": {
-        "node": ">= 0.8.0"
-      }
-    },
-    "node_modules/p-limit": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
-      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "yocto-queue": "^0.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/p-locate": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
-      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "p-limit": "^3.0.2"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/p-try": {
-      "version": "2.2.0",
-      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
-      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/pako": {
-      "version": "0.2.9",
-      "resolved": "https://registry.npmjs.org/pako/-/pako-0.2.9.tgz",
-      "integrity": "sha512-NUcwaKxUxWrZLpDG+z/xZaCgQITkA/Dv4V/T6bw7VON6l1Xz/VnrBqrYjZQ12TamKHzITTfOEIYUj48y2KXImA==",
-      "license": "MIT"
-    },
-    "node_modules/parent-module": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
-      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "callsites": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/parse-json": {
-      "version": "5.2.0",
-      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
-      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/code-frame": "^7.0.0",
-        "error-ex": "^1.3.1",
-        "json-parse-even-better-errors": "^2.3.0",
-        "lines-and-columns": "^1.1.6"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/parseurl": {
-      "version": "1.3.3",
-      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
-      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/path-exists": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
-      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/path-is-absolute": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
-      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/path-key": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
-      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/path-parse": {
-      "version": "1.0.7",
-      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
-      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/path-to-regexp": {
-      "version": "0.1.12",
-      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
-      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
-      "license": "MIT"
-    },
-    "node_modules/pdfkit": {
-      "version": "0.17.0",
-      "resolved": "https://registry.npmjs.org/pdfkit/-/pdfkit-0.17.0.tgz",
-      "integrity": "sha512-XRb2Bwtl+oIo+TOf4HOlbqIn6NBiYk8Um4FsfKXrgX9uZQILTbXDlbf0DEZQJxFqognrwIS5QFn5PsOxU8eLMA==",
-      "license": "MIT",
-      "dependencies": {
-        "crypto-js": "^4.2.0",
-        "fontkit": "^2.0.4",
-        "jpeg-exif": "^1.1.4",
-        "linebreak": "^1.1.0",
-        "png-js": "^1.0.0"
-      }
-    },
-    "node_modules/pend": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/pend/-/pend-1.2.0.tgz",
-      "integrity": "sha512-F3asv42UuXchdzt+xXqfW1OGlVBe+mxa2mqI0pg5yAHZPvFmY3Y6drSf/GQ1A86WgWEN9Kzh/WrgKa6iGcHXLg==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/picocolors": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
-      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/picomatch": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
-      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8.6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/jonschlinkert"
-      }
-    },
-    "node_modules/pirates": {
-      "version": "4.0.6",
-      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
-      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">= 6"
-      }
-    },
-    "node_modules/pkg-dir": {
-      "version": "4.2.0",
-      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
-      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "find-up": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/pkg-dir/node_modules/find-up": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
-      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "locate-path": "^5.0.0",
-        "path-exists": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/pkg-dir/node_modules/locate-path": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
-      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "p-locate": "^4.1.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/pkg-dir/node_modules/p-limit": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
-      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "p-try": "^2.0.0"
-      },
-      "engines": {
-        "node": ">=6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/pkg-dir/node_modules/p-locate": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
-      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "p-limit": "^2.2.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/png-js": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/png-js/-/png-js-1.0.0.tgz",
-      "integrity": "sha512-k+YsbhpA9e+EFfKjTCH3VW6aoKlyNYI6NYdTfDL4CIvFnvsuO84ttonmZE7rc+v23SLTH8XX+5w/Ak9v0xGY4g=="
-    },
-    "node_modules/pngjs": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/pngjs/-/pngjs-5.0.0.tgz",
-      "integrity": "sha512-40QW5YalBNfQo5yRYmiw7Yz6TKKVr3h6970B2YE+3fQpsWcrbj1PzJgxeJ19DRQjhMbKPIuMY8rFaXc8moolVw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=10.13.0"
-      }
-    },
-    "node_modules/prelude-ls": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
-      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.8.0"
-      }
-    },
-    "node_modules/pretty-format": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
-      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/schemas": "^29.6.3",
-        "ansi-styles": "^5.0.0",
-        "react-is": "^18.0.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/pretty-format/node_modules/ansi-styles": {
-      "version": "5.2.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
-      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/process-nextick-args": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
-      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
-      "license": "MIT"
-    },
-    "node_modules/prompts": {
-      "version": "2.4.2",
-      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
-      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "kleur": "^3.0.3",
-        "sisteransi": "^1.0.5"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
-    "node_modules/proxy-addr": {
-      "version": "2.0.7",
-      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
-      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
-      "license": "MIT",
-      "dependencies": {
-        "forwarded": "0.2.0",
-        "ipaddr.js": "1.9.1"
-      },
-      "engines": {
-        "node": ">= 0.10"
-      }
-    },
-    "node_modules/pstree.remy": {
-      "version": "1.1.8",
-      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
-      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/punycode": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
-      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/pure-rand": {
-      "version": "6.1.0",
-      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.1.0.tgz",
-      "integrity": "sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "individual",
-          "url": "https://github.com/sponsors/dubzzz"
-        },
-        {
-          "type": "opencollective",
-          "url": "https://opencollective.com/fast-check"
-        }
-      ],
-      "license": "MIT"
-    },
-    "node_modules/qrcode": {
-      "version": "1.5.4",
-      "resolved": "https://registry.npmjs.org/qrcode/-/qrcode-1.5.4.tgz",
-      "integrity": "sha512-1ca71Zgiu6ORjHqFBDpnSMTR2ReToX4l1Au1VFLyVeBTFavzQnv5JxMFr3ukHVKpSrSA2MCk0lNJSykjUfz7Zg==",
-      "license": "MIT",
-      "dependencies": {
-        "dijkstrajs": "^1.0.1",
-        "pngjs": "^5.0.0",
-        "yargs": "^15.3.1"
-      },
-      "bin": {
-        "qrcode": "bin/qrcode"
-      },
-      "engines": {
-        "node": ">=10.13.0"
-      }
-    },
-    "node_modules/qrcode/node_modules/cliui": {
-      "version": "6.0.0",
-      "resolved": "https://registry.npmjs.org/cliui/-/cliui-6.0.0.tgz",
-      "integrity": "sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==",
-      "license": "ISC",
-      "dependencies": {
-        "string-width": "^4.2.0",
-        "strip-ansi": "^6.0.0",
-        "wrap-ansi": "^6.2.0"
-      }
-    },
-    "node_modules/qrcode/node_modules/find-up": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
-      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
-      "license": "MIT",
-      "dependencies": {
-        "locate-path": "^5.0.0",
-        "path-exists": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/qrcode/node_modules/locate-path": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
-      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
-      "license": "MIT",
-      "dependencies": {
-        "p-locate": "^4.1.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/qrcode/node_modules/p-limit": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
-      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
-      "license": "MIT",
-      "dependencies": {
-        "p-try": "^2.0.0"
-      },
-      "engines": {
-        "node": ">=6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/qrcode/node_modules/p-locate": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
-      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
-      "license": "MIT",
-      "dependencies": {
-        "p-limit": "^2.2.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/qrcode/node_modules/wrap-ansi": {
-      "version": "6.2.0",
-      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
-      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.0.0",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/qrcode/node_modules/y18n": {
-      "version": "4.0.3",
-      "resolved": "https://registry.npmjs.org/y18n/-/y18n-4.0.3.tgz",
-      "integrity": "sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ==",
-      "license": "ISC"
-    },
-    "node_modules/qrcode/node_modules/yargs": {
-      "version": "15.4.1",
-      "resolved": "https://registry.npmjs.org/yargs/-/yargs-15.4.1.tgz",
-      "integrity": "sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==",
-      "license": "MIT",
-      "dependencies": {
-        "cliui": "^6.0.0",
-        "decamelize": "^1.2.0",
-        "find-up": "^4.1.0",
-        "get-caller-file": "^2.0.1",
-        "require-directory": "^2.1.1",
-        "require-main-filename": "^2.0.0",
-        "set-blocking": "^2.0.0",
-        "string-width": "^4.2.0",
-        "which-module": "^2.0.0",
-        "y18n": "^4.0.0",
-        "yargs-parser": "^18.1.2"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/qrcode/node_modules/yargs-parser": {
-      "version": "18.1.3",
-      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-18.1.3.tgz",
-      "integrity": "sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==",
-      "license": "ISC",
-      "dependencies": {
-        "camelcase": "^5.0.0",
-        "decamelize": "^1.2.0"
-      },
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/qs": {
-      "version": "6.13.0",
-      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
-      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "side-channel": "^1.0.6"
-      },
-      "engines": {
-        "node": ">=0.6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/range-parser": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
-      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.6"
-      }
-    },
-    "node_modules/raw-body": {
-      "version": "2.5.2",
-      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
-      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
-      "license": "MIT",
-      "dependencies": {
-        "bytes": "3.1.2",
-        "http-errors": "2.0.0",
-        "iconv-lite": "0.4.24",
-        "unpipe": "1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/react-is": {
-      "version": "18.3.1",
-      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
-      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/readdirp": {
-      "version": "3.6.0",
-      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
-      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "picomatch": "^2.2.1"
-      },
-      "engines": {
-        "node": ">=8.10.0"
-      }
-    },
-    "node_modules/require-directory": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
-      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/require-main-filename": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/require-main-filename/-/require-main-filename-2.0.0.tgz",
-      "integrity": "sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==",
-      "license": "ISC"
-    },
-    "node_modules/resolve": {
-      "version": "1.22.10",
-      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
-      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "is-core-module": "^2.16.0",
-        "path-parse": "^1.0.7",
-        "supports-preserve-symlinks-flag": "^1.0.0"
-      },
-      "bin": {
-        "resolve": "bin/resolve"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/resolve-cwd": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
-      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "resolve-from": "^5.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/resolve-cwd/node_modules/resolve-from": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
-      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/resolve-from": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
-      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/resolve.exports": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.3.tgz",
-      "integrity": "sha512-OcXjMsGdhL4XnbShKpAcSqPMzQoYkYyhbEaeSko47MjRP9NfEQMhZkXL1DoFlt9LWQn4YttrdnV6X2OiyzBi+A==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/restructure": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/restructure/-/restructure-3.0.2.tgz",
-      "integrity": "sha512-gSfoiOEA0VPE6Tukkrr7I0RBdE0s7H1eFCDBk05l1KIQT1UIKNc5JZy6jdyW6eYH3aR3g5b3PuL77rq0hvwtAw==",
-      "license": "MIT"
-    },
-    "node_modules/safe-buffer": {
-      "version": "5.2.1",
-      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
-      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "MIT"
-    },
-    "node_modules/safer-buffer": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
-      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
-      "license": "MIT"
-    },
-    "node_modules/semver": {
-      "version": "7.7.1",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
-      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
-      "license": "ISC",
-      "bin": {
-        "semver": "bin/semver.js"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/send": {
-      "version": "0.19.0",
-      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
-      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
-      "license": "MIT",
-      "dependencies": {
-        "debug": "2.6.9",
-        "depd": "2.0.0",
-        "destroy": "1.2.0",
-        "encodeurl": "~1.0.2",
-        "escape-html": "~1.0.3",
-        "etag": "~1.8.1",
-        "fresh": "0.5.2",
-        "http-errors": "2.0.0",
-        "mime": "1.6.0",
-        "ms": "2.1.3",
-        "on-finished": "2.4.1",
-        "range-parser": "~1.2.1",
-        "statuses": "2.0.1"
-      },
+      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
+      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
+      "license": "MIT",
       "engines": {
-        "node": ">= 0.8.0"
+        "node": ">= 0.4"
       }
     },
-    "node_modules/send/node_modules/encodeurl": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
-      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
+    "node_modules/media-typer": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
+      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
       "license": "MIT",
       "engines": {
-        "node": ">= 0.8"
+        "node": ">= 0.6"
       }
     },
-    "node_modules/send/node_modules/ms": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
-      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+    "node_modules/memory-pager": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz",
+      "integrity": "sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==",
       "license": "MIT"
     },
-    "node_modules/serve-static": {
-      "version": "1.16.2",
-      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
-      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
+    "node_modules/merge-descriptors": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
+      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
       "license": "MIT",
-      "dependencies": {
-        "encodeurl": "~2.0.0",
-        "escape-html": "~1.0.3",
-        "parseurl": "~1.3.3",
-        "send": "0.19.0"
-      },
-      "engines": {
-        "node": ">= 0.8.0"
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/set-blocking": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
-      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==",
-      "license": "ISC"
-    },
-    "node_modules/setprototypeof": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
-      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
-      "license": "ISC"
+    "node_modules/methods": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
+      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
     },
-    "node_modules/shebang-command": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
-      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
-      "dev": true,
+    "node_modules/mime": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
+      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
       "license": "MIT",
-      "dependencies": {
-        "shebang-regex": "^3.0.0"
+      "bin": {
+        "mime": "cli.js"
       },
       "engines": {
-        "node": ">=8"
+        "node": ">=4"
       }
     },
-    "node_modules/shebang-regex": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
-      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
-      "dev": true,
+    "node_modules/mime-db": {
+      "version": "1.53.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.53.0.tgz",
+      "integrity": "sha512-oHlN/w+3MQ3rba9rqFr6V/ypF10LSkdwUysQL7GkXoTgIWeV+tcXGA852TBxH+gsh8UWoyhR1hKcoMJTuWflpg==",
       "license": "MIT",
       "engines": {
-        "node": ">=8"
+        "node": ">= 0.6"
       }
     },
-    "node_modules/side-channel": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
-      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
+    "node_modules/mime-types": {
+      "version": "2.1.35",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
+      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
       "license": "MIT",
       "dependencies": {
-        "es-errors": "^1.3.0",
-        "object-inspect": "^1.13.3",
-        "side-channel-list": "^1.0.0",
-        "side-channel-map": "^1.0.1",
-        "side-channel-weakmap": "^1.0.2"
+        "mime-db": "1.52.0"
       },
       "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
+        "node": ">= 0.6"
       }
     },
-    "node_modules/side-channel-list": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
-      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
+    "node_modules/mime-types/node_modules/mime-db": {
+      "version": "1.52.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
+      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
       "license": "MIT",
-      "dependencies": {
-        "es-errors": "^1.3.0",
-        "object-inspect": "^1.13.3"
-      },
       "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
+        "node": ">= 0.6"
       }
     },
-    "node_modules/side-channel-map": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
-      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
-      "license": "MIT",
+    "node_modules/mongodb": {
+      "version": "6.14.2",
+      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-6.14.2.tgz",
+      "integrity": "sha512-kMEHNo0F3P6QKDq17zcDuPeaywK/YaJVCEQRzPF3TOM/Bl9MFg64YE5Tu7ifj37qZJMhwU1tl2Ioivws5gRG5Q==",
+      "license": "Apache-2.0",
       "dependencies": {
-        "call-bound": "^1.0.2",
-        "es-errors": "^1.3.0",
-        "get-intrinsic": "^1.2.5",
-        "object-inspect": "^1.13.3"
+        "@mongodb-js/saslprep": "^1.1.9",
+        "bson": "^6.10.3",
+        "mongodb-connection-string-url": "^3.0.0"
       },
       "engines": {
-        "node": ">= 0.4"
+        "node": ">=16.20.1"
       },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
+      "peerDependencies": {
+        "@aws-sdk/credential-providers": "^3.188.0",
+        "@mongodb-js/zstd": "^1.1.0 || ^2.0.0",
+        "gcp-metadata": "^5.2.0",
+        "kerberos": "^2.0.1",
+        "mongodb-client-encryption": ">=6.0.0 <7",
+        "snappy": "^7.2.2",
+        "socks": "^2.7.1"
+      },
+      "peerDependenciesMeta": {
+        "@aws-sdk/credential-providers": {
+          "optional": true
+        },
+        "@mongodb-js/zstd": {
+          "optional": true
+        },
+        "gcp-metadata": {
+          "optional": true
+        },
+        "kerberos": {
+          "optional": true
+        },
+        "mongodb-client-encryption": {
+          "optional": true
+        },
+        "snappy": {
+          "optional": true
+        },
+        "socks": {
+          "optional": true
+        }
       }
     },
-    "node_modules/side-channel-weakmap": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
-      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
+    "node_modules/mongodb-connection-string-url": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/mongodb-connection-string-url/-/mongodb-connection-string-url-3.0.2.tgz",
+      "integrity": "sha512-rMO7CGo/9BFwyZABcKAWL8UJwH/Kc2x0g72uhDWzG48URRax5TCIcJ7Rc3RZqffZzO/Gwff/jyKwCU9TN8gehA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@types/whatwg-url": "^11.0.2",
+        "whatwg-url": "^14.1.0 || ^13.0.0"
+      }
+    },
+    "node_modules/mongoose": {
+      "version": "8.12.1",
+      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-8.12.1.tgz",
+      "integrity": "sha512-UW22y8QFVYmrb36hm8cGncfn4ARc/XsYWQwRTaj0gxtQk1rDuhzDO1eBantS+hTTatfAIS96LlRCJrcNHvW5+Q==",
       "license": "MIT",
       "dependencies": {
-        "call-bound": "^1.0.2",
-        "es-errors": "^1.3.0",
-        "get-intrinsic": "^1.2.5",
-        "object-inspect": "^1.13.3",
-        "side-channel-map": "^1.0.1"
+        "bson": "^6.10.3",
+        "kareem": "2.6.3",
+        "mongodb": "~6.14.0",
+        "mpath": "0.9.0",
+        "mquery": "5.0.0",
+        "ms": "2.1.3",
+        "sift": "17.1.3"
       },
       "engines": {
-        "node": ">= 0.4"
+        "node": ">=16.20.1"
       },
       "funding": {
-        "url": "https://github.com/sponsors/ljharb"
+        "type": "opencollective",
+        "url": "https://opencollective.com/mongoose"
       }
     },
-    "node_modules/sift": {
-      "version": "17.1.3",
-      "resolved": "https://registry.npmjs.org/sift/-/sift-17.1.3.tgz",
-      "integrity": "sha512-Rtlj66/b0ICeFzYTuNvX/EF1igRbbnGSvEyT79McoZa/DeGhMyC5pWKOEsZKnpkqtSeovd5FL/bjHWC3CIIvCQ==",
+    "node_modules/mongoose/node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
       "license": "MIT"
     },
-    "node_modules/signal-exit": {
-      "version": "3.0.7",
-      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
-      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/simple-update-notifier": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
-      "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
-      "dev": true,
+    "node_modules/morgan": {
+      "version": "1.10.0",
+      "resolved": "https://registry.npmjs.org/morgan/-/morgan-1.10.0.tgz",
+      "integrity": "sha512-AbegBVI4sh6El+1gNwvD5YIck7nSA36weD7xvIxG4in80j/UoK8AEGaWnnz8v1GxonMCltmlNs5ZKbGvl9b1XQ==",
       "license": "MIT",
       "dependencies": {
-        "semver": "^7.5.3"
+        "basic-auth": "~2.0.1",
+        "debug": "2.6.9",
+        "depd": "~2.0.0",
+        "on-finished": "~2.3.0",
+        "on-headers": "~1.0.2"
       },
       "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/sisteransi": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
-      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/slash": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
-      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/source-map": {
-      "version": "0.6.1",
-      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
-      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "engines": {
-        "node": ">=0.10.0"
+        "node": ">= 0.8.0"
       }
     },
-    "node_modules/source-map-support": {
-      "version": "0.5.13",
-      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
-      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
-      "dev": true,
+    "node_modules/morgan/node_modules/on-finished": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
+      "integrity": "sha512-ikqdkGAAyf/X/gPhXGvfgAytDZtDbr+bkNUJ0N9h5MI/dmdgCs3l6hoHrcUv41sRKew3jIwrp4qQDXiK99Utww==",
       "license": "MIT",
       "dependencies": {
-        "buffer-from": "^1.0.0",
-        "source-map": "^0.6.0"
+        "ee-first": "1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.8"
       }
     },
-    "node_modules/sparse-bitfield": {
-      "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
-      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
+    "node_modules/mpath": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.9.0.tgz",
+      "integrity": "sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==",
       "license": "MIT",
-      "dependencies": {
-        "memory-pager": "^1.0.2"
+      "engines": {
+        "node": ">=4.0.0"
       }
     },
-    "node_modules/speakeasy": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/speakeasy/-/speakeasy-2.0.0.tgz",
-      "integrity": "sha512-lW2A2s5LKi8rwu77ewisuUOtlCydF/hmQSOJjpTqTj1gZLkNgTaYnyvfxy2WBr4T/h+9c4g8HIITfj83OkFQFw==",
+    "node_modules/mquery": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/mquery/-/mquery-5.0.0.tgz",
+      "integrity": "sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==",
       "license": "MIT",
       "dependencies": {
-        "base32.js": "0.0.1"
+        "debug": "4.x"
       },
       "engines": {
-        "node": ">= 0.10.0"
+        "node": ">=14.0.0"
       }
     },
-    "node_modules/sprintf-js": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
-      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
-      "dev": true,
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/stack-utils": {
-      "version": "2.0.6",
-      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
-      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
-      "dev": true,
+    "node_modules/mquery/node_modules/debug": {
+      "version": "4.4.0",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
+      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
       "license": "MIT",
       "dependencies": {
-        "escape-string-regexp": "^2.0.0"
+        "ms": "^2.1.3"
       },
       "engines": {
-        "node": ">=10"
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
       }
     },
-    "node_modules/stack-utils/node_modules/escape-string-regexp": {
+    "node_modules/mquery/node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "license": "MIT"
+    },
+    "node_modules/ms": {
       "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
-      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
-      "dev": true,
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
+      "license": "MIT"
+    },
+    "node_modules/negotiator": {
+      "version": "0.6.4",
+      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.4.tgz",
+      "integrity": "sha512-myRT3DiWPHqho5PrJaIRyaMv2kgYf0mUVgBNOYMuCH5Ki1yEiQaf/ZJuQ62nvpc44wL5WDbTX7yGJi1Neevw8w==",
       "license": "MIT",
       "engines": {
-        "node": ">=8"
+        "node": ">= 0.6"
       }
     },
-    "node_modules/statuses": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
-      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
-      "license": "MIT",
+    "node_modules/nodemailer": {
+      "version": "6.10.0",
+      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.10.0.tgz",
+      "integrity": "sha512-SQ3wZCExjeSatLE/HBaXS5vqUOQk6GtBdIIKxiFdmm01mOQZX/POJkO3SUX1wDiYcwUOJwT23scFSC9fY2H8IA==",
+      "license": "MIT-0",
       "engines": {
-        "node": ">= 0.8"
+        "node": ">=6.0.0"
       }
     },
-    "node_modules/streamsearch": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
-      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
+    "node_modules/object-assign": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
+      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
+      "license": "MIT",
       "engines": {
-        "node": ">=10.0.0"
+        "node": ">=0.10.0"
       }
     },
-    "node_modules/streamx": {
-      "version": "2.22.0",
-      "resolved": "https://registry.npmjs.org/streamx/-/streamx-2.22.0.tgz",
-      "integrity": "sha512-sLh1evHOzBy/iWRiR6d1zRcLao4gGZr3C1kzNz4fopCOKJb6xD9ub8Mpi9Mr1R6id5o43S+d93fI48UC5uM9aw==",
-      "dev": true,
+    "node_modules/object-inspect": {
+      "version": "1.13.4",
+      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
+      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
       "license": "MIT",
-      "dependencies": {
-        "fast-fifo": "^1.3.2",
-        "text-decoder": "^1.1.0"
+      "engines": {
+        "node": ">= 0.4"
       },
-      "optionalDependencies": {
-        "bare-events": "^2.2.0"
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/string-length": {
-      "version": "4.0.2",
-      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
-      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
-      "dev": true,
+    "node_modules/on-finished": {
+      "version": "2.4.1",
+      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
+      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
       "license": "MIT",
       "dependencies": {
-        "char-regex": "^1.0.2",
-        "strip-ansi": "^6.0.0"
+        "ee-first": "1.1.1"
       },
       "engines": {
-        "node": ">=10"
+        "node": ">= 0.8"
       }
     },
-    "node_modules/string-width": {
-      "version": "4.2.3",
-      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
-      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+    "node_modules/on-headers": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
+      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
       "license": "MIT",
-      "dependencies": {
-        "emoji-regex": "^8.0.0",
-        "is-fullwidth-code-point": "^3.0.0",
-        "strip-ansi": "^6.0.1"
-      },
       "engines": {
-        "node": ">=8"
+        "node": ">= 0.8"
       }
     },
-    "node_modules/strip-ansi": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
-      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+    "node_modules/parseurl": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
+      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
       "license": "MIT",
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
       "engines": {
-        "node": ">=8"
+        "node": ">= 0.8"
       }
     },
-    "node_modules/strip-bom": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
-      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
-      "dev": true,
+    "node_modules/path-to-regexp": {
+      "version": "0.1.12",
+      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
+      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
+      "license": "MIT"
+    },
+    "node_modules/proxy-addr": {
+      "version": "2.0.7",
+      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
+      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
       "license": "MIT",
+      "dependencies": {
+        "forwarded": "0.2.0",
+        "ipaddr.js": "1.9.1"
+      },
       "engines": {
-        "node": ">=8"
+        "node": ">= 0.10"
       }
     },
-    "node_modules/strip-final-newline": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
-      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
-      "dev": true,
+    "node_modules/punycode": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
+      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
       "license": "MIT",
       "engines": {
         "node": ">=6"
       }
     },
-    "node_modules/strip-json-comments": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
-      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
-      "dev": true,
-      "license": "MIT",
+    "node_modules/qs": {
+      "version": "6.13.0",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
+      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "side-channel": "^1.0.6"
+      },
       "engines": {
-        "node": ">=8"
+        "node": ">=0.6"
       },
       "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/range-parser": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
+      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
       }
     },
-    "node_modules/stripe": {
-      "version": "14.25.0",
-      "resolved": "https://registry.npmjs.org/stripe/-/stripe-14.25.0.tgz",
-      "integrity": "sha512-wQS3GNMofCXwH8TSje8E1SE8zr6ODiGtHQgPtO95p9Mb4FhKC9jvXR2NUTpZ9ZINlckJcFidCmaTFV4P6vsb9g==",
+    "node_modules/raw-body": {
+      "version": "2.5.2",
+      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
+      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
       "license": "MIT",
       "dependencies": {
-        "@types/node": ">=8.1.0",
-        "qs": "^6.11.0"
+        "bytes": "3.1.2",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.4.24",
+        "unpipe": "1.0.0"
       },
       "engines": {
-        "node": ">=12.*"
+        "node": ">= 0.8"
       }
     },
-    "node_modules/superagent": {
-      "version": "9.0.2",
-      "resolved": "https://registry.npmjs.org/superagent/-/superagent-9.0.2.tgz",
-      "integrity": "sha512-xuW7dzkUpcJq7QnhOsnNUgtYp3xRwpt2F7abdRYIpCsAt0hhUqia0EdxyXZQQpNmGtsCzYHryaKSV3q3GJnq7w==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "component-emitter": "^1.3.0",
-        "cookiejar": "^2.1.4",
-        "debug": "^4.3.4",
-        "fast-safe-stringify": "^2.1.1",
-        "form-data": "^4.0.0",
-        "formidable": "^3.5.1",
-        "methods": "^1.1.2",
-        "mime": "2.6.0",
-        "qs": "^6.11.0"
+    "node_modules/safe-buffer": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
+      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/safer-buffer": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
+      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
+      "license": "MIT"
+    },
+    "node_modules/semver": {
+      "version": "7.7.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
+      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
       },
       "engines": {
-        "node": ">=14.18.0"
+        "node": ">=10"
       }
     },
-    "node_modules/superagent/node_modules/debug": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
-      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
-      "dev": true,
+    "node_modules/send": {
+      "version": "0.19.0",
+      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
+      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
       "license": "MIT",
       "dependencies": {
-        "ms": "^2.1.3"
+        "debug": "2.6.9",
+        "depd": "2.0.0",
+        "destroy": "1.2.0",
+        "encodeurl": "~1.0.2",
+        "escape-html": "~1.0.3",
+        "etag": "~1.8.1",
+        "fresh": "0.5.2",
+        "http-errors": "2.0.0",
+        "mime": "1.6.0",
+        "ms": "2.1.3",
+        "on-finished": "2.4.1",
+        "range-parser": "~1.2.1",
+        "statuses": "2.0.1"
       },
       "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
+        "node": ">= 0.8.0"
       }
     },
-    "node_modules/superagent/node_modules/mime": {
-      "version": "2.6.0",
-      "resolved": "https://registry.npmjs.org/mime/-/mime-2.6.0.tgz",
-      "integrity": "sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==",
-      "dev": true,
+    "node_modules/send/node_modules/encodeurl": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
+      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
       "license": "MIT",
-      "bin": {
-        "mime": "cli.js"
-      },
       "engines": {
-        "node": ">=4.0.0"
+        "node": ">= 0.8"
       }
     },
-    "node_modules/superagent/node_modules/ms": {
+    "node_modules/send/node_modules/ms": {
       "version": "2.1.3",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
       "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
-      "dev": true,
       "license": "MIT"
     },
-    "node_modules/supertest": {
-      "version": "7.0.0",
-      "resolved": "https://registry.npmjs.org/supertest/-/supertest-7.0.0.tgz",
-      "integrity": "sha512-qlsr7fIC0lSddmA3tzojvzubYxvlGtzumcdHgPwbFWMISQwL22MhM2Y3LNt+6w9Yyx7559VW5ab70dgphm8qQA==",
-      "dev": true,
+    "node_modules/serve-static": {
+      "version": "1.16.2",
+      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
+      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
+      "license": "MIT",
+      "dependencies": {
+        "encodeurl": "~2.0.0",
+        "escape-html": "~1.0.3",
+        "parseurl": "~1.3.3",
+        "send": "0.19.0"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/setprototypeof": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
+      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
+      "license": "ISC"
+    },
+    "node_modules/side-channel": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
+      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
       "license": "MIT",
       "dependencies": {
-        "methods": "^1.1.2",
-        "superagent": "^9.0.1"
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3",
+        "side-channel-list": "^1.0.0",
+        "side-channel-map": "^1.0.1",
+        "side-channel-weakmap": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
       },
-      "engines": {
-        "node": ">=14.18.0"
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/supports-color": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
-      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
-      "dev": true,
+    "node_modules/side-channel-list": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
+      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
       "license": "MIT",
       "dependencies": {
-        "has-flag": "^4.0.0"
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3"
       },
       "engines": {
-        "node": ">=8"
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/supports-preserve-symlinks-flag": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
-      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
-      "dev": true,
+    "node_modules/side-channel-map": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
+      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
       "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3"
+      },
       "engines": {
         "node": ">= 0.4"
       },
@@ -6862,67 +1520,47 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/tar-stream": {
-      "version": "3.1.7",
-      "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-3.1.7.tgz",
-      "integrity": "sha512-qJj60CXt7IU1Ffyc3NJMjh6EkuCFej46zUqJ4J7pqYlThyd9bO0XBTmcOIhSzZJVWfsLks0+nle/j538YAW9RQ==",
-      "dev": true,
+    "node_modules/side-channel-weakmap": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
+      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
       "license": "MIT",
       "dependencies": {
-        "b4a": "^1.6.4",
-        "fast-fifo": "^1.2.0",
-        "streamx": "^2.15.0"
-      }
-    },
-    "node_modules/test-exclude": {
-      "version": "6.0.0",
-      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
-      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "@istanbuljs/schema": "^0.1.2",
-        "glob": "^7.1.4",
-        "minimatch": "^3.0.4"
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3",
+        "side-channel-map": "^1.0.1"
       },
       "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/text-decoder": {
-      "version": "1.2.3",
-      "resolved": "https://registry.npmjs.org/text-decoder/-/text-decoder-1.2.3.tgz",
-      "integrity": "sha512-3/o9z3X0X0fTupwsYvR03pJ/DjWuqqrfwBgTQzdWDiQSm9KitAyz/9WqsT2JQW7KV2m+bC2ol/zqpW37NHxLaA==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "b4a": "^1.6.4"
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/tiny-inflate": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/tiny-inflate/-/tiny-inflate-1.0.3.tgz",
-      "integrity": "sha512-pkY1fj1cKHb2seWDy0B16HeWyczlJA9/WW3u3c4z/NiWDsO3DOU5D7nhTLE9CF0yXv/QZFY7sEJmj24dK+Rrqw==",
+    "node_modules/sift": {
+      "version": "17.1.3",
+      "resolved": "https://registry.npmjs.org/sift/-/sift-17.1.3.tgz",
+      "integrity": "sha512-Rtlj66/b0ICeFzYTuNvX/EF1igRbbnGSvEyT79McoZa/DeGhMyC5pWKOEsZKnpkqtSeovd5FL/bjHWC3CIIvCQ==",
       "license": "MIT"
     },
-    "node_modules/tmpl": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
-      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
-      "dev": true,
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/to-regex-range": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
-      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
-      "dev": true,
+    "node_modules/sparse-bitfield": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
+      "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
       "license": "MIT",
       "dependencies": {
-        "is-number": "^7.0.0"
-      },
+        "memory-pager": "^1.0.2"
+      }
+    },
+    "node_modules/statuses": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
+      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
+      "license": "MIT",
       "engines": {
-        "node": ">=8.0"
+        "node": ">= 0.8"
       }
     },
     "node_modules/toidentifier": {
@@ -6934,16 +1572,6 @@
         "node": ">=0.6"
       }
     },
-    "node_modules/touch": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
-      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
-      "dev": true,
-      "license": "ISC",
-      "bin": {
-        "nodetouch": "bin/nodetouch.js"
-      }
-    },
     "node_modules/tr46": {
       "version": "5.1.0",
       "resolved": "https://registry.npmjs.org/tr46/-/tr46-5.1.0.tgz",
@@ -6956,46 +1584,48 @@
         "node": ">=18"
       }
     },
-    "node_modules/tslib": {
-      "version": "2.8.1",
-      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
-      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
-      "license": "0BSD"
-    },
-    "node_modules/type-check": {
-      "version": "0.4.0",
-      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
-      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
+    "node_modules/ts-node": {
+      "version": "10.9.2",
+      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz",
+      "integrity": "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "prelude-ls": "^1.2.1"
+        "@cspotcode/source-map-support": "^0.8.0",
+        "@tsconfig/node10": "^1.0.7",
+        "@tsconfig/node12": "^1.0.7",
+        "@tsconfig/node14": "^1.0.0",
+        "@tsconfig/node16": "^1.0.2",
+        "acorn": "^8.4.1",
+        "acorn-walk": "^8.1.1",
+        "arg": "^4.1.0",
+        "create-require": "^1.1.0",
+        "diff": "^4.0.1",
+        "make-error": "^1.1.1",
+        "v8-compile-cache-lib": "^3.0.1",
+        "yn": "3.1.1"
       },
-      "engines": {
-        "node": ">= 0.8.0"
-      }
-    },
-    "node_modules/type-detect": {
-      "version": "4.0.8",
-      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
-      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/type-fest": {
-      "version": "0.21.3",
-      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
-      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
-      "dev": true,
-      "license": "(MIT OR CC0-1.0)",
-      "engines": {
-        "node": ">=10"
+      "bin": {
+        "ts-node": "dist/bin.js",
+        "ts-node-cwd": "dist/bin-cwd.js",
+        "ts-node-esm": "dist/bin-esm.js",
+        "ts-node-script": "dist/bin-script.js",
+        "ts-node-transpile-only": "dist/bin-transpile.js",
+        "ts-script": "dist/bin-script-deprecated.js"
       },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+      "peerDependencies": {
+        "@swc/core": ">=1.2.50",
+        "@swc/wasm": ">=1.2.50",
+        "@types/node": "*",
+        "typescript": ">=2.7"
+      },
+      "peerDependenciesMeta": {
+        "@swc/core": {
+          "optional": true
+        },
+        "@swc/wasm": {
+          "optional": true
+        }
       }
     },
     "node_modules/type-is": {
@@ -7011,45 +1641,27 @@
         "node": ">= 0.6"
       }
     },
-    "node_modules/typedarray": {
-      "version": "0.0.6",
-      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
-      "integrity": "sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA==",
-      "license": "MIT"
-    },
-    "node_modules/undefsafe": {
-      "version": "2.0.5",
-      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
-      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
+    "node_modules/typescript": {
+      "version": "5.8.2",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.2.tgz",
+      "integrity": "sha512-aJn6wq13/afZp/jT9QZmwEjDqqvSGp1VT5GVg+f/t6/oVyrgXM6BY1h9BRh/O5p3PlUPAe+WuiEZOmb/49RqoQ==",
       "dev": true,
-      "license": "MIT"
+      "license": "Apache-2.0",
+      "bin": {
+        "tsc": "bin/tsc",
+        "tsserver": "bin/tsserver"
+      },
+      "engines": {
+        "node": ">=14.17"
+      }
     },
     "node_modules/undici-types": {
-      "version": "6.20.0",
-      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.20.0.tgz",
-      "integrity": "sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg==",
+      "version": "6.19.8",
+      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.19.8.tgz",
+      "integrity": "sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==",
+      "dev": true,
       "license": "MIT"
     },
-    "node_modules/unicode-properties": {
-      "version": "1.4.1",
-      "resolved": "https://registry.npmjs.org/unicode-properties/-/unicode-properties-1.4.1.tgz",
-      "integrity": "sha512-CLjCCLQ6UuMxWnbIylkisbRj31qxHPAurvena/0iwSVbQ2G1VY5/HjV0IRabOEbDHlzZlRdCrD4NhB0JtU40Pg==",
-      "license": "MIT",
-      "dependencies": {
-        "base64-js": "^1.3.0",
-        "unicode-trie": "^2.0.0"
-      }
-    },
-    "node_modules/unicode-trie": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/unicode-trie/-/unicode-trie-2.0.0.tgz",
-      "integrity": "sha512-x7bc76x0bm4prf1VLg79uhAzKw8DVboClSN5VxJuQ+LKDOVEW9CdH+VY7SP+vX7xCYQqzzgQpFqz15zeLvAtZQ==",
-      "license": "MIT",
-      "dependencies": {
-        "pako": "^0.2.5",
-        "tiny-inflate": "^1.0.0"
-      }
-    },
     "node_modules/unpipe": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
@@ -7059,53 +1671,6 @@
         "node": ">= 0.8"
       }
     },
-    "node_modules/update-browserslist-db": {
-      "version": "1.1.3",
-      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
-      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "opencollective",
-          "url": "https://opencollective.com/browserslist"
-        },
-        {
-          "type": "tidelift",
-          "url": "https://tidelift.com/funding/github/npm/browserslist"
-        },
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/ai"
-        }
-      ],
-      "license": "MIT",
-      "dependencies": {
-        "escalade": "^3.2.0",
-        "picocolors": "^1.1.1"
-      },
-      "bin": {
-        "update-browserslist-db": "cli.js"
-      },
-      "peerDependencies": {
-        "browserslist": ">= 4.21.0"
-      }
-    },
-    "node_modules/uri-js": {
-      "version": "4.4.1",
-      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
-      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
-      "dev": true,
-      "license": "BSD-2-Clause",
-      "dependencies": {
-        "punycode": "^2.1.0"
-      }
-    },
-    "node_modules/util-deprecate": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
-      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
-      "license": "MIT"
-    },
     "node_modules/utils-merge": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
@@ -7115,29 +1680,12 @@
         "node": ">= 0.4.0"
       }
     },
-    "node_modules/v8-to-istanbul": {
-      "version": "9.3.0",
-      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.3.0.tgz",
-      "integrity": "sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==",
+    "node_modules/v8-compile-cache-lib": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
+      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
       "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "@jridgewell/trace-mapping": "^0.3.12",
-        "@types/istanbul-lib-coverage": "^2.0.1",
-        "convert-source-map": "^2.0.0"
-      },
-      "engines": {
-        "node": ">=10.12.0"
-      }
-    },
-    "node_modules/validator": {
-      "version": "13.12.0",
-      "resolved": "https://registry.npmjs.org/validator/-/validator-13.12.0.tgz",
-      "integrity": "sha512-c1Q0mCiPlgdTVVVIJIrBuxNicYE+t/7oKeI9MWLj3fh/uq2Pxh/3eeWbVZ4OcGW1TUf53At0njHw5SMdA3tmMg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.10"
-      }
+      "license": "MIT"
     },
     "node_modules/vary": {
       "version": "1.1.2",
@@ -7148,16 +1696,6 @@
         "node": ">= 0.8"
       }
     },
-    "node_modules/walker": {
-      "version": "1.0.8",
-      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
-      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "makeerror": "1.0.12"
-      }
-    },
     "node_modules/webidl-conversions": {
       "version": "7.0.0",
       "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-7.0.0.tgz",
@@ -7180,172 +1718,14 @@
         "node": ">=18"
       }
     },
-    "node_modules/which": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
-      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "isexe": "^2.0.0"
-      },
-      "bin": {
-        "node-which": "bin/node-which"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/which-module": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/which-module/-/which-module-2.0.1.tgz",
-      "integrity": "sha512-iBdZ57RDvnOR9AGBhML2vFZf7h8vmBjhoaZqODJBFWHVtKkDmKuHai3cx5PgVMrX5YDNp27AofYbAwctSS+vhQ==",
-      "license": "ISC"
-    },
-    "node_modules/word-wrap": {
-      "version": "1.2.5",
-      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
-      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/wrap-ansi": {
-      "version": "7.0.0",
-      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
-      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.0.0",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
-      }
-    },
-    "node_modules/wrappy": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
-      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/write-file-atomic": {
-      "version": "4.0.2",
-      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
-      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "imurmurhash": "^0.1.4",
-        "signal-exit": "^3.0.7"
-      },
-      "engines": {
-        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
-      }
-    },
-    "node_modules/xss-clean": {
-      "version": "0.1.4",
-      "resolved": "https://registry.npmjs.org/xss-clean/-/xss-clean-0.1.4.tgz",
-      "integrity": "sha512-4hArTFHYxrifK9VXOu/zFvwjTXVjKByPi6woUHb1IqxlX0Z4xtFBRjOhTKuYV/uE1VswbYsIh5vUEYp7MmoISQ==",
-      "deprecated": "Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.",
-      "license": "MIT",
-      "dependencies": {
-        "xss-filters": "1.2.7"
-      }
-    },
-    "node_modules/xss-filters": {
-      "version": "1.2.7",
-      "resolved": "https://registry.npmjs.org/xss-filters/-/xss-filters-1.2.7.tgz",
-      "integrity": "sha512-KzcmYT/f+YzcYrYRqw6mXxd25BEZCxBQnf+uXTopQDIhrmiaLwO+f+yLsIvvNlPhYvgff8g3igqrBxYh9k8NbQ=="
-    },
-    "node_modules/xtend": {
-      "version": "4.0.2",
-      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
-      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.4"
-      }
-    },
-    "node_modules/y18n": {
-      "version": "5.0.8",
-      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
-      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
-      "dev": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/yallist": {
+    "node_modules/yn": {
       "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
-      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/yargs": {
-      "version": "17.7.2",
-      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
-      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "cliui": "^8.0.1",
-        "escalade": "^3.1.1",
-        "get-caller-file": "^2.0.5",
-        "require-directory": "^2.1.1",
-        "string-width": "^4.2.3",
-        "y18n": "^5.0.5",
-        "yargs-parser": "^21.1.1"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/yargs-parser": {
-      "version": "21.1.1",
-      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
-      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
-      "dev": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/yauzl": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/yauzl/-/yauzl-3.2.0.tgz",
-      "integrity": "sha512-Ow9nuGZE+qp1u4JIPvg+uCiUr7xGQWdff7JQSk5VGYTAZMDe2q8lxJ10ygv10qmSj031Ty/6FNJpLO4o1Sgc+w==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "buffer-crc32": "~0.2.3",
-        "pend": "~1.2.0"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/yocto-queue": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
-      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
+      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
+      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+        "node": ">=6"
       }
     }
   }
diff --git a/backend/package.json b/backend/package.json
index 0f6f2b2..96dd8e6 100644
--- a/backend/package.json
+++ b/backend/package.json
@@ -1,50 +1,33 @@
 {
   "name": "backend",
   "version": "1.0.0",
-  "main": "index.js",
-  "directories": {
-    "test": "tests"
-  },
+  "main": "dist/server.js",
   "scripts": {
-    "test": "jest --watch",
-    "start": "node src/server.js",
-    "dev": "nodemon src/server.js"
+    "start": "ts-node server.ts",
+    "build": "tsc",
+    "test": "echo \"Error: no test specified\" && exit 1"
   },
-  "keywords": [],
-  "author": "",
-  "license": "ISC",
-  "description": "",
   "dependencies": {
-    "@faker-js/faker": "^9.7.0",
     "bcryptjs": "^3.0.2",
     "compression": "^1.8.0",
     "cors": "^2.8.5",
-    "date-fns": "^4.1.0",
     "dotenv": "^16.4.7",
     "express": "^4.21.2",
-    "express-mongo-sanitize": "^2.2.0",
-    "express-rate-limit": "^7.5.0",
-    "express-validator": "^7.2.1",
     "helmet": "^8.0.0",
-    "hpp": "^0.2.3",
     "jsonwebtoken": "^9.0.2",
     "mongoose": "^8.12.1",
-    "mongoose-aggregate-paginate-v2": "^1.1.4",
-    "mongoose-paginate-v2": "^1.9.0",
     "morgan": "^1.10.0",
-    "multer": "^1.4.5-lts.2",
-    "pdfkit": "^0.17.0",
-    "qrcode": "^1.5.4",
-    "speakeasy": "^2.0.0",
-    "stripe": "^14.16.0",
-    "xss-clean": "^0.1.4"
+    "nodemailer": "^6.9.8"
   },
   "devDependencies": {
-    "cross-env": "^7.0.3",
-    "eslint": "^9.22.0",
-    "jest": "^29.7.0",
-    "mongodb-memory-server": "^10.1.4",
-    "nodemon": "^3.1.9",
-    "supertest": "^7.0.0"
+    "@types/cors": "^2.8.17",
+    "@types/express": "^4.17.21",
+    "@types/istanbul-lib-coverage": "^2.0.6",
+    "@types/mongoose": "^5.11.97",
+    "@types/morgan": "^1.9.9",
+    "@types/node": "^20.12.7",
+    "@types/nodemailer": "^6.4.17",
+    "ts-node": "^10.9.2",
+    "typescript": "^5.4.5"
   }
 }
diff --git a/backend/routes/customer-schedules.ts b/backend/routes/customer-schedules.ts
new file mode 100644
index 0000000..3fbfcd3
--- /dev/null
+++ b/backend/routes/customer-schedules.ts
@@ -0,0 +1,139 @@
+import express, { Request, Response } from 'express';
+import Schedule, { ISchedule } from '../models/schedule';
+import { sendEmail } from '../utils/email';
+
+const router = express.Router();
+
+router.get('/customer-schedules', async (req: Request, res: Response) => {
+    try {
+      const currentDate = new Date();
+      const formattedCurrentDate = currentDate.toISOString().split('T')[0]; // "2025-05-01"
+  
+      console.log('Fetching schedules for date:', formattedCurrentDate);
+  
+      let schedules = await Schedule.find({
+        date: formattedCurrentDate,
+      });
+  
+      console.log('Schedules found:', schedules);
+  
+      if (!schedules.length) {
+        return res.json([]);
+      }
+  
+      const updatedSchedules = schedules.filter((schedule) => {
+        // Only exclude "Completed" schedules, don't modify status or delete
+        if (schedule.status === 'Completed') {
+          console.log(`Skipping completed schedule ${schedule.scheduleNo}`);
+          return false;
+        }
+        return true;
+      });
+  
+      console.log('Filtered schedules:', updatedSchedules);
+      res.json(updatedSchedules);
+    } catch (error) {
+      console.error('Error in /customer-schedules:', error);
+      res.status(500).json({ error: (error as Error).message });
+    }
+  });
+
+// Existing endpoints (admin ලාට තියෙන ඒවා)
+router.post('/schedules', async (req: Request, res: Response) => {
+  try {
+    const schedule: ISchedule = new Schedule(req.body);
+    await schedule.save();
+    await sendEmail(
+      'dhanushkal0403@gmail.com',
+      'New Schedule Added',
+      `Schedule ${schedule.scheduleNo} has been added for truck ${schedule.truckNo} on ${schedule.date} at ${schedule.time}.`
+    );
+    res.status(201).json(schedule);
+  } catch (error) {
+    res.status(400).json({ error: (error as Error).message });
+  }
+});
+
+router.get('/schedules', async (req: Request, res: Response) => {
+  try {
+    const schedules = await Schedule.find();
+    res.json(schedules);
+  } catch (error) {
+    res.status(500).json({ error: (error as Error).message });
+  }
+});
+
+router.put('/schedules/:id', async (req: Request, res: Response) => {
+  try {
+    const schedule = await Schedule.findByIdAndUpdate(req.params.id, req.body, { new: true });
+    if (!schedule) return res.status(404).json({ error: 'Schedule not found' });
+    await sendEmail(
+      'dhanushkal0403@gmail.com',
+      'Schedule Updated',
+      `Schedule ${schedule.scheduleNo} has been updated for truck ${schedule.truckNo}.`
+    );
+    res.json(schedule);
+  } catch (error) {
+    res.status(400).json({ error: (error as Error).message });
+  }
+});
+
+router.delete('/schedules/:id', async (req: Request, res: Response) => {
+  try {
+    const schedule = await Schedule.findByIdAndDelete(req.params.id);
+    if (!schedule) return res.status(404).json({ error: 'Schedule not found' });
+    await sendEmail(
+      'dhanushkal0403@gmail.com',
+      'Schedule Deleted',
+      `Schedule ${schedule.scheduleNo} has been deleted.`
+    );
+    res.json({ message: 'Schedule deleted' });
+  } catch (error) {
+    res.status(500).json({ error: (error as Error).message });
+  }
+});
+
+// Customer ලාට අද දවසේ schedules ගන්න endpoint එක
+router.get('/customer-schedules', async (req: Request, res: Response) => {
+  try {
+    // අද දවස ගන්නවා (YYYY-MM-DD format එකට)
+    const currentDate = new Date().toISOString().split('T')[0];
+
+    // අද දවසේ schedules ටික ගන්නවා
+    let schedules = await Schedule.find({
+      date: currentDate,
+    });
+
+    // Time එක ඉවර උන schedules ටික Completed කරලා ඉවත් කරනවා
+    const currentTime = new Date();
+    const updatedSchedules = schedules.filter((schedule) => {
+      // Schedule එකක time එක parse කරනවා (e.g., "14:30")
+      const [hours, minutes] = schedule.time.split(':').map(Number);
+      const scheduleDateTime = new Date(schedule.date);
+      scheduleDateTime.setHours(hours, minutes);
+
+      // Time එක ඉවර උනා නම් status එක Completed කරනවා
+      if (scheduleDateTime < currentTime && schedule.status !== 'Completed') {
+        Schedule.updateOne(
+          { _id: schedule._id },
+          { status: 'Completed' }
+        ).exec();
+        return false; // Response එකෙන් ඉවත් කරනවා
+      }
+
+      // Completed schedules ඉවත් කරනවා
+      if (schedule.status === 'Completed') {
+        Schedule.deleteOne({ _id: schedule._id }).exec();
+        return false; // Response එකෙන් ඉවත් කරනවා
+      }
+
+      return true; // Completed නැති schedules ටික return කරනවා
+    });
+
+    res.json(updatedSchedules);
+  } catch (error) {
+    res.status(500).json({ error: (error as Error).message });
+  }
+});
+
+export default router;
\ No newline at end of file
diff --git a/backend/routes/equipmentRoutes.ts b/backend/routes/equipmentRoutes.ts
new file mode 100644
index 0000000..178e703
--- /dev/null
+++ b/backend/routes/equipmentRoutes.ts
@@ -0,0 +1,49 @@
+import express, { Request, Response } from 'express';
+import Equipment, { IEquipment } from '../models/equipment';
+
+const router = express.Router();
+
+// Add Equipment
+router.post('/equipment', async (req: Request, res: Response) => {
+  try {
+    const equipment: IEquipment = new Equipment(req.body);
+    await equipment.save();
+    res.status(201).json(equipment);
+  } catch (error) {
+    res.status(400).json({ error: (error as Error).message });
+  }
+});
+
+// Get All Equipment
+router.get('/equipment', async (req: Request, res: Response) => {
+  try {
+    const equipment = await Equipment.find();
+    res.json(equipment);
+  } catch (error) {
+    res.status(500).json({ error: (error as Error).message });
+  }
+});
+
+// Update Equipment
+router.put('/equipment/:id', async (req: Request, res: Response) => {
+  try {
+    const equipment = await Equipment.findByIdAndUpdate(req.params.id, req.body, { new: true });
+    if (!equipment) return res.status(404).json({ error: 'Equipment not found' });
+    res.json(equipment);
+  } catch (error) {
+    res.status(400).json({ error: (error as Error).message });
+  }
+});
+
+// Delete Equipment
+router.delete('/equipment/:id', async (req: Request, res: Response) => {
+  try {
+    const equipment = await Equipment.findByIdAndDelete(req.params.id);
+    if (!equipment) return res.status(404).json({ error: 'Equipment not found' });
+    res.json({ message: 'Equipment deleted' });
+  } catch (error) {
+    res.status(500).json({ error: (error as Error).message });
+  }
+});
+
+export default router;
\ No newline at end of file
diff --git a/backend/routes/resourceRoutes.ts b/backend/routes/resourceRoutes.ts
new file mode 100644
index 0000000..b50b21d
--- /dev/null
+++ b/backend/routes/resourceRoutes.ts
@@ -0,0 +1,48 @@
+import express, { Request, Response } from 'express';
+import Truck, { ITruck } from '../models/truck';
+
+const router = express.Router();
+
+router.post('/trucks', async (req: Request, res: Response) => {
+  try {
+    console.log('Received truck data:', req.body); // Log the incoming data
+    const truck: ITruck = new Truck(req.body);
+    await truck.save();
+    console.log('Saved truck:', truck); // Log the saved truck
+    res.status(201).json(truck);
+  } catch (error) {
+    console.error('Error saving truck:', error); // Log the error
+    res.status(400).json({ error: (error as Error).message });
+  }
+});
+
+router.get('/trucks', async (req: Request, res: Response) => {
+  try {
+    const trucks = await Truck.find();
+    res.json(trucks);
+  } catch (error) {
+    res.status(500).json({ error: (error as Error).message });
+  }
+});
+
+router.put('/trucks/:id', async (req: Request, res: Response) => {
+  try {
+    const truck = await Truck.findByIdAndUpdate(req.params.id, req.body, { new: true });
+    if (!truck) return res.status(404).json({ error: 'Truck not found' });
+    res.json(truck);
+  } catch (error) {
+    res.status(400).json({ error: (error as Error).message });
+  }
+});
+
+router.delete('/trucks/:id', async (req: Request, res: Response) => {
+  try {
+    const truck = await Truck.findByIdAndDelete(req.params.id);
+    if (!truck) return res.status(404).json({ error: 'Truck not found' });
+    res.json({ message: 'Truck deleted' });
+  } catch (error) {
+    res.status(500).json({ error: (error as Error).message });
+  }
+});
+
+export default router;
\ No newline at end of file
diff --git a/backend/routes/scheduleRoutes.ts b/backend/routes/scheduleRoutes.ts
new file mode 100644
index 0000000..725672f
--- /dev/null
+++ b/backend/routes/scheduleRoutes.ts
@@ -0,0 +1,128 @@
+import { Router } from 'express';
+import { Request, Response } from 'express';
+import { ISchedule, default as Schedule } from '../models/schedule';
+import { sendEmail } from '../utils/email';
+
+const router = Router();
+
+// POST route to create a new schedule
+router.post('/schedules', async (req: Request, res: Response) => {
+  try {
+    const schedule: ISchedule = new Schedule(req.body);
+    await schedule.save();
+    await sendEmail(
+      'dhanushka18403@gmail.com',
+      'New Schedule Added',
+      `Schedule ${schedule.scheduleNo} has been added for truck ${schedule.truckNo} on ${schedule.date} at ${schedule.time}.`
+    );
+    res.status(201).json(schedule);
+  } catch (error) {
+    res.status(400).json({ error: (error as Error).message });
+  }
+});
+
+// GET route to fetch all schedules
+router.get('/schedules', async (req: Request, res: Response) => {
+  try {
+    const schedules = await Schedule.find();
+    res.json(schedules);
+  } catch (error) {
+    res.status(500).json({ error: (error as Error).message });
+  }
+});
+
+// Add this route alongside your existing routes
+router.get('/customer-schedules', async (req: Request, res: Response) => {
+  try {
+    const schedules = await Schedule.find();
+    res.json(schedules);
+  } catch (error) {
+    res.status(500).json({ error: (error as Error).message });
+  }
+});
+
+// Search schedules by date range and other filters
+router.get('/customer-schedules/search', async (req: Request, res: Response) => {
+  try {
+    const { startDate, endDate, truckNo, scheduleNo, status, route } = req.query;
+    let query: any = {};
+
+    // Search by Schedule No
+    if (scheduleNo && typeof scheduleNo === 'string' && scheduleNo.trim() !== '') {
+      query.scheduleNo = new RegExp(scheduleNo.trim(), 'i');
+    }
+
+    // Search by Truck No
+    if (truckNo && typeof truckNo === 'string' && truckNo.trim() !== '') {
+      query.truckNo = new RegExp(truckNo.trim(), 'i');
+    }
+
+    // Search by Date Range
+    if (startDate && endDate) {
+      const start = new Date(startDate as string);
+      start.setHours(0, 0, 0, 0);
+      
+      const end = new Date(endDate as string);
+      end.setHours(23, 59, 59, 999);
+
+      query.date = {
+        $gte: start.toISOString(),
+        $lte: end.toISOString()
+      };
+    }
+
+    // Search by Status
+    if (status && typeof status === 'string' && status.trim() !== '') {
+      query.status = new RegExp(status.trim(), 'i');
+    }
+
+    // Search by Route
+    if (route && typeof route === 'string' && route.trim() !== '') {
+      query.route = new RegExp(route.trim(), 'i');
+    }
+
+    const schedules = await Schedule.find(query).sort({ date: -1, time: -1 });
+    res.json(schedules);
+  } catch (error) {
+    res.status(500).json({ error: (error as Error).message });
+  }
+});
+
+// Download schedules as CSV
+router.get('/customer-schedules/download', async (req: Request, res: Response) => {
+  try {
+    const { startDate, endDate, truckNo } = req.query;
+    let query: any = {};
+
+    if (startDate && endDate) {
+      query.date = {
+        $gte: startDate,
+        $lte: endDate
+      };
+    }
+
+    if (truckNo) {
+      query.truckNo = truckNo;
+    }
+
+    const schedules = await Schedule.find(query);
+    
+    // Convert to CSV format
+    const csvHeader = 'Schedule No,Truck No,Date,Time,Status,Route\n';
+    const csvContent = schedules.map(schedule => 
+      `${schedule.scheduleNo},${schedule.truckNo},${schedule.date},${schedule.time},${schedule.status},${schedule.route.join(';')}`
+    ).join('\n');
+    
+    const csv = csvHeader + csvContent;
+    
+    // Set headers for file download
+    res.setHeader('Content-Type', 'text/csv');
+    res.setHeader('Content-Disposition', 'attachment; filename=schedules.csv');
+    
+    res.send(csv);
+  } catch (error) {
+    res.status(500).json({ error: (error as Error).message });
+  }
+});
+
+export default router;
\ No newline at end of file
diff --git a/backend/routes/toolRoutes.ts b/backend/routes/toolRoutes.ts
new file mode 100644
index 0000000..801f5cc
--- /dev/null
+++ b/backend/routes/toolRoutes.ts
@@ -0,0 +1,92 @@
+import express from 'express';
+import Tool from '../models/tool';
+
+const router = express.Router();
+
+// GET: Fetch all tools
+router.get('/tools', async (req, res) => {
+  try {
+    const tools = await Tool.find();
+    res.json(tools);
+  } catch (err) {
+    res.status(500).json({ error: 'Failed to fetch tools' });
+  }
+});
+
+// POST: Add a new tool (location field එක remove කළා)
+router.post('/tools', async (req, res) => {
+  try {
+    console.log('Received tool data:', req.body); // Debug log
+
+    // Validate req.body
+    const { toolId, type, description } = req.body;
+
+    // Check required fields (location remove කළා)
+    if (!toolId || !type || !description) {
+      return res.status(400).json({
+        error: 'Missing required fields: toolId, type, and description are required',
+      });
+    }
+
+    // Create new tool (location remove කළා)
+    const tool = new Tool({
+      toolId,
+      type,
+      description,
+      // status is optional, will default to 'Available'
+    });
+
+    await tool.save();
+    res.status(201).json(tool);
+  } catch (err) {
+    console.error('Error adding tool:', err); // Debug log
+    res.status(400).json({ error: (err as Error).message }); // Type cast 'err' as Error
+  }
+});
+
+// PUT: Update a tool (location field එක remove කළා)
+router.put('/tools/:id', async (req, res) => {
+  try {
+    const { toolId, type, description } = req.body;
+
+    // Validate req.body for required fields (location remove කළා)
+    if (!toolId || !type || !description) {
+      return res.status(400).json({
+        error: 'Missing required fields: toolId, type, and description are required',
+      });
+    }
+
+    const tool = await Tool.findByIdAndUpdate(
+      req.params.id,
+      {
+        toolId,
+        type,
+        description,
+      },
+      { new: true }
+    );
+
+    if (!tool) {
+      return res.status(404).json({ error: 'Tool not found' });
+    }
+
+    res.json(tool);
+  } catch (err) {
+    res.status(400).json({ error: (err as Error).message }); // Type cast 'err' as Error
+  }
+});
+
+// DELETE: Delete a tool
+router.delete('/tools/:id', async (req, res) => {
+  try {
+    const tool = await Tool.findByIdAndDelete(req.params.id);
+    if (!tool) {
+      return res.status(404).json({ error: 'Tool not found' });
+    }
+    res.status(204).send();
+  } catch (err) {
+    res.status(400).json({ error: (err as Error).message }); // Type cast 'err' as Error
+  }
+});
+
+export default router;
\ No newline at end of file
diff --git a/backend/server.ts b/backend/server.ts
new file mode 100644
index 0000000..c181346
--- /dev/null
+++ b/backend/server.ts
@@ -0,0 +1,47 @@
+import express from 'express';
+import mongoose from 'mongoose';
+import dotenv from 'dotenv';
+import cors from 'cors';
+import resourceRoutes from './routes/resourceRoutes';
+import scheduleRoutes from './routes/scheduleRoutes';
+import equipmentRoutes from './routes/equipmentRoutes';
+import toolRoutes from './routes/toolRoutes';
+
+const app = express();
+
+
+dotenv.config();
+
+// Middleware setup
+app.use(cors()); 
+app.use(express.json()); 
+
+// MongoDB connection setup
+const connectDB = async () => {
+  try {
+    
+    if (!process.env.MONGODB_URI) {
+      throw new Error('MONGO_URI is not defined in .env file');
+    }
+    await mongoose.connect(process.env.MONGODB_URI);
+    console.log('MongoDB connected successfully'); // Connection success log
+  } catch (err) {
+    console.error('MongoDB connection error:', err); // Connection fail error log
+    process.exit(1); 
+  }
+};
+
+// MongoDB connect
+connectDB();
+
+// API routes setup
+app.use('/api', resourceRoutes); // Resource routes
+app.use('/api', scheduleRoutes); // Schedule routes
+app.use('/api', equipmentRoutes); // Equipment routes
+app.use('/api', toolRoutes); // Tool routes
+
+// Server start
+const PORT = process.env.PORT || 5000;
+app.listen(PORT, () => {
+  console.log(`Server running on port ${PORT}`); // Server start  log
+});
\ No newline at end of file
diff --git a/backend/src/config/index.js b/backend/src/config/index.js
deleted file mode 100644
index 3c9ead1..0000000
--- a/backend/src/config/index.js
+++ /dev/null
@@ -1,74 +0,0 @@
-// backend/src/config/index.js
-const path = require('path'); // Add path module
-require('dotenv').config({ path: path.resolve(__dirname, '../../.env') }); // Specify .env path
-
-// Define application configuration
-const config = {
-  // Environment
-  nodeEnv: process.env.NODE_ENV || 'development',
-  
-  // Server configuration
-  port: parseInt(process.env.PORT, 10) || 5000,
-  
-  // Database configuration
-  mongodbUri: process.env.MONGODB_URI,
-  
-  // JWT configuration
-  jwtSecret: process.env.JWT_SECRET,
-  jwtExpire: process.env.JWT_EXPIRE || '30d', // Default expiration: 30 days
-  
-  // File upload configuration
-  uploadDir: process.env.UPLOAD_DIR || 'uploads',
-  maxFileSize: parseInt(process.env.MAX_FILE_SIZE, 10) || 5 * 1024 * 1024, // 5MB default
-  allowedFileTypes: (process.env.ALLOWED_FILE_TYPES || 'pdf,jpg,jpeg,png,doc,docx').split(','),
-  
-  // User Roles
-  roles: ['admin', 'staff', 'customer'], // Updated roles
-  defaultRole: 'customer', // Updated default role
-  
-  // Rate Limiting configuration
-  rateLimitWindowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS, 10) || 15 * 60 * 1000, // 15 minutes
-  rateLimitMax: parseInt(process.env.RATE_LIMIT_MAX, 10) || 100, // Max 100 requests per window
-  
-  // Email configuration (for future use)
-  emailService: process.env.EMAIL_SERVICE,
-  emailUser: process.env.EMAIL_USER,
-  emailPassword: process.env.EMAIL_PASSWORD,
-  emailFrom: process.env.EMAIL_FROM,
-  
-  // Payment gateway configuration (Stripe)
-  stripePublishableKey: process.env.STRIPE_PUBLISHABLE_KEY,
-  stripeSecretKey: process.env.STRIPE_TEST_SECRET_KEY || process.env.STRIPE_SECRET_KEY,
-  stripeWebhookSecret: process.env.STRIPE_WEBHOOK_SECRET,
-  
-  // Geolocation API configuration (for future use)
-  geoApiKey: process.env.GEO_API_KEY,
-};
-
-// List of essential environment variables that must be defined
-const essentialVariables = [
-  { name: 'MONGODB_URI', value: config.mongodbUri },
-  { name: 'JWT_SECRET', value: config.jwtSecret }
-];
-
-// Validate essential configuration
-let missingVars = essentialVariables.filter(v => !v.value);
-if (missingVars.length > 0) {
-  const missingList = missingVars.map(v => v.name).join(', ');
-  console.error(`
-===============================================
-🚨 FATAL ERROR: Missing essential environment variables: ${missingList}
-===============================================
-Please make sure these variables are defined in your .env file.
-Refer to .env.example for the required variables and their formats.
-  `);
-  process.exit(1);
-}
-
-// Output confirmation of configuration loaded
-if (config.nodeEnv !== 'test') {
-  console.log(`Environment: ${config.nodeEnv}`);
-  console.log(`Server running on port: ${config.port}`);
-}
-
-module.exports = config;
diff --git a/backend/src/controllers/SubscriptionPlanController.js b/backend/src/controllers/SubscriptionPlanController.js
deleted file mode 100644
index 0ff8aa3..0000000
--- a/backend/src/controllers/SubscriptionPlanController.js
+++ /dev/null
@@ -1,237 +0,0 @@
-const SubscriptionPlan = require('../models/SubscriptionPlan');
-const UserSubscription = require('../models/UserSubscription');
-const NotFoundError = require('../errors/NotFoundError');
-const ApiError = require('../errors/ApiError');
-const BadRequestError = require('../errors/BadRequestError');
-const cacheService = require('../services/cacheService');
-
-// Cache keys prefix for better organization
-const CACHE_KEYS = {
-  ALL_PLANS: 'subscription_plans:all',
-  PLAN_BY_ID: 'subscription_plan:id:',
-  PLANS_BY_STATUS: 'subscription_plans:status:'
-};
-
-// Cache TTL (Time To Live) in seconds
-const CACHE_TTL = {
-  PLANS: 3600,         // 1 hour for plan lists
-  PLAN_DETAILS: 7200   // 2 hours for individual plan details
-};
-
-/**
- * @desc    Get all subscription plans
- * @route   GET /api/subscription-plans
- * @access  Public
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getSubscriptionPlans = async (req, res, next) => {
-    try {
-        // Determine cache key based on query parameters
-        const filter = {};
-        let cacheKey = CACHE_KEYS.ALL_PLANS;
-        
-        if (req.query.status) {
-            filter.status = req.query.status;
-            cacheKey = `${CACHE_KEYS.PLANS_BY_STATUS}${req.query.status}`;
-        }
-        
-        // Try fetching from cache first
-        const cachedPlans = await cacheService.getCache(cacheKey);
-        
-        if (cachedPlans) {
-            console.log(`Serving subscription plans from cache: ${cacheKey}`);
-            return res.status(200).json(cachedPlans);
-        }
-        
-        // If not in cache, fetch from database
-        console.log(`Cache miss for ${cacheKey}, fetching from database`);
-        const plans = await SubscriptionPlan.find(filter);
-        
-        // Store in cache before responding
-        await cacheService.setCache(cacheKey, plans, CACHE_TTL.PLANS);
-        
-        res.status(200).json(plans);
-    } catch (error) {
-        console.error('Error fetching subscription plans:', error);
-        next(new ApiError(500, 'Failed to retrieve subscription plans'));
-    }
-};
-
-/**
- * @desc    Create a new subscription plan
- * @route   POST /api/subscription-plans
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.createSubscriptionPlan = async (req, res, next) => {
-    // Validation handled by express-validator
-    const { name, description, price, duration, features, status } = req.body;
-
-    try {
-        const plan = await SubscriptionPlan.create({
-            name,
-            description,
-            price,
-            duration,
-            features,
-            status: status || 'active' // Default to active if not provided
-        });
-        
-        // Invalidate cache for all plans and status-specific caches
-        await Promise.all([
-            cacheService.deleteCache(CACHE_KEYS.ALL_PLANS),
-            cacheService.deleteCacheByPattern(`${CACHE_KEYS.PLANS_BY_STATUS}*`)
-        ]);
-        
-        res.status(201).json(plan);
-    } catch (error) {
-        console.error('Error creating subscription plan:', error);
-        // Mongoose validation/duplicate errors handled globally
-        if (!(error instanceof ApiError)) {
-            next(new ApiError(500, 'Failed to create subscription plan'));
-        } else {
-            next(error);
-        }
-    }
-};
-
-/**
- * @desc    Get a specific subscription plan by ID
- * @route   GET /api/subscription-plans/:id
- * @access  Public
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getSubscriptionPlanById = async (req, res, next) => {
-    const planId = req.params.id;
-    const cacheKey = `${CACHE_KEYS.PLAN_BY_ID}${planId}`;
-    
-    try {
-        // Try fetching from cache first
-        const cachedPlan = await cacheService.getCache(cacheKey);
-        
-        if (cachedPlan) {
-            console.log(`Serving subscription plan from cache: ${cacheKey}`);
-            return res.status(200).json(cachedPlan);
-        }
-        
-        // If not in cache, fetch from database
-        console.log(`Cache miss for ${cacheKey}, fetching from database`);
-        const plan = await SubscriptionPlan.findById(planId);
-        
-        if (!plan) {
-            throw new NotFoundError('Subscription plan not found');
-        }
-        
-        // Store in cache before responding
-        await cacheService.setCache(cacheKey, plan, CACHE_TTL.PLAN_DETAILS);
-        
-        res.status(200).json(plan);
-    } catch (error) {
-        console.error('Error fetching subscription plan by ID:', error);
-        next(error); // Pass NotFoundError or others
-    }
-};
-
-/**
- * @desc    Update a subscription plan
- * @route   PUT /api/subscription-plans/:id
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.updateSubscriptionPlan = async (req, res, next) => {
-    // Validation handled by express-validator
-    const { name, description, price, duration, features, status } = req.body;
-    const planId = req.params.id;
-
-    try {
-        const plan = await SubscriptionPlan.findById(planId);
-        if (!plan) {
-            throw new NotFoundError('Subscription plan not found');
-        }
-
-        // If we're changing from active to inactive, verify no active subscriptions exist
-        if (plan.status === 'active' && status === 'inactive') {
-            const activeSubscriptions = await UserSubscription.countDocuments({
-                subscriptionPlan: planId,
-                status: 'active'
-            });
-            
-            if (activeSubscriptions > 0) {
-                throw new BadRequestError('Cannot deactivate plan with active subscriptions. Please cancel or migrate the subscriptions first.');
-            }
-        }
-
-        plan.name = name || plan.name;
-        plan.description = description !== undefined ? description : plan.description;
-        plan.price = price !== undefined ? price : plan.price;
-        plan.duration = duration || plan.duration;
-        plan.features = features !== undefined ? features : plan.features;
-        plan.status = status || plan.status;
-
-        const updatedPlan = await plan.save(); // Trigger validation
-        
-        // Invalidate all related caches
-        await Promise.all([
-            cacheService.deleteCache(`${CACHE_KEYS.PLAN_BY_ID}${planId}`),
-            cacheService.deleteCache(CACHE_KEYS.ALL_PLANS),
-            cacheService.deleteCacheByPattern(`${CACHE_KEYS.PLANS_BY_STATUS}*`)
-        ]);
-        
-        res.status(200).json(updatedPlan);
-    } catch (error) {
-        console.error('Error updating subscription plan:', error);
-        // Mongoose validation/duplicate errors handled globally
-        next(error); // Pass NotFoundError or others
-    }
-};
-
-/**
- * @desc    Delete a subscription plan
- * @route   DELETE /api/subscription-plans/:id
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.deleteSubscriptionPlan = async (req, res, next) => {
-    const planId = req.params.id;
-    
-    try {
-        const plan = await SubscriptionPlan.findById(planId);
-        if (!plan) {
-            throw new NotFoundError('Subscription plan not found');
-        }
-
-        // Check if any active subscriptions use this plan before deleting
-        const activeSubs = await UserSubscription.countDocuments({ 
-            subscriptionPlan: planId, 
-            status: 'active' 
-        });
-        
-        if (activeSubs > 0) {
-            throw new BadRequestError('Cannot delete plan with active subscriptions. Please cancel or migrate the subscriptions first.');
-        }
-
-        await plan.deleteOne();
-        
-        // Invalidate all related caches
-        await Promise.all([
-            cacheService.deleteCache(`${CACHE_KEYS.PLAN_BY_ID}${planId}`),
-            cacheService.deleteCache(CACHE_KEYS.ALL_PLANS),
-            cacheService.deleteCacheByPattern(`${CACHE_KEYS.PLANS_BY_STATUS}*`)
-        ]);
-        
-        res.status(200).json({ message: 'Subscription plan deleted successfully' });
-    } catch (error) {
-        console.error('Error deleting subscription plan:', error);
-        next(error); // Pass NotFoundError, BadRequestError, or others
-    }
-};
\ No newline at end of file
diff --git a/backend/src/controllers/UserSubscriptionController.js b/backend/src/controllers/UserSubscriptionController.js
deleted file mode 100644
index 17eb8d7..0000000
--- a/backend/src/controllers/UserSubscriptionController.js
+++ /dev/null
@@ -1,334 +0,0 @@
-const UserSubscription = require('../models/UserSubscription');
-const SubscriptionPlan = require('../models/SubscriptionPlan');
-const User = require('../models/User');
-const NotFoundError = require('../errors/NotFoundError');
-const ForbiddenError = require('../errors/ForbiddenError');
-const BadRequestError = require('../errors/BadRequestError');
-const ApiError = require('../errors/ApiError');
-const mongoose = require('mongoose');
-
-/**
- * Helper function to add months to a date
- * @param {Date} date - The start date
- * @param {Number} months - Number of months to add
- * @returns {Date} - New date with months added
- */
-const addMonths = (date, months) => {
-    const result = new Date(date);
-    result.setMonth(result.getMonth() + months);
-    // Handle edge cases like Feb 29th
-    if (result.getDate() < date.getDate()) {
-        result.setDate(0); // Go to the last day of the previous month
-    }
-    return result;
-};
-
-/**
- * @desc    Create a new subscription for a user
- * @route   POST /api/user-subscriptions
- * @access  Private/financial_manager/admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.createUserSubscription = async (req, res, next) => {
-  const { userId, planId, startDate: customStartDate } = req.body;
-
-  // Basic validation
-  if (!userId || !planId) {
-    return next(new BadRequestError('User ID and Plan ID are required'));
-  }
-  if (!mongoose.Types.ObjectId.isValid(userId) || !mongoose.Types.ObjectId.isValid(planId)) {
-    return next(new BadRequestError('Invalid User ID or Plan ID format'));
-  }
-
-  try {
-    // Check if user and plan exist
-    const user = await User.findById(userId);
-    const plan = await SubscriptionPlan.findById(planId);
-
-    if (!user) {
-      throw new NotFoundError('User not found');
-    }
-    if (!plan) {
-      throw new NotFoundError('Subscription plan not found');
-    }
-
-    // Determine start date
-    const startDate = customStartDate ? new Date(customStartDate) : new Date();
-    if (isNaN(startDate.getTime())) {
-      return next(new BadRequestError('Invalid start date provided'));
-    }
-
-    // Calculate end date and next billing date based on plan duration
-    let durationMonths = 1; // Default to Monthly
-    switch (plan.duration) {
-      case 'Quarterly':
-        durationMonths = 3;
-        break;
-      case 'Semi-Annual':
-        durationMonths = 6;
-        break;
-      case 'Annual':
-        durationMonths = 12;
-        break;
-    }
-
-    const endDate = addMonths(startDate, durationMonths);
-    const nextBillingDate = new Date(endDate); // First billing is at the end of the first period
-
-    // Create the subscription
-    const newSubscription = new UserSubscription({
-      user: userId,
-      subscriptionPlan: planId,
-      startDate,
-      endDate,
-      status: 'active', // Default to active
-      autoRenew: true, // Default to auto-renew true, can be changed later
-      lastBillingDate: startDate, // Initial billing date is the start date
-      nextBillingDate,
-    });
-
-    await newSubscription.save();
-
-    // Optionally, increment subscriber count on the plan
-    await SubscriptionPlan.findByIdAndUpdate(planId, { $inc: { subscriberCount: 1 } });
-
-    res.status(201).json(newSubscription);
-  } catch (error) {
-    console.error('Error creating user subscription:', error);
-    next(error);
-  }
-};
-
-/**
- * @desc    Get all subscriptions for a specific user
- * @route   GET /api/user-subscriptions/user/:userId
- * @access  Private/financial_manager/admin/owner
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getUserSubscriptions = async (req, res, next) => {
-  const requestedUserId = req.params.userId;
-  const loggedInUserId = req.user.id;
-  const loggedInUserRole = req.user.role;
-
-  // Validate userId format
-  if (!mongoose.Types.ObjectId.isValid(requestedUserId)) {
-    return next(new BadRequestError('Invalid User ID format'));
-  }
-
-  // Check permissions: Allow if admin, financial manager, or the user is requesting their own subscriptions
-  if (loggedInUserRole !== 'admin' && loggedInUserRole !== 'financial_manager' && loggedInUserId !== requestedUserId) {
-    return next(new ForbiddenError('Not authorized to access these subscriptions'));
-  }
-
-  try {
-    const subscriptions = await UserSubscription.find({ user: requestedUserId })
-      .populate('subscriptionPlan', 'name price duration') // Populate plan details
-      .populate('user', 'username email'); // Populate basic user details
-
-    res.status(200).json(subscriptions);
-  } catch (error) {
-    console.error('Error fetching user subscriptions:', error);
-    next(error);
-  }
-};
-
-/**
- * @desc    Get a single subscription by ID
- * @route   GET /api/user-subscriptions/:id
- * @access  Private/financial_manager/admin/owner
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getUserSubscriptionById = async (req, res, next) => {
-  const subscriptionId = req.params.id;
-  const loggedInUserId = req.user.id;
-  const loggedInUserRole = req.user.role;
-
-  // Validate subscriptionId format
-  if (!mongoose.Types.ObjectId.isValid(subscriptionId)) {
-    return next(new BadRequestError('Invalid Subscription ID format'));
-  }
-
-  try {
-    const subscription = await UserSubscription.findById(subscriptionId)
-      .populate('subscriptionPlan', 'name price duration description')
-      .populate('user', 'username email');
-
-    if (!subscription) {
-      throw new NotFoundError('Subscription not found');
-    }
-
-    // Check permissions: Allow if admin, financial manager, or the owner of the subscription
-    if (loggedInUserRole !== 'admin' && loggedInUserRole !== 'financial_manager' && subscription.user._id.toString() !== loggedInUserId) {
-      return next(new ForbiddenError('Not authorized to access this subscription'));
-    }
-
-    res.status(200).json(subscription);
-  } catch (error) {
-    console.error('Error fetching subscription by ID:', error);
-    next(error);
-  }
-};
-
-/**
- * @desc    Update a subscription (e.g., status, autoRenew)
- * @route   PUT /api/user-subscriptions/:id
- * @access  Private/financial_manager/admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.updateUserSubscription = async (req, res, next) => {
-  const subscriptionId = req.params.id;
-  const { status, autoRenew } = req.body;
-
-  // Validate subscriptionId format
-  if (!mongoose.Types.ObjectId.isValid(subscriptionId)) {
-    return next(new BadRequestError('Invalid Subscription ID format'));
-  }
-
-  // Validate incoming data (basic example)
-  const allowedStatuses = ['active', 'expired', 'cancelled', 'pending'];
-  if (status && !allowedStatuses.includes(status)) {
-    return next(new BadRequestError('Invalid status value'));
-  }
-  if (autoRenew !== undefined && typeof autoRenew !== 'boolean') {
-    return next(new BadRequestError('Invalid autoRenew value, must be true or false'));
-  }
-
-  try {
-    const subscription = await UserSubscription.findById(subscriptionId);
-
-    if (!subscription) {
-      throw new NotFoundError('Subscription not found');
-    }
-
-    // Store previous status to detect changes
-    const previousStatus = subscription.status;
-    
-    // Update fields if they are provided in the request body
-    if (status !== undefined) {
-      subscription.status = status;
-    }
-    if (autoRenew !== undefined) {
-      subscription.autoRenew = autoRenew;
-    }
-
-    // If we're changing from non-active to active, adjust the endDate and nextBillingDate
-    if (previousStatus !== 'active' && subscription.status === 'active') {
-      // Get the plan details to calculate new dates
-      const plan = await SubscriptionPlan.findById(subscription.subscriptionPlan);
-      if (!plan) {
-        throw new NotFoundError('Subscription plan not found');
-      }
-
-      // Calculate duration based on plan
-      let durationMonths = 1; // Default to Monthly
-      switch (plan.duration) {
-        case 'Quarterly':
-          durationMonths = 3;
-          break;
-        case 'Semi-Annual':
-          durationMonths = 6;
-          break;
-        case 'Annual':
-          durationMonths = 12;
-          break;
-      }
-
-      const now = new Date();
-      subscription.endDate = addMonths(now, durationMonths);
-      subscription.nextBillingDate = new Date(subscription.endDate);
-      subscription.lastBillingDate = now;
-
-      // Increment the subscriber count on the plan
-      await SubscriptionPlan.findByIdAndUpdate(subscription.subscriptionPlan, { $inc: { subscriberCount: 1 } });
-    }
-    
-    // If we're changing from active to non-active, decrement the subscriber count
-    if (previousStatus === 'active' && subscription.status !== 'active') {
-      await SubscriptionPlan.findByIdAndUpdate(subscription.subscriptionPlan, { $inc: { subscriberCount: -1 } });
-    }
-
-    // Save changes
-    const updatedSubscription = await subscription.save();
-
-    res.status(200).json(updatedSubscription);
-  } catch (error) {
-    console.error('Error updating subscription:', error);
-    next(error);
-  }
-};
-
-/**
- * @desc    Cancel (mark as cancelled) a subscription
- * @route   DELETE /api/user-subscriptions/:id
- * @access  Private/financial_manager/admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.cancelUserSubscription = async (req, res, next) => {
-  const subscriptionId = req.params.id;
-
-  // Validate subscriptionId format
-  if (!mongoose.Types.ObjectId.isValid(subscriptionId)) {
-    return next(new BadRequestError('Invalid Subscription ID format'));
-  }
-
-  try {
-    const subscription = await UserSubscription.findById(subscriptionId);
-
-    if (!subscription) {
-      throw new NotFoundError('Subscription not found');
-    }
-
-    // Prevent cancelling already cancelled subscriptions (optional)
-    if (subscription.status === 'cancelled') {
-      return next(new BadRequestError('Subscription is already cancelled'));
-    }
-
-    const previousStatus = subscription.status;
-    subscription.status = 'cancelled';
-    subscription.autoRenew = false; // Ensure auto-renew is off
-
-    await subscription.save();
-
-    // Decrement subscriber count only if it was previously active
-    if (previousStatus === 'active') {
-      await SubscriptionPlan.findByIdAndUpdate(subscription.subscriptionPlan, { $inc: { subscriberCount: -1 } });
-    }
-
-    res.status(200).json({ message: 'Subscription cancelled successfully' });
-  } catch (error) {
-    console.error('Error cancelling subscription:', error);
-    next(error);
-  }
-};
-
-/**
- * @desc    Get all active subscriptions (for admin/financial manager overview)
- * @route   GET /api/user-subscriptions
- * @access  Private/financial_manager/admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getAllActiveSubscriptions = async (req, res, next) => {
-  try {
-    const activeSubscriptions = await UserSubscription.find({ status: 'active' })
-      .populate('user', 'username email')
-      .populate('subscriptionPlan', 'name price')
-      .sort({ nextBillingDate: 1 }); // Sort by next billing date
-
-    res.status(200).json(activeSubscriptions);
-  } catch (error) {
-    console.error('Error fetching all active subscriptions:', error);
-    next(new ApiError(500, 'Failed to retrieve active subscriptions'));
-  }
-};
diff --git a/backend/src/controllers/adminController.js b/backend/src/controllers/adminController.js
deleted file mode 100644
index 7be35b6..0000000
--- a/backend/src/controllers/adminController.js
+++ /dev/null
@@ -1,2 +0,0 @@
-module.exports = {
-};
diff --git a/backend/src/controllers/attendanceController.js b/backend/src/controllers/attendanceController.js
deleted file mode 100644
index 53884c4..0000000
--- a/backend/src/controllers/attendanceController.js
+++ /dev/null
@@ -1,783 +0,0 @@
-const mongoose = require('mongoose'); // Import mongoose
-const Attendance = require('../models/Attendance');
-const User = require('../models/User');
-const NotFoundError = require('../errors/NotFoundError');
-const ForbiddenError = require('../errors/ForbiddenError');
-const BadRequestError = require('../errors/BadRequestError');
-const ApiError = require('../errors/ApiError');
-
-/**
- * @desc    Record check-in for staff
- * @route   POST /api/attendance/check-in
- * @access  Private/Staff/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.checkIn = async (req, res, next) => {
-  try {
-    // Check if user is staff or admin
-    if (!['staff', 'admin'].includes(req.user.role)) {
-      throw new ForbiddenError('Only staff or admin can check in');
-    }
-    
-    // Check if already checked in today without checking out
-    const today = new Date();
-    today.setHours(0, 0, 0, 0);
-    const tomorrow = new Date(today);
-    tomorrow.setDate(tomorrow.getDate() + 1);
-    
-    const existingRecord = await Attendance.findOne({
-      staff: req.user.id,
-      date: { $gte: today, $lt: tomorrow },
-      checkOutTime: { $exists: false } // Only find records without a checkout time
-    });
-    
-    if (existingRecord) {
-      throw new BadRequestError('You are already checked in and have not checked out yet');
-    }
-    
-    // Create new attendance record
-    const attendance = new Attendance({
-      staff: req.user.id,
-      checkInTime: new Date(),
-      date: new Date() // Set the date field explicitly
-    });
-    
-    await attendance.save();
-    
-    res.status(201).json(attendance);
-  } catch (error) {
-    console.error('Check-in error:', error);
-    next(error); // Pass error to global handler
-  }
-};
-
-/**
- * @desc    Record check-out for staff
- * @route   PUT /api/attendance/check-out
- * @access  Private/Staff/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.checkOut = async (req, res, next) => {
-  try {
-    // Check if user is staff or admin
-    if (!['staff', 'admin'].includes(req.user.role)) {
-      throw new ForbiddenError('Only staff or admin can check out');
-    }
-    
-    // Find today's active check-in record
-    const today = new Date();
-    today.setHours(0, 0, 0, 0);
-    const tomorrow = new Date(today);
-    tomorrow.setDate(tomorrow.getDate() + 1);
-    
-    const record = await Attendance.findOne({
-      staff: req.user.id,
-      date: { $gte: today, $lt: tomorrow },
-      checkOutTime: { $exists: false } // Find the record that hasn't been checked out yet
-    });
-    
-    if (!record) {
-      throw new BadRequestError('No active check-in found for today to check out from');
-    }
-    
-    // Update checkout time (pre-save hook calculates totalHours)
-    record.checkOutTime = new Date();
-    
-    await record.save();
-    
-    res.json(record);
-  } catch (error) {
-    console.error('Check-out error:', error);
-    next(error); // Pass error to global handler
-  }
-};
-
-/**
- * @desc    Get current staff member's attendance by date range
- * @route   GET /api/attendance
- * @access  Private/Staff/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getMyAttendance = async (req, res, next) => {
-  try {
-    const { startDate, endDate } = req.query;
-    
-    let query = { staff: req.user.id };
-    
-    if (startDate && endDate) {
-      const start = new Date(startDate);
-      const end = new Date(endDate);
-      if (isNaN(start.getTime()) || isNaN(end.getTime())) {
-        throw new BadRequestError('Invalid date format for startDate or endDate');
-      }
-      // Ensure end date includes the whole day
-      end.setHours(23, 59, 59, 999);
-      query.date = { $gte: start, $lte: end };
-    } else if (startDate) {
-        const start = new Date(startDate);
-        if (isNaN(start.getTime())) {
-            throw new BadRequestError('Invalid date format for startDate');
-        }
-        query.date = { $gte: start };
-    } else if (endDate) {
-        const end = new Date(endDate);
-        if (isNaN(end.getTime())) {
-            throw new BadRequestError('Invalid date format for endDate');
-        }
-        end.setHours(23, 59, 59, 999);
-        query.date = { $lte: end };
-    }
-    
-    const attendance = await Attendance.find(query).sort({ date: -1 });
-    
-    res.json(attendance);
-  } catch (error) {
-    console.error('Error fetching own attendance:', error);
-    next(error); // Pass error to global handler
-  }
-};
-
-/**
- * @desc    Get all staff attendance (for admin)
- * @route   GET /api/attendance/all
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getAllAttendance = async (req, res, next) => {
-  try {
-    const { startDate, endDate, staffId } = req.query;
-    
-    let query = {};
-    
-    if (staffId) {
-      if (!mongoose.Types.ObjectId.isValid(staffId)) {
-        throw new BadRequestError('Invalid staffId format');
-      }
-      query.staff = staffId;
-    }
-    
-    if (startDate && endDate) {
-      const start = new Date(startDate);
-      const end = new Date(endDate);
-      if (isNaN(start.getTime()) || isNaN(end.getTime())) {
-        throw new BadRequestError('Invalid date format for startDate or endDate');
-      }
-      end.setHours(23, 59, 59, 999);
-      query.date = { $gte: start, $lte: end };
-    } // Add similar logic for single startDate or endDate if needed
-    
-    const attendance = await Attendance.find(query)
-      .populate('staff', 'name email') // Populate staff details
-      .sort({ date: -1 });
-    
-    res.json(attendance);
-  } catch (error) {
-    console.error('Error fetching all attendance:', error);
-    next(error); // Pass error to global handler
-  }
-};
-
-/**
- * @desc    Update attendance record (for admin)
- * @route   PUT /api/attendance/:id
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.updateAttendance = async (req, res, next) => {
-  // Validation handled by express-validator
-  const { checkInTime, checkOutTime, status, notes } = req.body;
-
-  try {
-    const attendance = await Attendance.findById(req.params.id);
-    
-    if (!attendance) {
-      throw new NotFoundError('Attendance record not found');
-    }
-    
-    // Update fields if provided
-    if (checkInTime) attendance.checkInTime = new Date(checkInTime); // Ensure it's a Date object
-    if (checkOutTime) attendance.checkOutTime = new Date(checkOutTime); // Ensure it's a Date object
-    if (status) attendance.status = status;
-    if (notes !== undefined) attendance.notes = notes;
-    
-    // If times change, the pre-save hook will recalculate totalHours
-    await attendance.save();
-    
-    res.json(attendance);
-  } catch (error) {
-    console.error('Error updating attendance:', error);
-    // Mongoose validation errors handled globally
-    next(error); // Pass NotFoundError or others
-  }
-};
-
-/**
- * @desc    Get staff attendance summary (for admin)
- * @route   GET /api/attendance/summary
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getAttendanceSummary = async (req, res, next) => {
-  try {
-    const { month, year } = req.query;
-    
-    // Validate month and year if provided
-    const currentYear = new Date().getFullYear();
-    const targetMonth = month ? parseInt(month) - 1 : new Date().getMonth();
-    const targetYear = year ? parseInt(year) : currentYear;
-
-    if (isNaN(targetMonth) || targetMonth < 0 || targetMonth > 11 || isNaN(targetYear) || targetYear < 2000 || targetYear > currentYear + 5) {
-        throw new BadRequestError('Invalid month or year provided');
-    }
-    
-    const startDate = new Date(targetYear, targetMonth, 1);
-    const endDate = new Date(targetYear, targetMonth + 1, 0, 23, 59, 59, 999); // End of the month
-    
-    // Get all staff members
-    const staffMembers = await User.find({ role: 'staff' }, '_id name email');
-    
-    // Use aggregation for potentially better performance
-    const summaryData = await Attendance.aggregate([
-        { $match: { 
-            staff: { $in: staffMembers.map(s => s._id) },
-            date: { $gte: startDate, $lte: endDate }
-        } },
-        { $group: {
-            _id: '$staff',
-            totalHours: { $sum: '$totalHours' },
-            presentDays: { $sum: { $cond: [ { $eq: ['$status', 'Present'] }, 1, 0 ] } },
-            absentDays: { $sum: { $cond: [ { $eq: ['$status', 'Absent'] }, 1, 0 ] } },
-            lateDays: { $sum: { $cond: [ { $eq: ['$status', 'Late'] }, 1, 0 ] } },
-            leaveDays: { $sum: { $cond: [ { $eq: ['$status', 'On Leave'] }, 1, 0 ] } }, // Added leave days
-            totalRecords: { $sum: 1 }
-        } },
-        { $lookup: { // Join with users collection to get staff details
-            from: 'users',
-            localField: '_id',
-            foreignField: '_id',
-            as: 'staffDetails'
-        } },
-        { $unwind: '$staffDetails' }, // Deconstruct the staffDetails array
-        { $project: { // Shape the output
-            _id: 0,
-            staff: {
-                _id: '$staffDetails._id',
-                name: '$staffDetails.name',
-                email: '$staffDetails.email'
-            },
-            summary: {
-                totalHours: { $ifNull: ['$totalHours', 0] },
-                presentDays: { $ifNull: ['$presentDays', 0] },
-                absentDays: { $ifNull: ['$absentDays', 0] },
-                lateDays: { $ifNull: ['$lateDays', 0] },
-                leaveDays: { $ifNull: ['$leaveDays', 0] },
-                totalRecords: { $ifNull: ['$totalRecords', 0] }
-            }
-        } }
-    ]);
-
-    // Add staff members who had no records in the period
-    const staffWithRecords = summaryData.map(s => s.staff._id.toString());
-    staffMembers.forEach(staff => {
-        if (!staffWithRecords.includes(staff._id.toString())) {
-            summaryData.push({
-                staff: { _id: staff._id, name: staff.name, email: staff.email },
-                summary: { totalHours: 0, presentDays: 0, absentDays: 0, lateDays: 0, leaveDays: 0, totalRecords: 0 }
-            });
-        }
-    });
-
-    res.json(summaryData);
-
-  } catch (error) {
-    console.error('Error fetching attendance summary:', error);
-    next(error); // Pass error to global handler
-  }
-};
-
-/**
- * @desc    Export attendance report as PDF
- * @route   GET /api/attendance/reports/export
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.exportAttendanceReport = async (req, res, next) => {
-  try {
-    const { month, year } = req.query;
-    const PDFDocument = require('pdfkit');
-    
-    // Validate month and year if provided
-    const currentYear = new Date().getFullYear();
-    const targetMonth = month ? parseInt(month) - 1 : new Date().getMonth();
-    const targetYear = year ? parseInt(year) : currentYear;
-
-    if (isNaN(targetMonth) || targetMonth < 0 || targetMonth > 11 || isNaN(targetYear) || targetYear < 2000 || targetYear > currentYear + 5) {
-        throw new BadRequestError('Invalid month or year provided');
-    }
-    
-    const startDate = new Date(targetYear, targetMonth, 1);
-    const endDate = new Date(targetYear, targetMonth + 1, 0, 23, 59, 59, 999); // End of the month
-    
-    // Get all staff members
-    const staffMembers = await User.find({ role: 'staff' }, '_id name email');
-    
-    // Create a PDF document
-    const doc = new PDFDocument({
-      margin: 50,
-      size: 'A4'
-    });
-    
-    // Set response headers for PDF download
-    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
-                       'July', 'August', 'September', 'October', 'November', 'December'];
-    const reportFilename = `attendance-report-${monthNames[targetMonth]}-${targetYear}.pdf`;
-    
-    res.setHeader('Content-Type', 'application/pdf');
-    res.setHeader('Content-Disposition', `attachment; filename=${reportFilename}`);
-    
-    // Pipe the PDF to the response
-    doc.pipe(res);
-    
-    // PDF Generation - Header
-    doc.font('Helvetica-Bold').fontSize(18).text('SmartBin Staff Attendance Report', { align: 'center' });
-    doc.moveDown();
-    
-    doc.fontSize(14).text(`Report for: ${monthNames[targetMonth]} ${targetYear}`, { align: 'center' });
-    doc.moveDown();
-    doc.fontSize(10).text(`Generated on: ${new Date().toLocaleDateString('en-US', {
-      year: 'numeric',
-      month: 'long',
-      day: 'numeric'
-    })}`, { align: 'center' });
-    doc.moveDown(2);
-    
-    // Use aggregation for potentially better performance
-    const summaryData = await Attendance.aggregate([
-      { $match: { 
-        staff: { $in: staffMembers.map(s => s._id) },
-        date: { $gte: startDate, $lte: endDate }
-      }},
-      { $group: {
-        _id: '$staff',
-        totalHours: { $sum: '$totalHours' },
-        presentDays: { $sum: { $cond: [ { $eq: ['$status', 'Present'] }, 1, 0 ] } },
-        absentDays: { $sum: { $cond: [ { $eq: ['$status', 'Absent'] }, 1, 0 ] } },
-        lateDays: { $sum: { $cond: [ { $eq: ['$status', 'Late'] }, 1, 0 ] } },
-        leaveDays: { $sum: { $cond: [ { $eq: ['$status', 'On Leave'] }, 1, 0 ] } }, 
-        halfDays: { $sum: { $cond: [ { $eq: ['$status', 'Half-day'] }, 1, 0 ] } },
-        totalRecords: { $sum: 1 }
-      }},
-      { $lookup: { // Join with users collection to get staff details
-        from: 'users',
-        localField: '_id',
-        foreignField: '_id',
-        as: 'staffDetails'
-      }},
-      { $unwind: '$staffDetails' }, // Deconstruct the staffDetails array
-      { $project: { // Shape the output
-        _id: 0,
-        staff: {
-          _id: '$staffDetails._id',
-          name: '$staffDetails.name',
-          email: '$staffDetails.email'
-        },
-        totalHours: { $ifNull: ['$totalHours', 0] },
-        presentDays: { $ifNull: ['$presentDays', 0] },
-        absentDays: { $ifNull: ['$absentDays', 0] },
-        lateDays: { $ifNull: ['$lateDays', 0] },
-        leaveDays: { $ifNull: ['$leaveDays', 0] },
-        halfDays: { $ifNull: ['$halfDays', 0] },
-        totalRecords: { $ifNull: ['$totalRecords', 0] }
-      }},
-      { $sort: { 'staff.name': 1 } } // Sort by staff name
-    ]);
-
-    // Add staff members who had no records in the period
-    const staffWithRecords = summaryData.map(s => s.staff._id.toString());
-    const noRecordsStaff = [];
-    
-    staffMembers.forEach(staff => {
-      if (!staffWithRecords.includes(staff._id.toString())) {
-        noRecordsStaff.push({
-          staff: { _id: staff._id, name: staff.name, email: staff.email },
-          totalHours: 0, 
-          presentDays: 0, 
-          absentDays: 0, 
-          lateDays: 0, 
-          leaveDays: 0,
-          halfDays: 0,
-          totalRecords: 0
-        });
-      }
-    });
-    
-    // Combine data
-    const allStaffData = [...summaryData, ...noRecordsStaff];
-    
-    // Calculate department totals
-    const departmentTotals = {
-      totalHours: 0,
-      presentDays: 0,
-      absentDays: 0,
-      lateDays: 0,
-      leaveDays: 0,
-      halfDays: 0,
-      totalWorkingDays: 0
-    };
-    
-    allStaffData.forEach(staff => {
-      departmentTotals.totalHours += staff.totalHours;
-      departmentTotals.presentDays += staff.presentDays;
-      departmentTotals.absentDays += staff.absentDays;
-      departmentTotals.lateDays += staff.lateDays;
-      departmentTotals.leaveDays += staff.leaveDays;
-      departmentTotals.halfDays += staff.halfDays;
-    });
-    
-    // Get working days in the month (excluding weekends)
-    let workingDaysCount = 0;
-    const currentDate = new Date(startDate);
-    while (currentDate <= endDate) {
-      const dayOfWeek = currentDate.getDay();
-      if (dayOfWeek !== 0 && dayOfWeek !== 6) { // 0 = Sunday, 6 = Saturday
-        workingDaysCount++;
-      }
-      currentDate.setDate(currentDate.getDate() + 1);
-    }
-    departmentTotals.totalWorkingDays = workingDaysCount;
-    
-    // Department summary section
-    doc.font('Helvetica-Bold').fontSize(14).text('Department Summary', { underline: true });
-    doc.moveDown(0.5);
-    doc.font('Helvetica').fontSize(11);
-    
-    doc.text(`Total Working Days in Month: ${departmentTotals.totalWorkingDays}`);
-    doc.text(`Total Hours Logged: ${departmentTotals.totalHours.toFixed(2)}`);
-    doc.text(`Average Daily Hours: ${(departmentTotals.totalHours / (departmentTotals.presentDays + departmentTotals.halfDays / 2)).toFixed(2) || 0}`);
-    doc.text(`Total Present Days: ${departmentTotals.presentDays}`);
-    doc.text(`Total Absent Days: ${departmentTotals.absentDays}`);
-    doc.text(`Total Late Days: ${departmentTotals.lateDays}`);
-    doc.text(`Total Leave Days: ${departmentTotals.leaveDays}`);
-    doc.text(`Total Half Days: ${departmentTotals.halfDays}`);
-    
-    doc.moveDown(2);
-    
-    // Staff attendance table
-    doc.font('Helvetica-Bold').fontSize(14).text('Staff Attendance Details', { underline: true });
-    doc.moveDown(0.5);
-    
-    // Table header
-    const tableTop = doc.y + 20;
-    doc.font('Helvetica-Bold').fontSize(10);
-    
-    const colWidths = {
-      name: 130,
-      hours: 60,
-      present: 60,
-      absent: 60,
-      late: 60,
-      leave: 60,
-      halfDay: 60,
-      perf: 60
-    };
-    
-    // Column headers
-    doc.text('Staff Name', 50, tableTop);
-    doc.text('Total Hours', 50 + colWidths.name, tableTop);
-    doc.text('Present', 50 + colWidths.name + colWidths.hours, tableTop);
-    doc.text('Absent', 50 + colWidths.name + colWidths.hours + colWidths.present, tableTop);
-    doc.text('Late', 50 + colWidths.name + colWidths.hours + colWidths.present + colWidths.absent, tableTop);
-    doc.text('Leave', 50 + colWidths.name + colWidths.hours + colWidths.present + colWidths.absent + colWidths.late, tableTop);
-    doc.text('Half Days', 50 + colWidths.name + colWidths.hours + colWidths.present + colWidths.absent + colWidths.late + colWidths.leave, tableTop);
-    
-    // Draw horizontal line after header
-    doc.moveTo(50, tableTop + 15)
-       .lineTo(50 + colWidths.name + colWidths.hours + colWidths.present + colWidths.absent + colWidths.late + colWidths.leave + colWidths.halfDay, tableTop + 15)
-       .stroke();
-    
-    // Table rows
-    let rowY = tableTop + 25;
-    doc.font('Helvetica').fontSize(10);
-    
-    // Function to add a page if we're running out of space
-    const checkAndAddPage = (y) => {
-      if (y > 700) {
-        doc.addPage();
-        // Add header to new page
-        doc.font('Helvetica-Bold').fontSize(14).text('Staff Attendance Details (Continued)', { underline: true });
-        doc.moveDown(0.5);
-        
-        // Draw header row on new page
-        const newTableTop = doc.y + 15;
-        doc.font('Helvetica-Bold').fontSize(10);
-        doc.text('Staff Name', 50, newTableTop);
-        doc.text('Total Hours', 50 + colWidths.name, newTableTop);
-        doc.text('Present', 50 + colWidths.name + colWidths.hours, newTableTop);
-        doc.text('Absent', 50 + colWidths.name + colWidths.hours + colWidths.present, newTableTop);
-        doc.text('Late', 50 + colWidths.name + colWidths.hours + colWidths.present + colWidths.absent, newTableTop);
-        doc.text('Leave', 50 + colWidths.name + colWidths.hours + colWidths.present + colWidths.absent + colWidths.late, newTableTop);
-        doc.text('Half Days', 50 + colWidths.name + colWidths.hours + colWidths.present + colWidths.absent + colWidths.late + colWidths.leave, newTableTop);
-        
-        // Draw horizontal line after header
-        doc.moveTo(50, newTableTop + 15)
-           .lineTo(50 + colWidths.name + colWidths.hours + colWidths.present + colWidths.absent + colWidths.late + colWidths.leave + colWidths.halfDay, newTableTop + 15)
-           .stroke();
-        
-        doc.font('Helvetica').fontSize(10);
-        return newTableTop + 25;
-      }
-      return y;
-    };
-    
-    // Draw each staff's row
-    allStaffData.forEach((staff, i) => {
-      rowY = checkAndAddPage(rowY);
-      
-      doc.text(staff.staff.name, 50, rowY);
-      doc.text(staff.totalHours.toFixed(2), 50 + colWidths.name, rowY);
-      doc.text(staff.presentDays.toString(), 50 + colWidths.name + colWidths.hours, rowY);
-      doc.text(staff.absentDays.toString(), 50 + colWidths.name + colWidths.hours + colWidths.present, rowY);
-      doc.text(staff.lateDays.toString(), 50 + colWidths.name + colWidths.hours + colWidths.present + colWidths.absent, rowY);
-      doc.text(staff.leaveDays.toString(), 50 + colWidths.name + colWidths.hours + colWidths.present + colWidths.absent + colWidths.late, rowY);
-      doc.text(staff.halfDays.toString(), 50 + colWidths.name + colWidths.hours + colWidths.present + colWidths.absent + colWidths.late + colWidths.leave, rowY);
-      
-      rowY += 20;
-    });
-    
-    // Draw bottom border
-    doc.moveTo(50, rowY - 10)
-       .lineTo(50 + colWidths.name + colWidths.hours + colWidths.present + colWidths.absent + colWidths.late + colWidths.leave + colWidths.halfDay, rowY - 10)
-       .stroke();
-    
-    doc.moveDown(2);
-    
-    // Get staff with perfect attendance (all working days present)
-    const perfectAttendance = allStaffData.filter(staff => 
-      staff.presentDays + staff.halfDays / 2 + staff.leaveDays >= workingDaysCount);
-    
-    if (perfectAttendance.length > 0) {
-      rowY = checkAndAddPage(rowY + 25);
-      
-      doc.font('Helvetica-Bold').fontSize(12).text('Staff with Perfect Attendance', 50, rowY);
-      rowY += 20;
-      
-      doc.font('Helvetica').fontSize(10);
-      perfectAttendance.forEach((staff, i) => {
-        rowY = checkAndAddPage(rowY);
-        doc.text(`${i+1}. ${staff.staff.name} - ${staff.presentDays} days present, ${staff.leaveDays} approved leaves`, 50, rowY);
-        rowY += 15;
-      });
-    }
-    
-    // Staff with attendance issues (more than 2 absences or lates)
-    const attendanceIssues = allStaffData.filter(staff => 
-      staff.absentDays > 2 || staff.lateDays > 3);
-    
-    if (attendanceIssues.length > 0) {
-      rowY = checkAndAddPage(rowY + 25);
-      
-      doc.font('Helvetica-Bold').fontSize(12).text('Staff with Attendance Concerns', 50, rowY);
-      rowY += 20;
-      
-      doc.font('Helvetica').fontSize(10);
-      attendanceIssues.forEach((staff, i) => {
-        rowY = checkAndAddPage(rowY);
-        doc.text(`${i+1}. ${staff.staff.name} - ${staff.absentDays} absences, ${staff.lateDays} late arrivals`, 50, rowY);
-        rowY += 15;
-      });
-    }
-    
-    // PDF notes
-    rowY = checkAndAddPage(rowY + 40);
-    doc.font('Helvetica-Bold').fontSize(12).text('Notes:', 50, rowY);
-    rowY += 20;
-    
-    doc.font('Helvetica').fontSize(10);
-    doc.text('- This report provides a summary of staff attendance for the specified month.', 50, rowY);
-    rowY += 15;
-    doc.text('- Working days exclude weekends and public holidays.', 50, rowY);
-    rowY += 15;
-    doc.text('- Half days are counted as 0.5 days for attendance calculation purposes.', 50, rowY);
-    rowY += 15;
-    doc.text(`- Report generated by ${req.user.name} on ${new Date().toLocaleDateString()}.`, 50, rowY);
-    
-    // Footer with page numbers
-    const pageCount = doc.bufferedPageRange().count;
-    for (let i = 0; i < pageCount; i++) {
-      doc.switchToPage(i);
-      doc.fontSize(8).text(
-        `Page ${i + 1} of ${pageCount}`,
-        50,
-        doc.page.height - 50,
-        { align: 'center' }
-      );
-    }
-    
-    // Finalize the PDF
-    doc.end();
-    
-  } catch (error) {
-    console.error('Error generating attendance report:', error);
-    next(error);
-  }
-};
-
-/**
- * @desc    Get detailed attendance report for a specific period
- * @route   GET /api/attendance/reports/detailed
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getDetailedAttendanceReport = async (req, res, next) => {
-  try {
-    const { startDate, endDate, staffId } = req.query;
-    
-    if (!startDate || !endDate) {
-      throw new BadRequestError('Start and end dates are required');
-    }
-    
-    const start = new Date(startDate);
-    const end = new Date(endDate);
-    end.setHours(23, 59, 59, 999); // Include all of end date
-    
-    if (isNaN(start.getTime()) || isNaN(end.getTime())) {
-      throw new BadRequestError('Invalid date format');
-    }
-    
-    // Get working days in the period (excluding weekends)
-    let workingDaysCount = 0;
-    const currentDate = new Date(start);
-    while (currentDate <= end) {
-      const dayOfWeek = currentDate.getDay();
-      if (dayOfWeek !== 0 && dayOfWeek !== 6) { // 0 = Sunday, 6 = Saturday
-        workingDaysCount++;
-      }
-      currentDate.setDate(currentDate.getDate() + 1);
-    }
-    
-    let query = {};
-    
-    // If staffId is provided, filter by that staff member
-    if (staffId) {
-      if (!mongoose.Types.ObjectId.isValid(staffId)) {
-        throw new BadRequestError('Invalid staffId format');
-      }
-      query.staff = staffId;
-    }
-    
-    // Add date range to query
-    query.date = { $gte: start, $lte: end };
-    
-    // Get all attendance records in the period
-    const attendanceRecords = await Attendance.find(query)
-      .populate('staff', 'name email')
-      .sort({ date: 1, staff: 1 });
-    
-    // Group records by staff member
-    const recordsByStaff = {};
-    attendanceRecords.forEach(record => {
-      const staffId = record.staff._id.toString();
-      if (!recordsByStaff[staffId]) {
-        recordsByStaff[staffId] = {
-          staffInfo: {
-            id: record.staff._id,
-            name: record.staff.name,
-            email: record.staff.email
-          },
-          records: [],
-          summary: {
-            totalHours: 0,
-            presentDays: 0,
-            absentDays: 0,
-            lateDays: 0,
-            leaveDays: 0,
-            halfDays: 0,
-            attendanceRate: 0
-          }
-        };
-      }
-      
-      // Add record to staff's records
-      recordsByStaff[staffId].records.push({
-        id: record._id,
-        date: record.date,
-        checkInTime: record.checkInTime,
-        checkOutTime: record.checkOutTime,
-        totalHours: record.totalHours,
-        status: record.status,
-        notes: record.notes
-      });
-      
-      // Update summary
-      recordsByStaff[staffId].summary.totalHours += record.totalHours || 0;
-      
-      switch(record.status) {
-        case 'Present':
-          recordsByStaff[staffId].summary.presentDays++;
-          break;
-        case 'Absent':
-          recordsByStaff[staffId].summary.absentDays++;
-          break;
-        case 'Late':
-          recordsByStaff[staffId].summary.lateDays++;
-          break;
-        case 'On Leave':
-          recordsByStaff[staffId].summary.leaveDays++;
-          break;
-        case 'Half-day':
-          recordsByStaff[staffId].summary.halfDays++;
-          break;
-      }
-    });
-    
-    // Calculate attendance rate for each staff member
-    Object.values(recordsByStaff).forEach(staff => {
-      const attendanceDays = staff.summary.presentDays + (staff.summary.halfDays / 2) + staff.summary.leaveDays;
-      staff.summary.attendanceRate = parseFloat(((attendanceDays / workingDaysCount) * 100).toFixed(2));
-      
-      // Add work days with no records
-      if (staff.summary.presentDays + staff.summary.absentDays + staff.summary.lateDays + 
-          staff.summary.leaveDays + staff.summary.halfDays < workingDaysCount) {
-        staff.summary.missingRecords = workingDaysCount - (staff.summary.presentDays + staff.summary.absentDays + 
-                                      staff.summary.lateDays + staff.summary.leaveDays + staff.summary.halfDays);
-      } else {
-        staff.summary.missingRecords = 0;
-      }
-    });
-    
-    // Convert to array and sort by name
-    const reportData = Object.values(recordsByStaff).sort((a, b) => 
-      a.staffInfo.name.localeCompare(b.staffInfo.name)
-    );
-    
-    // Return the report data
-    res.json({
-      periodInfo: {
-        startDate: start,
-        endDate: end,
-        workingDays: workingDaysCount
-      },
-      staffReports: reportData
-    });
-    
-  } catch (error) {
-    console.error('Error generating detailed attendance report:', error);
-    next(error);
-  }
-};
\ No newline at end of file
diff --git a/backend/src/controllers/authController.js b/backend/src/controllers/authController.js
deleted file mode 100644
index c8a07cb..0000000
--- a/backend/src/controllers/authController.js
+++ /dev/null
@@ -1,183 +0,0 @@
-// backend/src/controllers/authController.js
-const User = require('../models/User');
-const jwt = require('jsonwebtoken');
-const bcrypt = require('bcryptjs');
-const BadRequestError = require('../errors/BadRequestError');
-const UnauthorizedError = require('../errors/UnauthorizedError');
-const ApiError = require('../errors/ApiError');
-const NotFoundError = require('../errors/NotFoundError');
-const config = require('../config'); // Import the centralized config
-
-/**
- * Generates a JSON Web Token (JWT) for a given user ID.
- * Uses the secret and expiration defined in the application config.
- *
- * @param {string} id - The MongoDB ObjectId of the user.
- * @returns {string} The generated JWT token.
- */
-const generateToken = (id) => {
-  // Use config values and ensure they are strings
-  return jwt.sign({ id }, String(config.jwtSecret), {
-    expiresIn: String(config.jwtExpire)
-  });
-};
-
-/**
- * @desc    Register a new user. Handles validation errors and checks for existing users.
- *          Hashes the password before saving.
- * @route   POST /api/auth/register
- * @access  Public
- * @param   {import('express').Request} req - Express request object, expects user details in body.
- * @param   {import('express').Response} res - Express response object.
- * @param   {function} next - Express next middleware function
- */
-exports.registerUser = async (req, res, next) => {
-  // Validation is handled by express-validator middleware
-  const { name, email, password, role, phone, address } = req.body; // Include new fields
-
-  try {
-    // Check if user exists
-    const userExists = await User.findOne({ email });
-
-    if (userExists) {
-      throw new BadRequestError('User already exists with this email');
-    }
-
-    // Create user with all provided fields
-    const user = await User.create({
-      name,
-      email,
-      password,
-      role: role || 'customer', // Use validated role or default to 'customer'
-      phone, // Add phone if provided
-      address, // Add address if provided
-      // Initialize preferences if role is customer
-      ...((!role || role === 'customer') && {
-        preferences: {
-          pickupNotes: ''
-        }
-      }),
-      // Initialize staff fields if role is staff
-      ...(role === 'staff' && {
-        skills: [],
-        availability: ''
-      })
-    });
-
-    // User creation includes pre-save hook for password hashing
-
-    res.status(201).json({
-      _id: user._id,
-      name: user.name,
-      email: user.email,
-      role: user.role,
-      phone: user.phone,
-      address: user.address,
-      token: generateToken(user._id)
-    });
-
-  } catch (error) {
-    console.error('Registration error:', error);
-    // Simply pass the error to the global handler
-    next(error); 
-  }
-};
-
-/**
- * @desc    Authenticate a user and return a JWT token. Handles MFA checks.
- * @route   POST /api/auth/login
- * @access  Public
- * @param   {import('express').Request} req - Express request object, expects email and password in body.
- * @param   {import('express').Response} res - Express response object.
- * @param   {function} next - Express next middleware function
- */
-exports.loginUser = async (req, res, next) => {
-  // Validation is handled by express-validator middleware
-  const { email, password } = req.body;
-  console.log(`[Login Attempt] Email: ${email}, Password Received: ${password ? 'Yes' : 'No'}`); // Log received data
-
-  try {
-    // Find user by email (case-insensitive) and select password and MFA fields
-    const user = await User.findOne({ 
-      email: { $regex: new RegExp(`^${email}$`, 'i') } 
-    }).select('+password +mfaSecret');
-    
-    if (!user) {
-      console.log(`[Login Attempt] User not found for email: ${email}`); // Log user not found
-      throw new UnauthorizedError('Invalid credentials'); // Use specific error
-    }
-    console.log(`[Login Attempt] User found: ${user.email}, ID: ${user._id}`); // Log user found
-    
-    // Check if password matches using the model method
-    const isMatch = await user.matchPassword(password);
-    console.log(`[Login Attempt] Password match result for ${user.email}: ${isMatch}`); // Log password match result
-    
-    if (!isMatch) {
-      throw new UnauthorizedError('Invalid credentials'); // Use specific error
-    }
-
-    // Check if MFA is enabled for this user
-    if (user.mfaEnabled) {
-      // Return only partial authentication - client will need to complete MFA step
-      return res.json({
-        mfaRequired: true,
-        userId: user._id,
-        // Do not provide token yet - will be given after MFA verification
-      });
-    }
-    
-    // If no MFA or MFA verification passed, generate token and send response
-    res.json({
-      _id: user._id,
-      name: user.name,
-      email: user.email,
-      role: user.role,
-      phone: user.phone,
-      mfaEnabled: user.mfaEnabled,
-      token: generateToken(user._id)
-    });
-
-  } catch (error) {
-    console.error('Login error:', error);
-    // Simply pass the error to the global handler
-    next(error); 
-  }
-};
-
-/**
- * @desc    Get the profile details of the currently authenticated user.
- * @route   GET /api/auth/me
- * @access  Private
- * @param   {import('express').Request} req - Express request object (user attached by protect middleware).
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getMe = async (req, res, next) => {
-  try {
-    // Get full user details from database to include all new fields
-    const user = await User.findById(req.user.id);
-
-    if (!user) {
-        throw new NotFoundError('User data not found after authentication');
-    }
-    
-    res.json({
-      _id: user._id,
-      name: user.name,
-      email: user.email,
-      phone: user.phone,
-      address: user.address,
-      role: user.role,
-      preferences: user.preferences,
-      // Include staff-specific fields if applicable
-      ...(user.role === 'staff' && { 
-        skills: user.skills, 
-        availability: user.availability 
-      }),
-      mfaEnabled: user.mfaEnabled
-    });
-  } catch (error) {
-    console.error('GetMe error:', error);
-    next(error); // Pass NotFoundError or others
-  }
-};
\ No newline at end of file
diff --git a/backend/src/controllers/budgetController.js b/backend/src/controllers/budgetController.js
deleted file mode 100644
index 1928cb1..0000000
--- a/backend/src/controllers/budgetController.js
+++ /dev/null
@@ -1,252 +0,0 @@
-// backend/src/controllers/budgetController.js
-const Budget = require('../models/Budget');
-const ApiError = require('../errors/ApiError');
-const NotFoundError = require('../errors/NotFoundError');
-const BadRequestError = require('../errors/BadRequestError');
-const mongoose = require('mongoose');
-const budgetService = require('../services/budgetService'); // Import the service
-
-/**
- * @desc    Create a new budget allocation
- * @route   POST /api/budgets
- * @access  Private (admin, financial_manager)
- */
-exports.createBudget = async (req, res, next) => {
-    try {
-        const { category, periodType, periodStartDate, periodEndDate, allocatedAmount, notes } = req.body;
-
-        // Check for overlapping budgets for the same category and period type
-        // This logic might need refinement based on exact overlap rules (e.g., allow overlapping if dates don't clash)
-        const existingBudget = await Budget.findOne({
-            category,
-            periodType,
-            // A simple check: ensure no budget exists where the new period falls entirely within an existing one
-            // or vice-versa, or they partially overlap. More complex date range overlap logic might be needed.
-            $or: [
-                { periodStartDate: { $lte: periodEndDate }, periodEndDate: { $gte: periodStartDate } },
-            ]
-        });
-
-        if (existingBudget) {
-            // Consider allowing updates or warning instead of hard error depending on requirements
-            // return next(new BadRequestError(`A budget for ${category} (${periodType}) already exists or overlaps with the specified period.`));
-            console.warn(`Potential overlapping budget found for ${category} (${periodType}) during period ${periodStartDate} - ${periodEndDate}. Proceeding with creation.`);
-        }
-
-        const budget = await Budget.create({
-            category,
-            periodType,
-            periodStartDate,
-            periodEndDate,
-            allocatedAmount,
-            notes,
-            createdBy: req.user._id // Assuming user ID is available from 'protect' middleware
-        });
-
-        res.status(201).json(budget);
-    } catch (error) {
-        console.error('Error creating budget:', error);
-        if (error.name === 'ValidationError') {
-            return next(new BadRequestError(error.message));
-        }
-        next(error); // Pass to global error handler
-    }
-};
-
-/**
- * @desc    Get all budget allocations (with filtering)
- * @route   GET /api/budgets
- * @access  Private (admin, financial_manager)
- */
-exports.getBudgets = async (req, res, next) => {
-    try {
-        const { category, periodType, startDate, endDate, page = 1, limit = 10 } = req.query;
-        const query = {};
-
-        if (category) query.category = category;
-        if (periodType) query.periodType = periodType;
-
-        // Date range filtering: Find budgets that overlap with the query range
-        if (startDate && endDate) {
-            const start = new Date(startDate);
-            const end = new Date(endDate);
-            if (isNaN(start.getTime()) || isNaN(end.getTime())) {
-                throw new BadRequestError('Invalid date format for filtering');
-            }
-            end.setHours(23, 59, 59, 999); // Include the whole end day
-
-            query.$or = [
-                // Budget period is completely within the query range
-                { periodStartDate: { $gte: start, $lte: end }, periodEndDate: { $gte: start, $lte: end } },
-                // Budget period starts before and ends within the query range
-                { periodStartDate: { $lt: start }, periodEndDate: { $gte: start, $lte: end } },
-                // Budget period starts within and ends after the query range
-                { periodStartDate: { $gte: start, $lte: end }, periodEndDate: { $gt: end } },
-                // Budget period completely encompasses the query range
-                { periodStartDate: { $lt: start }, periodEndDate: { $gt: end } }
-            ];
-        } else if (startDate) {
-            const start = new Date(startDate);
-            if (isNaN(start.getTime())) throw new BadRequestError('Invalid start date format');
-            query.periodEndDate = { $gte: start }; // Budgets ending on or after startDate
-        } else if (endDate) {
-            const end = new Date(endDate);
-            if (isNaN(end.getTime())) throw new BadRequestError('Invalid end date format');
-            end.setHours(23, 59, 59, 999);
-            query.periodStartDate = { $lte: end }; // Budgets starting on or before endDate
-        }
-
-        const options = {
-            page: parseInt(page, 10),
-            limit: parseInt(limit, 10),
-            sort: { periodStartDate: -1, category: 1 }, // Sort by start date desc, then category asc
-            populate: { path: 'createdBy', select: 'name email' } // Populate creator info
-        };
-
-        // Use mongoose-paginate-v2 if available, otherwise use standard find/limit/skip
-        const budgets = await (Budget.paginate ? Budget.paginate(query, options) : Budget.find(query).sort(options.sort).skip((options.page - 1) * options.limit).limit(options.limit).populate(options.populate));
-
-        res.status(200).json(budgets);
-    } catch (error) {
-        console.error('Error fetching budgets:', error);
-        next(error);
-    }
-};
-
-/**
- * @desc    Get a specific budget allocation by ID
- * @route   GET /api/budgets/:id
- * @access  Private (admin, financial_manager)
- */
-exports.getBudgetById = async (req, res, next) => {
-    try {
-        if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
-            throw new BadRequestError('Invalid budget ID format');
-        }
-
-        const budget = await Budget.findById(req.params.id).populate('createdBy', 'name email');
-
-        if (!budget) {
-            throw new NotFoundError('Budget not found');
-        }
-
-        res.status(200).json(budget);
-    } catch (error) {
-        console.error('Error fetching budget by ID:', error);
-        next(error);
-    }
-};
-
-/**
- * @desc    Update a budget allocation
- * @route   PUT /api/budgets/:id
- * @access  Private (admin, financial_manager)
- */
-exports.updateBudget = async (req, res, next) => {
-    try {
-        if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
-            throw new BadRequestError('Invalid budget ID format');
-        }
-
-        const { category, periodType, periodStartDate, periodEndDate, allocatedAmount, notes } = req.body;
-
-        const budget = await Budget.findById(req.params.id);
-
-        if (!budget) {
-            throw new NotFoundError('Budget not found');
-        }
-
-        // Optional: Add check if req.user._id matches budget.createdBy or if user is admin
-        // if (budget.createdBy.toString() !== req.user._id && req.user.role !== 'admin') {
-        //     throw new ForbiddenError('User not authorized to update this budget');
-        // }
-
-        // Update fields
-        budget.category = category || budget.category;
-        budget.periodType = periodType || budget.periodType;
-        budget.periodStartDate = periodStartDate || budget.periodStartDate;
-        budget.periodEndDate = periodEndDate || budget.periodEndDate;
-        budget.allocatedAmount = allocatedAmount !== undefined ? allocatedAmount : budget.allocatedAmount;
-        budget.notes = notes !== undefined ? notes : budget.notes;
-
-        const updatedBudget = await budget.save();
-
-        res.status(200).json(updatedBudget);
-    } catch (error) {
-        console.error('Error updating budget:', error);
-        if (error.name === 'ValidationError') {
-            return next(new BadRequestError(error.message));
-        }
-        next(error);
-    }
-};
-
-/**
- * @desc    Delete a budget allocation
- * @route   DELETE /api/budgets/:id
- * @access  Private (admin, financial_manager)
- */
-exports.deleteBudget = async (req, res, next) => {
-    try {
-        if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
-            throw new BadRequestError('Invalid budget ID format');
-        }
-
-        const budget = await Budget.findById(req.params.id);
-
-        if (!budget) {
-            throw new NotFoundError('Budget not found');
-        }
-
-        // Optional: Add ownership/admin check before deletion
-        // if (budget.createdBy.toString() !== req.user._id && req.user.role !== 'admin') {
-        //     throw new ForbiddenError('User not authorized to delete this budget');
-        // }
-
-        await budget.deleteOne(); // Use deleteOne() on the document
-
-        res.status(200).json({ message: 'Budget deleted successfully' });
-    } catch (error) {
-        console.error('Error deleting budget:', error);
-        next(error);
-    }
-};
-
-/**
- * @desc    Get budget summary (allocated vs. actual spending)
- * @route   GET /api/budgets/summary
- * @access  Private (admin, financial_manager)
- */
-exports.getBudgetSummary = async (req, res, next) => {
-    try {
-        const { startDate, endDate } = req.query;
-
-        if (!startDate || !endDate) {
-            throw new BadRequestError('Start date and end date query parameters are required for summary');
-        }
-
-        const start = new Date(startDate);
-        const end = new Date(endDate);
-        if (isNaN(start.getTime()) || isNaN(end.getTime())) {
-            throw new BadRequestError('Invalid date format for summary range');
-        }
-        end.setHours(23, 59, 59, 999); // Include the whole end day
-
-        // Call the service function to calculate the summary
-        const summary = await budgetService.calculateBudgetVsActual(start, end);
-
-        if (summary.length === 0) {
-             return res.status(200).json({ message: 'No budgets or expenses found for the specified period.', summary: [] });
-        }
-
-        res.status(200).json({ summary });
-
-    } catch (error) {
-        console.error('Error generating budget summary:', error);
-        // Handle specific errors from the service if needed
-        if (error instanceof BadRequestError) {
-            return next(error);
-        }
-        next(error); // Pass to global error handler
-    }
-};
diff --git a/backend/src/controllers/complaintController.js b/backend/src/controllers/complaintController.js
deleted file mode 100644
index 05410dc..0000000
--- a/backend/src/controllers/complaintController.js
+++ /dev/null
@@ -1,151 +0,0 @@
-const Complaint = require('../models/Complaint');
-const User = require('../models/User'); // Needed for assigning admin
-const { NotFoundError, ForbiddenError, BadRequestError } = require('../errors');
-const mongoose = require('mongoose');
-
-// @desc    Submit a new complaint
-// @route   POST /api/complaints
-// @access  Private (Customer, Staff)
-exports.submitComplaint = async (req, res, next) => {
-    const { subject, description, relatedRequestId } = req.body;
-    try {
-        const complaint = await Complaint.create({
-            user: req.user.id, // User ID from protect middleware
-            subject,
-            description,
-            relatedRequestId: relatedRequestId || undefined
-        });
-        res.status(201).json(complaint);
-    } catch (error) {
-        next(error); // Pass to global error handler
-    }
-};
-
-// @desc    Get complaints submitted by the logged-in user
-// @route   GET /api/complaints/my-complaints
-// @access  Private (Customer, Staff)
-exports.getMyComplaints = async (req, res, next) => {
-    try {
-        const complaints = await Complaint.find({ user: req.user.id })
-                                        .sort({ createdAt: -1 })
-                                        .populate('assignedAdmin', 'name email'); // Show who is assigned
-        res.status(200).json(complaints);
-    } catch (error) {
-        next(error);
-    }
-};
-
-// @desc    Get all complaints (for Admin)
-// @route   GET /api/complaints
-// @access  Private (Admin)
-exports.getAllComplaints = async (req, res, next) => {
-    try {
-        // Add filtering/pagination later if needed
-        const complaints = await Complaint.find()
-                                        .sort({ createdAt: -1 })
-                                        .populate('user', 'name email') // Show who submitted
-                                        .populate('assignedAdmin', 'name email');
-        res.status(200).json(complaints);
-    } catch (error) {
-        next(error);
-    }
-};
-
-// @desc    Get a single complaint by ID
-// @route   GET /api/complaints/:id
-// @access  Private (Admin or Owner)
-exports.getComplaintById = async (req, res, next) => {
-    try {
-        const complaint = await Complaint.findById(req.params.id)
-                                        .populate('user', 'name email')
-                                        .populate('assignedAdmin', 'name email');
-        if (!complaint) {
-            throw new NotFoundError('Complaint not found');
-        }
-        // Check permission: Admin or the user who submitted it
-        if (req.user.role !== 'admin' && complaint.user._id.toString() !== req.user.id) {
-             throw new ForbiddenError('Not authorized to view this complaint');
-        }
-        res.status(200).json(complaint);
-    } catch (error) {
-        next(error);
-    }
-};
-
-// @desc    Update complaint status (Admin)
-// @route   PATCH /api/complaints/:id/status
-// @access  Private (Admin)
-exports.updateComplaintStatus = async (req, res, next) => {
-    const { status } = req.body;
-    // Add validation for status value here or using express-validator
-    if (!['Open', 'In Progress', 'Resolved', 'Closed'].includes(status)) {
-         return next(new BadRequestError('Invalid status value'));
-    }
-    try {
-        const complaint = await Complaint.findByIdAndUpdate(
-            req.params.id,
-            { status },
-            { new: true, runValidators: true } // Return updated doc, run schema validation
-        );
-        if (!complaint) {
-            throw new NotFoundError('Complaint not found');
-        }
-        res.status(200).json(complaint);
-    } catch (error) {
-        next(error);
-    }
-};
-
-// @desc    Assign complaint to an admin/staff (Admin)
-// @route   PATCH /api/complaints/:id/assign
-// @access  Private (Admin)
-exports.assignComplaint = async (req, res, next) => {
-    const { adminId } = req.body;
-     if (!mongoose.Types.ObjectId.isValid(adminId)) {
-         return next(new BadRequestError('Invalid Admin ID format'));
-     }
-    try {
-         // Check if assigned user exists and is admin/staff
-        const assignedUser = await User.findById(adminId);
-        if (!assignedUser || !['admin', 'staff', 'financial_manager'].includes(assignedUser.role)) { // Allow staff/finance to handle complaints? Adjust roles as needed
-            throw new NotFoundError('Assignee user not found or does not have appropriate role');
-        }
-
-        const complaint = await Complaint.findByIdAndUpdate(
-            req.params.id,
-            { assignedAdmin: adminId },
-            { new: true, runValidators: true }
-        ).populate('assignedAdmin', 'name email'); // Populate newly assigned admin
-
-        if (!complaint) {
-            throw new NotFoundError('Complaint not found');
-        }
-        res.status(200).json(complaint);
-    } catch (error) {
-        next(error);
-    }
-};
-
- // @desc    Add resolution notes to a complaint (Admin)
-// @route   PATCH /api/complaints/:id/resolve
-// @access  Private (Admin)
-exports.addResolutionNotes = async (req, res, next) => {
-    const { resolutionNotes } = req.body;
-    if (!resolutionNotes || resolutionNotes.trim() === '') {
-        return next(new BadRequestError('Resolution notes cannot be empty'));
-    }
-    try {
-        const complaint = await Complaint.findById(req.params.id);
-         if (!complaint) {
-            throw new NotFoundError('Complaint not found');
-        }
-        // Optionally set status to Resolved/Closed when notes are added
-        complaint.resolutionNotes = resolutionNotes;
-        complaint.status = 'Resolved'; // Or 'Closed' based on workflow
-        await complaint.save();
-
-        res.status(200).json(complaint);
-    } catch (error) {
-        next(error);
-    }
-};
\ No newline at end of file
diff --git a/backend/src/controllers/dashboardController.js b/backend/src/controllers/dashboardController.js
deleted file mode 100644
index b19c804..0000000
--- a/backend/src/controllers/dashboardController.js
+++ /dev/null
@@ -1,158 +0,0 @@
-// backend/src/controllers/dashboardController.js
-const User = require('../models/User');
-const Payment = require('../models/Payment');
-const Expense = require('../models/Expense');
-const UserSubscription = require('../models/UserSubscription');
-const SubscriptionPlan = require('../models/SubscriptionPlan');
-const Complaint = require('../models/Complaint');
-const ApiError = require('../errors/ApiError');
-const { startOfDay, endOfDay, addDays, format, parseISO, isAfter } = require('date-fns');
-
-// Use a fixed date consistent with the seeding script for demo purposes
-const DEMO_CURRENT_DATE = new Date('2025-04-26T12:00:00Z'); // Use a fixed time to avoid timezone issues
-
-/**
- * Get financial manager main dashboard data
- * @param {object} req - Express request object
- * @param {object} res - Express response object
- * @param {function} next - Express next middleware function
- */
-const getFinancialManagerMainDashboardData = async (req, res, next) => {
-  try {
-    // Use the fixed demo date instead of the actual current date
-    const today = DEMO_CURRENT_DATE;
-    const todayStart = startOfDay(today);
-    const todayEnd = endOfDay(today);
-
-    // Get today's revenue (sum of all payments received today)
-    const todayPayments = await Payment.find({
-      paymentDate: { $gte: todayStart, $lte: todayEnd },
-      status: 'completed'
-    });
-    const todayRevenue = todayPayments.reduce((sum, payment) => sum + payment.amount, 0);
-
-    // Get today's expenses
-    const todayExpenses = await Expense.find({
-      date: { $gte: todayStart, $lte: todayEnd }
-    });
-    const todayTotalExpenses = todayExpenses.reduce((sum, expense) => sum + expense.amount, 0);
-
-    // Get new customers count (registered today)
-    const newCustomers = await User.countDocuments({
-      role: 'customer',
-      createdAt: { $gte: todayStart, $lte: todayEnd }
-    });
-
-    // Get staff attendance data (mock - would be from attendance model in real implementation)
-    // This is a simplified version - in a real app, this would come from the Attendance model
-    const staffAttendance = {
-      present: 12,
-      absent: 3,
-      late: 2,
-      leave: 1
-    };
-
-    // Get pending payments (due within next 7 days from fixed date)
-    const pendingPayments = await Payment.find({
-      status: 'pending',
-      dueDate: { $gte: today, $lte: addDays(today, 7) } // Query relative to fixed date
-    }).populate('user', 'name email').limit(5);
-
-    // Get subscriptions ending soon (in the next 7 days from fixed date)
-    const subscriptionsEndingSoon = await UserSubscription.find({
-      endDate: {
-        $gte: today,
-        $lte: addDays(today, 7) // Query relative to fixed date
-      },
-      status: 'active'
-    }).populate('user', 'name email')
-      .populate('subscriptionPlan', 'name price')
-      .limit(5);
-
-    // Get pending expenses awaiting approval
-    const pendingExpenses = await Expense.find({
-      status: 'pending'
-    }).sort({ date: -1 }).limit(5);
-
-    // Get recent payments (today's transactions based on fixed date)
-    const recentPayments = await Payment.find({
-      paymentDate: { $gte: todayStart, $lte: todayEnd }
-    }).populate('user', 'name email')
-      .sort({ paymentDate: -1 })
-      .limit(10);
-
-    // Get recent financial-related messages/complaints (query by subject)
-    const recentMessages = await Complaint.find({
-      subject: { $regex: /billing|payment|subscription/i } // Search subject for keywords
-    }).populate('user', 'name email')
-      .sort({ createdAt: -1 })
-      .limit(5);
-
-    // Get upcoming financial events (relative to fixed date)
-    const upcomingEvents = [];
-
-    // Add upcoming payment dues
-    const upcomingPaymentDues = await Payment.find({
-      status: 'pending',
-      dueDate: { $gte: today, $lte: addDays(today, 14) } // Query relative to fixed date
-    }).populate('user', 'name').sort({ dueDate: 1 }).limit(10);
-
-    upcomingPaymentDues.forEach(payment => {
-      upcomingEvents.push({
-        type: 'payment_due',
-        description: `Payment due from ${payment.user?.name || 'Unknown customer'}`,
-        date: payment.dueDate,
-        amount: payment.amount
-      });
-    });
-
-    // Add subscription endings
-    const upcomingSubscriptionEndings = await UserSubscription.find({
-      endDate: { $gte: today, $lte: addDays(today, 14) }, // Query relative to fixed date
-      status: 'active'
-    }).populate('user', 'name').populate('subscriptionPlan', 'name price').limit(10);
-
-    upcomingSubscriptionEndings.forEach(subscription => {
-      upcomingEvents.push({
-        type: 'subscription_end',
-        description: `${subscription.subscriptionPlan?.name || 'Unknown'} subscription ending for ${subscription.user?.name || 'Unknown'}`,
-        date: subscription.endDate
-      });
-    });
-
-    // Sort events by date
-    upcomingEvents.sort((a, b) => new Date(a.date) - new Date(b.date));
-
-    // Create response data structure
-    const dashboardData = {
-      dailySnapshot: {
-        revenue: todayRevenue,
-        expenses: todayTotalExpenses,
-        newCustomers,
-        staffAttendance
-      },
-      actionRequired: {
-        pendingPayments,
-        subscriptionsEndingSoon,
-        pendingExpenses
-      },
-      dailyActivity: {
-        recentPayments
-      },
-      communications: {
-        recentMessages
-      },
-      calendar: {
-        upcomingEvents
-      }
-    };
-
-    res.json(dashboardData);
-  } catch (error) {
-    next(new ApiError(error.message, 500));
-  }
-};
-
-module.exports = {
-  getFinancialManagerMainDashboardData
-};
\ No newline at end of file
diff --git a/backend/src/controllers/documentController.js b/backend/src/controllers/documentController.js
deleted file mode 100644
index c674ad9..0000000
--- a/backend/src/controllers/documentController.js
+++ /dev/null
@@ -1,168 +0,0 @@
-const Document = require('../models/Document');
-const User = require('../models/User');
-const path = require('path');
-const fs = require('fs').promises; // Use promise-based fs for async/await
-const NotFoundError = require('../errors/NotFoundError');
-const ForbiddenError = require('../errors/ForbiddenError');
-const BadRequestError = require('../errors/BadRequestError');
-const ApiError = require('../errors/ApiError');
-
-/**
- * @desc    Upload new document
- * @route   POST /api/documents/upload
- * @access  Private
- * @param   {object} req - Express request object (with file attached by multer)
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.uploadDocument = async (req, res, next) => {
-  try {
-    // Multer middleware handles file presence check and potential errors
-    if (!req.file) {
-      // This might be redundant if multer always throws an error, but good as a fallback
-      throw new BadRequestError('No file uploaded or file rejected by filter');
-    }
-    
-    // Validation for name/type handled by express-validator
-    const { name, type } = req.body;
-
-    // Create new document
-    const document = await Document.create({
-      user: req.user.id,
-      name: name || req.file.originalname, // Use provided name or original filename
-      type: type || 'Other', // Use provided type or default
-      filePath: req.file.path, // Path saved by multer
-      mimeType: req.file.mimetype,
-      size: req.file.size
-    });
-    
-    res.status(201).json(document);
-  } catch (error) {
-    console.error('Document upload error:', error);
-    // Simply pass the error to the global handler
-    next(error);
-  }
-};
-
-/**
- * @desc    Get all documents for the logged-in user
- * @route   GET /api/documents
- * @access  Private
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getUserDocuments = async (req, res, next) => {
-  try {
-    const documents = await Document.find({ user: req.user.id }).sort({ uploadedAt: -1 });
-    res.json(documents);
-  } catch (error) {
-    console.error('Error fetching user documents:', error);
-    // Simply pass the error to the global handler
-    next(error); 
-  }
-};
-
-/**
- * @desc    Get a specific document by ID
- * @route   GET /api/documents/:id
- * @access  Private (Owner or Admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getDocumentById = async (req, res, next) => {
-  try {
-    const document = await Document.findById(req.params.id);
-    
-    if (!document) {
-      throw new NotFoundError('Document not found');
-    }
-    
-    // Check permissions: User must own the document or be an admin
-    if (document.user.toString() !== req.user.id && req.user.role !== 'admin') {
-      throw new ForbiddenError('Not authorized to access this document');
-    }
-    
-    res.json(document);
-  } catch (error) {
-    console.error('Error fetching document by ID:', error);
-    next(error); // Pass NotFoundError, ForbiddenError, or others
-  }
-};
-
-/**
- * @desc    Delete a document by ID
- * @route   DELETE /api/documents/:id
- * @access  Private (Owner or Admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.deleteDocument = async (req, res, next) => {
-  try {
-    const document = await Document.findById(req.params.id);
-    
-    if (!document) {
-      throw new NotFoundError('Document not found');
-    }
-    
-    // Check permissions: User must own the document or be an admin
-    if (document.user.toString() !== req.user.id && req.user.role !== 'admin') {
-      throw new ForbiddenError('Not authorized to delete this document');
-    }
-    
-    // Delete file from storage using fs.promises
-    try {
-        await fs.unlink(document.filePath);
-        console.log(`Deleted file: ${document.filePath}`);
-    } catch (unlinkError) {
-        // Log error but continue, as the DB entry should still be removed
-        console.error(`Failed to delete file ${document.filePath}:`, unlinkError);
-        // Optionally, you could choose *not* to delete the DB record if file deletion fails
-        // depending on desired behavior.
-    }
-    
-    // Delete document from database
-    await document.deleteOne();
-    
-    res.json({ message: 'Document deleted successfully' });
-  } catch (error) {
-    console.error('Error deleting document:', error);
-    next(error); // Pass NotFoundError, ForbiddenError, or others
-  }
-};
-
-/**
- * @desc    Verify or reject a document (admin only)
- * @route   PUT /api/documents/:id/verify
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.verifyDocument = async (req, res, next) => {
-  // Validation for status handled by express-validator
-  const { status, notes } = req.body;
-
-  try {
-    const document = await Document.findById(req.params.id);
-    
-    if (!document) {
-      throw new NotFoundError('Document not found');
-    }
-    
-    // Update verification details
-    document.verificationStatus = status; // Already validated
-    document.verificationDate = Date.now();
-    document.verificationNotes = notes || ''; // Use notes if provided, else empty string
-    
-    const updatedDocument = await document.save();
-    
-    res.json(updatedDocument);
-  } catch (error) {
-    console.error('Error verifying document:', error);
-    // Mongoose validation errors handled globally
-    next(error); // Pass NotFoundError or others
-  }
-};
\ No newline at end of file
diff --git a/backend/src/controllers/errorController.js b/backend/src/controllers/errorController.js
deleted file mode 100644
index ba2f61c..0000000
--- a/backend/src/controllers/errorController.js
+++ /dev/null
@@ -1,110 +0,0 @@
-// backend/src/controllers/errorController.js
-const AppError = require('../utils/appError');
-const config = require('../config'); // Import config to check environment
-
-// Handle CastError (e.g., invalid MongoDB ObjectId)
-const handleCastErrorDB = err => {
-  const message = `Invalid ${err.path}: ${err.value}.`;
-  return new AppError(message, 400); // 400 Bad Request
-};
-
-// Handle Duplicate Fields Error (e.g., unique constraint violation)
-const handleDuplicateFieldsDB = err => {
-  // Extract value from the error message using regex
-  const value = err.errmsg.match(/(["'])(\?.)*?\1/)[0];
-  const message = `Duplicate field value: ${value}. Please use another value!`;
-  return new AppError(message, 400); // 400 Bad Request
-};
-
-// Handle Mongoose Validation Error
-const handleValidationErrorDB = err => {
-  const errors = Object.values(err.errors).map(el => el.message);
-  const message = `Invalid input data. ${errors.join('. ')}`;
-  return new AppError(message, 400); // 400 Bad Request
-};
-
-// Handle JWT Invalid Signature Error
-const handleJWTError = () => new AppError('Invalid token. Please log in again!', 401); // 401 Unauthorized
-
-// Handle JWT Expired Error
-const handleJWTExpiredError = () => new AppError('Your token has expired! Please log in again.', 401); // 401 Unauthorized
-
-// Send detailed error response in development
-const sendErrorDev = (err, req, res) => {
-  // A) API errors
-  if (req.originalUrl.startsWith('/api')) {
-    return res.status(err.statusCode).json({
-      status: err.status,
-      error: err,
-      message: err.message,
-      stack: err.stack
-    });
-  }
-  // B) RENDERED WEBSITE errors (if applicable, otherwise same as API)
-  console.error('ERROR 💥', err);
-  return res.status(err.statusCode).json({ // Keep JSON response for consistency
-      title: 'Something went wrong!',
-      msg: err.message
-  });
-};
-
-// Send generic error response in production
-const sendErrorProd = (err, req, res) => {
-  // A) API errors
-  if (req.originalUrl.startsWith('/api')) {
-    // Operational, trusted error: send message to client
-    if (err.isOperational) {
-      return res.status(err.statusCode).json({
-        status: err.status,
-        message: err.message
-      });
-    }
-    // Programming or other unknown error: don't leak error details
-    // 1) Log error
-    console.error('ERROR 💥', err);
-    // 2) Send generic message
-    return res.status(500).json({
-      status: 'error',
-      message: 'Something went very wrong!'
-    });
-  }
-
-  // B) RENDERED WEBSITE errors (if applicable)
-  // Operational, trusted error: send message to client
-   if (err.isOperational) {
-    return res.status(err.statusCode).json({ // Keep JSON response
-        title: 'Something went wrong!',
-        msg: err.message
-    });
-  }
-  // Programming or other unknown error: don't leak error details
-  // 1) Log error
-  console.error('ERROR 💥', err);
-  // 2) Send generic message
-  return res.status(err.statusCode).json({ // Keep JSON response
-      title: 'Something went wrong!',
-      msg: 'Please try again later.'
-  });
-};
-
-// Global Error Handling Middleware
-module.exports = (err, req, res, next) => {
-  err.statusCode = err.statusCode || 500; // Default to 500 Internal Server Error
-  err.status = err.status || 'error'; // Default status
-
-  if (config.nodeEnv === 'development') {
-    sendErrorDev(err, req, res);
-  } else if (config.nodeEnv === 'production') {
-    let error = { ...err }; // Create a hard copy
-    error.message = err.message; // Copy message explicitly as it might not spread correctly
-
-    // Handle specific Mongoose/JWT errors for production
-    if (error.name === 'CastError') error = handleCastErrorDB(error);
-    if (error.code === 11000) error = handleDuplicateFieldsDB(error); // MongoDB duplicate key error
-    if (error.name === 'ValidationError') error = handleValidationErrorDB(error);
-    if (error.name === 'JsonWebTokenError') error = handleJWTError();
-    if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();
-
-    sendErrorProd(error, req, res);
-  }
-};
diff --git a/backend/src/controllers/financialController.js b/backend/src/controllers/financialController.js
deleted file mode 100644
index 6a3cd12..0000000
--- a/backend/src/controllers/financialController.js
+++ /dev/null
@@ -1,1723 +0,0 @@
-const mongoose = require('mongoose'); // Import mongoose
-const Expense = require('../models/Expense');
-const Payment = require('../models/Payment');
-const UserSubscription = require('../models/UserSubscription'); // Added
-const SubscriptionPlan = require('../models/SubscriptionPlan'); // Added
-const User = require('../models/User'); // Ensure User model is imported
-const ApiError = require('../errors/ApiError');
-const BadRequestError = require('../errors/BadRequestError'); // Added for date validation
-
-// Helper function to determine date range based on 'range' parameter
-const getReportDateRange = (range, queryStartDate, queryEndDate) => {
-    let startDate, endDate = new Date(); // Default end date to now
-
-    if (queryStartDate && queryEndDate) {
-        startDate = new Date(queryStartDate);
-        endDate = new Date(queryEndDate);
-        endDate.setHours(23, 59, 59, 999); // Include the whole end day
-    } else {
-        endDate.setHours(23, 59, 59, 999); // Set end time for today
-        switch(range) {
-            case 'last3months':
-                startDate = new Date();
-                // Go back 3 months from the *current* month's start date
-                startDate.setMonth(startDate.getMonth() - 3);
-                startDate.setDate(1); // Set to the 1st day of that month
-                startDate.setHours(0, 0, 0, 0); // Set to the beginning of the day
-                break;
-            case 'year':
-                startDate = new Date(endDate.getFullYear(), 0, 1); // Start from Jan 1st of the current year
-                startDate.setHours(0, 0, 0, 0);
-                break;
-            case 'month':
-            default: // Default to 'month'
-                startDate = new Date(endDate.getFullYear(), endDate.getMonth(), 1); // Start from the 1st of the current month
-                startDate.setHours(0, 0, 0, 0);
-                break;
-        }
-    }
-
-    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
-        throw new BadRequestError('Invalid date format provided');
-    }
-    
-    // Ensure start date is not after end date
-    if (startDate > endDate) {
-        throw new BadRequestError('Start date cannot be after end date');
-    }
-
-    return { startDate, endDate };
-};
-
-
-exports.getDashboardData = async (req, res, next) => {
-  try {
-    const { range = 'month', startDate: queryStartDate, endDate: queryEndDate } = req.query; // Get range or specific dates
-
-    // Determine the date range for the report
-    const { startDate, endDate } = getReportDateRange(range, queryStartDate, queryEndDate);
-
-    // --- Aggregate Financial Summary ---
-    // 1. Total Revenue (Completed Payments)
-    const incomeResult = await Payment.aggregate([
-      { $match: { paymentDate: { $gte: startDate, $lte: endDate }, status: 'completed' } },
-      { $group: { _id: null, totalIncome: { $sum: '$amount' } } }
-    ]);
-    const totalRevenue = incomeResult.length > 0 ? incomeResult[0].totalIncome : 0;
-
-    // 2. Total Expenses
-    const expenseResult = await Expense.aggregate([
-      { $match: { date: { $gte: startDate, $lte: endDate } } }, // Assuming 'date' field for expenses
-      { $group: { _id: null, totalExpenses: { $sum: '$amount' } } }
-    ]);
-    const totalExpenses = expenseResult.length > 0 ? expenseResult[0].totalExpenses : 0;
-
-    // 3. Net Profit
-    const netProfit = totalRevenue - totalExpenses;
-
-    // --- Aggregate Subscription Data ---
-    // 4. Active Subscriptions Count (using UserSubscription model)
-    const activeSubscriptions = await UserSubscription.countDocuments({ 
-        status: 'active', 
-        // Optional: Add date range filter if activation/expiry dates are relevant
-        // startDate: { $lte: endDate }, 
-        // $or: [{ endDate: { $gte: startDate } }, { endDate: null }] 
-    });
-
-    // 5. New Subscriptions in the period (based on UserSubscription start date)
-    const newSubscriptions = await UserSubscription.countDocuments({
-        startDate: { $gte: startDate, $lte: endDate } // Use startDate field
-    });
-
-    // --- Aggregate Revenue/Expense Breakdowns ---
-    // 6. Revenue by Subscription Plan
-    const revenueByPlan = await Payment.aggregate([
-        { $match: { paymentDate: { $gte: startDate, $lte: endDate }, status: 'completed', userSubscription: { $exists: true } } },
-        { $lookup: { // Join with UserSubscription to get plan details
-            from: 'usersubscriptions', // collection name
-            localField: 'userSubscription',
-            foreignField: '_id',
-            as: 'subDetails'
-        }},
-        { $unwind: '$subDetails' }, // Deconstruct the subDetails array
-        { $lookup: { // Join with SubscriptionPlan to get plan name
-            from: 'subscriptionplans', // collection name
-            localField: 'subDetails.subscriptionPlan',
-            foreignField: '_id',
-            as: 'planDetails'
-        }},
-        { $unwind: '$planDetails' }, // Deconstruct the planDetails array
-        { $group: {
-            _id: '$planDetails._id', // Group by plan ID
-            planName: { $first: '$planDetails.name' }, // Get the plan name
-            revenue: { $sum: '$amount' }, // Sum revenue per plan
-            count: { $sum: 1 } // Count payments per plan (might differ from subscriber count)
-        }},
-        { $project: { // Reshape the output
-            _id: 0, // Exclude default _id
-            planName: 1,
-            revenue: 1,
-            count: 1 // This is payment count, not subscriber count for the plan
-        }},
-        { $sort: { revenue: -1 } } // Sort by revenue descending
-    ]);
-
-    // 7. Expenses by Category
-    const expensesByCategory = await Expense.aggregate([
-        { $match: { date: { $gte: startDate, $lte: endDate } } },
-        { $group: {
-            _id: '$category', // Group by category field
-            total: { $sum: '$amount' } // Sum expenses per category
-        }},
-        { $project: { // Reshape the output
-            _id: 0, // Exclude default _id
-            category: '$_id', // Rename _id to category
-            total: 1
-        }},
-        { $sort: { total: -1 } } // Sort by total descending
-    ]);
-
-    // --- Fetch Recent Transactions ---
-    // 8. Recent Payments (limit 5-10)
-    const recentPayments = await Payment.find({ paymentDate: { $gte: startDate, $lte: endDate }, status: 'completed' })
-        .populate('user', 'name') // Populate user name
-        .sort({ paymentDate: -1 })
-        .limit(5) // Limit the results
-        .select('paymentDate user description amount status'); // Select specific fields
-
-    // 9. Recent Expenses (limit 5-10)
-    const recentExpenses = await Expense.find({ date: { $gte: startDate, $lte: endDate } })
-        .sort({ date: -1 })
-        .limit(5)
-        .select('date category description amount status'); // Select specific fields
-
-    // --- Fetch Subscription Plan Overview ---
-    // 10. Fetch all Subscription Plans details for the subscription tab
-    const subscriptionPlans = await SubscriptionPlan.find({})
-        .select('name price duration _id') // Select necessary fields
-        .lean(); // Use lean for plain JS objects
-
-    // Add subscriber count to each plan (requires another query)
-    for (const plan of subscriptionPlans) {
-        // FIX: Use the correct field 'subscriptionPlan' instead of 'plan'
-        plan.subscriberCount = await UserSubscription.countDocuments({ subscriptionPlan: plan._id, status: 'active' });
-    }
-    
-    // --- Prepare Trend Data (Example: Monthly Revenue/Expenses for 'year' range) ---
-    let revenueTrend = [];
-    let expenseTrend = [];
-
-    // This is a simplified example for monthly trends if range is 'year' or 'last3months'
-    // For 'month' range, you might want daily trends.
-    // This requires more complex aggregation based on the specific 'range'.
-    if (range === 'year' || range === 'last3months') {
-        const monthFormat = '%Y-%m'; // Group by year-month
-        revenueTrend = await Payment.aggregate([
-            { $match: { paymentDate: { $gte: startDate, $lte: endDate }, status: 'completed' } },
-            { $group: {
-                _id: { $dateToString: { format: monthFormat, date: '$paymentDate' } },
-                total: { $sum: '$amount' }
-            }},
-            { $sort: { _id: 1 } }, // Sort by month
-            { $project: { _id: 0, month: '$_id', total: 1 } }
-        ]);
-        expenseTrend = await Expense.aggregate([
-            { $match: { date: { $gte: startDate, $lte: endDate } } },
-            { $group: {
-                _id: { $dateToString: { format: monthFormat, date: '$date' } },
-                total: { $sum: '$amount' }
-            }},
-            { $sort: { _id: 1 } }, // Sort by month
-            { $project: { _id: 0, month: '$_id', total: 1 } }
-        ]);
-    } else if (range === 'month') {
-        // Example for daily trend within the month
-        const dayFormat = '%Y-%m-%d'; // Group by year-month-day
-         revenueTrend = await Payment.aggregate([
-            { $match: { paymentDate: { $gte: startDate, $lte: endDate }, status: 'completed' } },
-            { $group: {
-                _id: { $dateToString: { format: dayFormat, date: '$paymentDate' } },
-                total: { $sum: '$amount' }
-            }},
-            { $sort: { _id: 1 } }, // Sort by day
-            { $project: { _id: 0, day: '$_id', total: 1 } } // Use 'day' or similar key
-        ]);
-        expenseTrend = await Expense.aggregate([
-            { $match: { date: { $gte: startDate, $lte: endDate } } },
-            { $group: {
-                _id: { $dateToString: { format: dayFormat, date: '$date' } },
-                total: { $sum: '$amount' }
-            }},
-            { $sort: { _id: 1 } }, // Sort by day
-            { $project: { _id: 0, day: '$_id', total: 1 } } // Use 'day' or similar key
-        ]);
-    }
-
-
-    // --- Assemble Dashboard Data ---
-    // Structure the response exactly as the frontend expects
-    
-    // Helper to format date as YYYY-MM-DD in the server's local timezone
-    const formatDateForResponse = (date) => {
-        const year = date.getFullYear();
-        const month = (date.getMonth() + 1).toString().padStart(2, '0'); // JS months are 0-indexed
-        const day = date.getDate().toString().padStart(2, '0');
-        return `${year}-${month}-${day}`;
-    };
-
-    const dashboardData = {
-        summary: {
-            totalRevenue,
-            totalExpenses,
-            netProfit,
-            activeSubscriptions,
-            newSubscriptions
-        },
-        revenueByPlan, // Already fetched
-        expensesByCategory, // Already fetched
-        trends: {
-            revenue: revenueTrend,
-            expenses: expenseTrend
-        },
-        subscriptionPlans, // Fetched and enriched with subscriber counts
-        recentTransactions: {
-            payments: recentPayments.map(p => ({ // Format to match frontend if needed
-                id: p._id,
-                date: p.paymentDate,
-                customer: p.user?.name || 'N/A', // Handle potential missing user
-                description: p.description,
-                amount: p.amount,
-                status: p.status
-            })),
-            expenses: recentExpenses.map(e => ({ // Format to match frontend if needed
-                id: e._id,
-                date: e.date,
-                category: e.category,
-                description: e.description,
-                amount: e.amount,
-                status: e.status // Assuming Expense model has status
-            }))
-        },
-        // Include the date range used for clarity - Use local timezone formatting
-        dateRange: { 
-            startDate: formatDateForResponse(startDate), 
-            endDate: formatDateForResponse(endDate) 
-        }
-    };
-
-    res.status(200).json(dashboardData); // Send the structured data directly
-
-  } catch (error) {
-    console.error('Error fetching financial dashboard data:', error);
-    // Pass error to the centralized error handler
-    next(error); 
-  }
-};
-
-/**
- * @desc    Get all payments (with filtering and pagination)
- * @route   GET /api/financials/payments
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getAllPayments = async (req, res, next) => {
-    try {
-        // Destructure new filters from query
-        const { page = 1, limit = 10, status, userId, planId, startDate, endDate, customerName, paymentMethod } = req.query;
-        const query = {};
-
-        if (status) query.status = status;
-        if (userId) {
-            if (!mongoose.Types.ObjectId.isValid(userId)) throw new BadRequestError('Invalid userId format');
-            query.user = new mongoose.Types.ObjectId(userId); // Ensure it's an ObjectId
-        }
-        // Add paymentMethod filter
-        if (paymentMethod) query.paymentMethod = paymentMethod;
-
-        // Handle date range filtering
-        if (startDate && endDate) {
-            const start = new Date(startDate);
-            const end = new Date(endDate);
-            if (isNaN(start.getTime()) || isNaN(end.getTime())) throw new BadRequestError('Invalid date format');
-            end.setHours(23, 59, 59, 999);
-            query.paymentDate = { $gte: start, $lte: end };
-        } else if (startDate) {
-            const start = new Date(startDate);
-            if (isNaN(start.getTime())) throw new BadRequestError('Invalid start date format');
-            query.paymentDate = { $gte: start };
-        } else if (endDate) {
-            const end = new Date(endDate);
-            if (isNaN(end.getTime())) throw new BadRequestError('Invalid end date format');
-            end.setHours(23, 59, 59, 999);
-            query.paymentDate = { $lte: end };
-        }
-
-        // Start aggregation pipeline
-        let aggregationPipeline = [];
-
-        // Initial match stage based on basic filters
-        if (Object.keys(query).length > 0) {
-             aggregationPipeline.push({ $match: query });
-        }
-
-
-        // Handle customerName filtering using aggregation if necessary
-        if (customerName) {
-            // Find user IDs matching the customer name (case-insensitive)
-            const users = await User.find({ name: { $regex: customerName, $options: 'i' } }).select('_id');
-            const userIds = users.map(user => user._id);
-            // Add a match stage to filter payments by these user IDs
-            // Ensure this match happens *after* the initial query match if both exist
-            aggregationPipeline.push({ $match: { user: { $in: userIds } } });
-        }
-
-        // Add lookup stages to populate related data
-        aggregationPipeline.push(
-            {
-                $lookup: {
-                    from: "users", // collection name
-                    localField: "user",
-                    foreignField: "_id",
-                    as: "userData" // Changed from userDetails
-                }
-            },
-            {
-                $unwind: { // Use unwind instead of directly accessing [0] if you expect only one user
-                    path: "$userData",
-                    preserveNullAndEmptyArrays: true // Keep payment even if user is somehow missing
-                }
-            },
-            {
-                $lookup: {
-                    from: "usersubscriptions", // collection name
-                    localField: "userSubscription",
-                    foreignField: "_id",
-                    as: "subscriptionData" // Changed from userSubscriptionDetails
-                }
-            },
-            {
-                $unwind: {
-                    path: "$subscriptionData",
-                    preserveNullAndEmptyArrays: true // Keep payment even if subscription is missing
-                }
-            },
-            {
-                $lookup: {
-                    from: "subscriptionplans", // collection name
-                    localField: "subscriptionData.subscriptionPlan", // Use the field from the unwound subscriptionData
-                    foreignField: "_id",
-                    as: "planData"
-                }
-            },
-            {
-                $unwind: {
-                    path: "$planData",
-                    preserveNullAndEmptyArrays: true // Keep payment even if plan is missing
-                }
-            },
-             // Project the desired fields, renaming/restructuring as needed
-            {
-                $project: {
-                    // Include original payment fields
-                    _id: 1,
-                    amount: 1,
-                    description: 1,
-                    paymentDate: 1,
-                    status: 1,
-                    paymentMethod: 1,
-                    currency: 1,
-                    invoiceNumber: 1,
-                    transactionId: 1,
-                    // Add populated data, handling potential nulls from preserveNullAndEmptyArrays
-                    user: { // Keep the user field structure expected by frontend
-                        _id: "$userData._id",
-                        name: "$userData.name",
-                        email: "$userData.email"
-                        // Add other user fields if needed
-                    },
-                    userSubscription: { // Keep subscription structure
-                         _id: "$subscriptionData._id",
-                         status: "$subscriptionData.status",
-                         // Add plan details directly inside subscription if needed, or keep separate
-                         plan: {
-                             _id: "$planData._id",
-                             name: "$planData.name",
-                             price: "$planData.price"
-                             // Add other plan fields if needed
-                         }
-                         // Add other subscription fields if needed
-                    },
-                    // Remove intermediate lookup fields if not needed
-                    // userData: 0, // Optional: remove intermediate fields
-                    // subscriptionData: 0,
-                    // planData: 0
-                }
-            }
-        );
-
-        // Define pagination options
-        const options = {
-            page: parseInt(page, 10),
-            limit: parseInt(limit, 10),
-            sort: { paymentDate: -1 }, // Default sort
-            lean: true // Use lean for better performance with aggregation
-        };
-
-        // Create the aggregate object
-        const aggregate = Payment.aggregate(aggregationPipeline);
-
-        // Execute aggregation with pagination
-        const payments = await Payment.aggregatePaginate(aggregate, options);
-
-        res.status(200).json(payments);
-
-    } catch (error) {
-        console.error('Error fetching payments:', error); // Log the specific error
-        next(error); // Pass error to the centralized handler
-    }
-};
-
-/**
- * @desc    Get a single payment by ID
- * @route   GET /api/financials/payments/:id
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getPaymentById = async (req, res, next) => {
-    try {
-        const payment = await Payment.findById(req.params.id)
-            .populate('user', 'name email')
-            .populate({ path: 'userSubscription', populate: { path: 'plan', select: 'name price' } });
-
-        if (!payment) {
-            throw new NotFoundError('Payment not found');
-        }
-
-        res.status(200).json(payment);
-    } catch (error) {
-        console.error('Error fetching payment by ID:', error);
-        // Simply pass the error to the global handler
-        next(error); 
-    }
-};
-
-/**
- * @desc    Record a manual payment (e.g., cash)
- * @route   POST /api/financials/payments
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.recordManualPayment = async (req, res, next) => {
-    // Add validation using express-validator in the route definition
-    const { userId, amount, method, status = 'completed', notes, userSubscriptionId } = req.body;
-
-    try {
-        // Validate user exists
-        const user = await User.findById(userId);
-        if (!user) throw new NotFoundError(`User not found with ID: ${userId}`);
-
-        // Validate subscription exists if provided
-        let userSubscription = null;
-        if (userSubscriptionId) {
-            userSubscription = await UserSubscription.findById(userSubscriptionId);
-            if (!userSubscription) throw new NotFoundError(`UserSubscription not found with ID: ${userSubscriptionId}`);
-            // Optional: Check if subscription belongs to the user
-            if (userSubscription.user.toString() !== userId) {
-                throw new BadRequestError('Subscription does not belong to the specified user');
-            }
-        }
-
-        const payment = await Payment.create({
-            user: userId,
-            amount,
-            method,
-            status,
-            notes,
-            userSubscription: userSubscriptionId || undefined, // Only link if provided
-            paymentDate: new Date() // Record payment date as now
-        });
-
-        // Optional: Update subscription status based on payment? (e.g., activate)
-        if (userSubscription && status === 'completed') {
-            // Add logic here if needed, e.g., update subscription end date
-        }
-
-        res.status(201).json(payment);
-
-    } catch (error) {
-        console.error('Error recording manual payment:', error);
-        // Simply pass the error to the global handler
-        next(error); 
-    }
-};
-
-
-/**
- * @desc    Get all expenses (with filtering and pagination)
- * @route   GET /api/financials/expenses
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getAllExpenses = async (req, res, next) => {
-    try {
-        const { page = 1, limit = 10, category, startDate, endDate } = req.query;
-        const query = {};
-
-        if (category) query.category = category;
-
-        if (startDate && endDate) {
-            const start = new Date(startDate);
-            const end = new Date(endDate);
-            if (isNaN(start.getTime()) || isNaN(end.getTime())) throw new BadRequestError('Invalid date format');
-            end.setHours(23, 59, 59, 999);
-            query.date = { $gte: start, $lte: end };
-        }
-
-        const options = {
-            page: parseInt(page, 10),
-            limit: parseInt(limit, 10),
-            sort: { date: -1 }
-        };
-
-        const expenses = await Expense.paginate(query, options); // Assuming mongoose-paginate-v2
-
-        res.status(200).json(expenses);
-
-    } catch (error) {
-        console.error('Error fetching expenses:', error);
-        // Simply pass the error to the global handler
-        next(error); 
-    }
-};
-
-/**
- * @desc    Get a single expense by ID
- * @route   GET /api/financials/expenses/:id
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getExpenseById = async (req, res, next) => {
-    try {
-        const expense = await Expense.findById(req.params.id);
-
-        if (!expense) {
-            throw new NotFoundError('Expense not found');
-        }
-
-        res.status(200).json(expense);
-    } catch (error) {
-        console.error('Error fetching expense by ID:', error);
-        // Simply pass the error to the global handler
-        next(error); 
-    }
-};
-
-/**
- * @desc    Record a new expense
- * @route   POST /api/financials/expenses
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.recordExpense = async (req, res, next) => {
-    // Add validation using express-validator in the route definition
-    const { description, amount, category, date } = req.body;
-
-    try {
-        const expense = await Expense.create({
-            description,
-            amount,
-            category,
-            date: date ? new Date(date) : new Date() // Use provided date or default to now
-        });
-
-        res.status(201).json(expense);
-
-    } catch (error) {
-        console.error('Error recording expense:', error);
-        // Simply pass the error to the global handler
-        next(error); 
-    }
-};
-
-/**
- * @desc    Update an expense
- * @route   PUT /api/financials/expenses/:id
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.updateExpense = async (req, res, next) => {
-    // Add validation using express-validator in the route definition
-    const { description, amount, category, date } = req.body;
-
-    try {
-        const expense = await Expense.findById(req.params.id);
-
-        if (!expense) {
-            throw new NotFoundError('Expense not found');
-        }
-
-        expense.description = description || expense.description;
-        expense.amount = amount || expense.amount;
-        expense.category = category || expense.category;
-        expense.date = date ? new Date(date) : expense.date;
-
-        const updatedExpense = await expense.save(); // Trigger validation
-
-        res.status(200).json(updatedExpense);
-
-    } catch (error) {
-        console.error('Error updating expense:', error);
-        // Simply pass the error to the global handler
-        next(error); 
-    }
-};
-
-/**
- * @desc    Delete an expense
- * @route   DELETE /api/financials/expenses/:id
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.deleteExpense = async (req, res, next) => {
-    try {
-        const expense = await Expense.findById(req.params.id);
-
-        if (!expense) {
-            throw new NotFoundError('Expense not found');
-        }
-
-        await expense.deleteOne();
-
-        res.status(200).json({ message: 'Expense deleted successfully' });
-
-    } catch (error) {
-        console.error('Error deleting expense:', error);
-        // Simply pass the error to the global handler
-        next(error); 
-    }
-};
-
-/**
- * @desc    Initiate a payment via payment gateway (e.g., Stripe)
- * @route   POST /api/financials/payments/initiate
- * @access  Private (customer, financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.initiatePayment = async (req, res, next) => {
-    try {
-        const { userId, planId, amount, currency = 'usd' } = req.body;
-        
-        // Validate required parameters
-        if (!userId || !planId || !amount) {
-            throw new BadRequestError('Missing required parameters: userId, planId, amount');
-        }
-        
-        // Validate user exists
-        const user = await User.findById(userId);
-        if (!user) {
-            throw new NotFoundError(`User not found with ID: ${userId}`);
-        }
-        
-        // Validate plan exists
-        const plan = await SubscriptionPlan.findById(planId);
-        if (!plan) {
-            throw new NotFoundError(`Subscription plan not found with ID: ${planId}`);
-        }
-
-        // Create payment intent with Stripe
-        const paymentIntent = await paymentService.createPaymentIntent({
-            amount,
-            currency,
-            userId,
-            planId,
-            userEmail: user.email
-        });
-        
-        // Create a pending payment record
-        const payment = await Payment.create({
-            user: userId,
-            amount,
-            description: `Payment for ${plan.name} plan`,
-            status: 'pending',
-            paymentMethod: 'credit_card',
-            currency,
-            transactionId: paymentIntent.intentId,
-            gatewayResponse: { clientSecret: paymentIntent.clientSecret }
-        });
-        
-        // Return the client secret to the frontend for completing the payment
-        res.status(200).json({
-            clientSecret: paymentIntent.clientSecret,
-            paymentId: payment._id
-        });
-        
-    } catch (error) {
-        console.error('Error initiating payment:', error);
-        next(error);
-    }
-};
-
-/**
- * @desc    Handle payment webhooks from payment gateway (e.g., Stripe)
- * @route   POST /api/financials/payments/webhook
- * @access  Public (called by payment gateway)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.handlePaymentWebhook = async (req, res, next) => {
-    const sig = req.headers['stripe-signature'];
-    const rawBody = req.rawBody; // Ensure middleware preserves the raw body
-    
-    try {
-        if (!sig || !rawBody) {
-            throw new BadRequestError('Missing webhook signature or request body');
-        }
-        
-        // Verify webhook signature with Stripe
-        const event = paymentService.verifyAndConstructEvent(rawBody, sig);
-        
-        // Handle different webhook events
-        switch (event.type) {
-            case 'payment_intent.succeeded':
-                await handlePaymentSucceeded(event.data.object);
-                break;
-                
-            case 'payment_intent.payment_failed':
-                await handlePaymentFailed(event.data.object);
-                break;
-                
-            case 'payment_intent.requires_action':
-                await handlePaymentRequiresAction(event.data.object);
-                break;
-                
-            default:
-                // Log but do not act on unhandled event types
-                console.log(`Unhandled event type: ${event.type}`);
-        }
-        
-        // Return a 200 response to acknowledge receipt of the webhook
-        res.status(200).json({ received: true });
-        
-    } catch (error) {
-        console.error('Webhook Error:', error);
-        // Return a different error code for signature verification failures
-        if (error.message.includes('signature verification failed')) {
-            res.status(400).json({ error: 'Invalid signature' });
-        } else {
-            res.status(400).json({ error: 'Webhook error' });
-        }
-    }
-};
-
-/**
- * @desc    Update a payment status (for manual update by admin/financial_manager)
- * @route   PATCH /api/financials/payments/:id/status
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.updatePaymentStatus = async (req, res, next) => {
-    const { id } = req.params;
-    const { status } = req.body;
-    
-    try {
-        // Validate status
-        if (!['pending', 'completed', 'failed', 'refunded', 'requires_action'].includes(status)) {
-            throw new BadRequestError('Invalid status value');
-        }
-        
-        // Find the payment
-        const payment = await Payment.findById(id);
-        if (!payment) {
-            throw new NotFoundError('Payment not found');
-        }
-        
-        // Store previous status for change tracking
-        const previousStatus = payment.status;
-        payment.status = status;
-        
-        // Handle status transitions
-        if (previousStatus !== 'completed' && status === 'completed') {
-            // If payment is associated with a subscription, link them and activate
-            if (payment.userSubscription) {
-                const subscription = await UserSubscription.findById(payment.userSubscription);
-                if (subscription) {
-                    subscription.status = 'active';
-                    await subscription.save();
-                }
-            }
-        }
-        
-        // Save the updated payment
-        await payment.save();
-        
-        res.status(200).json({ message: 'Payment status updated successfully', payment });
-        
-    } catch (error) {
-        console.error('Error updating payment status:', error);
-        next(error);
-    }
-};
-
-// ---- Helper functions for webhook handling -----
-
-
-/**
- * Handle successful payment from webhook
- * @param {Object} paymentIntent - Payment intent from Stripe
- */
-async function handlePaymentSucceeded(paymentIntent) {
-    try {
-        // Find the payment by transaction ID
-        const payment = await Payment.findOne({ transactionId: paymentIntent.id });
-        if (!payment) {
-            console.error('Payment not found for webhook:', paymentIntent.id);
-            return;
-        }
-        
-        // Update payment status
-        payment.status = 'completed';
-        payment.gatewayResponse = { 
-            ...payment.gatewayResponse, 
-            paymentIntentId: paymentIntent.id,
-            paymentStatus: 'succeeded',
-            paymentMethod: paymentIntent.payment_method
-        };
-        
-        await payment.save();
-        
-        // If payment is for a subscription, create/activate the subscription
-        const { userId, planId } = paymentIntent.metadata;
-        if (userId && planId) {
-            const user = await User.findById(userId);
-            const plan = await SubscriptionPlan.findById(planId);
-            
-            if (user && plan) {
-                // Calculate subscription dates based on plan duration
-                let durationMonths = 1; // Default to Monthly
-                switch (plan.duration) {
-                    case 'Quarterly': durationMonths = 3; break;
-                    case 'Semi-Annual': durationMonths = 6; break;
-                    case 'Annual': durationMonths = 12; break;
-                }
-                
-                const startDate = new Date();
-                const endDate = addMonths(startDate, durationMonths);
-                
-                // Create new subscription or find existing pending one
-                let subscription = await UserSubscription.findOne({
-                    user: userId,
-                    subscriptionPlan: planId,
-                    status: 'pending'
-                });
-                
-                if (subscription) {
-                    // Update existing pending subscription
-                    subscription.status = 'active';
-                    subscription.startDate = startDate;
-                    subscription.endDate = endDate;
-                    subscription.nextBillingDate = endDate;
-                } else {
-                    // Create new subscription
-                    subscription = new UserSubscription({
-                        user: userId,
-                        subscriptionPlan: planId,
-                        startDate,
-                        endDate,
-                        status: 'active',
-                        autoRenew: true,
-                        lastBillingDate: startDate,
-                        nextBillingDate: endDate
-                    });
-                }
-                
-                await subscription.save();
-                
-                // Link payment to subscription
-                payment.userSubscription = subscription._id;
-                await payment.save();
-                
-                // Increment subscriber count on the plan
-                await SubscriptionPlan.findByIdAndUpdate(planId, { 
-                    $inc: { subscriberCount: 1 } 
-                });
-            }
-        }
-    } catch (error) {
-        console.error('Error handling payment success webhook:', error);
-    }
-}
-
-/**
- * Handle failed payment from webhook
- * @param {Object} paymentIntent - Payment intent from Stripe
- */
-async function handlePaymentFailed(paymentIntent) {
-    try {
-        // Find the payment by transaction ID
-        const payment = await Payment.findOne({ transactionId: paymentIntent.id });
-        if (!payment) {
-            console.error('Payment not found for webhook:', paymentIntent.id);
-            return;
-        }
-        
-        // Update payment status
-        payment.status = 'failed';
-        payment.gatewayResponse = { 
-            ...payment.gatewayResponse, 
-            paymentIntentId: paymentIntent.id,
-            paymentStatus: 'failed',
-            lastError: paymentIntent.last_payment_error
-        };
-        
-        await payment.save();
-        
-    } catch (error) {
-        console.error('Error handling payment failed webhook:', error);
-    }
-}
-
-/**
- * Handle payment requires additional action
- * @param {Object} paymentIntent - Payment intent from Stripe
- */
-async function handlePaymentRequiresAction(paymentIntent) {
-    try {
-        // Find the payment by transaction ID
-        const payment = await Payment.findOne({ transactionId: paymentIntent.id });
-        if (!payment) {
-            console.error('Payment not found for webhook:', paymentIntent.id);
-            return;
-        }
-        
-        // Update payment status
-        payment.status = 'requires_action';
-        payment.gatewayResponse = { 
-            ...payment.gatewayResponse, 
-            paymentIntentId: paymentIntent.id,
-            paymentStatus: 'requires_action',
-            nextAction: paymentIntent.next_action
-        };
-        
-        await payment.save();
-        
-    } catch (error) {
-        console.error('Error handling payment requires action webhook:', error);
-    }
-}
-
-// Helper function to add months to a date
-const addMonths = (date, months) => {
-    const result = new Date(date);
-    result.setMonth(result.getMonth() + months);
-    // Handle edge cases like Feb 29th
-    if (result.getDate() < date.getDate()) {
-        result.setDate(0); // Go to the last day of the previous month
-    }
-    return result;
-};
-
-/**
- * @desc    Export financial report as PDF
- * @route   GET /api/financials/reports/export
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.exportReport = async (req, res, next) => {
-    try {
-        const { range = 'month', startDate, endDate } = req.query;
-        const PDFDocument = require('pdfkit');
-        
-        // Create a PDF document
-        const doc = new PDFDocument({
-            margin: 50,
-            size: 'A4'
-        });
-        
-        // Set response headers for PDF download
-        res.setHeader('Content-Type', 'application/pdf');
-        res.setHeader('Content-Disposition', `attachment; filename=financial-report-${range}-${new Date().toISOString().split('T')[0]}.pdf`);
-        
-        // Pipe the PDF to the response
-        doc.pipe(res);
-        
-        // Calculate date range based on the provided range parameter or specific dates
-        let reportStartDate, reportEndDate = new Date();
-        reportEndDate.setHours(23, 59, 59, 999);
-        
-        if (startDate && endDate) {
-            reportStartDate = new Date(startDate);
-            reportEndDate = new Date(endDate);
-            reportEndDate.setHours(23, 59, 59, 999);
-        } else {
-            // Use the range parameter if specific dates not provided
-            switch(range) {
-                case 'last3months':
-                    reportStartDate = new Date();
-                    reportStartDate.setMonth(reportStartDate.getMonth() - 3);
-                    reportStartDate.setDate(1);
-                    reportStartDate.setHours(0, 0, 0, 0);
-                    break;
-                case 'year':
-                    reportStartDate = new Date(reportEndDate.getFullYear(), 0, 1);
-                    reportStartDate.setHours(0, 0, 0, 0);
-                    break;
-                case 'month':
-                default:
-                    reportStartDate = new Date(reportEndDate.getFullYear(), reportEndDate.getMonth(), 1);
-                    reportStartDate.setHours(0, 0, 0, 0);
-                    break;
-            }
-        }
-        
-        if (isNaN(reportStartDate.getTime()) || isNaN(reportEndDate.getTime())) {
-            throw new BadRequestError('Invalid date format');
-        }
-        
-        // Fetch data necessary for the report
-        
-        // 1. Total Revenue 
-        const revenueData = await Payment.aggregate([
-            { $match: { paymentDate: { $gte: reportStartDate, $lte: reportEndDate }, status: 'completed' } },
-            { $group: { _id: null, totalRevenue: { $sum: '$amount' } } }
-        ]);
-        const totalRevenue = revenueData.length > 0 ? revenueData[0].totalRevenue : 0;
-
-        // 2. Total Expenses
-        const expenseData = await Expense.aggregate([
-            { $match: { date: { $gte: reportStartDate, $lte: reportEndDate } } },
-            { $group: { _id: null, totalExpenses: { $sum: '$amount' } } }
-        ]);
-        const totalExpenses = expenseData.length > 0 ? expenseData[0].totalExpenses : 0;
-
-        // 3. Net Profit
-        const netProfit = totalRevenue - totalExpenses;
-        
-        // 4. Expenses by Category
-        const expensesByCategory = await Expense.aggregate([
-            { $match: { date: { $gte: reportStartDate, $lte: reportEndDate } } },
-            { $group: {
-                _id: '$category',
-                total: { $sum: '$amount' }
-            }},
-            { $project: {
-                _id: 0,
-                category: '$_id',
-                total: 1
-            }},
-            { $sort: { total: -1 } }
-        ]);
-        
-        // 5. Revenue by Plan
-        const revenueByPlan = await Payment.aggregate([
-            { $match: { paymentDate: { $gte: reportStartDate, $lte: reportEndDate }, status: 'completed', userSubscription: { $exists: true } } },
-            { $lookup: { // Join with UserSubscription to get plan details
-                from: 'usersubscriptions',
-                localField: 'userSubscription',
-                foreignField: '_id',
-                as: 'subDetails'
-            }},
-            { $unwind: '$subDetails' },
-            { $lookup: { // Join with SubscriptionPlan to get plan name
-                from: 'subscriptionplans',
-                localField: 'subDetails.subscriptionPlan',
-                foreignField: '_id',
-                as: 'planDetails'
-            }},
-            { $unwind: '$planDetails' },
-            { $group: {
-                _id: '$planDetails.name',
-                totalAmount: { $sum: '$amount' },
-                count: { $sum: 1 }
-            }},
-            { $project: {
-                _id: 0,
-                planName: '$_id',
-                revenue: '$totalAmount',
-                count: 1
-            }},
-            { $sort: { revenue: -1 } }
-        ]);
-        
-        // 6. Recent Transactions
-        const recentPayments = await Payment.find({ paymentDate: { $gte: reportStartDate, $lte: reportEndDate } })
-            .populate('user', 'name email')
-            .sort({ paymentDate: -1 })
-            .limit(10)
-            .select('paymentDate user description amount status');
-        
-        const recentExpenses = await Expense.find({ date: { $gte: reportStartDate, $lte: reportEndDate } })
-            .sort({ date: -1 })
-            .limit(10)
-            .select('date category description amount');
-        
-        // Format dates for display
-        const formatDate = (date) => {
-            return date.toLocaleDateString('en-US', {
-                year: 'numeric',
-                month: 'short',
-                day: 'numeric'
-            });
-        };
-        
-        // Format currency values
-        const formatCurrency = (amount) => {
-            return new Intl.NumberFormat('en-US', {
-                style: 'currency',
-                currency: 'USD'
-            }).format(amount);
-        };
-        
-        // PDF Generation - Header
-        doc.font('Helvetica-Bold').fontSize(18).text('SmartBin Financial Report', { align: 'center' });
-        doc.moveDown();
-        
-        const reportRangeText = startDate && endDate 
-            ? `${formatDate(reportStartDate)} to ${formatDate(reportEndDate)}`
-            : range === 'month' ? 'Current Month'
-            : range === 'last3months' ? 'Last 3 Months'
-            : 'Current Year';
-            
-        doc.fontSize(12).text(`Report Period: ${reportRangeText}`, { align: 'center' });
-        doc.moveDown();
-        doc.text(`Generated on: ${formatDate(new Date())}`, { align: 'center' });
-        doc.moveDown(2);
-        
-        // Financial Summary Section
-        doc.font('Helvetica-Bold').fontSize(14).text('Financial Summary');
-        doc.moveDown();
-        
-        // Draw summary box
-        doc.font('Helvetica').fontSize(11);
-        const summaryData = [
-            ['Total Revenue', formatCurrency(totalRevenue)],
-            ['Total Expenses', formatCurrency(totalExpenses)],
-            ['Net Profit', formatCurrency(netProfit)],
-            ['Profit Margin', totalRevenue > 0 ? `${((netProfit / totalRevenue) * 100).toFixed(2)}%` : '0.00%']
-        ];
-        
-        // Draw summary table
-        const summaryTableTop = doc.y;
-        doc.moveDown(0.5);
-        let summaryTableY = doc.y;
-        
-        summaryData.forEach((row, i) => {
-            doc.font(i === 2 ? 'Helvetica-Bold' : 'Helvetica');
-            doc.text(row[0], 100, summaryTableY, { width: 150 });
-            doc.text(row[1], 250, summaryTableY, { width: 150, align: 'right' });
-            summaryTableY += 25;
-        });
-        
-        doc.rect(90, summaryTableTop, 320, summaryTableY - summaryTableTop).stroke();
-        doc.moveDown(2);
-        
-        // Expenses by Category Section
-        if (expensesByCategory.length > 0) {
-            doc.font('Helvetica-Bold').fontSize(14).text('Expenses by Category');
-            doc.moveDown();
-            
-            // Draw expenses table
-            const expenseTableTop = doc.y;
-            
-            // Table header
-            doc.font('Helvetica-Bold').fontSize(10);
-            doc.text('Category', 100, doc.y, { width: 150 });
-            doc.text('Amount', 250, doc.y, { width: 150, align: 'right' });
-            doc.moveDown();
-            
-            let expenseTableY = doc.y;
-            
-            // Table rows
-            doc.font('Helvetica').fontSize(10);
-            expensesByCategory.forEach((expense, i) => {
-                const category = expense.category.charAt(0).toUpperCase() + expense.category.slice(1);
-                doc.text(category, 100, expenseTableY, { width: 150 });
-                doc.text(formatCurrency(expense.total), 250, expenseTableY, { width: 150, align: 'right' });
-                expenseTableY += 20;
-                
-                if (expenseTableY > 700) { // Check if we need a new page
-                    doc.addPage();
-                    expenseTableY = 50;
-                    doc.font('Helvetica-Bold').fontSize(14).text('Expenses by Category (Continued)');
-                    doc.moveDown();
-                    doc.font('Helvetica').fontSize(10);
-                }
-            });
-            
-            doc.rect(90, expenseTableTop, 320, expenseTableY - expenseTableTop).stroke();
-            doc.moveDown(2);
-        }
-        
-        // Revenue by Plan Section
-        if (revenueByPlan.length > 0) {
-            // Check if we need a new page
-            if (doc.y > 650) {
-                doc.addPage();
-            }
-            
-            doc.font('Helvetica-Bold').fontSize(14).text('Revenue by Subscription Plan');
-            doc.moveDown();
-            
-            // Draw revenue table
-            const revenueTableTop = doc.y;
-            
-            // Table header
-            doc.font('Helvetica-Bold').fontSize(10);
-            doc.text('Plan Name', 100, doc.y, { width: 150 });
-            doc.text('Revenue', 250, doc.y, { width: 100, align: 'right' });
-            doc.text('Subscribers', 350, doc.y, { width: 80, align: 'right' });
-            doc.moveDown();
-            
-            let revenueTableY = doc.y;
-            
-            // Table rows
-            doc.font('Helvetica').fontSize(10);
-            revenueByPlan.forEach((plan) => {
-                doc.text(plan.planName, 100, revenueTableY, { width: 150 });
-                doc.text(formatCurrency(plan.revenue), 250, revenueTableY, { width: 100, align: 'right' });
-                doc.text(plan.count.toString(), 350, revenueTableY, { width: 80, align: 'right' });
-                revenueTableY += 20;
-                
-                if (revenueTableY > 700) { // Check if we need a new page
-                    doc.addPage();
-                    revenueTableY = 50;
-                    doc.font('Helvetica-Bold').fontSize(14).text('Revenue by Subscription Plan (Continued)');
-                    doc.moveDown();
-                    doc.font('Helvetica').fontSize(10);
-                }
-            });
-            
-            doc.rect(90, revenueTableTop, 340, revenueTableY - revenueTableTop).stroke();
-            doc.moveDown(2);
-        }
-        
-        // Recent Transactions Section
-        if (recentPayments.length > 0 || recentExpenses.length > 0) {
-            // Check if we need a new page
-            if (doc.y > 600) {
-                doc.addPage();
-            }
-            
-            doc.font('Helvetica-Bold').fontSize(14).text('Recent Transactions');
-            doc.moveDown();
-            
-            // Recent Payments
-            if (recentPayments.length > 0) {
-                doc.font('Helvetica-Bold').fontSize(12).text('Recent Payments');
-                doc.moveDown();
-                
-                // Table header
-                doc.font('Helvetica-Bold').fontSize(10);
-                doc.text('Date', 50, doc.y, { width: 90 });
-                doc.text('Customer', 140, doc.y, { width: 100 });
-                doc.text('Description', 240, doc.y, { width: 150 });
-                doc.text('Amount', 390, doc.y, { width: 80, align: 'right' });
-                doc.moveDown();
-                
-                let paymentsTableY = doc.y;
-                
-                // Table rows
-                doc.font('Helvetica').fontSize(9);
-                recentPayments.forEach((payment) => {
-                    doc.text(formatDate(payment.paymentDate), 50, paymentsTableY, { width: 90 });
-                    doc.text(payment.user?.name || 'N/A', 140, paymentsTableY, { width: 100 });
-                    doc.text(payment.description || 'N/A', 240, paymentsTableY, { width: 150 });
-                    doc.text(formatCurrency(payment.amount), 390, paymentsTableY, { width: 80, align: 'right' });
-                    paymentsTableY += 20;
-                    
-                    if (paymentsTableY > 700) { // Check if we need a new page
-                        doc.addPage();
-                        paymentsTableY = 50;
-                        doc.font('Helvetica-Bold').fontSize(12).text('Recent Payments (Continued)');
-                        doc.moveDown();
-                        doc.font('Helvetica').fontSize(9);
-                    }
-                });
-                
-                doc.moveDown(2);
-            }
-            
-            // Recent Expenses
-            if (recentExpenses.length > 0) {
-                // Check if we need a new page
-                if (doc.y > 600) {
-                    doc.addPage();
-                }
-                
-                doc.font('Helvetica-Bold').fontSize(12).text('Recent Expenses');
-                doc.moveDown();
-                
-                // Table header
-                doc.font('Helvetica-Bold').fontSize(10);
-                doc.text('Date', 50, doc.y, { width: 90 });
-                doc.text('Category', 140, doc.y, { width: 100 });
-                doc.text('Description', 240, doc.y, { width: 150 });
-                doc.text('Amount', 390, doc.y, { width: 80, align: 'right' });
-                doc.moveDown();
-                
-                let expensesTableY = doc.y;
-                
-                // Table rows
-                doc.font('Helvetica').fontSize(9);
-                recentExpenses.forEach((expense) => {
-                    doc.text(formatDate(expense.date), 50, expensesTableY, { width: 90 });
-                    const category = expense.category.charAt(0).toUpperCase() + expense.category.slice(1);
-                    doc.text(category, 140, expensesTableY, { width: 100 });
-                    doc.text(expense.description || 'N/A', 240, expensesTableY, { width: 150 });
-                    doc.text(formatCurrency(expense.amount), 390, expensesTableY, { width: 80, align: 'right' });
-                    expensesTableY += 20;
-                    
-                    if (expensesTableY > 700) { // Check if we need a new page
-                        doc.addPage();
-                        expensesTableY = 50;
-                        doc.font('Helvetica-Bold').fontSize(12).text('Recent Expenses (Continued)');
-                        doc.moveDown();
-                        doc.font('Helvetica').fontSize(9);
-                    }
-                });
-            }
-        }
-        
-        // Footer with page numbers
-        const pageCount = doc.bufferedPageRange().count;
-        for (let i = 0; i < pageCount; i++) {
-            doc.switchToPage(i);
-            doc.fontSize(8).text(
-                `Page ${i + 1} of ${pageCount}`,
-                50,
-                doc.page.height - 50,
-                { align: 'center' }
-            );
-        }
-        
-        // Finalize the PDF
-        doc.end();
-        
-    } catch (error) {
-        console.error('Error generating financial report:', error);
-        next(error);
-    }
-};
-
-/**
- * @desc    Get profit and loss report data
- * @route   GET /api/financials/reports/profit-loss
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getProfitLossReport = async (req, res, next) => {
-    try {
-        const { startDate, endDate } = req.query;
-        
-        if (!startDate || !endDate) {
-            throw new BadRequestError('Start and end dates are required');
-        }
-        
-        const start = new Date(startDate);
-        const end = new Date(endDate);
-        end.setHours(23, 59, 59, 999); // Include all of end date
-        
-        if (isNaN(start.getTime()) || isNaN(end.getTime())) {
-            throw new BadRequestError('Invalid date format');
-        }
-        
-        // Calculate total revenue
-        const revenueData = await Payment.aggregate([
-            { $match: { paymentDate: { $gte: start, $lte: end }, status: 'completed' } },
-            { $group: { _id: null, totalRevenue: { $sum: '$amount' } } }
-        ]);
-        const totalRevenue = revenueData.length > 0 ? revenueData[0].totalRevenue : 0;
-        
-        // Calculate total expenses
-        const expenseData = await Expense.aggregate([
-            { $match: { date: { $gte: start, $lte: end } } },
-            { $group: { _id: null, totalExpenses: { $sum: '$amount' } } }
-        ]);
-        const totalExpenses = expenseData.length > 0 ? expenseData[0].totalExpenses : 0;
-        
-        // Calculate net profit
-        const netProfit = totalRevenue - totalExpenses;
-        
-        // Get monthly trends for the period
-        // First, we need to find all the months within the date range
-        const months = [];
-        const currentDate = new Date(start);
-        while (currentDate <= end) {
-            months.push({
-                year: currentDate.getFullYear(),
-                month: currentDate.getMonth()
-            });
-            currentDate.setMonth(currentDate.getMonth() + 1);
-        }
-        
-        // Get monthly revenue
-        const monthlyRevenue = await Payment.aggregate([
-            { 
-                $match: { 
-                    paymentDate: { $gte: start, $lte: end },
-                    status: 'completed'
-                } 
-            },
-            {
-                $group: {
-                    _id: {
-                        year: { $year: "$paymentDate" },
-                        month: { $month: "$paymentDate" }
-                    },
-                    revenue: { $sum: "$amount" }
-                }
-            }
-        ]);
-        
-        // Get monthly expenses
-        const monthlyExpenses = await Expense.aggregate([
-            { 
-                $match: { 
-                    date: { $gte: start, $lte: end }
-                } 
-            },
-            {
-                $group: {
-                    _id: {
-                        year: { $year: "$date" },
-                        month: { $month: "$date" }
-                    },
-                    expenses: { $sum: "$amount" }
-                }
-            }
-        ]);
-        
-        // Create a map of monthly data
-        const monthlyMap = new Map();
-        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
-        
-        months.forEach(m => {
-            const monthKey = `${m.year}-${m.month}`;
-            monthlyMap.set(monthKey, {
-                month: `${monthNames[m.month]} ${m.year}`,
-                revenue: 0,
-                expenses: 0,
-                profit: 0
-            });
-        });
-        
-        monthlyRevenue.forEach(m => {
-            const monthKey = `${m._id.year}-${m._id.month - 1}`; // MongoDB months are 1-12, JS are 0-11
-            if (monthlyMap.has(monthKey)) {
-                const data = monthlyMap.get(monthKey);
-                data.revenue = m.revenue;
-                data.profit = data.revenue - data.expenses;
-                monthlyMap.set(monthKey, data);
-            }
-        });
-        
-        monthlyExpenses.forEach(m => {
-            const monthKey = `${m._id.year}-${m._id.month - 1}`; // MongoDB months are 1-12, JS are 0-11
-            if (monthlyMap.has(monthKey)) {
-                const data = monthlyMap.get(monthKey);
-                data.expenses = m.expenses;
-                data.profit = data.revenue - data.expenses;
-                monthlyMap.set(monthKey, data);
-            }
-        });
-        
-        // Convert map to array and sort by date
-        const monthlyData = Array.from(monthlyMap.values());
-        
-        res.status(200).json({
-            summary: {
-                totalRevenue,
-                totalExpenses,
-                netProfit,
-                profitMargin: totalRevenue > 0 ? (netProfit / totalRevenue) * 100 : 0
-            },
-            monthlyData
-        });
-        
-    } catch (error) {
-        console.error('Error generating profit/loss report:', error);
-        next(error);
-    }
-};
-
-/**
- * @desc    Get revenue by customer report
- * @route   GET /api/financials/reports/revenue-by-customer
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getRevenueByCustomerReport = async (req, res, next) => {
-    try {
-        const { startDate, endDate } = req.query;
-        
-        if (!startDate || !endDate) {
-            throw new BadRequestError('Start and end dates are required');
-        }
-        
-        const start = new Date(startDate);
-        const end = new Date(endDate);
-        end.setHours(23, 59, 59, 999); // Include all of end date
-        
-        if (isNaN(start.getTime()) || isNaN(end.getTime())) {
-            throw new BadRequestError('Invalid date format');
-        }
-        
-        // Get customers with payments
-        const customerRevenue = await Payment.aggregate([
-            { 
-                $match: { 
-                    paymentDate: { $gte: start, $lte: end },
-                    status: 'completed'
-                } 
-            },
-            { 
-                $lookup: {
-                    from: 'users',
-                    localField: 'user',
-                    foreignField: '_id',
-                    as: 'userDetails'
-                }
-            },
-            {
-                $unwind: '$userDetails'
-            },
-            {
-                $group: {
-                    _id: '$user',
-                    name: { $first: '$userDetails.name' },
-                    email: { $first: '$userDetails.email' },
-                    revenue: { $sum: '$amount' },
-                    orders: { $sum: 1 }
-                }
-            },
-            {
-                $project: {
-                    _id: 0,
-                    id: '$_id',
-                    name: 1,
-                    email: 1,
-                    revenue: 1,
-                    orders: 1,
-                    averageOrder: { $divide: ['$revenue', '$orders'] }
-                }
-            },
-            {
-                $sort: { revenue: -1 }
-            }
-        ]);
-        
-        // Calculate summary statistics
-        const totalRevenue = customerRevenue.reduce((sum, customer) => sum + customer.revenue, 0);
-        const totalCustomers = customerRevenue.length;
-        const averageRevenue = totalCustomers > 0 ? totalRevenue / totalCustomers : 0;
-        
-        res.status(200).json({
-            totalRevenue,
-            totalCustomers,
-            averageRevenue,
-            customers: customerRevenue
-        });
-        
-    } catch (error) {
-        console.error('Error generating revenue by customer report:', error);
-        next(error);
-    }
-};
-
-/**
- * @desc    Get expense details report
- * @route   GET /api/financials/reports/expense-details
- * @access  Private (financial_manager, admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getExpenseDetailsReport = async (req, res, next) => {
-    try {
-        const { startDate, endDate } = req.query;
-        
-        if (!startDate || !endDate) {
-            throw new BadRequestError('Start and end dates are required');
-        }
-        
-        const start = new Date(startDate);
-        const end = new Date(endDate);
-        end.setHours(23, 59, 59, 999); // Include all of end date
-        
-        if (isNaN(start.getTime()) || isNaN(end.getTime())) {
-            throw new BadRequestError('Invalid date format');
-        }
-        
-        // Get total expenses
-        const totalExpensesResult = await Expense.aggregate([
-            { $match: { date: { $gte: start, $lte: end } } },
-            { $group: { _id: null, total: { $sum: '$amount' } } }
-        ]);
-        const totalExpenses = totalExpensesResult.length > 0 ? totalExpensesResult[0].total : 0;
-        
-        // Get expenses by category
-        const expensesByCategory = await Expense.aggregate([
-            { $match: { date: { $gte: start, $lte: end } } },
-            { 
-                $group: {
-                    _id: '$category',
-                    amount: { $sum: '$amount' },
-                    count: { $sum: 1 }
-                }
-            },
-            {
-                $project: {
-                    _id: 0,
-                    category: '$_id',
-                    amount: 1,
-                    count: 1,
-                    percentage: { 
-                        $multiply: [
-                            { $divide: ['$amount', totalExpenses] }, 
-                            100
-                        ]
-                    }
-                }
-            },
-            { $sort: { amount: -1 } }
-        ]);
-        
-        // Get monthly expense trend
-        const monthlyExpenses = await Expense.aggregate([
-            { $match: { date: { $gte: start, $lte: end } } },
-            {
-                $group: {
-                    _id: {
-                        year: { $year: "$date" },
-                        month: { $month: "$date" }
-                    },
-                    amount: { $sum: "$amount" }
-                }
-            },
-            {
-                $project: {
-                    _id: 0,
-                    year: '$_id.year',
-                    month: '$_id.month',
-                    amount: 1
-                }
-            },
-            { $sort: { year: 1, month: 1 } }
-        ]);
-        
-        // Format month names
-        const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
-        const formattedMonthlyExpenses = monthlyExpenses.map(item => ({
-            month: `${monthNames[item.month - 1]} ${item.year}`,
-            amount: item.amount
-        }));
-        
-        // Get expense details
-        const expenses = await Expense.find({ date: { $gte: start, $lte: end } })
-            .sort({ date: -1 })
-            .limit(100); // Limit to prevent too large responses
-        
-        res.status(200).json({
-            totalExpenses,
-            expensesByCategory,
-            monthlyExpenses: formattedMonthlyExpenses,
-            expenses: expenses.map(e => ({
-                id: e._id,
-                date: e.date,
-                category: e.category,
-                description: e.description,
-                amount: e.amount
-            }))
-        });
-        
-    } catch (error) {
-        console.error('Error generating expense details report:', error);
-        next(error);
-    }
-};
diff --git a/backend/src/controllers/mfaController.js b/backend/src/controllers/mfaController.js
deleted file mode 100644
index 3ca9626..0000000
--- a/backend/src/controllers/mfaController.js
+++ /dev/null
@@ -1,272 +0,0 @@
-// backend/src/controllers/mfaController.js
-const speakeasy = require('speakeasy');
-const qrcode = require('qrcode');
-const bcrypt = require('bcryptjs');
-const User = require('../models/User');
-const { ApiError, BadRequestError, UnauthorizedError } = require('../errors');
-const jwt = require('jsonwebtoken');
-const config = require('../config');
-/**
- * Generate a new MFA secret for a user
- * @route POST /api/mfa/generate
- * @access Private
- */
-exports.generateMfaSecret = async (req, res) => {
-  try {
-    const userId = req.user.id;
-
-    // Check if MFA is already enabled
-    const user = await User.findById(userId);
-    if (user.mfaEnabled) {
-      throw new BadRequestError('MFA is already enabled for this account');
-    }
-
-    // Generate a new secret
-    const secret = speakeasy.generateSecret({
-      name: `SmartBin:${user.email}` // This will show in the authenticator app
-    });
-
-    // Generate QR code
-    const qrCodeUrl = await qrcode.toDataURL(secret.otpauth_url);
-
-    // Store the secret temporarily in the session or as a temporary field
-    // In a real production app, you might want to store this in Redis or similar
-    // with a short TTL, but for simplicity, we'll just return it and expect it back
-    
-    return res.status(200).json({
-      success: true,
-      data: {
-        qrCode: qrCodeUrl,
-        secret: secret.base32 // This needs to be saved by the client and sent back
-      }
-    });
-  } catch (error) {
-    if (error instanceof ApiError) {
-      throw error;
-    }
-    throw new BadRequestError('Failed to generate MFA secret');
-  }
-};
-
-/**
- * Enable MFA for a user after verifying the token
- * @route POST /api/mfa/enable
- * @access Private
- */
-exports.enableMfa = async (req, res) => {
-  try {
-    const { token, secret } = req.body;
-    const userId = req.user.id;
-
-    if (!token || !secret) {
-      throw new BadRequestError('Token and secret are required');
-    }
-
-    // Verify the token
-    const verified = speakeasy.totp.verify({
-      secret,
-      encoding: 'base32',
-      token
-    });
-
-    if (!verified) {
-      throw new UnauthorizedError('Invalid verification code');
-    }
-
-    // Generate recovery codes
-    const recoveryCodes = [];
-    for (let i = 0; i < 10; i++) {
-      // Generate a random recovery code
-      const code = Math.random().toString(36).substring(2, 12).toUpperCase();
-      
-      // Hash the code for storage
-      const salt = await bcrypt.genSalt(10);
-      const hashedCode = await bcrypt.hash(code, salt);
-      
-      recoveryCodes.push({ original: code, hashed: hashedCode });
-    }
-
-    // Enable MFA for the user
-    await User.findByIdAndUpdate(userId, {
-      mfaEnabled: true,
-      mfaSecret: secret,
-      mfaRecoveryCodes: recoveryCodes.map(code => code.hashed)
-    });
-
-    // Return the recovery codes to the user (only once)
-    return res.status(200).json({
-      success: true,
-      message: 'MFA enabled successfully',
-      recoveryCodes: recoveryCodes.map(code => code.original) // Only send the unhashed codes
-    });
-  } catch (error) {
-    if (error instanceof ApiError) {
-      throw error;
-    }
-    throw new BadRequestError('Failed to enable MFA');
-  }
-};
-
-/**
- * Verify a token during login process
- * @route POST /api/mfa/verify
- * @access Public (Used during authentication)
- */
-exports.verifyMfaToken = async (req, res) => {
-  try {
-    const { userId, token } = req.body;
-
-    if (!userId || !token) {
-      throw new BadRequestError('User ID and token are required');
-    }
-
-    // Get the user with MFA secret
-    const user = await User.findById(userId).select('+mfaSecret');
-    if (!user) {
-      throw new UnauthorizedError('Invalid user ID');
-    }
-
-    // Verify the token
-    const verified = speakeasy.totp.verify({
-      secret: user.mfaSecret,
-      encoding: 'base32',
-      token,
-      window: 1 // Allow 1 time step before/after for clock drift
-    });
-
-    if (!verified) {
-      throw new UnauthorizedError('Invalid verification code');
-    }
-
-    // Generate JWT token
-    const jwtToken = jwt.sign(
-      { id: user._id, role: user.role },
-      config.jwtSecret,
-      { expiresIn: config.jwtExpire }
-    );
-
-    return res.status(200).json({
-      success: true,
-      token: jwtToken,
-      _id: user._id,
-      name: user.name,
-      email: user.email,
-      role: user.role,
-      mfaEnabled: user.mfaEnabled
-    });
-  } catch (error) {
-    if (error instanceof ApiError) {
-      throw error;
-    }
-    throw new BadRequestError('Failed to verify MFA token');
-  }
-};
-
-/**
- * Use a recovery code when MFA device is not available
- * @route POST /api/mfa/recover
- * @access Public (Used during authentication)
- */
-exports.verifyRecoveryCode = async (req, res) => {
-  try {
-    const { userId, recoveryCode } = req.body;
-
-    if (!userId || !recoveryCode) {
-      throw new BadRequestError('User ID and recovery code are required');
-    }
-
-    // Get the user with recovery codes
-    const user = await User.findById(userId).select('+mfaRecoveryCodes');
-    if (!user) {
-      throw new UnauthorizedError('Invalid user ID');
-    }
-
-    // Check if the recovery code matches any of the stored codes
-    let matchFound = false;
-    let matchedCodeIndex = -1;
-
-    for (let i = 0; i < user.mfaRecoveryCodes.length; i++) {
-      const isMatch = await bcrypt.compare(recoveryCode, user.mfaRecoveryCodes[i]);
-      if (isMatch) {
-        matchFound = true;
-        matchedCodeIndex = i;
-        break;
-      }
-    }
-
-    if (!matchFound) {
-      throw new UnauthorizedError('Invalid recovery code');
-    }
-
-    // Remove the used recovery code
-    user.mfaRecoveryCodes.splice(matchedCodeIndex, 1);
-    await user.save();
-
-    // Generate JWT token
-    const jwtToken = jwt.sign(
-      { id: user._id, role: user.role },
-      config.jwtSecret,
-      { expiresIn: config.jwtExpire }
-    );
-
-    return res.status(200).json({
-      success: true,
-      token: jwtToken,
-      _id: user._id,
-      name: user.name,
-      email: user.email,
-      role: user.role,
-      mfaEnabled: user.mfaEnabled
-    });
-  } catch (error) {
-    if (error instanceof ApiError) {
-      throw error;
-    }
-    throw new BadRequestError('Failed to verify recovery code');
-  }
-};
-
-/**
- * Disable MFA for a user
- * @route POST /api/mfa/disable
- * @access Private
- */
-exports.disableMfa = async (req, res) => {
-  try {
-    const { password } = req.body;
-    const userId = req.user.id;
-
-    if (!password) {
-      throw new BadRequestError('Password is required to disable MFA');
-    }
-
-    // Get the user with password
-    const user = await User.findById(userId).select('+password');
-    if (!user) {
-      throw new UnauthorizedError('User not found');
-    }
-
-    // Verify password
-    const isMatch = await user.matchPassword(password);
-    if (!isMatch) {
-      throw new UnauthorizedError('Invalid password');
-    }
-
-    // Disable MFA
-    await User.findByIdAndUpdate(userId, {
-      mfaEnabled: false,
-      mfaSecret: null,
-      mfaRecoveryCodes: []
-    });
-
-    return res.status(200).json({
-      success: true,
-      message: 'MFA disabled successfully'
-    });
-  } catch (error) {
-    if (error instanceof ApiError) {
-      throw error;
-    }
-    throw new BadRequestError('Failed to disable MFA');
-  }
-};
\ No newline at end of file
diff --git a/backend/src/controllers/payrollController.js b/backend/src/controllers/payrollController.js
deleted file mode 100644
index 8836fe4..0000000
--- a/backend/src/controllers/payrollController.js
+++ /dev/null
@@ -1,139 +0,0 @@
-const PayrollLog = require('../models/PayrollLog');
-const User = require('../models/User');
-const payrollService = require('../services/payrollService');
-const { NotFoundError, BadRequestError, ForbiddenError } = require('../errors');
-const mongoose = require('mongoose');
-
-// @desc    Generate payroll for all staff for a given period
-// @route   POST /api/payroll/generate
-// @access  Private (Admin, Financial Manager)
-exports.generatePayrollForPeriod = async (req, res, next) => {
-    const { periodStart, periodEnd } = req.body; // Expecting YYYY-MM-DD format
-
-    if (!periodStart || !periodEnd) {
-        return next(new BadRequestError('periodStart and periodEnd are required'));
-    }
-
-    const startDate = new Date(periodStart);
-    const endDate = new Date(periodEnd);
-    endDate.setHours(23, 59, 59, 999); // Include the whole end day
-
-    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
-        return next(new BadRequestError('Invalid date format for periodStart or periodEnd'));
-    }
-
-    try {
-        const staffMembers = await User.find({ role: 'staff' });
-        if (staffMembers.length === 0) {
-             return res.status(200).json({ message: 'No staff members found to generate payroll for.', results: [] });
-        }
-
-        const results = [];
-        for (const staff of staffMembers) {
-            try {
-               const log = await payrollService.generateOrGetPayrollLog(staff._id, startDate, endDate);
-               results.push({ staffId: staff._id, status: 'Success', logId: log._id });
-            } catch (error) {
-                results.push({ staffId: staff._id, status: 'Error', message: error.message });
-                console.error(`Failed generating payroll for ${staff.email}: ${error.message}`);
-            }
-        }
-
-        res.status(200).json({ message: 'Payroll generation process completed.', results });
-
-    } catch (error) {
-        next(error);
-    }
-};
-
-// @desc    Get payroll history for a specific staff member
-// @route   GET /api/payroll/staff/:staffId
-// @access  Private (Admin, Financial Manager, or Staff Owner)
-exports.getPayrollHistoryForStaff = async (req, res, next) => {
-    const { staffId } = req.params;
-    const loggedInUserId = req.user.id;
-    const loggedInUserRole = req.user.role;
-
-    if (!mongoose.Types.ObjectId.isValid(staffId)) {
-        return next(new BadRequestError('Invalid Staff ID format'));
-    }
-
-    // Check permissions
-    if (loggedInUserRole !== 'admin' && loggedInUserRole !== 'financial_manager' && loggedInUserId !== staffId) {
-         return next(new ForbiddenError('Not authorized to view this payroll history'));
-    }
-
-    try {
-        // Add pagination later if needed
-        const payrollHistory = await PayrollLog.find({ staff: staffId })
-                                            .sort({ payPeriodEnd: -1 })
-                                            .populate('staff', 'name email'); // Populate basic staff info
-
-        res.status(200).json(payrollHistory);
-    } catch (error) {
-        next(error);
-    }
-};
-
- // @desc    Get a specific payroll log entry by its ID
-// @route   GET /api/payroll/:logId
-// @access  Private (Admin, Financial Manager, or Staff Owner)
-exports.getPayrollLogById = async (req, res, next) => {
-    const { logId } = req.params;
-    const loggedInUserId = req.user.id;
-    const loggedInUserRole = req.user.role;
-
-     if (!mongoose.Types.ObjectId.isValid(logId)) {
-        return next(new BadRequestError('Invalid Log ID format'));
-    }
-
-    try {
-        const payrollLog = await PayrollLog.findById(logId).populate('staff', 'name email');
-        if (!payrollLog) {
-             throw new NotFoundError('Payroll log not found');
-        }
-
-        // Check permissions
-        if (loggedInUserRole !== 'admin' && loggedInUserRole !== 'financial_manager' && payrollLog.staff._id.toString() !== loggedInUserId) {
-             return next(new ForbiddenError('Not authorized to view this payroll log'));
-        }
-
-        res.status(200).json(payrollLog);
-    } catch (error) {
-        next(error);
-    }
-};
-
-// @desc    Mark a payroll log as Paid
-// @route   PATCH /api/payroll/:logId/mark-paid
-// @access  Private (Admin, Financial Manager)
-exports.markPayrollAsPaid = async (req, res, next) => {
-    const { logId } = req.params;
-    const { paymentDate, transactionRef } = req.body; // Optional payment details
-
-     if (!mongoose.Types.ObjectId.isValid(logId)) {
-        return next(new BadRequestError('Invalid Log ID format'));
-    }
-
-    try {
-         const payrollLog = await PayrollLog.findById(logId);
-        if (!payrollLog) {
-             throw new NotFoundError('Payroll log not found');
-        }
-
-        if (payrollLog.status === 'Paid') {
-            return next(new BadRequestError('Payroll has already been marked as paid.'));
-        }
-
-        payrollLog.status = 'Paid';
-        payrollLog.paymentDate = paymentDate ? new Date(paymentDate) : new Date(); // Use provided or now
-        if (transactionRef) payrollLog.transactionRef = transactionRef;
-
-        await payrollLog.save();
-
-        res.status(200).json({ message: 'Payroll marked as paid successfully', payrollLog });
-
-    } catch (error) {
-        next(error);
-    }
-};
\ No newline at end of file
diff --git a/backend/src/controllers/performanceController.js b/backend/src/controllers/performanceController.js
deleted file mode 100644
index e3c2c6c..0000000
--- a/backend/src/controllers/performanceController.js
+++ /dev/null
@@ -1,793 +0,0 @@
-const Performance = require('../models/Performance');
-const User = require('../models/User');
-const NotFoundError = require('../errors/NotFoundError');
-const ForbiddenError = require('../errors/ForbiddenError');
-const BadRequestError = require('../errors/BadRequestError');
-const ApiError = require('../errors/ApiError');
-const mongoose = require('mongoose');
-
-/**
- * @desc    Create a new performance review
- * @route   POST /api/performance
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.createPerformanceReview = async (req, res, next) => {
-  // Validation handled by express-validator
-  const { staff, reviewDate, reviewer, rating, comments, goals } = req.body;
-
-  try {
-    // Validate staff exists
-    const staffUser = await User.findById(staff);
-    if (!staffUser || !['staff', 'admin'].includes(staffUser.role)) { // Ensure it's a staff member or admin being reviewed
-      throw new NotFoundError(`Staff user not found with ID: ${staff}`);
-    }
-
-    // Validate reviewer exists (assuming reviewer is also a user, likely admin/manager)
-    const reviewerUser = await User.findById(reviewer);
-    if (!reviewerUser) {
-      throw new NotFoundError(`Reviewer user not found with ID: ${reviewer}`);
-    }
-    // Optional: Check if reviewer has permission to review
-    if (!['admin', 'financial_manager'].includes(reviewerUser.role)) {
-        // Or check if reviewer is the direct manager of the staff member
-        // throw new ForbiddenError('Reviewer does not have permission to create reviews');
-    }
-
-    const performance = await Performance.create({
-      staff,
-      reviewDate: reviewDate ? new Date(reviewDate) : new Date(),
-      reviewer,
-      rating,
-      comments,
-      goals
-    });
-
-    res.status(201).json(performance);
-  } catch (error) {
-    console.error('Error creating performance review:', error);
-    // Mongoose validation errors handled globally
-    next(error); // Pass NotFoundError or others
-  }
-};
-
-/**
- * @desc    Get all performance reviews (for admin)
- * @route   GET /api/performance
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getPerformanceReviews = async (req, res, next) => {
-  try {
-    const { staffId, reviewerId, page = 1, limit = 10, sortBy = 'reviewDate', order = 'desc' } = req.query;
-    const query = {};
-
-    if (staffId) {
-        if (!mongoose.Types.ObjectId.isValid(staffId)) throw new BadRequestError('Invalid staffId format');
-        query.staff = staffId;
-    }
-    if (reviewerId) {
-        if (!mongoose.Types.ObjectId.isValid(reviewerId)) throw new BadRequestError('Invalid reviewerId format');
-        query.reviewer = reviewerId;
-    }
-
-    const sortOrder = order === 'asc' ? 1 : -1;
-    const sortOptions = {};
-    sortOptions[sortBy] = sortOrder;
-
-    const options = {
-        page: parseInt(page, 10),
-        limit: parseInt(limit, 10),
-        sort: sortOptions,
-        populate: [
-            { path: 'staff', select: 'name email' },
-            { path: 'reviewer', select: 'name email' }
-        ]
-    };
-
-    // Use paginate if available, otherwise use find, skip, limit
-    const reviews = await Performance.paginate ? await Performance.paginate(query, options) : await Performance.find(query)
-        .populate('staff', 'name email')
-        .populate('reviewer', 'name email')
-        .sort(sortOptions)
-        .skip((options.page - 1) * options.limit)
-        .limit(options.limit);
-
-    res.status(200).json(reviews);
-  } catch (error) {
-    console.error('Error fetching performance reviews:', error);
-    next(error); // Pass potential BadRequestError or others
-  }
-};
-
-/**
- * @desc    Get performance reviews for the logged-in staff member
- * @route   GET /api/performance/my-reviews
- * @access  Private/Staff/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getMyPerformanceReviews = async (req, res, next) => {
-    try {
-        const reviews = await Performance.find({ staff: req.user.id })
-            .populate('reviewer', 'name email') // Populate reviewer details
-            .sort({ reviewDate: -1 });
-
-        res.status(200).json(reviews);
-    } catch (error) {
-        console.error('Error fetching own performance reviews:', error);
-        next(new ApiError(500, 'Failed to retrieve performance reviews'));
-    }
-};
-
-/**
- * @desc    Get a single performance review by ID
- * @route   GET /api/performance/:id
- * @access  Private (Owner, Reviewer, or Admin)
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getPerformanceReviewById = async (req, res, next) => {
-  try {
-    const review = await Performance.findById(req.params.id)
-      .populate('staff', 'name email')
-      .populate('reviewer', 'name email');
-
-    if (!review) {
-      throw new NotFoundError('Performance review not found');
-    }
-
-    // Check permissions: User must be the staff member, the reviewer, or an admin
-    const isOwner = review.staff._id.toString() === req.user.id;
-    const isReviewer = review.reviewer._id.toString() === req.user.id;
-    const isAdmin = req.user.role === 'admin';
-
-    if (!isOwner && !isReviewer && !isAdmin) {
-      throw new ForbiddenError('Not authorized to access this performance review');
-    }
-
-    res.status(200).json(review);
-  } catch (error) {
-    console.error('Error fetching performance review by ID:', error);
-    next(error); // Pass NotFoundError, ForbiddenError, or others
-  }
-};
-
-/**
- * @desc    Update a performance review
- * @route   PUT /api/performance/:id
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.updatePerformanceReview = async (req, res, next) => {
-  // Validation handled by express-validator
-  const { staff, reviewDate, reviewer, rating, comments, goals } = req.body;
-
-  try {
-    const review = await Performance.findById(req.params.id);
-
-    if (!review) {
-      throw new NotFoundError('Performance review not found');
-    }
-
-    // Validate staff exists if changed
-    if (staff && staff !== review.staff.toString()) {
-        const staffUser = await User.findById(staff);
-        if (!staffUser || !['staff', 'admin'].includes(staffUser.role)) {
-            throw new NotFoundError(`Staff user not found with ID: ${staff}`);
-        }
-        review.staff = staff;
-    }
-
-    // Validate reviewer exists if changed
-    if (reviewer && reviewer !== review.reviewer.toString()) {
-        const reviewerUser = await User.findById(reviewer);
-        if (!reviewerUser) {
-            throw new NotFoundError(`Reviewer user not found with ID: ${reviewer}`);
-        }
-        // Optional: Check reviewer permissions
-        review.reviewer = reviewer;
-    }
-
-    // Update fields
-    review.reviewDate = reviewDate ? new Date(reviewDate) : review.reviewDate;
-    review.rating = rating !== undefined ? rating : review.rating;
-    review.comments = comments !== undefined ? comments : review.comments;
-    review.goals = goals !== undefined ? goals : review.goals;
-
-    const updatedReview = await review.save(); // Trigger validation
-
-    res.status(200).json(updatedReview);
-  } catch (error) {
-    console.error('Error updating performance review:', error);
-    // Mongoose validation errors handled globally
-    next(error); // Pass NotFoundError or others
-  }
-};
-
-/**
- * @desc    Delete a performance review
- * @route   DELETE /api/performance/:id
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.deletePerformanceReview = async (req, res, next) => {
-  try {
-    const review = await Performance.findById(req.params.id);
-
-    if (!review) {
-      throw new NotFoundError('Performance review not found');
-    }
-
-    await review.deleteOne();
-
-    res.status(200).json({ message: 'Performance review deleted successfully' });
-  } catch (error) {
-    console.error('Error deleting performance review:', error);
-    next(error); // Pass NotFoundError or others
-  }
-};
-
-/**
- * @desc    Get performance summary (e.g., average ratings)
- * @route   GET /api/performance/summary
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getPerformanceSummary = async (req, res, next) => {
-    try {
-        const { period = 'year' } = req.query; // e.g., 'year', 'quarter'
-        let startDate;
-        const endDate = new Date();
-        endDate.setHours(23, 59, 59, 999);
-
-        switch (period) {
-            // Add cases for 'quarter', 'month' if needed
-            case 'year':
-            default:
-                startDate = new Date(endDate.getFullYear(), 0, 1);
-                startDate.setHours(0, 0, 0, 0);
-                break;
-        }
-
-        const summary = await Performance.aggregate([
-            { $match: { reviewDate: { $gte: startDate, $lte: endDate } } },
-            {
-                $group: {
-                    _id: '$staff', // Group by staff member
-                    averageRating: { $avg: '$rating' },
-                    reviewCount: { $sum: 1 }
-                }
-            },
-            {
-                $lookup: { // Join with users to get staff names
-                    from: 'users',
-                    localField: '_id',
-                    foreignField: '_id',
-                    as: 'staffDetails'
-                }
-            },
-            { $unwind: '$staffDetails' },
-            {
-                $project: {
-                    _id: 0,
-                    staffId: '$_id',
-                    staffName: '$staffDetails.name',
-                    staffEmail: '$staffDetails.email',
-                    averageRating: { $round: ['$averageRating', 2] }, // Round average rating
-                    reviewCount: 1
-                }
-            },
-            { $sort: { averageRating: -1 } } // Sort by average rating descending
-        ]);
-
-        const overallAverage = await Performance.aggregate([
-            { $match: { reviewDate: { $gte: startDate, $lte: endDate } } },
-            {
-                $group: {
-                    _id: null,
-                    overallAvg: { $avg: '$rating' },
-                    totalReviews: { $sum: 1 }
-                }
-            }
-        ]);
-
-        res.status(200).json({
-            period: { start: startDate.toISOString(), end: endDate.toISOString(), label: period },
-            overall: overallAverage.length > 0 ? {
-                averageRating: Math.round(overallAverage[0].overallAvg * 100) / 100,
-                totalReviews: overallAverage[0].totalReviews
-            } : { averageRating: 0, totalReviews: 0 },
-            byStaff: summary
-        });
-
-    } catch (error) {
-        console.error('Error fetching performance summary:', error);
-        next(new ApiError(500, 'Failed to generate performance summary'));
-    }
-};
-
-/**
- * @desc    Export performance report as PDF
- * @route   GET /api/performance/reports/export
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.exportPerformanceReport = async (req, res, next) => {
-  try {
-    const { period = 'year', startDate: startDateParam, endDate: endDateParam } = req.query;
-    const PDFDocument = require('pdfkit');
-    
-    // Determine date range
-    let startDate, endDate = new Date();
-    endDate.setHours(23, 59, 59, 999);
-    
-    if (startDateParam && endDateParam) {
-      startDate = new Date(startDateParam);
-      endDate = new Date(endDateParam);
-      endDate.setHours(23, 59, 59, 999);
-    } else {
-      // Use the period parameter if specific dates not provided
-      switch (period) {
-        case 'quarter':
-          startDate = new Date(endDate);
-          startDate.setMonth(endDate.getMonth() - 3);
-          startDate.setHours(0, 0, 0, 0);
-          break;
-        case 'month':
-          startDate = new Date(endDate);
-          startDate.setMonth(endDate.getMonth() - 1);
-          startDate.setHours(0, 0, 0, 0);
-          break;
-        case 'year':
-        default:
-          startDate = new Date(endDate.getFullYear(), 0, 1);
-          startDate.setHours(0, 0, 0, 0);
-          break;
-      }
-    }
-    
-    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
-      throw new BadRequestError('Invalid date format');
-    }
-    
-    // Fetch overall performance statistics
-    const overallStats = await Performance.aggregate([
-      { $match: { reviewDate: { $gte: startDate, $lte: endDate } } },
-      {
-        $group: {
-          _id: null,
-          averageRating: { $avg: '$rating' },
-          totalReviews: { $sum: 1 },
-          minRating: { $min: '$rating' },
-          maxRating: { $max: '$rating' }
-        }
-      }
-    ]);
-    
-    // Fetch staff performance summaries
-    const staffPerformance = await Performance.aggregate([
-      { $match: { reviewDate: { $gte: startDate, $lte: endDate } } },
-      {
-        $group: {
-          _id: '$staff',
-          averageRating: { $avg: '$rating' },
-          reviewCount: { $sum: 1 },
-          minRating: { $min: '$rating' },
-          maxRating: { $max: '$rating' }
-        }
-      },
-      {
-        $lookup: {
-          from: 'users',
-          localField: '_id',
-          foreignField: '_id',
-          as: 'staffDetails'
-        }
-      },
-      { $unwind: '$staffDetails' },
-      {
-        $project: {
-          staffId: '$_id',
-          staffName: '$staffDetails.name',
-          staffEmail: '$staffDetails.email',
-          averageRating: { $round: ['$averageRating', 2] },
-          reviewCount: 1,
-          minRating: 1,
-          maxRating: 1
-        }
-      },
-      { $sort: { averageRating: -1 } }
-    ]);
-    
-    // Fetch rating distribution
-    const ratingDistribution = await Performance.aggregate([
-      { $match: { reviewDate: { $gte: startDate, $lte: endDate } } },
-      {
-        $group: {
-          _id: { $floor: '$rating' },
-          count: { $sum: 1 }
-        }
-      },
-      {
-        $project: {
-          rating: '$_id',
-          count: 1,
-          _id: 0
-        }
-      },
-      { $sort: { rating: 1 } }
-    ]);
-    
-    // Get recent reviews
-    const recentReviews = await Performance.find({ reviewDate: { $gte: startDate, $lte: endDate } })
-      .populate('staff', 'name email')
-      .populate('reviewer', 'name email')
-      .sort({ reviewDate: -1 })
-      .limit(10)
-      .select('staff reviewer reviewDate rating comments');
-    
-    // Create a PDF document
-    const doc = new PDFDocument({
-      margin: 50,
-      size: 'A4'
-    });
-    
-    // Set response headers for PDF download
-    const periodText = period === 'year' ? 'Annual' : 
-                      period === 'quarter' ? 'Quarterly' : 
-                      period === 'month' ? 'Monthly' : 'Custom';
-                      
-    res.setHeader('Content-Type', 'application/pdf');
-    res.setHeader('Content-Disposition', `attachment; filename=performance-report-${periodText.toLowerCase()}-${new Date().toISOString().split('T')[0]}.pdf`);
-    
-    // Pipe the PDF to the response
-    doc.pipe(res);
-    
-    // Format dates for display
-    const formatDate = (date) => {
-      return date.toLocaleDateString('en-US', {
-        year: 'numeric',
-        month: 'long',
-        day: 'numeric'
-      });
-    };
-    
-    // PDF Generation - Header
-    doc.font('Helvetica-Bold').fontSize(18).text('SmartBin Staff Performance Report', { align: 'center' });
-    doc.moveDown();
-    
-    doc.fontSize(12).text(`Report Period: ${formatDate(startDate)} to ${formatDate(endDate)}`, { align: 'center' });
-    doc.moveDown();
-    doc.text(`Generated on: ${formatDate(new Date())}`, { align: 'center' });
-    doc.moveDown();
-    doc.text(`Generated by: ${req.user.name}`, { align: 'center' });
-    doc.moveDown(2);
-    
-    // Executive Summary Section
-    doc.font('Helvetica-Bold').fontSize(14).text('Executive Summary', { underline: true });
-    doc.moveDown(0.5);
-    
-    if (overallStats.length > 0) {
-      doc.font('Helvetica').fontSize(11);
-      doc.text(`This performance report covers ${overallStats[0].totalReviews} reviews conducted between ${formatDate(startDate)} and ${formatDate(endDate)}.`);
-      doc.moveDown(0.5);
-      doc.text(`The overall average performance rating for all staff is ${overallStats[0].averageRating.toFixed(2)} out of 5.0.`);
-      doc.moveDown(0.5);
-      
-      // Calculate high performers vs low performers
-      const highPerformers = staffPerformance.filter(staff => staff.averageRating >= 4.0).length;
-      const lowPerformers = staffPerformance.filter(staff => staff.averageRating < 3.0).length;
-      
-      doc.text(`Number of high performers (rating ≥ 4.0): ${highPerformers}`);
-      doc.text(`Number of low performers (rating < 3.0): ${lowPerformers}`);
-    } else {
-      doc.font('Helvetica').fontSize(11);
-      doc.text('No performance data available for the selected period.');
-    }
-    
-    doc.moveDown(2);
-    
-    // Staff Performance Summary
-    if (staffPerformance.length > 0) {
-      doc.font('Helvetica-Bold').fontSize(14).text('Staff Performance Rankings', { underline: true });
-      doc.moveDown(0.5);
-      
-      // Table header
-      const tableTop = doc.y;
-      doc.font('Helvetica-Bold').fontSize(10);
-      
-      // Define column widths
-      const colWidths = {
-        name: 150,
-        avgRating: 70,
-        reviews: 70,
-        minRating: 70,
-        maxRating: 70
-      };
-      
-      // Header row
-      doc.text('Staff Name', 50, tableTop);
-      doc.text('Avg Rating', 50 + colWidths.name, tableTop);
-      doc.text('Reviews', 50 + colWidths.name + colWidths.avgRating, tableTop);
-      doc.text('Min Rating', 50 + colWidths.name + colWidths.avgRating + colWidths.reviews, tableTop);
-      doc.text('Max Rating', 50 + colWidths.name + colWidths.avgRating + colWidths.reviews + colWidths.minRating, tableTop);
-      
-      // Draw line under header
-      doc.moveTo(50, tableTop + 15)
-         .lineTo(50 + colWidths.name + colWidths.avgRating + colWidths.reviews + colWidths.minRating + colWidths.maxRating, tableTop + 15)
-         .stroke();
-      
-      // Data rows
-      let rowY = tableTop + 25;
-      doc.font('Helvetica').fontSize(10);
-      
-      // Function to add a page if we're running out of space
-      const checkAndAddPage = (y) => {
-        if (y > 700) {
-          doc.addPage();
-          
-          // Add header to new page
-          doc.font('Helvetica-Bold').fontSize(14).text('Staff Performance Rankings (Continued)', { underline: true });
-          doc.moveDown(0.5);
-          
-          // Draw header row on new page
-          const newTableTop = doc.y;
-          doc.font('Helvetica-Bold').fontSize(10);
-          
-          doc.text('Staff Name', 50, newTableTop);
-          doc.text('Avg Rating', 50 + colWidths.name, newTableTop);
-          doc.text('Reviews', 50 + colWidths.name + colWidths.avgRating, newTableTop);
-          doc.text('Min Rating', 50 + colWidths.name + colWidths.avgRating + colWidths.reviews, newTableTop);
-          doc.text('Max Rating', 50 + colWidths.name + colWidths.avgRating + colWidths.reviews + colWidths.minRating, newTableTop);
-          
-          // Draw line under header
-          doc.moveTo(50, newTableTop + 15)
-             .lineTo(50 + colWidths.name + colWidths.avgRating + colWidths.reviews + colWidths.minRating + colWidths.maxRating, newTableTop + 15)
-             .stroke();
-          
-          doc.font('Helvetica').fontSize(10);
-          return newTableTop + 25;
-        }
-        return y;
-      };
-      
-      // Draw each staff row
-      staffPerformance.forEach((staff, i) => {
-        rowY = checkAndAddPage(rowY);
-        
-        doc.text(staff.staffName, 50, rowY);
-        doc.text(staff.averageRating.toFixed(2), 50 + colWidths.name, rowY);
-        doc.text(staff.reviewCount.toString(), 50 + colWidths.name + colWidths.avgRating, rowY);
-        doc.text(staff.minRating.toFixed(1), 50 + colWidths.name + colWidths.avgRating + colWidths.reviews, rowY);
-        doc.text(staff.maxRating.toFixed(1), 50 + colWidths.name + colWidths.avgRating + colWidths.reviews + colWidths.minRating, rowY);
-        
-        rowY += 20;
-      });
-      
-      // Draw bottom border
-      doc.moveTo(50, rowY - 10)
-         .lineTo(50 + colWidths.name + colWidths.avgRating + colWidths.reviews + colWidths.minRating + colWidths.maxRating, rowY - 10)
-         .stroke();
-      
-      doc.moveDown(2);
-    }
-    
-    // Rating Distribution
-    if (ratingDistribution.length > 0) {
-      // Check if we need a new page
-      if (doc.y > 600) {
-        doc.addPage();
-      }
-      
-      doc.font('Helvetica-Bold').fontSize(14).text('Rating Distribution', { underline: true });
-      doc.moveDown(0.5);
-      
-      // Prepare textual representation of distribution
-      doc.font('Helvetica').fontSize(11);
-      
-      const totalReviews = ratingDistribution.reduce((sum, item) => sum + item.count, 0);
-      
-      ratingDistribution.forEach(item => {
-        const percentage = (item.count / totalReviews * 100).toFixed(1);
-        const barLength = Math.round(percentage / 2);
-        doc.text(`${item.rating} star: ${item.count} reviews (${percentage}%) ${'█'.repeat(barLength)}`);
-      });
-      
-      doc.moveDown(2);
-    }
-    
-    // Recent Reviews Section
-    if (recentReviews.length > 0) {
-      // Check if we need a new page
-      if (doc.y > 500) {
-        doc.addPage();
-      }
-      
-      doc.font('Helvetica-Bold').fontSize(14).text('Recent Performance Reviews', { underline: true });
-      doc.moveDown(0.5);
-      
-      recentReviews.forEach((review, index) => {
-        // Check if we need a new page for this review
-        if (doc.y > 700) {
-          doc.addPage();
-        }
-        
-        doc.font('Helvetica-Bold').fontSize(11);
-        doc.text(`${index + 1}. ${review.staff.name} - Rated ${review.rating}/5`);
-        
-        doc.font('Helvetica').fontSize(10);
-        doc.text(`Reviewed by: ${review.reviewer.name}`, { indent: 20 });
-        doc.text(`Date: ${formatDate(review.reviewDate)}`, { indent: 20 });
-        
-        if (review.comments) {
-          doc.font('Helvetica-Oblique').fontSize(10);
-          doc.text(`"${review.comments}"`, { indent: 20 });
-        }
-        
-        doc.moveDown(1);
-      });
-    }
-    
-    // PDF notes
-    // Check if we need a new page
-    if (doc.y > 680) {
-      doc.addPage();
-    }
-    
-    doc.moveDown();
-    doc.font('Helvetica-Bold').fontSize(12).text('Notes:', 50, doc.y);
-    doc.moveDown(0.5);
-    
-    doc.font('Helvetica').fontSize(10);
-    doc.text('- This report provides a summary of staff performance for the specified period.');
-    doc.text('- Ratings are on a scale of 1.0 to 5.0, where 5.0 is the highest possible rating.');
-    doc.text('- Performance reviews are conducted by managers and peer reviewers.');
-    doc.text(`- Report generated by ${req.user.name} on ${new Date().toLocaleDateString()}.`);
-    
-    // Footer with page numbers
-    const pageCount = doc.bufferedPageRange().count;
-    for (let i = 0; i < pageCount; i++) {
-      doc.switchToPage(i);
-      doc.fontSize(8).text(
-        `Page ${i + 1} of ${pageCount}`,
-        50,
-        doc.page.height - 50,
-        { align: 'center' }
-      );
-    }
-    
-    // Finalize the PDF
-    doc.end();
-    
-  } catch (error) {
-    console.error('Error generating performance report:', error);
-    next(error);
-  }
-};
-
-/**
- * @desc    Get detailed performance metrics
- * @route   GET /api/performance/reports/detailed
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getDetailedPerformanceReport = async (req, res, next) => {
-  try {
-    const { startDate, endDate, staffId } = req.query;
-    
-    if (!startDate || !endDate) {
-      throw new BadRequestError('Start and end dates are required');
-    }
-    
-    const start = new Date(startDate);
-    const end = new Date(endDate);
-    end.setHours(23, 59, 59, 999);
-    
-    if (isNaN(start.getTime()) || isNaN(end.getTime())) {
-      throw new BadRequestError('Invalid date format');
-    }
-    
-    // Build query based on parameters
-    const query = { reviewDate: { $gte: start, $lte: end } };
-    
-    // If staffId is provided, filter by that staff member
-    if (staffId) {
-      if (!mongoose.Types.ObjectId.isValid(staffId)) {
-        throw new BadRequestError('Invalid staffId format');
-      }
-      query.staff = mongoose.Types.ObjectId(staffId);
-    }
-    
-    // Get all performance reviews in the period
-    const performanceReviews = await Performance.find(query)
-      .populate('staff', 'name email')
-      .populate('reviewer', 'name email')
-      .sort({ reviewDate: -1 });
-    
-    // Group reviews by staff member
-    const reviewsByStaff = {};
-    performanceReviews.forEach(review => {
-      const staffId = review.staff._id.toString();
-      if (!reviewsByStaff[staffId]) {
-        reviewsByStaff[staffId] = {
-          staffInfo: {
-            id: review.staff._id,
-            name: review.staff.name,
-            email: review.staff.email
-          },
-          reviews: [],
-          summary: {
-            averageRating: 0,
-            totalReviews: 0,
-            ratingDistribution: { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 }
-          }
-        };
-      }
-      
-      // Add review to staff's reviews
-      reviewsByStaff[staffId].reviews.push({
-        id: review._id,
-        reviewDate: review.reviewDate,
-        reviewer: {
-          id: review.reviewer._id,
-          name: review.reviewer.name,
-          email: review.reviewer.email
-        },
-        rating: review.rating,
-        comments: review.comments,
-        goals: review.goals
-      });
-      
-      // Update summary
-      reviewsByStaff[staffId].summary.totalReviews++;
-      
-      // Update rating distribution
-      const ratingKey = Math.floor(review.rating);
-      reviewsByStaff[staffId].summary.ratingDistribution[ratingKey] = 
-        (reviewsByStaff[staffId].summary.ratingDistribution[ratingKey] || 0) + 1;
-    });
-    
-    // Calculate average ratings
-    Object.values(reviewsByStaff).forEach(staff => {
-      const totalRating = staff.reviews.reduce((sum, review) => sum + review.rating, 0);
-      staff.summary.averageRating = parseFloat((totalRating / staff.summary.totalReviews).toFixed(2));
-      
-      // Sort reviews by date, newest first
-      staff.reviews.sort((a, b) => new Date(b.reviewDate) - new Date(a.reviewDate));
-    });
-    
-    // Convert to array and sort by average rating (descending)
-    const reportData = Object.values(reviewsByStaff).sort((a, b) => b.summary.averageRating - a.summary.averageRating);
-    
-    // Return the report data
-    res.json({
-      periodInfo: {
-        startDate: start,
-        endDate: end,
-        totalReviews: performanceReviews.length
-      },
-      staffReports: reportData
-    });
-    
-  } catch (error) {
-    console.error('Error generating detailed performance report:', error);
-    next(error);
-  }
-};
\ No newline at end of file
diff --git a/backend/src/controllers/settingsController.js b/backend/src/controllers/settingsController.js
deleted file mode 100644
index a16cd8e..0000000
--- a/backend/src/controllers/settingsController.js
+++ /dev/null
@@ -1,39 +0,0 @@
-const Settings = require('../models/Settings');
-const { NotFoundError } = require('../errors');
-
-// Get or create settings
-exports.getSettings = async (req, res, next) => {
-    try {
-        let settings = await Settings.findOne(); // Assuming only one doc due to uniqueKey
-        if (!settings) {
-            // If no settings exist, create the default one
-            settings = new Settings(); // Uses schema defaults
-            settings.lastUpdatedBy = req.user?.id; // Assign initial creator if possible
-            await settings.save();
-        }
-        res.status(200).json(settings);
-    } catch (error) {
-        next(error);
-    }
-};
-
-// Update settings
-exports.updateSettings = async (req, res, next) => {
-    // Validation should be handled by middleware before this point
-    try {
-        let settings = await Settings.findOne();
-        if (!settings) {
-            // Optionally create if not found, or throw error
-            throw new NotFoundError('Settings not found. Cannot update.');
-        }
-
-        // Update fields based on req.body
-        Object.assign(settings, req.body);
-        settings.lastUpdatedBy = req.user.id; // Track who updated
-
-        const updatedSettings = await settings.save();
-        res.status(200).json(updatedSettings);
-    } catch (error) {
-        next(error);
-    }
-};
\ No newline at end of file
diff --git a/backend/src/controllers/statisticsController.js b/backend/src/controllers/statisticsController.js
deleted file mode 100644
index 5478b2d..0000000
--- a/backend/src/controllers/statisticsController.js
+++ /dev/null
@@ -1,14 +0,0 @@
-const statisticsService = require('../services/statisticsService');
-const catchAsync = require('../utils/catchAsync'); // Helper to catch errors
-
-exports.getStatisticsData = catchAsync(async (req, res, next) => {
-    const { startDate, endDate, range } = req.query; // Get filters from query
-
-    // Pass filters to the service layer
-    const data = await statisticsService.calculateStatistics({ startDate, endDate, range });
-
-    res.status(200).json({
-        status: 'success',
-        data: data,
-    });
-});
diff --git a/backend/src/controllers/userController.js b/backend/src/controllers/userController.js
deleted file mode 100644
index b7dd0a0..0000000
--- a/backend/src/controllers/userController.js
+++ /dev/null
@@ -1,400 +0,0 @@
-// backend/src/controllers/userController.js
-const User = require('../models/User');
-const Document = require('../models/Document');
-const fs = require('fs');
-const path = require('path');
-const NotFoundError = require('../errors/NotFoundError');
-const ForbiddenError = require('../errors/ForbiddenError');
-const ApiError = require('../errors/ApiError');
-const BadRequestError = require('../errors/BadRequestError'); // Added for adminCreateUser
-
-/**
- * @desc    Get all users (with pagination)
- * @route   GET /api/users
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getUsers = async (req, res, next) => {
-  try {
-    // Basic Pagination
-    const page = parseInt(req.query.page, 10) || 1;
-    const limit = parseInt(req.query.limit, 10) || 10; // Default limit to 10
-    const skip = (page - 1) * limit;
-
-    // TODO: Add filtering (e.g., by role) and search (e.g., by name/email) later
-    const query = {}; 
-
-    const users = await User.find(query)
-      .select('-password') // Exclude password
-      .skip(skip)
-      .limit(limit)
-      .sort({ createdAt: -1 }); // Sort by creation date
-
-    const totalUsers = await User.countDocuments(query);
-    const totalPages = Math.ceil(totalUsers / limit);
-
-    res.json({
-      users,
-      currentPage: page,
-      totalPages,
-      totalUsers,
-    });
-  } catch (error) {
-    console.error('Error fetching users:', error);
-    next(new ApiError(500, 'Failed to fetch users')); // Pass error to global handler
-  }
-};
-
-/**
- * @desc    Get user by ID
- * @route   GET /api/users/:id
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getUserById = async (req, res, next) => {
-  try {
-    const user = await User.findById(req.params.id);
-    
-    if (!user) {
-      // Use custom error
-      throw new NotFoundError(`User not found with id ${req.params.id}`);
-    }
-    res.json(user);
-  } catch (error) {
-    console.error(`Error fetching user ${req.params.id}:`, error);
-    next(error); // Pass error (could be NotFoundError or other) to global handler
-  }
-};
-
-/**
- * @desc    Get current user profile
- * @route   GET /api/users/profile
- * @access  Private
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.getUserProfile = async (req, res, next) => {
-  try {
-    // req.user is attached by the protect middleware
-    const user = await User.findById(req.user.id);
-    
-    if (!user) {
-      // Should not happen if protect middleware works, but good practice
-      throw new NotFoundError('User not found'); 
-    }
-    
-    // Get user documents if any
-    const documents = await Document.find({ user: req.user.id });
-    
-    // Include new fields in response
-    res.json({
-      _id: user._id,
-      name: user.name,
-      email: user.email,
-      phone: user.phone,
-      address: user.address,
-      role: user.role,
-      preferences: user.preferences,
-      // Include skills and availability only for staff
-      ...(user.role === 'staff' && { 
-        skills: user.skills, 
-        availability: user.availability 
-      }),
-      mfaEnabled: user.mfaEnabled,
-      createdAt: user.createdAt,
-      documents: documents
-    });
-  } catch (error) {
-    console.error('Error fetching user profile:', error);
-    next(error); // Pass potential NotFoundError or other errors
-  }
-};
-
-/**
- * @desc    Update user profile
- * @route   PUT /api/users/profile
- * @access  Private
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.updateUserProfile = async (req, res, next) => {
-  try {
-    const user = await User.findById(req.user.id).select('+password'); // Select password if updating
-    
-    if (!user) {
-      throw new NotFoundError('User not found');
-    }
-    
-    // Update basic info (validation handled by express-validator)
-    user.name = req.body.name || user.name;
-    user.email = req.body.email || user.email;
-    user.phone = req.body.phone || user.phone;
-    
-    // Update address if provided
-    if (req.body.address) {
-      user.address = {
-        street: req.body.address.street || user.address?.street,
-        city: req.body.address.city || user.address?.city,
-        postalCode: req.body.address.postalCode || user.address?.postalCode,
-        country: req.body.address.country || user.address?.country || 'Sri Lanka',
-        // Keep location as is or update if provided
-        location: req.body.address.location || user.address?.location
-      };
-    }
-    
-    // Update preferences if customer
-    if (user.role === 'customer' && req.body.preferences) {
-      user.preferences = {
-        pickupNotes: req.body.preferences.pickupNotes || user.preferences?.pickupNotes
-      };
-    }
-    
-    // Update staff-specific fields if staff
-    if (user.role === 'staff') {
-      if (req.body.skills) {
-        user.skills = req.body.skills;
-      }
-      if (req.body.availability) {
-        user.availability = req.body.availability;
-      }
-    }
-    
-    // Update password if provided and different
-    if (req.body.password) {
-      // Optionally add a check: await user.matchPassword(req.body.oldPassword)
-      user.password = req.body.password; // Pre-save hook will hash
-    }
-    
-    const updatedUser = await user.save(); // Mongoose validation runs here
-    
-    // Don't send password back, even hashed
-    res.json({
-      _id: updatedUser._id,
-      name: updatedUser.name,
-      email: updatedUser.email,
-      phone: updatedUser.phone,
-      address: updatedUser.address,
-      role: updatedUser.role,
-      preferences: updatedUser.preferences,
-      ...(updatedUser.role === 'staff' && { 
-        skills: updatedUser.skills, 
-        availability: updatedUser.availability 
-      }),
-      mfaEnabled: updatedUser.mfaEnabled,
-      createdAt: updatedUser.createdAt
-    });
-  } catch (error) {
-    console.error('Error updating user profile:', error);
-    // Mongoose validation errors will be caught by global handler
-    next(error); // Pass NotFoundError or other errors
-  }
-};
-
-/**
- * @desc    Admin update user
- * @route   PUT /api/users/:id
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.adminUpdateUser = async (req, res, next) => {
-  try {
-    const user = await User.findById(req.params.id);
-    
-    if (!user) {
-      throw new NotFoundError(`User not found with id ${req.params.id}`);
-    }
-    
-    // Update all fields that can be modified by admin
-    user.name = req.body.name || user.name;
-    user.email = req.body.email || user.email;
-    user.phone = req.body.phone || user.phone;
-    user.role = req.body.role || user.role;
-    
-    // Update address if provided
-    if (req.body.address) {
-      user.address = {
-        street: req.body.address.street || user.address?.street,
-        city: req.body.address.city || user.address?.city,
-        postalCode: req.body.address.postalCode || user.address?.postalCode,
-        country: req.body.address.country || user.address?.country || 'Sri Lanka',
-        location: req.body.address.location || user.address?.location
-      };
-    }
-    
-    // Update preferences
-    if (req.body.preferences) {
-      user.preferences = {
-        pickupNotes: req.body.preferences.pickupNotes || user.preferences?.pickupNotes
-      };
-    }
-    
-    // Update staff-specific fields
-    if (req.body.skills) {
-      user.skills = req.body.skills;
-    }
-    
-    if (req.body.availability) {
-      user.availability = req.body.availability;
-    }
-    
-    // Admin can reset password if needed
-    if (req.body.password) {
-      // Ensure password meets minimum length if provided
-      if (req.body.password.length < 8) {
-        return next(new BadRequestError('Password must be at least 8 characters long'));
-      }
-      user.password = req.body.password; // Will be hashed by pre-save hook
-    }
-    
-    const updatedUser = await user.save();
-    
-    res.json({
-      _id: updatedUser._id,
-      name: updatedUser.name,
-      email: updatedUser.email,
-      phone: updatedUser.phone,
-      address: updatedUser.address,
-      role: updatedUser.role,
-      preferences: updatedUser.preferences,
-      skills: updatedUser.skills,
-      availability: updatedUser.availability,
-      mfaEnabled: updatedUser.mfaEnabled,
-      createdAt: updatedUser.createdAt
-    });
-  } catch (error) {
-    console.error(`Error updating user ${req.params.id}:`, error);
-    next(error);
-  }
-};
-
-/**
- * @desc    Admin create a new user
- * @route   POST /api/users
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.adminCreateUser = async (req, res, next) => {
-  // Validation handled by express-validator
-  const { name, email, password, role, phone, address, skills, availability, baseSalary, hourlyRate } = req.body;
-
-  try {
-    // Check if user exists
-    const userExists = await User.findOne({ email });
-    if (userExists) {
-      throw new BadRequestError('User already exists with this email');
-    }
-
-    // Prepare user data
-    const userData = {
-      name,
-      email,
-      password, // Will be hashed by pre-save hook
-      role: role || 'customer', // Default to customer if not provided
-      phone,
-      address,
-    };
-
-    // Add role-specific fields
-    if (userData.role === 'staff') {
-      userData.skills = skills || [];
-      userData.availability = availability || '';
-      userData.baseSalary = baseSalary;
-      userData.hourlyRate = hourlyRate;
-    } else if (userData.role === 'customer' && req.body.preferences) {
-       userData.preferences = {
-         pickupNotes: req.body.preferences.pickupNotes || ''
-       };
-    }
-    // Add other role-specific initializations if needed
-
-    // Create user
-    const user = await User.create(userData);
-
-    // Don't send password back
-    const userResponse = user.toObject();
-    delete userResponse.password;
-
-    res.status(201).json(userResponse);
-
-  } catch (error) {
-    console.error('Admin Create User error:', error);
-    next(error); // Pass BadRequestError or others
-  }
-};
-
-/**
- * @desc    Delete user account (self)
- * @route   DELETE /api/users/profile
- * @access  Private
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.deleteUserProfile = async (req, res, next) => {
-  try {
-    const user = await User.findById(req.user.id);
-    
-    if (!user) {
-      throw new NotFoundError('User not found');
-    }
-    
-    // Prevent staff/admin deletion via this route for safety?
-    if (['staff', 'admin', 'financial_manager'].includes(user.role)) {
-      throw new ForbiddenError('Admin/Staff/Manager accounts cannot be self-deleted via this endpoint. Contact another administrator.');
-    }
-    
-    // TODO: Add more cleanup logic if needed (e.g., cancel subscriptions, reassign tasks)
-    
-    // Delete user documents first
-    await Document.deleteMany({ user: req.user.id });
-    
-    // Now delete the user
-    await user.deleteOne(); // Use deleteOne() on the document
-    
-    res.json({ message: 'User account deleted successfully' });
-  } catch (error) {
-    console.error('Error deleting user profile:', error);
-    next(error); // Pass NotFoundError, ForbiddenError, or others
-  }
-};
-
-/**
- * @desc    Delete user by ID (Admin only)
- * @route   DELETE /api/users/:id
- * @access  Private/Admin
- * @param   {object} req - Express request object
- * @param   {object} res - Express response object
- * @param   {function} next - Express next middleware function
- */
-exports.deleteUser = async (req, res, next) => {
-  try {
-    const user = await User.findById(req.params.id);
-    
-    if (!user) {
-       throw new NotFoundError(`User not found with id ${req.params.id}`);
-    }
-
-    // Optional: Prevent deleting the last admin? Add more checks as needed.
-
-    // TODO: Add more cleanup logic if needed (e.g., delete related data)
-    await Document.deleteMany({ user: user._id });
-    // Add deletion for Attendance, Performance, Subscriptions etc. if required
-
-    await user.deleteOne(); // Use deleteOne() on the document
-    res.json({ message: 'User removed successfully' });
-
-  } catch (error) {
-    console.error(`Error deleting user ${req.params.id}:`, error);
-    next(error); // Pass NotFoundError or others
-  }
-};
\ No newline at end of file
diff --git a/backend/src/errors/ApiError.js b/backend/src/errors/ApiError.js
deleted file mode 100644
index f09add0..0000000
--- a/backend/src/errors/ApiError.js
+++ /dev/null
@@ -1,9 +0,0 @@
-// src/errors/ApiError.js
-class ApiError extends Error {
-  constructor(statusCode, message) {
-    super(message);
-    this.statusCode = statusCode;
-    Error.captureStackTrace(this, this.constructor);
-  }
-}
-module.exports = ApiError;
diff --git a/backend/src/errors/BadRequestError.js b/backend/src/errors/BadRequestError.js
deleted file mode 100644
index 956805e..0000000
--- a/backend/src/errors/BadRequestError.js
+++ /dev/null
@@ -1,9 +0,0 @@
-// src/errors/BadRequestError.js
-const ApiError = require('./ApiError');
-class BadRequestError extends ApiError {
-    constructor(message = 'Bad Request', errors = null) {
-        super(400, message);
-        this.errors = errors;
-    }
-}
-module.exports = BadRequestError;
diff --git a/backend/src/errors/ForbiddenError.js b/backend/src/errors/ForbiddenError.js
deleted file mode 100644
index ca9e345..0000000
--- a/backend/src/errors/ForbiddenError.js
+++ /dev/null
@@ -1,8 +0,0 @@
-// src/errors/ForbiddenError.js
-const ApiError = require('./ApiError');
-class ForbiddenError extends ApiError {
-    constructor(message = 'You do not have permission to perform this action') {
-        super(403, message);
-    }
-}
-module.exports = ForbiddenError;
diff --git a/backend/src/errors/NotFoundError.js b/backend/src/errors/NotFoundError.js
deleted file mode 100644
index 856fd66..0000000
--- a/backend/src/errors/NotFoundError.js
+++ /dev/null
@@ -1,8 +0,0 @@
-// src/errors/NotFoundError.js
-const ApiError = require('./ApiError');
-class NotFoundError extends ApiError {
-  constructor(message = 'Resource not found') {
-    super(404, message);
-  }
-}
-module.exports = NotFoundError;
diff --git a/backend/src/errors/UnauthorizedError.js b/backend/src/errors/UnauthorizedError.js
deleted file mode 100644
index 86db49d..0000000
--- a/backend/src/errors/UnauthorizedError.js
+++ /dev/null
@@ -1,8 +0,0 @@
-// src/errors/UnauthorizedError.js
-const ApiError = require('./ApiError');
-class UnauthorizedError extends ApiError {
-    constructor(message = 'Authentication required') {
-        super(401, message);
-    }
-}
-module.exports = UnauthorizedError;
diff --git a/backend/src/errors/index.js b/backend/src/errors/index.js
deleted file mode 100644
index 65c3e75..0000000
--- a/backend/src/errors/index.js
+++ /dev/null
@@ -1,6 +0,0 @@
-module.exports = {
-  UnauthorizedError: require('./UnauthorizedError'),
-  ForbiddenError: require('./ForbiddenError'),
-  BadRequestError: require('./BadRequestError'),
-  NotFoundError: require('./NotFoundError'),
-};
\ No newline at end of file
diff --git a/backend/src/middleware/authMiddleware.js b/backend/src/middleware/authMiddleware.js
deleted file mode 100644
index 89992f8..0000000
--- a/backend/src/middleware/authMiddleware.js
+++ /dev/null
@@ -1,62 +0,0 @@
-// backend/src/middleware/authMiddleware.js
-const jwt = require('jsonwebtoken');
-const User = require('../models/User');
-const { UnauthorizedError, ForbiddenError } = require('../errors'); // Import custom errors
-const config = require('../config'); // Import the centralized config
-
-// Protect routes
-exports.protect = async (req, res, next) => {
-  let token;
-
-  // Check for token in headers
-  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
-    try {
-      // Get token from header
-      token = req.headers.authorization.split(' ')[1];
-
-      // Verify token
-      const decoded = jwt.verify(token, config.jwtSecret); // Use config.jwtSecret
-
-      // Get user from the token
-      req.user = await User.findById(decoded.id).select('-password');
-
-      if (!req.user) {
-        // If user associated with token doesn't exist anymore
-        return next(new UnauthorizedError('User belonging to this token does no longer exist'));
-      }
-
-      next();
-    } catch (error) {
-      // Catch JWT errors specifically, let global handler manage response
-      // Use the specific error types for better handling in the global handler
-      if (error instanceof jwt.JsonWebTokenError || error instanceof jwt.TokenExpiredError) {
-          return next(error); // Pass JWT specific errors to the global handler
-      } else {
-          // Pass other unexpected errors
-          return next(new UnauthorizedError('Not authorized, token processing failed'));
-      }
-    }
-  }
-
-  if (!token) {
-    // Let global handler manage response
-    return next(new UnauthorizedError('Not authorized, no token'));
-  }
-};
-
-// Role authorization
-exports.authorize = (...roles) => {
-  return (req, res, next) => {
-    // Ensure protect middleware runs first, so req.user exists
-    if (!req.user) {
-        // This should ideally not happen if protect runs first, but as a safeguard
-        return next(new UnauthorizedError('Not authorized to access this resource'));
-    }
-    // Check if the user's role is included in the allowed roles
-    if (!roles.includes(req.user.role)) {
-      // Let global handler manage response
-      return next(new ForbiddenError(`Role ${req.user.role} is not authorized to access this resource`));
-    }
-    next();
-  };
-};
\ No newline at end of file
diff --git a/backend/src/middleware/validationErrorHandler.js b/backend/src/middleware/validationErrorHandler.js
deleted file mode 100644
index c634501..0000000
--- a/backend/src/middleware/validationErrorHandler.js
+++ /dev/null
@@ -1,16 +0,0 @@
-// backend/src/middleware/validationErrorHandler.js
-const { validationResult } = require('express-validator');
-const { BadRequestError } = require('../errors'); // Import custom error
-
-const handleValidationErrors = (req, res, next) => {
-  const errors = validationResult(req);
-  if (!errors.isEmpty()) {
-    // Extract specific error messages
-    const errorMessages = errors.array().map(err => err.msg);
-    // Throw a BadRequestError with the validation messages
-    throw new BadRequestError('Validation failed', errorMessages);
-  }
-  next();
-};
-
-module.exports = { handleValidationErrors };
diff --git a/backend/src/middleware/webhookMiddleware.js b/backend/src/middleware/webhookMiddleware.js
deleted file mode 100644
index f73a81d..0000000
--- a/backend/src/middleware/webhookMiddleware.js
+++ /dev/null
@@ -1,39 +0,0 @@
-/**
- * Webhook middleware to preserve raw request body for signature verification
- * Used specifically for payment gateway webhooks (e.g., Stripe)
- * Stripe requires the raw request body to verify webhook signatures
- */
-
-/**
- * Middleware that preserves the raw request body for webhook signature verification
- * @param {Object} req - Express request object
- * @param {Object} res - Express response object
- * @param {Function} next - Express next middleware function
- */
-const preserveRawBody = (req, res, next) => {
-  if (req.originalUrl.includes('/webhook') && req.method === 'POST') {
-    // Convert the raw request body to a string
-    req.rawBody = '';
-    req.setEncoding('utf8');
-
-    req.on('data', (chunk) => {
-      req.rawBody += chunk;
-    });
-
-    req.on('end', () => {
-      try {
-        // Parse the raw body into JSON for regular Express processing
-        // but keep the raw version for signature verification
-        req.body = JSON.parse(req.rawBody);
-        next();
-      } catch (err) {
-        next(err);
-      }
-    });
-  } else {
-    // For non-webhook routes, just continue to next middleware
-    next();
-  }
-};
-
-module.exports = { preserveRawBody };
\ No newline at end of file
diff --git a/backend/src/models/Attendance.js b/backend/src/models/Attendance.js
deleted file mode 100644
index 49d0b09..0000000
--- a/backend/src/models/Attendance.js
+++ /dev/null
@@ -1,52 +0,0 @@
-const mongoose = require('mongoose');
-
-const attendanceSchema = new mongoose.Schema({
-  staff: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  checkInTime: {
-    type: Date,
-    required: true
-  },
-  checkOutTime: {
-    type: Date
-  },
-  totalHours: {
-    type: Number,
-    default: 0
-  },
-  status: {
-    type: String,
-    enum: ['Present', 'Absent', 'Late', 'Half-day', 'On Leave'],
-    default: 'Present'
-  },
-  notes: {
-    type: String
-  },
-  date: {
-    type: Date,
-    default: Date.now
-  }
-});
-
-// Indexes
-attendanceSchema.index({ staff: 1 }); // Index for querying by staff
-attendanceSchema.index({ date: 1 }); // Index for querying by date
-attendanceSchema.index({ staff: 1, date: 1 }); // Compound index for common queries
-
-// Calculate total hours when checkout is recorded
-attendanceSchema.pre('save', function(next) {
-  if (this.checkInTime && this.checkOutTime) {
-    const checkInTime = new Date(this.checkInTime);
-    const checkOutTime = new Date(this.checkOutTime);
-    
-    // Calculate hours difference
-    const diff = (checkOutTime - checkInTime) / (1000 * 60 * 60);
-    this.totalHours = parseFloat(diff.toFixed(2));
-  }
-  next();
-});
-
-module.exports = mongoose.model('Attendance', attendanceSchema);
\ No newline at end of file
diff --git a/backend/src/models/Budget.js b/backend/src/models/Budget.js
deleted file mode 100644
index e9998b2..0000000
--- a/backend/src/models/Budget.js
+++ /dev/null
@@ -1,61 +0,0 @@
-// backend/src/models/Budget.js
-const mongoose = require('mongoose');
-
-const budgetSchema = new mongoose.Schema({
-  category: {
-    type: String,
-    required: [true, 'Budget category is required'],
-    enum: {
-      values: ['fuel', 'maintenance', 'salaries', 'utilities', 'equipment', 'office', 'rent', 'marketing', 'insurance', 'taxes', 'other'],
-      message: '{VALUE} is not a supported category'
-    },
-    trim: true
-  },
-  periodType: {
-    type: String,
-    required: [true, 'Budget period type is required'],
-    enum: ['Monthly', 'Quarterly', 'Yearly']
-  },
-  periodStartDate: {
-    type: Date,
-    required: [true, 'Budget period start date is required']
-  },
-  periodEndDate: {
-    type: Date,
-    required: [true, 'Budget period end date is required']
-  },
-  allocatedAmount: {
-    type: Number,
-    required: [true, 'Allocated budget amount is required'],
-    min: [0, 'Allocated amount cannot be negative']
-  },
-  notes: {
-    type: String,
-    trim: true
-  },
-  createdBy: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  }
-}, {
-  timestamps: true // Adds createdAt and updatedAt fields
-});
-
-// Indexes for efficient querying
-budgetSchema.index({ category: 1 });
-budgetSchema.index({ periodStartDate: 1, periodEndDate: 1 });
-budgetSchema.index({ category: 1, periodStartDate: 1, periodEndDate: 1 });
-
-// Validate that endDate is not before startDate
-budgetSchema.pre('save', function(next) {
-  if (this.periodEndDate < this.periodStartDate) {
-    next(new Error('Period end date cannot be before period start date'));
-  } else {
-    next();
-  }
-});
-
-const Budget = mongoose.model('Budget', budgetSchema);
-
-module.exports = Budget;
diff --git a/backend/src/models/Complaint.js b/backend/src/models/Complaint.js
deleted file mode 100644
index 7078208..0000000
--- a/backend/src/models/Complaint.js
+++ /dev/null
@@ -1,73 +0,0 @@
-const mongoose = require('mongoose');
-
-const complaintSchema = new mongoose.Schema({
-  user: { // User who submitted the complaint
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true,
-    index: true // Index for faster lookup of user's complaints
-  },
-  subject: {
-    type: String,
-    required: [true, 'Complaint subject is required'],
-    trim: true,
-    maxlength: [150, 'Subject cannot exceed 150 characters']
-  },
-  description: {
-    type: String,
-    required: [true, 'Complaint description is required'],
-    maxlength: [2000, 'Description cannot exceed 2000 characters']
-  },
-  status: { 
-    type: String,
-    enum: ['Open', 'In Progress', 'Resolved', 'Closed'],
-    default: 'Open',
-  },
-  // Reference to PickupRequest or other related entities if applicable
-  relatedRequestId: {
-    type: mongoose.Schema.Types.ObjectId,
-    required: false,
-    // ref: 'PickupRequest' // Uncomment if PickupRequest model exists
-  },
-  assignedAdmin: { // Admin/Staff handling the complaint
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: false, // Initially unassigned
-    index: true
-  },
-  resolutionNotes: {
-    type: String,
-    default: ''
-  },
-  createdAt: { type: Date, default: Date.now },
-  updatedAt: { type: Date, default: Date.now }
-});
-
-// Middleware to update `updatedAt` timestamp on save
-complaintSchema.pre('save', function(next) {
-  this.updatedAt = Date.now();
-  next();
-});
-
-// Optional: Add index for sorting by date
-complaintSchema.index({ createdAt: -1 });
-
-// Compound index for combined filtering (common in admin dashboard queries)
-complaintSchema.index({ status: 1, createdAt: -1 });
-
-// Compound index for user filtering with date sorting (common in user dashboard)
-complaintSchema.index({ user: 1, createdAt: -1 });
-
-// Compound index for admin assignment queries
-complaintSchema.index({ assignedAdmin: 1, status: 1 });
-
-// Text index for search functionality
-complaintSchema.index({ subject: 'text', description: 'text' }, { 
-  weights: {
-    subject: 3,   // Give more weight to matches in subject
-    description: 1
-  },
-  name: "complaint_text_index"
-});
-
-module.exports = mongoose.model('Complaint', complaintSchema);
\ No newline at end of file
diff --git a/backend/src/models/Document.js b/backend/src/models/Document.js
deleted file mode 100644
index f1ba02f..0000000
--- a/backend/src/models/Document.js
+++ /dev/null
@@ -1,54 +0,0 @@
-const mongoose = require('mongoose');
-
-const documentSchema = new mongoose.Schema({
-  user: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  name: {
-    type: String,
-    required: [true, 'Document name is required'],
-    trim: true
-  },
-  type: {
-    type: String,
-    required: [true, 'Document type is required'],
-    enum: ['ID Card', 'Utility Bill', 'Driver License', 'Passport', 'Other'],
-    default: 'Other'
-  },
-  filePath: {
-    type: String,
-    required: [true, 'File path is required']
-  },
-  mimeType: {
-    type: String,
-    required: [true, 'File type is required']
-  },
-  size: {
-    type: Number,
-    required: [true, 'File size is required']
-  },
-  uploadedAt: {
-    type: Date,
-    default: Date.now
-  },
-  verificationStatus: {
-    type: String,
-    enum: ['Pending', 'Verified', 'Rejected'],
-    default: 'Pending'
-  },
-  verificationDate: {
-    type: Date
-  },
-  verificationNotes: {
-    type: String
-  }
-});
-
-// Indexes
-documentSchema.index({ user: 1 }); // Index for querying by user
-documentSchema.index({ type: 1 }); // Index for querying by document type
-documentSchema.index({ verificationStatus: 1 }); // Index for querying by status
-
-module.exports = mongoose.model('Document', documentSchema);
\ No newline at end of file
diff --git a/backend/src/models/Expense.js b/backend/src/models/Expense.js
deleted file mode 100644
index da0567f..0000000
--- a/backend/src/models/Expense.js
+++ /dev/null
@@ -1,48 +0,0 @@
-const mongoose = require('mongoose');
-
-const expenseSchema = new mongoose.Schema({
-  category: {
-    type: String,
-    enum: ['fuel', 'maintenance', 'salaries', 'utilities', 'equipment', 'office', 'rent', 'marketing', 'insurance', 'taxes', 'other'],
-    required: true
-  },
-  amount: {
-    type: Number,
-    required: [true, 'Expense amount is required']
-  },
-  description: {
-    type: String,
-    required: [true, 'Description is required']
-  },
-  date: {
-    type: Date,
-    default: Date.now
-  },
-  createdBy: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  receipt: {
-    type: String, // URL to uploaded receipt image
-    default: null
-  },
-  status: {
-    type: String,
-    enum: ['pending', 'approved', 'rejected'],
-    default: 'approved'
-  },
-  paymentMethod: {
-    type: String,
-    enum: ['cash', 'credit_card', 'bank_transfer', 'company_account', 'other'],
-    default: 'company_account'
-  },
-  tags: [String]
-});
-
-// Add indexes for faster querying
-expenseSchema.index({ date: -1 });
-expenseSchema.index({ category: 1 });
-expenseSchema.index({ createdBy: 1 });
-
-module.exports = mongoose.model('Expense', expenseSchema);
\ No newline at end of file
diff --git a/backend/src/models/Log.js b/backend/src/models/Log.js
deleted file mode 100644
index b4fd392..0000000
--- a/backend/src/models/Log.js
+++ /dev/null
@@ -1,38 +0,0 @@
-const mongoose = require('mongoose');
-const mongoosePaginate = require('mongoose-paginate-v2'); // Import pagination plugin
-
-const logSchema = new mongoose.Schema({
-  timestamp: {
-    type: Date,
-    default: Date.now,
-    required: true,
-  },
-  level: {
-    type: String,
-    enum: ['info', 'warn', 'error', 'debug'],
-    required: true,
-  },
-  message: {
-    type: String,
-    required: true,
-  },
-  userId: { // Optional: Link log to a specific user
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-  },
-  ipAddress: { // Optional: Record IP address
-    type: String,
-  },
-  // Add other relevant fields as needed, e.g., request details, component name
-}, { timestamps: true }); // Use Mongoose timestamps for createdAt/updatedAt
-
-// Index for faster querying by timestamp and level
-logSchema.index({ timestamp: -1 });
-logSchema.index({ level: 1 });
-
-// Apply the pagination plugin to the schema
-logSchema.plugin(mongoosePaginate);
-
-const Log = mongoose.model('Log', logSchema);
-
-module.exports = Log;
diff --git a/backend/src/models/Payment.js b/backend/src/models/Payment.js
deleted file mode 100644
index b3b075e..0000000
--- a/backend/src/models/Payment.js
+++ /dev/null
@@ -1,65 +0,0 @@
-const mongoose = require('mongoose');
-const mongoosePaginate = require('mongoose-paginate-v2');
-const aggregatePaginate = require('mongoose-aggregate-paginate-v2');
-
-const paymentSchema = new mongoose.Schema({
-  user: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  amount: {
-    type: Number,
-    required: [true, 'Payment amount is required'],
-  },
-  description: {
-    type: String,
-    required: [true, 'Description is required']
-  },
-  paymentDate: {
-    type: Date,
-    default: Date.now
-  },
-  status: {
-    type: String,
-    enum: ['pending', 'completed', 'failed', 'refunded', 'requires_action'],
-    default: 'completed'
-  },
-  paymentMethod: {
-    type: String,
-    enum: ['credit_card', 'debit_card', 'bank_transfer', 'cash', 'paypal', 'other'],
-    default: 'credit_card'
-  },
-  userSubscription: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'UserSubscription',
-    required: false // Allow payments not tied to a subscription
-  },
-  currency: {
-    type: String,
-    required: [true, 'Currency is required'],
-    default: 'USD' // Default currency
-  },
-  invoiceNumber: {
-    type: String,
-    unique: true,
-    default: () => 'INV-' + Math.floor(100000 + Math.random() * 900000)
-  },
-  transactionId: String,
-  gatewayResponse: {
-    type: mongoose.Schema.Types.Mixed, // Stores flexible JSON
-    select: false // Don't return by default in queries
-  }
-});
-
-// Add indexes for faster querying
-paymentSchema.index({ paymentDate: -1 });
-// paymentSchema.index({ status: 1 }); // Commented out to address duplicate index warning
-paymentSchema.index({ user: 1 });
-paymentSchema.index({ userSubscription: 1 }); // Index for filtering by user subscription
-
-// Add pagination plugins
-paymentSchema.plugin(mongoosePaginate);
-paymentSchema.plugin(aggregatePaginate); // Add the aggregate pagination plugin
-
-module.exports = mongoose.model('Payment', paymentSchema);
\ No newline at end of file
diff --git a/backend/src/models/PayrollLog.js b/backend/src/models/PayrollLog.js
deleted file mode 100644
index 3716e95..0000000
--- a/backend/src/models/PayrollLog.js
+++ /dev/null
@@ -1,73 +0,0 @@
-const mongoose = require('mongoose');
-
-const payrollLogSchema = new mongoose.Schema({
-  staff: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true,
-    index: true
-  },
-  payPeriodStart: {
-    type: Date,
-    required: true
-  },
-  payPeriodEnd: {
-    type: Date,
-    required: true
-  },
-  baseSalary: { // Salary for the period (e.g., monthly salary if period is month)
-    type: Number,
-    required: true,
-    min: 0
-  },
-  hoursWorked: { // Fetched/calculated from Attendance
-    type: Number,
-    default: 0
-  },
-  overtimeHours: {
-     type: Number,
-     default: 0
-  },
-  overtimeRate: { // Hourly rate for overtime
-     type: Number,
-     default: 0
-  },
-  bonusAmount: { // Calculated based on performance/attendance
-    type: Number,
-    default: 0
-  },
-  deductions: [{ // Array for itemized deductions
-     name: { type: String, required: true }, // e.g., 'Income Tax', 'EPF', 'Loan'
-     amount: { type: Number, required: true, min: 0 }
-  }],
-  netPay: { // Calculated: base + (ot_hours * ot_rate) + bonus - total_deductions
-    type: Number,
-    required: true,
-    min: 0
-  },
-  paymentDate: { // Actual date payment was made
-    type: Date
-  },
-  generatedDate: { // When the payroll record was calculated/created
-    type: Date,
-    default: Date.now
-  },
-  status: {
-    type: String,
-    enum: ['Pending Calculation', 'Pending Payment', 'Paid', 'Error'],
-    default: 'Pending Calculation',
-    index: true
-  },
-  calculationNotes: { // E.g., 'Bonus based on X criteria', 'Deduction for Y'
-    type: String
-  },
-  transactionRef: { // Optional link to a Payment record if integrated
-     type: String
-  }
-});
-
-// Compound index for efficient querying of staff payroll history
-payrollLogSchema.index({ staff: 1, payPeriodEnd: -1 });
-payrollLogSchema.index({ status: 1 });
-
-module.exports = mongoose.model('PayrollLog', payrollLogSchema);
\ No newline at end of file
diff --git a/backend/src/models/Performance.js b/backend/src/models/Performance.js
deleted file mode 100644
index e56b0c9..0000000
--- a/backend/src/models/Performance.js
+++ /dev/null
@@ -1,92 +0,0 @@
-const mongoose = require('mongoose');
-
-const performanceSchema = new mongoose.Schema({
-  staff: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  reviewPeriod: {
-    startDate: {
-      type: Date,
-      required: true
-    },
-    endDate: {
-      type: Date,
-      required: true
-    }
-  },
-  metrics: {
-    productivity: {
-      type: Number,
-      min: 0,
-      max: 10,
-      default: 0
-    },
-    quality: {
-      type: Number,
-      min: 0,
-      max: 10,
-      default: 0
-    },
-    reliability: {
-      type: Number,
-      min: 0,
-      max: 10,
-      default: 0
-    },
-    communication: {
-      type: Number,
-      min: 0,
-      max: 10,
-      default: 0
-    },
-    initiative: {
-      type: Number,
-      min: 0,
-      max: 10,
-      default: 0
-    }
-  },
-  overallRating: {
-    type: Number,
-    min: 0,
-    max: 10,
-    default: 0
-  },
-  feedback: {
-    type: String
-  },
-  goals: [String],
-  reviewer: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  createdAt: {
-    type: Date,
-    default: Date.now
-  },
-  updatedAt: {
-    type: Date,
-    default: Date.now
-  }
-});
-
-// Indexes
-performanceSchema.index({ staff: 1 }); // Index for querying by staff
-performanceSchema.index({ reviewer: 1 }); // Index for querying by reviewer
-performanceSchema.index({ 'reviewPeriod.endDate': -1 }); // Index for sorting/querying by review end date
-
-// Calculate overall rating from individual metrics
-performanceSchema.pre('save', function(next) {
-  const metrics = this.metrics;
-  const totalScore = metrics.productivity + metrics.quality + 
-    metrics.reliability + metrics.communication + metrics.initiative;
-  
-  this.overallRating = parseFloat((totalScore / 5).toFixed(1));
-  this.updatedAt = Date.now();
-  next();
-});
-
-module.exports = mongoose.model('Performance', performanceSchema);
\ No newline at end of file
diff --git a/backend/src/models/Settings.js b/backend/src/models/Settings.js
deleted file mode 100644
index 0601433..0000000
--- a/backend/src/models/Settings.js
+++ /dev/null
@@ -1,47 +0,0 @@
-const mongoose = require('mongoose');
-
-const settingsSchema = new mongoose.Schema({
-    // Add a unique key to enforce singleton
-    uniqueKey: { type: String, default: 'global_settings', unique: true },
-    appName: {
-        type: String,
-        default: 'SmartBin',
-        trim: true,
-    },
-    defaultTimezone: {
-        type: String,
-        default: 'Asia/Colombo', // Example timezone
-        // Consider adding validation for valid TZ names if needed
-    },
-    defaultCurrency: {
-        type: String,
-        default: 'LKR', // Example currency code
-        uppercase: true,
-        match: /^[A-Z]{3}$/, // Basic ISO 4217 format validation
-    },
-    defaultNewUserRole: {
-        type: String,
-        enum: ['customer', 'staff'],
-        default: 'customer',
-    },
-    passwordMinLength: {
-        type: Number,
-        default: 8,
-        min: 6,
-    },
-    sessionTimeoutMinutes: {
-        type: Number,
-        default: 60, // 1 hour
-        min: 5, // Minimum 5 minutes
-    },
-    maintenanceMode: {
-        type: Boolean,
-        default: false,
-    },
-    lastUpdatedBy: {
-        type: mongoose.Schema.Types.ObjectId,
-        ref: 'User',
-    }
-}, { timestamps: true }); // Add createdAt/updatedAt automatically
-
-module.exports = mongoose.model('Settings', settingsSchema);
\ No newline at end of file
diff --git a/backend/src/models/SubscriptionPlan.js b/backend/src/models/SubscriptionPlan.js
deleted file mode 100644
index 70148f8..0000000
--- a/backend/src/models/SubscriptionPlan.js
+++ /dev/null
@@ -1,47 +0,0 @@
-const mongoose = require('mongoose');
-
-const subscriptionPlanSchema = new mongoose.Schema({
-  name: {
-    type: String,
-    required: [true, 'Plan name is required'],
-    trim: true,
-    unique: true
-  },
-  price: {
-    type: Number, // Changed from String to Number
-    required: [true, 'Price is required'],
-    min: [0, 'Price cannot be negative'] // Added validation for non-negative price
-  },
-  subscriberCount: {
-    type: Number,
-    default: 0
-  },
-  description: {
-    type: String,
-    default: 'This subscription plan includes basic waste collection services, weekly pickup, and access to the SmartBin mobile app.'
-  },
-  features: {
-    type: [String], // Array of strings describing features
-    default: []
-  },
-  duration: {
-    type: String,
-    enum: ['Monthly', 'Quarterly', 'Semi-Annual', 'Annual'],
-    default: 'Monthly'
-  },
-  status: {
-    type: String,
-    enum: ['active', 'inactive'],
-    default: 'active'
-  },
-  createdAt: {
-    type: Date,
-    default: Date.now
-  }
-});
-
-// Indexes
-subscriptionPlanSchema.index({ price: 1 }); // Index for sorting/querying by price
-subscriptionPlanSchema.index({ name: 1, status: 1 }); // Index for finding active plans by name
-
-module.exports = mongoose.model('SubscriptionPlan', subscriptionPlanSchema);
\ No newline at end of file
diff --git a/backend/src/models/User.js b/backend/src/models/User.js
deleted file mode 100644
index 0cd0ae8..0000000
--- a/backend/src/models/User.js
+++ /dev/null
@@ -1,95 +0,0 @@
-const mongoose = require('mongoose');
-const bcrypt = require('bcryptjs');
-
-const userSchema = new mongoose.Schema({
-  name: {
-    type: String,
-    required: [true, 'Please Enter Your Name'],
-    trim: true,
-  },
-  email: {
-    type: String,
-    required: [true, 'Please Enter Your Email'],
-    unique: true,
-    match: [/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/, 'Please enter a valid email']
-  },
-  phone: {
-    type: String,
-    trim: true,
-    match: [/^\+?[1-9]\d{1,14}$/, 'Please fill a valid phone number']
-  },
-  address: {
-    street: { type: String, trim: true },
-    city: { type: String, trim: true },
-    postalCode: { type: String, trim: true },
-    country: { type: String, trim: true, default: 'Sri Lanka' },
-    // Placeholder for future Geolocation integration
-    location: {
-      type: { type: String, enum: ['Point'], required: false },
-      coordinates: { type: [Number], required: false } // [longitude, latitude]
-    }
-  },
-  preferences: {
-    pickupNotes: { type: String, trim: true, maxlength: 500 }
-    // Add other preference fields as needed later
-  },
-  skills: [{ type: String, trim: true }], // Array of skill names for staff
-  availability: {
-    type: String, // Could be 'Mon-Fri 9-5', 'Weekends Only', etc.
-    trim: true
-  },
-  // Salary and compensation fields for payroll
-  baseSalary: { 
-    type: Number, 
-    min: 0,
-    default: 30000 // Default placeholder salary
-  },
-  hourlyRate: { 
-    type: Number, 
-    min: 0,
-    default: function() {
-      // Default hourly rate calculation if not specified
-      return this.baseSalary ? this.baseSalary / (4 * 40) : 0;
-    }
-  },
-  password: {
-    type: String,
-    required: [true, 'Please Enter Your Password'],
-    minlength: 8,
-    select: false
-  },
-  role: {
-    type: String,
-    enum: ['admin', 'staff', 'customer', 'financial_manager'], // Updated to include financial_manager
-    default: 'customer',
-  },
-  mfaEnabled: { type: Boolean, default: false },
-  mfaSecret: { type: String, select: false }, // Don't return secret by default
-  mfaRecoveryCodes: { type: [String], select: false }, // Store hashed recovery codes
-  createdAt: {
-    type: Date,
-    default: Date.now
-  }
-});
-
-// Indexes
-userSchema.index({ role: 1 }); // Add index for role if queried often
-userSchema.index({ 'address.city': 1 }); // Index for city searches
-userSchema.index({ skills: 1 }); // Index for staff skills searches
-
-//Encrypting Password Before Saving
-userSchema.pre('save', async function(next){
-  if(!this.isModified('password')){
-    next();
-  }
-
-  const salt = await bcrypt.genSalt(10);
-  this.password = await bcrypt.hash(this.password, salt);
-});
-
-// Match user entered password to hashed password in database
-userSchema.methods.matchPassword = async function(enteredPassword) {
-  return await bcrypt.compare(enteredPassword, this.password);
-};
-
-module.exports = mongoose.model('User', userSchema);
\ No newline at end of file
diff --git a/backend/src/models/UserSubscription.js b/backend/src/models/UserSubscription.js
deleted file mode 100644
index a1cdda1..0000000
--- a/backend/src/models/UserSubscription.js
+++ /dev/null
@@ -1,47 +0,0 @@
-const mongoose = require('mongoose');
-
-const userSubscriptionSchema = new mongoose.Schema({
-  user: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  subscriptionPlan: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'SubscriptionPlan',
-    required: true
-  },
-  startDate: {
-    type: Date,
-    default: Date.now
-  },
-  endDate: {
-    type: Date,
-    required: true
-  },
-  status: {
-    type: String,
-    enum: ['active', 'expired', 'cancelled', 'pending'],
-    default: 'active'
-  },
-  autoRenew: {
-    type: Boolean,
-    default: true
-  },
-  lastBillingDate: {
-    type: Date,
-    default: Date.now
-  },
-  nextBillingDate: {
-    type: Date,
-    required: true
-  }
-});
-
-// Add indexes for faster querying
-userSubscriptionSchema.index({ user: 1 });
-userSubscriptionSchema.index({ status: 1 });
-userSubscriptionSchema.index({ nextBillingDate: 1 });
-userSubscriptionSchema.index({ subscriptionPlan: 1 }); // Index for filtering by subscription plan
-
-module.exports = mongoose.model('UserSubscription', userSubscriptionSchema);
\ No newline at end of file
diff --git a/backend/src/routes/adminRoutes.js b/backend/src/routes/adminRoutes.js
deleted file mode 100644
index 9e23223..0000000
--- a/backend/src/routes/adminRoutes.js
+++ /dev/null
@@ -1,12 +0,0 @@
-const express = require('express');
-const authMiddleware = require('../middleware/authMiddleware');
-
-const router = express.Router();
-
-// Protect all routes below with authentication and admin role check
-router.use(authMiddleware.protect);
-router.use(authMiddleware.authorize('admin'));
-
-// Add other admin-specific routes here (e.g., user management, settings)
-
-module.exports = router;
diff --git a/backend/src/routes/attendanceRoutes.js b/backend/src/routes/attendanceRoutes.js
deleted file mode 100644
index a3e9ef6..0000000
--- a/backend/src/routes/attendanceRoutes.js
+++ /dev/null
@@ -1,47 +0,0 @@
-const express = require('express');
-const router = express.Router();
-const { 
-  checkIn, 
-  checkOut, 
-  getMyAttendance, 
-  getAllAttendance, 
-  updateAttendance,
-  getAttendanceSummary,
-  exportAttendanceReport,
-  getDetailedAttendanceReport
-} = require('../controllers/attendanceController');
-const { protect, authorize } = require('../middleware/authMiddleware');
-const { body } = require('express-validator'); // Import body
-const { handleValidationErrors } = require('../middleware/validationErrorHandler'); // Import shared handler
-
-// Validation for updating attendance
-const updateAttendanceValidation = [
-  body('checkInTime').optional().isISO8601().toDate().withMessage('Invalid check-in time format'),
-  body('checkOutTime').optional().isISO8601().toDate().withMessage('Invalid check-out time format'),
-  body('status').optional().isIn(['Present', 'Absent', 'Late', 'On Leave']).withMessage('Invalid status'),
-  body('notes').optional().trim().escape(),
-];
-
-// All routes are protected
-router.use(protect);
-
-// Staff routes
-router.post('/check-in', checkIn);
-router.put('/check-out', checkOut);
-router.get('/', getMyAttendance);
-
-// Admin routes
-router.get('/all', authorize('admin'), getAllAttendance);
-router.put('/:id', 
-  authorize('admin'), 
-  updateAttendanceValidation, 
-  handleValidationErrors, // Use shared handler
-  updateAttendance
-);
-router.get('/summary', authorize('admin'), getAttendanceSummary);
-
-// Report routes - only for admin
-router.get('/reports/export', authorize('admin'), exportAttendanceReport);
-router.get('/reports/detailed', authorize('admin'), getDetailedAttendanceReport);
-
-module.exports = router;
\ No newline at end of file
diff --git a/backend/src/routes/authRoutes.js b/backend/src/routes/authRoutes.js
deleted file mode 100644
index a5fcc61..0000000
--- a/backend/src/routes/authRoutes.js
+++ /dev/null
@@ -1,28 +0,0 @@
-const express = require('express');
-const router = express.Router();
-const { registerUser, loginUser, getMe } = require('../controllers/authController');
-const { protect } = require('../middleware/authMiddleware');
-const { body } = require('express-validator'); // Import only body
-const { handleValidationErrors } = require('../middleware/validationErrorHandler'); // Import the new handler
-
-// Validation middleware for registration
-const registerValidation = [
-  body('name', 'Name is required').notEmpty().trim().escape(), // Added trim() and escape()
-  body('email', 'Please include a valid email').isEmail().normalizeEmail(),
-  body('password', 'Password must be at least 8 characters long').isLength({ min: 8 }),
-  // Add validation for other fields if needed (e.g., role, phone)
-  body('role').optional().isIn(['customer', 'staff', 'admin', 'financial_manager']).withMessage('Invalid role specified'), // Assuming 'customer' is the new standard role
-  body('phone').optional().isMobilePhone('any').withMessage('Invalid phone number format'),
-];
-
-// Validation middleware for login
-const loginValidation = [
-  body('email', 'Please include a valid email').isEmail().normalizeEmail(),
-  body('password', 'Password is required').exists(),
-];
-
-router.post('/register', registerValidation, handleValidationErrors, registerUser); // Use imported handler
-router.post('/login', loginValidation, handleValidationErrors, loginUser); // Use imported handler
-router.get('/me', protect, getMe);
-
-module.exports = router;
\ No newline at end of file
diff --git a/backend/src/routes/budgetRoutes.js b/backend/src/routes/budgetRoutes.js
deleted file mode 100644
index d674c72..0000000
--- a/backend/src/routes/budgetRoutes.js
+++ /dev/null
@@ -1,106 +0,0 @@
-// backend/src/routes/budgetRoutes.js
-const express = require('express');
-const { body } = require('express-validator');
-const budgetController = require('../controllers/budgetController');
-const { protect, authorize } = require('../middleware/authMiddleware');
-const { handleValidationErrors } = require('../middleware/validationErrorHandler');
-
-const router = express.Router();
-
-// --- Budget Routes --- //
-
-// POST /api/budgets - Create a new budget
-router.post('/',
-    protect,
-    authorize('admin', 'financial_manager'),
-    [
-        body('category')
-            .notEmpty().withMessage('Category is required')
-            .isIn(['fuel', 'maintenance', 'salaries', 'utilities', 'equipment', 'office', 'rent', 'marketing', 'insurance', 'taxes', 'other'])
-            .withMessage('Invalid budget category'),
-        body('periodType')
-            .notEmpty().withMessage('Period type is required')
-            .isIn(['Monthly', 'Quarterly', 'Yearly'])
-            .withMessage('Invalid period type'),
-        body('periodStartDate')
-            .isISO8601().withMessage('Invalid start date format')
-            .toDate(),
-        body('periodEndDate')
-            .isISO8601().withMessage('Invalid end date format')
-            .toDate()
-            .custom((value, { req }) => {
-                if (value < req.body.periodStartDate) {
-                    throw new Error('End date cannot be before start date');
-                }
-                return true;
-            }),
-        body('allocatedAmount')
-            .isFloat({ min: 0 }).withMessage('Allocated amount must be a non-negative number'),
-        body('notes').optional().isString().trim()
-    ],
-    handleValidationErrors,
-    budgetController.createBudget
-);
-
-// GET /api/budgets - Get all budgets (with filtering)
-router.get('/',
-    protect,
-    authorize('admin', 'financial_manager'),
-    budgetController.getBudgets
-);
-
-// GET /api/budgets/summary - Get budget summary (allocated vs. actual)
-router.get('/summary',
-    protect,
-    authorize('admin', 'financial_manager'),
-    budgetController.getBudgetSummary
-);
-
-// GET /api/budgets/:id - Get a specific budget by ID
-router.get('/:id',
-    protect,
-    authorize('admin', 'financial_manager'),
-    budgetController.getBudgetById
-);
-
-// PUT /api/budgets/:id - Update a budget
-router.put('/:id',
-    protect,
-    authorize('admin', 'financial_manager'),
-    [
-        body('category')
-            .notEmpty().withMessage('Category is required')
-            .isIn(['fuel', 'maintenance', 'salaries', 'utilities', 'equipment', 'office', 'rent', 'marketing', 'insurance', 'taxes', 'other'])
-            .withMessage('Invalid budget category'),
-        body('periodType')
-            .notEmpty().withMessage('Period type is required')
-            .isIn(['Monthly', 'Quarterly', 'Yearly'])
-            .withMessage('Invalid period type'),
-        body('periodStartDate')
-            .isISO8601().withMessage('Invalid start date format')
-            .toDate(),
-        body('periodEndDate')
-            .isISO8601().withMessage('Invalid end date format')
-            .toDate()
-            .custom((value, { req }) => {
-                if (value < req.body.periodStartDate) {
-                    throw new Error('End date cannot be before start date');
-                }
-                return true;
-            }),
-        body('allocatedAmount')
-            .isFloat({ min: 0 }).withMessage('Allocated amount must be a non-negative number'),
-        body('notes').optional().isString().trim()
-    ],
-    handleValidationErrors,
-    budgetController.updateBudget
-);
-
-// DELETE /api/budgets/:id - Delete a budget
-router.delete('/:id',
-    protect,
-    authorize('admin', 'financial_manager'),
-    budgetController.deleteBudget
-);
-
-module.exports = router;
diff --git a/backend/src/routes/complaintRoutes.js b/backend/src/routes/complaintRoutes.js
deleted file mode 100644
index a14d8ff..0000000
--- a/backend/src/routes/complaintRoutes.js
+++ /dev/null
@@ -1,46 +0,0 @@
-const express = require('express');
-const {
-    submitComplaint,
-    getMyComplaints,
-    getAllComplaints,
-    getComplaintById,
-    updateComplaintStatus,
-    assignComplaint,
-    addResolutionNotes
-} = require('../controllers/complaintController');
-const { protect, authorize } = require('../middleware/authMiddleware');
-const { body } = require('express-validator');
-const { handleValidationErrors } = require('../middleware/validationErrorHandler');
-
-const router = express.Router();
-
-// All complaint routes require login
-router.use(protect);
-
-// Submit a complaint (Customer, Staff)
-router.post('/', [
-    body('subject').notEmpty().withMessage('Subject is required').trim().escape(),
-    body('description').notEmpty().withMessage('Description is required').trim().escape(),
-    body('relatedRequestId').optional().isMongoId().withMessage('Invalid related Request ID format')
-], handleValidationErrors, submitComplaint);
-
-// Get user's own complaints
-router.get('/my-complaints', getMyComplaints);
-
-// Get specific complaint (Owner or Admin)
-router.get('/:id', getComplaintById);
-
-// --- Admin Only Routes ---
-router.get('/', authorize('admin'), getAllComplaints); // Get all complaints
-router.patch('/:id/status', authorize('admin'), [
-    body('status').isIn(['Open', 'In Progress', 'Resolved', 'Closed']).withMessage('Invalid status value')
-], handleValidationErrors, updateComplaintStatus);
-router.patch('/:id/assign', authorize('admin'), [
-    body('adminId').isMongoId().withMessage('Valid Admin ID is required')
-], handleValidationErrors, assignComplaint);
-router.patch('/:id/resolve', authorize('admin'), [
-    body('resolutionNotes').notEmpty().withMessage('Resolution notes are required').trim().escape()
-], handleValidationErrors, addResolutionNotes);
-
-
-module.exports = router;
\ No newline at end of file
diff --git a/backend/src/routes/dashboardRoutes.js b/backend/src/routes/dashboardRoutes.js
deleted file mode 100644
index 3b41809..0000000
--- a/backend/src/routes/dashboardRoutes.js
+++ /dev/null
@@ -1,19 +0,0 @@
-// backend/src/routes/dashboardRoutes.js
-const express = require('express');
-const router = express.Router();
-const { protect, authorize } = require('../middleware/authMiddleware');
-const dashboardController = require('../controllers/dashboardController');
-
-/**
- * @route GET /api/dashboard/financial-manager-main
- * @desc Get main dashboard data for financial manager
- * @access Private (financial_manager, admin)
- */
-router.get(
-  '/financial-manager-main',
-  protect,
-  authorize('financial_manager', 'admin'),
-  dashboardController.getFinancialManagerMainDashboardData
-);
-
-module.exports = router;
\ No newline at end of file
diff --git a/backend/src/routes/documentRoutes.js b/backend/src/routes/documentRoutes.js
deleted file mode 100644
index 6c630c4..0000000
--- a/backend/src/routes/documentRoutes.js
+++ /dev/null
@@ -1,78 +0,0 @@
-const express = require('express');
-const router = express.Router();
-const { 
-  uploadDocument, 
-  getUserDocuments, 
-  getDocumentById, 
-  deleteDocument, 
-  verifyDocument 
-} = require('../controllers/documentController');
-const { protect, authorize } = require('../middleware/authMiddleware');
-const multer = require('multer');
-const path = require('path');
-const { param, body } = require('express-validator');
-const { handleValidationErrors } = require('../middleware/validationErrorHandler');
-
-// Configure multer for file uploads
-const storage = multer.diskStorage({
-  destination: function(req, file, cb) {
-    cb(null, 'uploads/documents/');
-  },
-  filename: function(req, file, cb) {
-    cb(null, `${req.user.id}-${Date.now()}${path.extname(file.originalname)}`);
-  }
-});
-
-// Check file type
-const fileFilter = (req, file, cb) => {
-  const allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'];
-  
-  if (allowedTypes.includes(file.mimetype)) {
-    cb(null, true);
-  } else {
-    cb(new Error('Invalid file type. Only JPEG, PNG and PDF allowed'), false);
-  }
-};
-
-const upload = multer({ 
-  storage,
-  fileFilter,
-  limits: { fileSize: 5 * 1024 * 1024 } // 5MB max size
-});
-
-// Validation for document ID parameter
-const documentIdValidation = [
-  param('id').isMongoId().withMessage('Invalid document ID format')
-];
-
-// Validation for document verification
-const verifyDocumentValidation = [
-  body('verified').isBoolean().withMessage('Verified status must be a boolean'),
-  body('verificationNotes').optional().isString().trim().escape()
-];
-
-// All routes are protected with authentication
-router.use(protect);
-
-// Routes for documents
-router.route('/')
-  .get(getUserDocuments);
-
-router.route('/upload')
-  .post(upload.single('document'), uploadDocument);
-
-router.route('/:id')
-  .get(documentIdValidation, handleValidationErrors, getDocumentById)
-  .delete(documentIdValidation, handleValidationErrors, deleteDocument);
-
-// Admin only routes
-router.route('/:id/verify')
-  .put(
-    authorize('admin'), 
-    documentIdValidation,
-    verifyDocumentValidation,
-    handleValidationErrors,
-    verifyDocument
-  );
-
-module.exports = router;
\ No newline at end of file
diff --git a/backend/src/routes/financialRoutes.js b/backend/src/routes/financialRoutes.js
deleted file mode 100644
index 4d969ff..0000000
--- a/backend/src/routes/financialRoutes.js
+++ /dev/null
@@ -1,180 +0,0 @@
-const express = require('express');
-const financialController = require('../controllers/financialController');
-// Import protect and authorize from authMiddleware
-const { protect, authorize } = require('../middleware/authMiddleware'); 
-const { body } = require('express-validator');
-const { handleValidationErrors } = require('../middleware/validationErrorHandler');
-
-const router = express.Router();
-
-// Dashboard and reporting routes
-// ------------------------------
-
-// GET /api/financials/dashboard - Protected for Financial Manager and Admin
-router.get(
-    '/dashboard',
-    protect,
-    authorize('financial_manager', 'admin'),
-    financialController.getDashboardData
-);
-
-// Report routes
-// ------------
-
-// Export financial report as PDF
-router.get(
-    '/reports/export',
-    protect,
-    authorize('financial_manager', 'admin'),
-    financialController.exportReport
-);
-
-// Get profit and loss report
-router.get(
-    '/reports/profit-loss',
-    protect,
-    authorize('financial_manager', 'admin'),
-    financialController.getProfitLossReport
-);
-
-// Get revenue by customer report
-router.get(
-    '/reports/revenue-by-customer',
-    protect,
-    authorize('financial_manager', 'admin'),
-    financialController.getRevenueByCustomerReport
-);
-
-// Get expense details report
-router.get(
-    '/reports/expense-details',
-    protect,
-    authorize('financial_manager', 'admin'),
-    financialController.getExpenseDetailsReport
-);
-
-// Payment routes
-// --------------
-
-// GET all payments with filtering and pagination
-router.get(
-    '/payments',
-    protect,
-    authorize('financial_manager', 'admin'),
-    financialController.getAllPayments
-);
-
-// GET single payment by ID
-router.get(
-    '/payments/:id',
-    protect,
-    authorize('financial_manager', 'admin'),
-    financialController.getPaymentById
-);
-
-// Create manual payment
-const createPaymentValidation = [
-    body('userId').isMongoId().withMessage('Valid user ID is required'),
-    body('amount').isFloat({ min: 0.01 }).withMessage('Amount must be a positive number'),
-    body('method').isIn(['cash', 'credit_card', 'bank_transfer', 'paypal', 'other']).withMessage('Invalid payment method'),
-    body('status').optional().isIn(['pending', 'completed', 'failed']).withMessage('Invalid status'),
-    body('userSubscriptionId').optional().isMongoId().withMessage('Valid subscription ID is required')
-];
-
-router.post(
-    '/payments',
-    protect,
-    authorize('financial_manager', 'admin'),
-    createPaymentValidation,
-    handleValidationErrors,
-    financialController.recordManualPayment
-);
-
-// Initiate payment via payment gateway (e.g. Stripe)
-const initiatePaymentValidation = [
-    body('userId').isMongoId().withMessage('Valid user ID is required'),
-    body('planId').isMongoId().withMessage('Valid plan ID is required'),
-    body('amount').isFloat({ min: 0.01 }).withMessage('Amount must be a positive number'),
-    body('currency').optional().isLength({ min: 3, max: 3 }).withMessage('Currency must be a 3-letter code')
-];
-
-router.post(
-    '/payments/initiate',
-    protect,
-    initiatePaymentValidation,
-    handleValidationErrors,
-    financialController.initiatePayment
-);
-
-// Payment gateway webhook endpoint (public - secured by signature verification)
-router.post(
-    '/payments/webhook',
-    express.raw({ type: 'application/json' }), // Raw body for signature verification
-    financialController.handlePaymentWebhook
-);
-
-// Update payment status
-router.patch(
-    '/payments/:id/status',
-    protect,
-    authorize('financial_manager', 'admin'),
-    body('status').isIn(['pending', 'completed', 'failed', 'refunded', 'requires_action']).withMessage('Invalid status'),
-    handleValidationErrors,
-    financialController.updatePaymentStatus
-);
-
-// Expense routes
-// --------------
-
-// GET all expenses with filtering and pagination
-router.get(
-    '/expenses',
-    protect,
-    authorize('financial_manager', 'admin'),
-    financialController.getAllExpenses
-);
-
-// GET single expense by ID
-router.get(
-    '/expenses/:id',
-    protect,
-    authorize('financial_manager', 'admin'),
-    financialController.getExpenseById
-);
-
-// Create expense
-const createExpenseValidation = [
-    body('description').notEmpty().withMessage('Description is required'),
-    body('amount').isFloat({ min: 0.01 }).withMessage('Amount must be a positive number'),
-    body('category').notEmpty().withMessage('Category is required'),
-    body('date').optional().isISO8601().withMessage('Invalid date format')
-];
-
-router.post(
-    '/expenses',
-    protect,
-    authorize('financial_manager', 'admin'),
-    createExpenseValidation,
-    handleValidationErrors,
-    financialController.recordExpense
-);
-
-// Update expense
-router.put(
-    '/expenses/:id',
-    protect,
-    authorize('financial_manager', 'admin'),
-    createExpenseValidation,
-    handleValidationErrors,
-    financialController.updateExpense
-);
-
-// Delete expense
-router.delete(
-    '/expenses/:id',
-    protect,
-    authorize('financial_manager', 'admin'),
-    financialController.deleteExpense
-);
-
-module.exports = router;
diff --git a/backend/src/routes/mfaRoutes.js b/backend/src/routes/mfaRoutes.js
deleted file mode 100644
index 8692a38..0000000
--- a/backend/src/routes/mfaRoutes.js
+++ /dev/null
@@ -1,66 +0,0 @@
-// backend/src/routes/mfaRoutes.js
-const express = require('express');
-const router = express.Router();
-const { 
-  generateMfaSecret, 
-  enableMfa, 
-  verifyMfaToken, 
-  verifyRecoveryCode, 
-  disableMfa 
-} = require('../controllers/mfaController');
-const { protect } = require('../middleware/authMiddleware');
-const { body } = require('express-validator');
-const { handleValidationErrors } = require('../middleware/validationErrorHandler');
-
-// Validation for enabling MFA
-const enableMfaValidation = [
-  body('secret').notEmpty().withMessage('Secret is required'),
-  body('token').isNumeric().isLength({ min: 6, max: 6 }).withMessage('Token must be a 6-digit number')
-];
-
-// Validation for token verification
-const tokenValidation = [
-  body('userId').isMongoId().withMessage('Invalid user ID format'),
-  body('token').isNumeric().isLength({ min: 6, max: 6 }).withMessage('Token must be a 6-digit number')
-];
-
-// Validation for recovery code verification
-const recoveryValidation = [
-  body('userId').isMongoId().withMessage('Invalid user ID format'),
-  body('recoveryCode').isString().trim().notEmpty().withMessage('Recovery code is required')
-];
-
-// Routes for MFA setup and management
-router.post('/generate', protect, generateMfaSecret);
-
-router.post(
-  '/enable', 
-  protect, 
-  enableMfaValidation, 
-  handleValidationErrors, 
-  enableMfa
-);
-
-router.post(
-  '/disable', 
-  protect, 
-  handleValidationErrors, 
-  disableMfa
-);
-
-// Routes for MFA verification during login (public, used in authentication)
-router.post(
-  '/verify', 
-  tokenValidation, 
-  handleValidationErrors, 
-  verifyMfaToken
-);
-
-router.post(
-  '/recover', 
-  recoveryValidation, 
-  handleValidationErrors, 
-  verifyRecoveryCode
-);
-
-module.exports = router;
\ No newline at end of file
diff --git a/backend/src/routes/payrollRoutes.js b/backend/src/routes/payrollRoutes.js
deleted file mode 100644
index 4daa1a0..0000000
--- a/backend/src/routes/payrollRoutes.js
+++ /dev/null
@@ -1,36 +0,0 @@
-const express = require('express');
-const {
-    generatePayrollForPeriod,
-    getPayrollHistoryForStaff,
-    getPayrollLogById,
-    markPayrollAsPaid
-} = require('../controllers/payrollController');
-const { protect, authorize } = require('../middleware/authMiddleware');
-const { body } = require('express-validator');
-const { handleValidationErrors } = require('../middleware/validationErrorHandler');
-
-const router = express.Router();
-
-// All payroll routes require login
-router.use(protect);
-
-// Generate payroll (Admin, Financial Manager)
-router.post('/generate', authorize('admin', 'financial_manager'), [
-    body('periodStart').isISO8601().withMessage('Invalid periodStart date format'),
-    body('periodEnd').isISO8601().withMessage('Invalid periodEnd date format')
-], handleValidationErrors, generatePayrollForPeriod);
-
-// Get payroll history for a specific staff member (Admin, FM, or the staff member themselves)
-router.get('/staff/:staffId', getPayrollHistoryForStaff); // Permission check done in controller
-
-// Get specific payroll log (Admin, FM, or the staff member themselves)
-router.get('/:logId', getPayrollLogById); // Permission check done in controller
-
-// Mark payroll as paid (Admin, Financial Manager)
-router.patch('/:logId/mark-paid', authorize('admin', 'financial_manager'), [
-    body('paymentDate').optional().isISO8601().withMessage('Invalid paymentDate format'),
-    body('transactionRef').optional().isString().trim().escape()
-], handleValidationErrors, markPayrollAsPaid);
-
-
-module.exports = router;
\ No newline at end of file
diff --git a/backend/src/routes/performanceRoutes.js b/backend/src/routes/performanceRoutes.js
deleted file mode 100644
index 9199124..0000000
--- a/backend/src/routes/performanceRoutes.js
+++ /dev/null
@@ -1,103 +0,0 @@
-const express = require('express');
-const router = express.Router();
-const { 
-  createPerformanceReview, 
-  getPerformanceReviews, 
-  getMyPerformanceReviews,
-  getPerformanceReviewById,
-  updatePerformanceReview,
-  deletePerformanceReview,
-  getPerformanceSummary,
-  exportPerformanceReport,
-  getDetailedPerformanceReport
-} = require('../controllers/performanceController');
-const { protect, authorize } = require('../middleware/authMiddleware');
-const { body, param, query } = require('express-validator');
-const { handleValidationErrors } = require('../middleware/validationErrorHandler');
-
-// Validation for creating/updating performance reviews
-const performanceReviewValidation = [
-  body('staffId').isMongoId().withMessage('Invalid staff ID format'),
-  body('reviewPeriod').isString().trim().notEmpty().withMessage('Review period is required'),
-  body('rating').isInt({ min: 1, max: 5 }).withMessage('Rating must be between 1 and 5'),
-  body('reviewComments').isString().trim().notEmpty().withMessage('Review comments are required'),
-  body('strengths').optional().isArray().withMessage('Strengths must be an array'),
-  body('weaknesses').optional().isArray().withMessage('Weaknesses must be an array'),
-  body('goals').optional().isArray().withMessage('Goals must be an array'),
-  body('recommendedTraining').optional().isArray(),
-];
-
-// Validation for performance ID parameter
-const performanceIdValidation = [
-  param('id').isMongoId().withMessage('Invalid performance review ID format')
-];
-
-// Validation for report exports
-const reportValidation = [
-  query('startDate').optional().isISO8601().withMessage('Invalid start date format'),
-  query('endDate').optional().isISO8601().withMessage('Invalid end date format'),
-  query('format').optional().isIn(['pdf', 'csv', 'excel']).withMessage('Invalid export format')
-];
-
-// Base route is /api/performance
-router.use(protect); // All routes require authentication
-
-// Staff routes
-router.get('/reviews/me', getMyPerformanceReviews);
-router.get('/summary/me', getMyPerformanceReviews);
-
-// Admin routes
-router.post(
-  '/', 
-  authorize('admin'), 
-  performanceReviewValidation,
-  handleValidationErrors,
-  createPerformanceReview
-);
-
-router.get('/reviews', authorize('admin'), getPerformanceReviews);
-router.get('/summary', authorize('admin'), getPerformanceSummary);
-
-router.get(
-  '/:id', 
-  authorize('admin'), 
-  performanceIdValidation,
-  handleValidationErrors,
-  getPerformanceReviewById
-);
-
-router.put(
-  '/:id', 
-  authorize('admin'), 
-  performanceIdValidation,
-  performanceReviewValidation,
-  handleValidationErrors,
-  updatePerformanceReview
-);
-
-router.delete(
-  '/:id', 
-  authorize('admin'), 
-  performanceIdValidation,
-  handleValidationErrors,
-  deletePerformanceReview
-);
-
-// Report routes - only for admin
-router.get(
-  '/reports/export', 
-  authorize('admin'), 
-  reportValidation,
-  handleValidationErrors,
-  exportPerformanceReport
-);
-
-router.get(
-  '/reports/detailed', 
-  authorize('admin'),
-  reportValidation,
-  handleValidationErrors,
-  getDetailedPerformanceReport
-);
-
-module.exports = router;
\ No newline at end of file
diff --git a/backend/src/routes/settingsRoutes.js b/backend/src/routes/settingsRoutes.js
deleted file mode 100644
index 1dd9fab..0000000
--- a/backend/src/routes/settingsRoutes.js
+++ /dev/null
@@ -1,27 +0,0 @@
-const express = require('express');
-const { body } = require('express-validator');
-const { protect, authorize } = require('../middleware/authMiddleware');
-const { handleValidationErrors } = require('../middleware/validationErrorHandler');
-const settingsController = require('../controllers/settingsController');
-
-const router = express.Router();
-
-// All settings routes require admin access
-router.use(protect, authorize('admin'));
-
-// Validation rules for updating settings
-const updateSettingsValidation = [
-    body('appName').optional().isString().trim().notEmpty().withMessage('App name cannot be empty'),
-    body('defaultTimezone').optional().isString().trim().notEmpty().withMessage('Timezone cannot be empty'),
-    body('defaultCurrency').optional().isString().isLength({ min: 3, max: 3 }).toUpperCase().withMessage('Currency must be a 3-letter code'),
-    body('defaultNewUserRole').optional().isIn(['customer', 'staff']).withMessage('Invalid default role'),
-    body('passwordMinLength').optional().isInt({ min: 6 }).withMessage('Minimum password length must be at least 6'),
-    body('sessionTimeoutMinutes').optional().isInt({ min: 5 }).withMessage('Session timeout must be at least 5 minutes'),
-    body('maintenanceMode').optional().isBoolean().withMessage('Maintenance mode must be true or false'),
-];
-
-router.route('/')
-    .get(settingsController.getSettings)
-    .put(updateSettingsValidation, handleValidationErrors, settingsController.updateSettings);
-
-module.exports = router;
\ No newline at end of file
diff --git a/backend/src/routes/statisticsRoutes.js b/backend/src/routes/statisticsRoutes.js
deleted file mode 100644
index 1e334af..0000000
--- a/backend/src/routes/statisticsRoutes.js
+++ /dev/null
@@ -1,13 +0,0 @@
-const express = require('express');
-const router = express.Router();
-const statisticsController = require('../controllers/statisticsController');
-const { protect, authorize } = require('../middleware/authMiddleware');
-
-router.get(
-    '/',
-    protect,
-    authorize('admin', 'financial_manager'), // Allow both roles for now
-    statisticsController.getStatisticsData
-);
-
-module.exports = router;
diff --git a/backend/src/routes/subscriptionPlanRoutes.js b/backend/src/routes/subscriptionPlanRoutes.js
deleted file mode 100644
index 19c90d7..0000000
--- a/backend/src/routes/subscriptionPlanRoutes.js
+++ /dev/null
@@ -1,56 +0,0 @@
-const express = require('express');
-const router = express.Router();
-// Use authorize directly from authMiddleware
-const { protect, authorize } = require('../middleware/authMiddleware'); 
-const subscriptionPlanController = require('../controllers/SubscriptionPlanController');
-const { body } = require('express-validator'); // Import only body
-// Import shared validation error handler
-const { handleValidationErrors } = require('../middleware/validationErrorHandler'); 
-
-// Validation for creating/updating subscription plans
-const planValidation = [
-  body('name', 'Plan name is required').notEmpty().trim().escape(),
-  body('description').optional().trim().escape(),
-  // Ensure price validation matches the refined model (Number, min: 0)
-  body('price', 'Price must be a non-negative number').isFloat({ min: 0 }), 
-  body('duration', 'Duration is required (e.g., 1 month, 3 months)').notEmpty().trim().escape(),
-  body('features').optional().isArray().withMessage('Features must be an array of strings'),
-  body('features.*').optional().isString().trim().escape(), // Validate each item in the array
-  body('status').optional().isIn(['active', 'inactive']).withMessage('Status must be either active or inactive')
-];
-
-// GET all subscription plans (public)
-router.get('/', subscriptionPlanController.getSubscriptionPlans);
-
-// POST create a new subscription plan (Financial Manager or Admin only)
-router.post(
-    '/',
-    protect, // Use protect directly
-    authorize('financial_manager', 'admin'), // Use authorize from authMiddleware
-    planValidation, 
-    handleValidationErrors, // Use shared handler
-    subscriptionPlanController.createSubscriptionPlan
-);
-
-// GET a specific subscription plan by ID (public)
-router.get('/:id', subscriptionPlanController.getSubscriptionPlanById);
-
-// PUT update a subscription plan (Financial Manager or Admin only)
-router.put(
-    '/:id',
-    protect,
-    authorize('financial_manager', 'admin'),
-    planValidation, 
-    handleValidationErrors, // Use shared handler
-    subscriptionPlanController.updateSubscriptionPlan
-);
-
-// DELETE a subscription plan (Financial Manager or Admin only)
-router.delete(
-    '/:id',
-    protect,
-    authorize('financial_manager', 'admin'),
-    subscriptionPlanController.deleteSubscriptionPlan
-);
-
-module.exports = router;
\ No newline at end of file
diff --git a/backend/src/routes/userRoutes.js b/backend/src/routes/userRoutes.js
deleted file mode 100644
index da2d26e..0000000
--- a/backend/src/routes/userRoutes.js
+++ /dev/null
@@ -1,62 +0,0 @@
-// backend/src/routes/userRoutes.js
-const express = require('express');
-const router = express.Router();
-const { 
-  getUsers, 
-  getUserById, 
-  updateUserProfile, 
-  deleteUser,
-  getUserProfile,
-  deleteUserProfile,
-  adminCreateUser, // Import adminCreateUser
-  adminUpdateUser  // Import adminUpdateUser
-} = require('../controllers/userController');
-const { protect, authorize } = require('../middleware/authMiddleware');
-const { body } = require('express-validator'); // Import only body
-const { handleValidationErrors } = require('../middleware/validationErrorHandler'); // Import shared handler
-
-// Validation for updating user profile (self)
-const updateProfileValidation = [
-  body('name').optional().notEmpty().withMessage('Name cannot be empty').trim().escape(),
-  body('email').optional().isEmail().withMessage('Please provide a valid email').normalizeEmail(),
-  body('phone').optional().isMobilePhone('any').withMessage('Invalid phone number format'),
-  // Add validation for other updatable profile fields
-];
-
-// Validation for admin creating a user
-const adminCreateUserValidation = [
-  body('name', 'Name is required').notEmpty().trim().escape(),
-  body('email', 'Please include a valid email').isEmail().normalizeEmail(),
-  body('password', 'Password must be at least 8 characters long').isLength({ min: 8 }),
-  body('role').optional().isIn(['customer', 'staff', 'admin', 'financial_manager']).withMessage('Invalid role specified'),
-  body('phone').optional().isMobilePhone('any').withMessage('Invalid phone number format'),
-  // Add validation for address fields if needed
-];
-
-// Validation for admin updating a user
-const adminUpdateUserValidation = [
-  body('name').optional().notEmpty().withMessage('Name cannot be empty').trim().escape(),
-  body('email').optional().isEmail().withMessage('Please provide a valid email').normalizeEmail(),
-  body('role').optional().isIn(['customer', 'staff', 'admin', 'financial_manager']).withMessage('Invalid role specified'),
-  body('phone').optional().isMobilePhone('any').withMessage('Invalid phone number format'),
-  body('password').optional().isLength({ min: 8 }).withMessage('Password must be at least 8 characters long'), // Validate if password is provided
-  // Add validation for other fields like address, skills, availability
-];
-
-// User profile routes - all users can access their own profile
-router.route('/profile')
-  .get(protect, getUserProfile)
-  .put(protect, updateProfileValidation, handleValidationErrors, updateUserProfile) // Use shared handler
-  .delete(protect, deleteUserProfile);
-
-// --- Admin User Management Routes ---
-router.route('/')
-  .get(protect, authorize('admin'), getUsers)
-  .post(protect, authorize('admin'), adminCreateUserValidation, handleValidationErrors, adminCreateUser); // Add POST route for admin create
-
-router.route('/:id')
-  .get(protect, authorize('admin'), getUserById)
-  .put(protect, authorize('admin'), adminUpdateUserValidation, handleValidationErrors, adminUpdateUser) // Add PUT route for admin update
-  .delete(protect, authorize('admin'), deleteUser);
-
-module.exports = router;
\ No newline at end of file
diff --git a/backend/src/routes/userSubscriptionRoutes.js b/backend/src/routes/userSubscriptionRoutes.js
deleted file mode 100644
index 552a818..0000000
--- a/backend/src/routes/userSubscriptionRoutes.js
+++ /dev/null
@@ -1,77 +0,0 @@
-const express = require('express');
-const router = express.Router();
-const { protect, authorize } = require('../middleware/authMiddleware'); 
-const userSubscriptionController = require('../controllers/UserSubscriptionController');
-const { body } = require('express-validator'); // Import only body
-// Import shared validation error handler
-const { handleValidationErrors } = require('../middleware/validationErrorHandler'); 
-
-// Validation for creating a user subscription
-const createUserSubscriptionValidation = [
-  body('user', 'User ID is required').isMongoId(),
-  body('plan', 'Subscription Plan ID is required').isMongoId(),
-  body('startDate').optional().isISO8601().toDate().withMessage('Invalid start date format'),
-  // Add validation for payment details if applicable
-];
-
-// Validation for updating a user subscription
-const updateUserSubscriptionValidation = [
-  body('plan').optional().isMongoId().withMessage('Invalid Subscription Plan ID'),
-  body('startDate').optional().isISO8601().toDate().withMessage('Invalid start date format'),
-  body('endDate').optional().isISO8601().toDate().withMessage('Invalid end date format'),
-  body('status').optional().isIn(['active', 'cancelled', 'expired']).withMessage('Invalid status'),
-];
-
-// Route to get all active subscriptions (Admin/Financial Manager only)
-router.get(
-    '/', 
-    protect, 
-    authorize('admin', 'financial_manager'), // Use authorize directly
-    userSubscriptionController.getAllActiveSubscriptions
-);
-
-// Route to create a new subscription (Admin/Financial Manager only)
-router.post(
-    '/', 
-    protect, 
-    authorize('admin', 'financial_manager'), // Use authorize directly
-    createUserSubscriptionValidation, 
-    handleValidationErrors, // Use shared handler
-    userSubscriptionController.createUserSubscription
-);
-
-// Route to get subscriptions for a specific user (Admin/Financial Manager or the user themselves)
-// Controller needs logic to check if req.user.id matches :userId or if user is admin/fm
-router.get(
-    '/user/:userId', 
-    protect, 
-    userSubscriptionController.getUserSubscriptions
-);
-
-// Route to get a single subscription by ID (Admin/Financial Manager or the user themselves)
-// Controller needs logic to check ownership or role
-router.get(
-    '/:id', 
-    protect, 
-    userSubscriptionController.getUserSubscriptionById
-);
-
-// Route to update a subscription (Admin/Financial Manager only)
-router.put(
-    '/:id', 
-    protect, 
-    authorize('admin', 'financial_manager'), // Use authorize directly
-    updateUserSubscriptionValidation, 
-    handleValidationErrors, // Use shared handler
-    userSubscriptionController.updateUserSubscription
-);
-
-// Route to cancel a subscription (Admin/Financial Manager only)
-router.delete(
-    '/:id', 
-    protect, 
-    authorize('admin', 'financial_manager'), // Use authorize directly
-    userSubscriptionController.cancelUserSubscription
-);
-
-module.exports = router;
diff --git a/backend/src/scripts/TestAccounts.md b/backend/src/scripts/TestAccounts.md
deleted file mode 100644
index 6f184bf..0000000
--- a/backend/src/scripts/TestAccounts.md
+++ /dev/null
@@ -1,14 +0,0 @@
-Admin Account
-Email: admin@smartbin.com
-Password: Admin123!
-Role: admin
-
-Staff Account
-Email: staff@smartbin.com  
-Password: Staff123!
-Role: staff
-
-Financial Manager Account
-Email: finance@smartbin.com
-Password: Finance123!
-Role: financial_manager
\ No newline at end of file
diff --git a/backend/src/scripts/demoStripePayment.js b/backend/src/scripts/demoStripePayment.js
deleted file mode 100644
index 3c909f9..0000000
--- a/backend/src/scripts/demoStripePayment.js
+++ /dev/null
@@ -1,91 +0,0 @@
-/**
- * Stripe Payment Demonstration Script
- * 
- * This script demonstrates the full payment flow using the Stripe API
- * It creates a payment intent, simulates a payment, and shows how to handle the response
- * 
- * Usage: node src/scripts/demoStripePayment.js
- */
-require('dotenv').config();
-const { createPaymentIntent } = require('../services/paymentService');
-
-// Colors for console output
-const colors = {
-  reset: '\x1b[0m',
-  green: '\x1b[32m',
-  yellow: '\x1b[33m',
-  blue: '\x1b[34m',
-  magenta: '\x1b[35m',
-  cyan: '\x1b[36m',
-  red: '\x1b[31m'
-};
-
-console.log(`${colors.blue}========================================================${colors.reset}`);
-console.log(`${colors.cyan}              STRIPE PAYMENT DEMONSTRATION              ${colors.reset}`);
-console.log(`${colors.blue}========================================================${colors.reset}\n`);
-
-console.log(`${colors.yellow}[1] Payment Flow Initiated${colors.reset}`);
-console.log(`    • Creating demo customer and plan data\n`);
-
-// Demo user data
-const demoUser = {
-  id: 'demo-user-123',
-  email: 'demo@smartbin.example.com',
-  name: 'Demo User'
-};
-
-// Demo subscription plan
-const demoPlan = {
-  id: 'plan-standard-123',
-  name: 'Standard Plan',
-  price: 79.99
-};
-
-// Run the payment demonstration
-async function runDemonstration() {
-  try {
-    console.log(`${colors.yellow}[2] Backend Payment Process${colors.reset}`);
-    console.log(`    • Creating payment intent for ${colors.green}$${demoPlan.price}${colors.reset}`);
-    console.log(`    • User ID: ${demoUser.id}`);
-    console.log(`    • Plan: ${demoPlan.name} (${demoPlan.id})\n`);
-
-    // Create a payment intent via the paymentService
-    const paymentIntent = await createPaymentIntent({
-      amount: demoPlan.price,
-      userId: demoUser.id,
-      planId: demoPlan.id,
-      userEmail: demoUser.email
-    });
-
-    console.log(`${colors.green}[3] Payment Intent Created Successfully${colors.reset}`);
-    console.log(`    • Payment Intent ID: ${paymentIntent.intentId}`);
-    console.log(`    • Client Secret: ${paymentIntent.clientSecret.substring(0, 20)}...`);
-    
-    console.log(`\n${colors.yellow}[4] Frontend Payment Flow${colors.reset}`);
-    console.log(`    • In a real application, the frontend would now use this client secret`);
-    console.log(`    • The Stripe.js library would handle card details securely`);
-    console.log(`    • Test card number: 4242 4242 4242 4242`);
-    
-    console.log(`\n${colors.yellow}[5] Payment Confirmation${colors.reset}`);
-    console.log(`    • After payment confirmation, Stripe would send a webhook`);
-    console.log(`    • Backend would verify the webhook signature`);
-    console.log(`    • Update subscription status based on payment result`);
-    
-    console.log(`\n${colors.green}[✓] Payment Flow Complete${colors.reset}`);
-    console.log(`    • The payment demonstration has completed successfully`);
-    console.log(`    • Your Stripe API keys are configured correctly`);
-    
-    console.log(`\n${colors.magenta}To see the complete visual payment flow, visit:${colors.reset}`);
-    console.log(`http://localhost:5173/payment-demo\n`);
-    
-  } catch (error) {
-    console.error(`${colors.red}[✗] Error in payment demonstration:${colors.reset}`, error.message);
-    console.error(`\n${colors.yellow}Troubleshooting:${colors.reset}`);
-    console.error(`1. Verify that your Stripe API keys are correct in the .env file`);
-    console.error(`2. Check that you have installed the Stripe package: npm install stripe`);
-    console.error(`3. Ensure your network connection is active\n`);
-  }
-}
-
-// Execute the demonstration
-runDemonstration();
\ No newline at end of file
diff --git a/backend/src/scripts/seed/seedAll.js b/backend/src/scripts/seed/seedAll.js
deleted file mode 100644
index 3c2b491..0000000
--- a/backend/src/scripts/seed/seedAll.js
+++ /dev/null
@@ -1,993 +0,0 @@
-// fullSeed.js - Master seeder for SmartBin
-// Follows SmartBin backend conventions and ensures all data relationships are correct
-
-const mongoose = require('mongoose');
-const path = require('path');
-// Ensure dotenv path is correct relative to this script's location
-require('dotenv').config({ path: path.resolve(__dirname, '../../../.env') });
-const config = require('../../config'); // Adjusted path
-
-// Import models
-const User = require('../../models/User'); // Adjusted path
-const SubscriptionPlan = require('../../models/SubscriptionPlan'); // Adjusted path
-const UserSubscription = require('../../models/UserSubscription'); // Adjusted path
-const Payment = require('../../models/Payment'); // Adjusted path
-const Expense = require('../../models/Expense'); // Adjusted path
-const Budget = require('../../models/Budget');
-const PayrollLog = require('../../models/PayrollLog');
-const Attendance = require('../../models/Attendance');
-const Performance = require('../../models/Performance');
-const Complaint = require('../../models/Complaint');
-const Document = require('../../models/Document');
-
-// Fixed "Current Date" for consistent seeding
-const DEMO_CURRENT_DATE = new Date('2025-04-30T12:00:00Z');
-// Start Date: 1 year and 3 months before DEMO_CURRENT_DATE
-const SEED_START_DATE = new Date(DEMO_CURRENT_DATE);
-SEED_START_DATE.setFullYear(SEED_START_DATE.getFullYear() - 1);
-SEED_START_DATE.setMonth(SEED_START_DATE.getMonth() - 3);
-
-const verificationStatuses = ['Pending', 'Verified', 'Rejected'];
-
-// Utility function to generate random number between min and max
-function randomNumber(min, max) {
-  return Math.floor(Math.random() * (max - min + 1) + min);
-}
-
-// Utility function to get a random element from an array
-const randomElement = (array) => {
-  if (!array || array.length === 0) return undefined;
-  return array[Math.floor(Math.random() * array.length)];
-};
-
-// Utility: add days to a date
-function addDays(date, days) {
-  const result = new Date(date);
-  result.setDate(result.getDate() + days);
-  return result;
-}
-
-// Utility: add months to a date
-function addMonths(date, months) {
-  const result = new Date(date);
-  // Handle potential day overflow (e.g., Jan 31 + 1 month = Feb 28/29)
-  const originalDay = result.getDate();
-  result.setMonth(result.getMonth() + months);
-  if (result.getDate() !== originalDay) {
-    result.setDate(0); // Go to the last day of the previous month
-  }
-  return result;
-}
-
-// Utility function to generate a random date between two dates
-const randomDate = (start, end) => {
-  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
-};
-
-
-// Utility: generate a unique invoice number (Placeholder - needs implementation if required)
-async function generateUniqueInvoiceNumber() {
-  // Placeholder logic - replace with actual unique generation if needed
-  const timestamp = Date.now();
-  const randomSuffix = Math.random().toString(36).substring(2, 8).toUpperCase();
-  return `INV-${timestamp}-${randomSuffix}`;
-  // In a real scenario, you'd check the DB to ensure uniqueness
-  // let exists = true;
-  // let invoiceNumber;
-  // while (exists) {
-  //   invoiceNumber = `INV-${Date.now()}-${Math.random().toString(36).substring(2, 8).toUpperCase()}`;
-  //   const existingPayment = await Payment.findOne({ invoiceNumber });
-  //   exists = !!existingPayment;
-  // }
-  // return invoiceNumber;
-}
-
-// Ensure demo users for all roles exist
-async function ensureUsers() {
-  console.log('Ensuring demo users exist...');
-  const roles = ['admin', 'financial_manager', 'staff', 'customer'];
-  const usersData = {
-    admin: { name: 'Admin User', email: 'admin@example.com', password: 'Password123!' },
-    financial_manager: { name: 'Finance Manager', email: 'finance@example.com', password: 'Password123!' },
-    staff: { name: 'Staff Member', email: 'staff@example.com', password: 'Password123!' },
-    customer: { name: 'Customer User', email: 'customer@example.com', password: 'Password123!' }
-  };
-  const createdUsers = {};
-
-  for (const role of roles) {
-    let user = await User.findOne({ email: usersData[role].email });
-    if (!user) {
-      user = new User({ ...usersData[role], role });
-      await user.save();
-      console.log(`Created ${role} user: ${user.email}`);
-    } else {
-      console.log(`${role} user already exists: ${user.email}`);
-    }
-    createdUsers[role] = user;
-  }
-
-  // Ensure additional staff and customers if needed for variety
-  const targetStaff = 5;
-  const targetCustomers = 20;
-  let staffCount = await User.countDocuments({ role: 'staff' });
-  let customerCount = await User.countDocuments({ role: 'customer' });
-
-  while (staffCount < targetStaff) {
-    const staffIndex = staffCount + 1;
-    const email = `staff${staffIndex}@example.com`;
-    let staffUser = await User.findOne({ email });
-    if (!staffUser) {
-        staffUser = new User({
-            name: `Staff Member ${staffIndex}`,
-            email: email,
-            password: 'Password123!',
-            role: 'staff'
-        });
-        await staffUser.save();
-        console.log(`Created additional staff user: ${email}`);
-    }
-    staffCount++;
-  }
-
-  while (customerCount < targetCustomers) {
-    const customerIndex = customerCount + 1;
-    const email = `customer${customerIndex}@example.com`;
-    let customerUser = await User.findOne({ email });
-    if (!customerUser) {
-        customerUser = new User({
-            name: `Customer User ${customerIndex}`,
-            email: email,
-            password: 'Password123!',
-            role: 'customer'
-        });
-        await customerUser.save();
-        console.log(`Created additional customer user: ${email}`);
-    }
-    customerCount++;
-  }
-
-  return createdUsers; // Return the main role users for assignment
-}
-
-// Ensure demo subscription plans exist
-async function ensurePlans() {
-  console.log('Ensuring subscription plans exist...');
-  const plansData = [
-    { name: 'Basic', price: 49.99, description: 'Basic waste collection service with weekly pickup and app access.', duration: 'Monthly' },
-    { name: 'Standard', price: 79.99, description: 'Enhanced service with twice-weekly pickup, recycling options, and advanced app features.', duration: 'Monthly' },
-    { name: 'Premium', price: 99.99, description: 'Premium service with unlimited pickup, priority service, recycling and composting options, and full app features.', duration: 'Monthly' },
-    { name: 'Business', price: 199.99, description: 'Comprehensive waste management solution for small to medium businesses with daily collection and dedicated support.', duration: 'Monthly' }
-  ];
-  const createdPlans = [];
-  for (const planData of plansData) {
-    let plan = await SubscriptionPlan.findOne({ name: planData.name });
-    if (!plan) {
-      plan = new SubscriptionPlan(planData);
-      await plan.save();
-      console.log(`Created subscription plan: ${plan.name}`);
-    } else {
-      // Ensure price is a number if it exists as a string
-      if (typeof plan.price === 'string') {
-        plan.price = parseFloat(plan.price);
-        await plan.save();
-        console.log(`Updated price type for plan: ${plan.name}`);
-      }
-      console.log(`Subscription plan already exists: ${plan.name}`);
-    }
-    createdPlans.push(plan);
-  }
-  return createdPlans;
-}
-
-async function cleanSlate() {
-  console.log('Clearing existing transactional data...');
-  // Clean all transactional and dashboard-related collections
-  await Promise.all([
-    UserSubscription.deleteMany({}),
-    Payment.deleteMany({}),
-    Expense.deleteMany({}),
-    Budget.deleteMany({}),
-    PayrollLog.deleteMany({}),
-    Attendance.deleteMany({}),
-    Performance.deleteMany({}),
-    Complaint.deleteMany({}),
-    Document.deleteMany({})
-  ]);
-  // Reset subscriber count on plans (don't delete plans themselves)
-  await SubscriptionPlan.updateMany({}, { $set: { subscriberCount: 0 } });
-  console.log('Existing transactional data cleared.');
-}
-
-async function ensureSubscriptions(customers, plans, startDate, endDate) {
-    console.log(`Generating subscriptions from ${startDate.toDateString()} to ${endDate.toDateString()}...`);
-    await UserSubscription.deleteMany({}); // Clear only subscriptions
-    await SubscriptionPlan.updateMany({}, { $set: { subscriberCount: 0 } }); // Reset counts
-
-    const planWeights = [0.4, 0.3, 0.2, 0.1]; // Basic, Standard, Premium, Business
-
-    for (const customer of customers) {
-        // Select plan
-        const randomValue = Math.random();
-        let cumulativeProbability = 0;
-        let selectedPlanIndex = 0;
-        for (let i = 0; i < planWeights.length; i++) {
-            cumulativeProbability += planWeights[i];
-            if (randomValue <= cumulativeProbability) {
-                selectedPlanIndex = i;
-                break;
-            }
-        }
-        const selectedPlan = plans[selectedPlanIndex];
-
-        // Determine subscription start date within the 15-month period
-        const subStartDate = randomDate(startDate, endDate);
-        const durationInMonths = 1; // Assume monthly for simplicity, can be enhanced
-
-        // Simulate renewals if start date is far enough in the past
-        let currentSubStartDate = new Date(subStartDate);
-        let currentSubEndDate = addMonths(currentSubStartDate, durationInMonths);
-        let isActive = false;
-
-        while (currentSubEndDate < endDate) {
-            // Check if this subscription period overlaps with the "current date"
-            if (currentSubStartDate <= DEMO_CURRENT_DATE && currentSubEndDate > DEMO_CURRENT_DATE) {
-                isActive = true;
-                break; // Found the currently active subscription period
-            }
-            // Simulate renewal
-            currentSubStartDate = currentSubEndDate;
-            currentSubEndDate = addMonths(currentSubStartDate, durationInMonths);
-        }
-        // If the loop finished and the last period ends after DEMO_CURRENT_DATE, it's active
-        if (!isActive && currentSubEndDate > DEMO_CURRENT_DATE && currentSubStartDate <= DEMO_CURRENT_DATE) {
-             isActive = true;
-        }
-
-
-        const subscription = new UserSubscription({
-            user: customer._id,
-            subscriptionPlan: selectedPlan._id,
-            startDate: currentSubStartDate, // Start date of the *current* active period
-            endDate: currentSubEndDate,     // End date of the *current* active period
-            status: isActive ? 'active' : 'expired', // Determine status based on DEMO_CURRENT_DATE
-            autoRenew: Math.random() > 0.1,
-            lastBillingDate: currentSubStartDate, // Simplified
-            nextBillingDate: isActive ? currentSubEndDate : null, // Only set if active
-        });
-        await subscription.save();
-
-        if (isActive) {
-            await SubscriptionPlan.findByIdAndUpdate(selectedPlan._id, { $inc: { subscriberCount: 1 } });
-        }
-    }
-    console.log(`Generated ${await UserSubscription.countDocuments()} subscriptions.`);
-
-    // Ensure some subscriptions started THIS MONTH (relative to DEMO_CURRENT_DATE)
-    console.log('Ensuring some subscriptions started this month...');
-    const currentMonthStart = new Date(DEMO_CURRENT_DATE.getFullYear(), DEMO_CURRENT_DATE.getMonth(), 1);
-    const fewCustomers = await User.find({ role: 'customer' }).limit(3);
-    const standardPlan = plans.find(p => p.name === 'Standard');
-
-    if (standardPlan && fewCustomers.length > 0) {
-        for (const customer of fewCustomers) {
-            const existingSub = await UserSubscription.findOne({ user: customer._id, status: 'active' });
-            if (!existingSub) { // Only add if they don't have an active one
-                 const newSubStartDate = randomDate(currentMonthStart, DEMO_CURRENT_DATE);
-                 const newSubEndDate = addMonths(newSubStartDate, 1);
-                 const newSub = new UserSubscription({
-                     user: customer._id,
-                     subscriptionPlan: standardPlan._id,
-                     startDate: newSubStartDate,
-                     endDate: newSubEndDate,
-                     status: 'active',
-                     autoRenew: true,
-                     lastBillingDate: newSubStartDate,
-                     nextBillingDate: newSubEndDate,
-                 });
-                 await newSub.save();
-                 await SubscriptionPlan.findByIdAndUpdate(standardPlan._id, { $inc: { subscriberCount: 1 } });
-                 console.log(`Created current month subscription for ${customer.email}`);
-            }
-        }
-    }
-
-    // Ensure some subscriptions are ENDING SOON (relative to DEMO_CURRENT_DATE)
-    console.log('Ensuring some subscriptions are ending soon...');
-    const activeSubs = await UserSubscription.find({ status: 'active' }).limit(3);
-    for (const sub of activeSubs) {
-        const newEndDate = addDays(DEMO_CURRENT_DATE, randomNumber(1, 14)); // End in 1-14 days
-        sub.endDate = newEndDate;
-        sub.nextBillingDate = newEndDate;
-        await sub.save();
-        console.log(`Adjusted subscription ${sub._id} to end soon: ${newEndDate.toDateString()}`);
-    }
-}
-
-async function ensurePayments(users, plans, startDate, endDate) {
-    console.log(`Generating payments from ${startDate.toDateString()} to ${endDate.toDateString()}...`);
-    await Payment.deleteMany({});
-    const payments = [];
-    const paymentMethods = ['credit_card', 'paypal', 'bank_transfer'];
-    const paymentStatuses = ['completed', 'pending', 'failed'];
-
-    const subscriptions = await UserSubscription.find().populate('subscriptionPlan');
-
-    for (const sub of subscriptions) {
-        if (!sub.subscriptionPlan) continue; // Skip if plan details missing
-
-        let paymentDate = new Date(sub.startDate);
-        const planPrice = typeof sub.subscriptionPlan.price === 'number' ? sub.subscriptionPlan.price : parseFloat(sub.subscriptionPlan.price || '0');
-
-        // Generate payments for the subscription's lifetime within the seed range
-        while (paymentDate < sub.endDate && paymentDate < endDate) {
-            // Only create payment if it falls within the seed range
-            if (paymentDate >= startDate) {
-                 // Simulate payment status: more likely completed, some pending/failed, fewer failures before DEMO_CURRENT_DATE
-                 let status;
-                 if (paymentDate > DEMO_CURRENT_DATE) {
-                     status = 'pending'; // Future payments are pending
-                 } else if (paymentDate <= DEMO_CURRENT_DATE) {
-                     const randomStatus = Math.random();
-                     if (randomStatus < 0.85) status = 'completed'; // 85% completed
-                     else if (randomStatus < 0.95) status = 'pending'; // 10% pending (e.g., processing)
-                     else status = 'failed'; // 5% failed
-                 } else {
-                     status = 'pending'; // Default future to pending
-                 }
-
-
-                payments.push({
-                    user: sub.user,
-                    userSubscription: sub._id,
-                    amount: planPrice,
-                    paymentDate: status === 'completed' || status === 'failed' ? new Date(paymentDate) : null, // Only set date if processed
-                    dueDate: new Date(paymentDate), // Due date is the cycle start
-                    status: status,
-                    paymentMethod: randomElement(paymentMethods),
-                    description: `Payment for ${sub.subscriptionPlan.name} plan`,
-                    invoiceNumber: await generateUniqueInvoiceNumber(), // Generate unique invoice number
-                });
-            }
-            // Move to the next payment cycle date
-            paymentDate = addMonths(paymentDate, 1); // Assuming monthly plans
-        }
-    }
-
-    // Add some standalone payments (e.g., one-off charges, not linked to subs)
-    const numStandalone = users.length * 0.5; // 50% of users have a standalone payment
-    for (let i = 0; i < numStandalone; i++) {
-        const user = randomElement(users);
-        const paymentDate = randomDate(startDate, endDate);
-        if (paymentDate > DEMO_CURRENT_DATE) continue; // Don't create standalone payments in the future
-
-        payments.push({
-            user: user._id,
-            userSubscription: null, // Not linked to a subscription
-            amount: randomNumber(10, 50), // Smaller amounts
-            paymentDate: new Date(paymentDate),
-            dueDate: new Date(paymentDate),
-            status: Math.random() < 0.9 ? 'completed' : 'failed', // Mostly completed
-            paymentMethod: randomElement(paymentMethods),
-            description: randomElement(['Bin replacement fee', 'Extra pickup charge', 'Late payment fee']),
-            invoiceNumber: await generateUniqueInvoiceNumber(),
-        });
-    }
-
-    if (payments.length > 0) {
-        await Payment.insertMany(payments);
-    }
-    console.log(`Generated ${await Payment.countDocuments()} payments.`);
-
-    // Ensure some payments occurred TODAY (relative to DEMO_CURRENT_DATE)
-    console.log('Ensuring some payments occurred today...');
-    const todaySubs = await UserSubscription.find({ status: 'active' }).limit(2).populate('subscriptionPlan');
-    for (const sub of todaySubs) {
-         if (!sub.subscriptionPlan) continue;
-         const planPrice = typeof sub.subscriptionPlan.price === 'number' ? sub.subscriptionPlan.price : parseFloat(sub.subscriptionPlan.price || '0');
-         const existingTodayPayment = await Payment.findOne({ user: sub.user, paymentDate: DEMO_CURRENT_DATE });
-         if (!existingTodayPayment) {
-             await Payment.create({
-                 user: sub.user,
-                 userSubscription: sub._id,
-                 amount: planPrice,
-                 paymentDate: DEMO_CURRENT_DATE,
-                 dueDate: DEMO_CURRENT_DATE,
-                 status: 'completed',
-                 paymentMethod: randomElement(paymentMethods),
-                 description: `Today's payment for ${sub.subscriptionPlan.name}`,
-                 invoiceNumber: await generateUniqueInvoiceNumber(),
-             });
-             console.log(`Created today's payment for user ${sub.user}`);
-         }
-    }
-
-    // Ensure some payments are PENDING (due soon, relative to DEMO_CURRENT_DATE)
-    console.log('Ensuring some payments are pending...');
-    const pendingSubs = await UserSubscription.find({ status: 'active' }).limit(2).populate('subscriptionPlan');
-     for (const sub of pendingSubs) {
-         if (!sub.subscriptionPlan) continue;
-         const dueDate = addDays(DEMO_CURRENT_DATE, randomNumber(1, 7)); // Due in 1-7 days
-         const planPrice = typeof sub.subscriptionPlan.price === 'number' ? sub.subscriptionPlan.price : parseFloat(sub.subscriptionPlan.price || '0');
-         const existingPending = await Payment.findOne({ user: sub.user, status: 'pending', dueDate: { $gt: DEMO_CURRENT_DATE } });
-         if (!existingPending) {
-             await Payment.create({
-                 user: sub.user,
-                 userSubscription: sub._id,
-                 amount: planPrice,
-                 paymentDate: null,
-                 dueDate: dueDate,
-                 status: 'pending',
-                 paymentMethod: randomElement(paymentMethods),
-                 description: `Upcoming payment for ${sub.subscriptionPlan.name}`,
-                 invoiceNumber: await generateUniqueInvoiceNumber(),
-             });
-             console.log(`Created pending payment for user ${sub.user} due ${dueDate.toDateString()}`);
-         }
-     }
-}
-
-
-async function ensureExpenses(financialManager, startDate, endDate) {
-    console.log(`Generating expenses from ${startDate.toDateString()} to ${endDate.toDateString()}...`);
-    await Expense.deleteMany({});
-    const expenses = [];
-    const expenseCategories = [
-      { category: 'fuel', frequency: 0.15, min: 200, max: 800 },
-      { category: 'maintenance', frequency: 0.15, min: 100, max: 1000 },
-      { category: 'salaries', frequency: 0.3, min: 1500, max: 5000 },
-      { category: 'utilities', frequency: 0.1, min: 300, max: 800 },
-      { category: 'equipment', frequency: 0.1, min: 200, max: 2000 },
-      { category: 'office', frequency: 0.05, min: 50, max: 300 },
-      { category: 'rent', frequency: 0.05, min: 1000, max: 3000 },
-      { category: 'marketing', frequency: 0.05, min: 200, max: 1500 },
-      { category: 'insurance', frequency: 0.03, min: 500, max: 2000 },
-      { category: 'taxes', frequency: 0.02, min: 500, max: 5000 },
-    ];
-    const expenseDescriptions = {
-      fuel: ['Vehicle refueling', 'Truck fleet fuel', 'Collection vehicle diesel'],
-      maintenance: ['Vehicle maintenance', 'Equipment repair', 'Bin repair services'],
-      salaries: ['Staff payroll', 'Employee benefits', 'Contractor payments'],
-      utilities: ['Electricity bill', 'Water services', 'Internet and phone'],
-      equipment: ['New sorting equipment', 'Replacement bins', 'Safety gear'],
-      office: ['Office supplies', 'Stationery', 'Cleaning supplies'],
-      rent: ['Office space rent', 'Warehouse rental', 'Storage facility'],
-      marketing: ['Promotional materials', 'Digital advertising', 'Community outreach'],
-      insurance: ['Vehicle insurance', 'Liability coverage', 'Property insurance'],
-      taxes: ['Property tax', 'Business tax payment', 'Regulatory fees']
-    };
-    // Corrected statuses to match the Expense model enum
-    const expenseStatuses = ['approved', 'pending', 'rejected'];
-    // Corrected payment methods to match the Expense model enum
-    const paymentMethods = ['company_account', 'credit_card', 'bank_transfer', 'cash', 'other'];
-
-    let currentDatePointer = new Date(startDate);
-    while (currentDatePointer <= endDate) {
-        // Generate 5-15 expenses per month
-        const numExpensesThisMonth = randomNumber(5, 15);
-        for (let i = 0; i < numExpensesThisMonth; i++) {
-            const expenseDate = randomDate(currentDatePointer, addMonths(currentDatePointer, 1) > endDate ? endDate : addMonths(currentDatePointer, 1));
-            if (expenseDate > endDate) continue; // Ensure not past the final end date
-
-            const categoryInfo = randomElement(expenseCategories);
-            let status;
-             if (expenseDate > DEMO_CURRENT_DATE) {
-                 status = 'pending'; // Future expenses are pending approval
-             } else {
-                 // Past/Present expenses: Mostly approved, some pending/rejected
-                 const randomStatus = Math.random();
-                 if (randomStatus < 0.75) status = 'approved'; // 75% approved
-                 else if (randomStatus < 0.90) status = 'pending';  // 15% pending
-                 else status = 'rejected'; // 10% rejected
-             }
-
-
-            expenses.push({
-                category: categoryInfo.category,
-                amount: randomNumber(categoryInfo.min, categoryInfo.max),
-                description: randomElement(expenseDescriptions[categoryInfo.category]),
-                date: new Date(expenseDate),
-                createdBy: financialManager._id,
-                status: status,
-                // Only set payment method if approved (as 'paid' status is removed)
-                paymentMethod: status === 'approved' ? randomElement(paymentMethods) : null,
-                receiptUrl: null, // Placeholder
-            });
-        }
-        currentDatePointer = addMonths(currentDatePointer, 1);
-    }
-
-    if (expenses.length > 0) {
-        await Expense.insertMany(expenses);
-    }
-    console.log(`Generated ${await Expense.countDocuments()} expenses.`);
-
-    // Ensure some expenses are PENDING (relative to DEMO_CURRENT_DATE)
-    console.log('Ensuring some expenses are pending...');
-    for (let i = 0; i < 3; i++) {
-        const categoryInfo = randomElement(expenseCategories);
-        const expenseDate = addDays(DEMO_CURRENT_DATE, randomNumber(-7, 0)); // Created recently
-        const existingPending = await Expense.findOne({ status: 'pending', date: { $gte: addDays(DEMO_CURRENT_DATE, -7) } });
-        if (!existingPending) {
-            await Expense.create({
-                category: categoryInfo.category,
-                amount: randomNumber(categoryInfo.min, categoryInfo.max),
-                description: `Pending expense check ${i + 1}`,
-                date: expenseDate,
-                createdBy: financialManager._id,
-                status: 'pending',
-                paymentMethod: null,
-            });
-            console.log(`Created pending expense for ${categoryInfo.category}`);
-        }
-    }
-     // Ensure some expenses occurred TODAY (relative to DEMO_CURRENT_DATE)
-    console.log('Ensuring some expenses occurred today...');
-    for (let i = 0; i < 2; i++) {
-        const categoryInfo = randomElement(expenseCategories);
-        const existingToday = await Expense.findOne({ date: DEMO_CURRENT_DATE });
-        if (!existingToday) {
-            await Expense.create({
-                category: categoryInfo.category,
-                amount: randomNumber(categoryInfo.min, categoryInfo.max),
-                description: `Today's expense ${i + 1}`,
-                date: DEMO_CURRENT_DATE,
-                createdBy: financialManager._id,
-                status: 'approved', // Today's can only be approved or pending now
-                paymentMethod: randomElement(paymentMethods), // Assign a method if approved
-            });
-            console.log(`Created today's expense for ${categoryInfo.category}`);
-        }
-    }
-}
-
-async function ensureBudgets(financialManager, startDate, endDate) {
-  console.log(`Generating budgets from ${startDate.getFullYear()} to ${endDate.getFullYear()}...`);
-  await Budget.deleteMany({});
-  const budgets = [];
-  const categories = ['fuel', 'maintenance', 'salaries', 'utilities', 'equipment', 'office', 'rent', 'marketing', 'insurance', 'taxes'];
-  const periodTypes = ['Monthly', 'Quarterly', 'Yearly'];
-  const budgetNotes = {
-      fuel: ['Fleet fuel', 'Operational transport costs'],
-      maintenance: ['Vehicle upkeep', 'Equipment servicing'],
-      salaries: ['Staff compensation', 'Payroll allocation'],
-      // ... add more notes for other categories
-  };
-
-  const startYear = startDate.getFullYear();
-  const endYear = endDate.getFullYear();
-
-  for (let year = startYear; year <= endYear; year++) {
-      for (const periodType of periodTypes) {
-          let periodsInYear = 1;
-          if (periodType === 'Monthly') periodsInYear = 12;
-          if (periodType === 'Quarterly') periodsInYear = 4;
-
-          for (let periodIndex = 0; periodIndex < periodsInYear; periodIndex++) {
-              let periodStartDate, periodEndDate;
-
-              if (periodType === 'Monthly') {
-                  periodStartDate = new Date(year, periodIndex, 1);
-                  periodEndDate = new Date(year, periodIndex + 1, 0);
-              } else if (periodType === 'Quarterly') {
-                  periodStartDate = new Date(year, periodIndex * 3, 1);
-                  periodEndDate = new Date(year, periodIndex * 3 + 3, 0);
-              } else { // Yearly
-                  periodStartDate = new Date(year, 0, 1);
-                  periodEndDate = new Date(year, 11, 31);
-              }
-
-              // Skip if the period is entirely before the seed start date or entirely after the seed end date
-              if (periodEndDate < startDate || periodStartDate > endDate) {
-                  continue;
-              }
-              // Adjust start/end dates if they partially overlap the seed range
-              if (periodStartDate < startDate) periodStartDate = startDate;
-              if (periodEndDate > endDate) periodEndDate = endDate;
-
-
-              for (const category of categories) {
-                  // Base allocation slightly higher than average random expense for that category
-                  const baseAllocation = {
-                      fuel: 600, maintenance: 700, salaries: 4000, utilities: 500, equipment: 1200,
-                      office: 200, rent: 2000, marketing: 800, insurance: 1000, taxes: 1500
-                  }[category] || 500; // Default base
-
-                  let multiplier = 1;
-                  if (periodType === 'Quarterly') multiplier = 3;
-                  if (periodType === 'Yearly') multiplier = 12;
-
-                  // Add variability (+/- 20%)
-                  const allocatedAmount = Math.round(baseAllocation * multiplier * (0.8 + Math.random() * 0.4));
-
-                  budgets.push({
-                      category,
-                      periodType,
-                      periodStartDate: new Date(periodStartDate),
-                      periodEndDate: new Date(periodEndDate),
-                      allocatedAmount,
-                      notes: randomElement(budgetNotes[category] || [`Budget for ${category}`]),
-                      createdBy: financialManager._id
-                  });
-              }
-          }
-      }
-  }
-
-  if (budgets.length > 0) {
-      await Budget.insertMany(budgets);
-  }
-  console.log(`Generated ${await Budget.countDocuments()} budgets.`);
-}
-
-async function ensurePayrollAndAttendance(staffUsers, startDate, endDate) {
-  console.log(`Generating payroll & attendance from ${startDate.toDateString()} to ${endDate.toDateString()}...`);
-  await PayrollLog.deleteMany({});
-  await Attendance.deleteMany({});
-  const payrollLogs = [];
-  const attendanceRecords = [];
-  const attendanceStatuses = ['Present', 'Absent', 'Late', 'On Leave', 'Half-day'];
-
-  for (const staff of staffUsers) {
-    let monthStart = new Date(startDate.getFullYear(), startDate.getMonth(), 1);
-
-    while (monthStart <= endDate) {
-      const monthEnd = new Date(monthStart.getFullYear(), monthStart.getMonth() + 1, 0);
-      const actualMonthEnd = monthEnd > endDate ? endDate : monthEnd; // Cap at seed end date
-
-      // Determine status based on model enum and DEMO_CURRENT_DATE
-      let payrollStatus;
-      if (actualMonthEnd > DEMO_CURRENT_DATE) {
-          payrollStatus = 'Pending Calculation'; // Future logs are pending calculation
-      } else {
-          // Past/Present logs: Mostly Paid, some Pending Payment
-          const randomStatus = Math.random();
-          if (randomStatus < 0.8) payrollStatus = 'Paid'; // 80% Paid
-          else payrollStatus = 'Pending Payment'; // 20% Pending Payment
-      }
-
-      // PayrollLog (one per staff per month)
-      const baseSalary = randomNumber(2000, 4000);
-      const hoursWorked = randomNumber(150, 170);
-      const overtimeHours = randomNumber(0, 15);
-      const overtimeRate = randomNumber(15, 25);
-      const bonusAmount = Math.random() < 0.1 ? randomNumber(50, 300) : 0;
-      const deductions = [
-          { name: 'Tax', amount: randomNumber(100, 400) }, // Use 'name' instead of 'label'
-          { name: 'Insurance', amount: randomNumber(50, 150) } // Use 'name' instead of 'label'
-      ];
-      const totalDeductions = deductions.reduce((sum, d) => sum + d.amount, 0);
-      const netPay = baseSalary + (overtimeHours * overtimeRate) + bonusAmount - totalDeductions;
-
-      payrollLogs.push({
-        staff: staff._id,
-        payPeriodStart: new Date(monthStart),
-        payPeriodEnd: new Date(actualMonthEnd),
-        baseSalary: baseSalary,
-        hoursWorked: hoursWorked,
-        overtimeHours: overtimeHours,
-        overtimeRate: overtimeRate,
-        bonusAmount: bonusAmount,
-        deductions: deductions,
-        status: payrollStatus, // Use corrected status enum
-        netPay: Math.max(0, netPay), // Ensure netPay is not negative
-        paymentDate: payrollStatus === 'Paid' ? addDays(actualMonthEnd, randomNumber(1, 5)) : null, // Set payment date if Paid
-        generatedDate: new Date(actualMonthEnd), // Assume generated at period end
-      });
-
-      // Attendance (simulate weekdays within the month)
-      let dayRunner = new Date(monthStart);
-      while (dayRunner <= actualMonthEnd) {
-        const dayOfWeek = dayRunner.getDay();
-        if (dayOfWeek !== 0 && dayOfWeek !== 6) { // Skip weekends (Sunday=0, Saturday=6)
-          const status = randomElement(attendanceStatuses);
-          let checkInTime = null;
-          let checkOutTime = null;
-          let notes = '';
-
-          // Only create an attendance record if the status implies attendance
-          if (status === 'Present' || status === 'Late' || status === 'Half-day') {
-            const startHour = (status === 'Late') ? randomNumber(8, 9) : 8; // Late starts 8-9, others 8
-            const startMinute = randomNumber(0, 59);
-            checkInTime = new Date(dayRunner);
-            checkInTime.setHours(startHour, startMinute, 0, 0);
-
-            let endHour, endMinute;
-            if (status === 'Half-day') {
-                endHour = startHour + 4; // Approx 4 hours later
-                endMinute = randomNumber(0, 59);
-                notes = 'Left early for appointment.';
-            } else {
-                endHour = randomNumber(16, 17); // End between 4 PM and 5 PM
-                endMinute = randomNumber(0, 59);
-            }
-            checkOutTime = new Date(dayRunner);
-            checkOutTime.setHours(endHour, endMinute, 0, 0);
-
-            // Ensure checkout is after checkin
-            if (checkOutTime <= checkInTime) {
-                 checkOutTime = addHours(checkInTime, status === 'Half-day' ? 4 : 8);
-                 checkOutTime.setMinutes(randomNumber(0, 59));
-            }
-
-            attendanceRecords.push({
-              staff: staff._id,
-              date: new Date(dayRunner), // Just the date part
-              checkInTime: checkInTime, // Will not be null here
-              checkOutTime: checkOutTime,
-              status: status,
-              notes: notes,
-              // totalHours will be calculated by backend/model
-            });
-          } else if (status === 'On Leave') {
-            // Optionally log leave days elsewhere if needed, but don't create Attendance doc
-            // console.log(`Staff ${staff.email} on leave on ${dayRunner.toDateString()}`);
-          } else { // Absent
-            // Optionally log absences elsewhere, but don't create Attendance doc
-            // console.log(`Staff ${staff.email} absent on ${dayRunner.toDateString()}`);
-          }
-        }
-        dayRunner = addDays(dayRunner, 1);
-      }
-
-      monthStart = addMonths(monthStart, 1);
-    }
-  }
-
-  if (payrollLogs.length > 0) {
-      await PayrollLog.insertMany(payrollLogs);
-  }
-  if (attendanceRecords.length > 0) {
-      await Attendance.insertMany(attendanceRecords);
-  }
-  console.log(`Generated ${await PayrollLog.countDocuments()} payroll logs.`);
-  console.log(`Generated ${await Attendance.countDocuments()} attendance records.`);
-}
-
-// Utility to add hours, handling date changes
-function addHours(date, hours) {
-    const result = new Date(date);
-    result.setTime(result.getTime() + hours * 60 * 60 * 1000);
-    return result;
-}
-
-
-async function ensurePerformance(staffUsers, adminUser, startDate, endDate) {
-  console.log(`Generating performance reviews from ${startDate.toDateString()} to ${endDate.toDateString()}...`);
-  await Performance.deleteMany({});
-  const reviews = [];
-  const feedbackComments = [
-      'Exceeds expectations in all areas.', 'Consistently meets expectations.', 'Solid performance, room for growth in communication.',
-      'Needs improvement in meeting deadlines.', 'Excellent teamwork and initiative.', 'Requires more attention to detail.'
-  ];
-  const goalsList = [
-      ['Improve productivity by 10%'], ['Complete project X on time'], ['Enhance communication skills'],
-      ['Learn new technology Y'], ['Mentor junior staff member'], ['Reduce errors in reports']
-  ];
-
-  for (const staff of staffUsers) {
-    // Generate reviews quarterly
-    let reviewPeriodStart = new Date(startDate.getFullYear(), Math.floor(startDate.getMonth() / 3) * 3, 1); // Start of the quarter
-
-    while (reviewPeriodStart <= endDate) {
-      const reviewPeriodEnd = addMonths(reviewPeriodStart, 3);
-      const actualReviewPeriodEnd = reviewPeriodEnd > endDate ? endDate : new Date(reviewPeriodEnd - 1); // End of the quarter, capped at seed end date
-
-      // Only create review if the period has passed relative to DEMO_CURRENT_DATE
-      if (actualReviewPeriodEnd <= DEMO_CURRENT_DATE) {
-          const productivity = randomNumber(3, 5); // Scale 1-5
-          const quality = randomNumber(3, 5);
-          const reliability = randomNumber(3, 5);
-          const communication = randomNumber(3, 5);
-          const initiative = randomNumber(3, 5);
-          const overallRating = parseFloat(((productivity + quality + reliability + communication + initiative) / 5).toFixed(1)); // Average rating
-
-          reviews.push({
-            staff: staff._id,
-            reviewPeriod: { startDate: new Date(reviewPeriodStart), endDate: new Date(actualReviewPeriodEnd) },
-            metrics: { productivity, quality, reliability, communication, initiative },
-            overallRating: overallRating,
-            feedback: randomElement(feedbackComments),
-            goals: randomElement(goalsList),
-            reviewer: adminUser._id, // Assume admin does reviews
-            reviewDate: addDays(actualReviewPeriodEnd, randomNumber(1, 10)), // Review happens shortly after period ends
-            createdAt: addDays(actualReviewPeriodEnd, randomNumber(1, 10)), // Align createdAt with reviewDate
-            updatedAt: addDays(actualReviewPeriodEnd, randomNumber(1, 10)),
-          });
-      }
-      reviewPeriodStart = reviewPeriodEnd; // Move to the start of the next quarter
-    }
-  }
-
-  if (reviews.length > 0) {
-      await Performance.insertMany(reviews);
-  }
-  console.log(`Generated ${await Performance.countDocuments()} performance reviews.`);
-}
-
-async function ensureComplaints(customers, staffUsers, adminUser, startDate, endDate) {
-  console.log(`Generating complaints from ${startDate.toDateString()} to ${endDate.toDateString()}...`);
-  await Complaint.deleteMany({});
-  const complaints = [];
-  const subjects = [
-      'Missed pickup', 'Billing inquiry', 'Damaged bin', 'Service request', 'Website issue',
-      'Staff behavior', 'Recycling confusion', 'Subscription change request', 'Payment issue'
-  ];
-  // Corrected statuses to match the Complaint model enum
-  const statuses = ['Open', 'In Progress', 'Resolved', 'Closed'];
-  const staffAndAdmin = [...staffUsers, adminUser]; // Combine for assignment
-
-  const numComplaints = customers.length * 2; // Generate ~2 complaints per customer over the period
-
-  for (let i = 0; i < numComplaints; i++) {
-      const customer = randomElement(customers);
-      const createdAt = randomDate(startDate, endDate);
-      let status;
-      let resolvedAt = null;
-      let assignedAdmin = null;
-
-      // Determine status based on creation date relative to DEMO_CURRENT_DATE
-      const daysSinceCreation = (DEMO_CURRENT_DATE - createdAt) / (1000 * 60 * 60 * 24);
-
-      // Use 'Open' instead of 'New'
-      if (daysSinceCreation < 2) status = 'Open'; // Created very recently
-      else if (daysSinceCreation < 7) status = randomElement(['Open', 'In Progress']); // Within a week
-      else if (daysSinceCreation < 30) status = randomElement(['In Progress', 'Resolved']); // Within a month
-      else status = randomElement(['Resolved', 'Closed']); // Older complaints
-
-      if (status === 'Resolved' || status === 'Closed') {
-          resolvedAt = addDays(createdAt, randomNumber(1, 30)); // Resolved/Closed within 30 days
-          if (resolvedAt > DEMO_CURRENT_DATE) resolvedAt = DEMO_CURRENT_DATE; // Cap resolution date
-      }
-
-      // Assign admin/staff more often if not Open
-      if (status !== 'Open' && staffAndAdmin.length > 0) {
-          assignedAdmin = randomElement(staffAndAdmin)._id;
-      }
-
-      // Ensure financial complaints exist for the manager dashboard
-      let subject = randomElement(subjects);
-      if (Math.random() < 0.2) { // 20% chance of being a financial complaint
-          subject = randomElement(['Billing Issue', 'Payment Problem', 'Subscription Query']);
-      }
-
-
-      complaints.push({
-          user: customer._id,
-          subject: subject,
-          description: `Seeded complaint about ${subject}. User ${customer.name} reported on ${createdAt.toLocaleDateString()}. Needs attention.`,
-          status: status,
-          createdAt: new Date(createdAt),
-          updatedAt: resolvedAt || new Date(createdAt), // Update time is resolution time or creation time
-          resolvedAt: resolvedAt,
-          assignedAdmin: assignedAdmin,
-      });
-  }
-
-  if (complaints.length > 0) {
-      await Complaint.insertMany(complaints);
-  }
-  console.log(`Generated ${await Complaint.countDocuments()} complaints.`);
-}
-
-async function ensureDocuments(users, startDate, endDate) {
-  console.log(`Generating documents from ${startDate.toDateString()} to ${endDate.toDateString()}...`);
-  await Document.deleteMany({});
-  const documents = [];
-  // Corrected docTypes to match the Document model enum
-  const docTypes = ['ID Card', 'Utility Bill', 'Driver License', 'Passport', 'Other'];
-  const allUsers = await User.find({}); // Include staff, admin etc. for document assignment
-
-  const numDocs = allUsers.length * 3; // ~3 docs per user
-
-  for (let i = 0; i < numDocs; i++) {
-      const user = randomElement(allUsers);
-      const uploadedAt = randomDate(startDate, endDate);
-      const docType = randomElement(docTypes);
-      // Use 'name' instead of 'fileName'
-      const docName = `${docType.replace(/\s+/g, '_')}_${user.name.replace(/\s+/g, '_')}_${uploadedAt.toISOString().split('T')[0]}.pdf`;
-
-      // Simulate verification status based on upload date
-      let verificationStatus = 'Pending';
-      const daysSinceUpload = (DEMO_CURRENT_DATE - uploadedAt) / (1000 * 60 * 60 * 24);
-      if (daysSinceUpload > 14) verificationStatus = randomElement(['Verified', 'Rejected']); // Older docs likely processed
-      else if (daysSinceUpload > 3) verificationStatus = randomElement(['Pending', 'Verified']); // Medium age
-
-      const verificationDate = verificationStatus === 'Verified' || verificationStatus === 'Rejected' ? addDays(uploadedAt, randomNumber(1, 14)) : null;
-      const verifiedBy = verificationStatus === 'Verified' || verificationStatus === 'Rejected' ? randomElement(allUsers.filter(u => u.role === 'admin' || u.role === 'financial_manager'))?._id : null;
-      // Use 'verificationNotes' instead of 'notes'
-      const verificationNotes = verificationStatus === 'Rejected' ? 'Document unclear or invalid.' : '';
-
-      documents.push({
-          user: user._id,
-          name: docName, // Use 'name'
-          filePath: `/uploads/documents/${docName}`, // Simulated path using docName
-          mimeType: 'application/pdf', // Use 'mimeType' instead of 'fileType'
-          size: randomNumber(10000, 2000000), // Add random size (10KB - 2MB)
-          type: docType, // Use 'type' instead of 'documentType'
-          uploadedAt: new Date(uploadedAt),
-          verificationStatus: verificationStatus,
-          verifiedBy: verifiedBy,
-          verificationDate: verificationDate,
-          verificationNotes: verificationNotes, // Use 'verificationNotes'
-      });
-  }
-
-  if (documents.length > 0) {
-      await Document.insertMany(documents);
-  }
-  console.log(`Generated ${await Document.countDocuments()} documents.`);
-}
-
-// Main Seeding Function
-async function seedDatabase(startDate, endDate) {
-  try {
-    console.log('Connecting to MongoDB...');
-    const MONGODB_URI = config.mongodbUri;
-    if (!MONGODB_URI) {
-      throw new Error("MONGODB_URI not configured in config/index.js or .env file.");
-    }
-    await mongoose.connect(MONGODB_URI);
-    console.log('MongoDB Connected.');
-    console.log(`Seeding data from ${startDate.toDateString()} to ${endDate.toDateString()}`);
-    console.log(`Relative to DEMO_CURRENT_DATE: ${DEMO_CURRENT_DATE.toDateString()}`);
-
-    // 1. Clear existing data
-    await cleanSlate();
-
-    // 2. Ensure base data exists (Users, Plans)
-    const coreUsers = await ensureUsers(); // Gets admin, finance, staff, customer
-    const allPlans = await ensurePlans();
-
-    // Fetch all users needed for seeding different collections
-    const customers = await User.find({ role: 'customer' });
-    const staffUsers = await User.find({ role: 'staff' });
-    const adminUser = coreUsers.admin;
-    const financialManager = coreUsers.financial_manager;
-
-    if (!financialManager) {
-        console.error("CRITICAL: Financial Manager user not found or created. Aborting seed.");
-        return;
-    }
-     if (!adminUser) {
-        console.error("CRITICAL: Admin user not found or created. Aborting seed.");
-        return;
-    }
-    if (customers.length === 0) {
-        console.error("CRITICAL: No customer users found or created. Aborting seed.");
-        return;
-    }
-     if (staffUsers.length === 0) {
-        console.warn("Warning: No staff users found or created. Some features might lack data (Payroll, Attendance, Performance).");
-    }
-
-
-    // 3. Seed transactional data using the date range
-    await ensureSubscriptions(customers, allPlans, startDate, endDate);
-    await ensurePayments(customers, allPlans, startDate, endDate); // Pass customers for standalone payments
-    await ensureExpenses(financialManager, startDate, endDate);
-    await ensureBudgets(financialManager, startDate, endDate);
-
-    if (staffUsers.length > 0) {
-        await ensurePayrollAndAttendance(staffUsers, startDate, endDate);
-        await ensurePerformance(staffUsers, adminUser, startDate, endDate);
-    }
-
-    await ensureComplaints(customers, staffUsers, adminUser, startDate, endDate);
-    await ensureDocuments([...customers, ...staffUsers, adminUser, financialManager], startDate, endDate); // Seed docs for all user types
-
-    console.log('\n--- Database Seeding Completed Successfully ---');
-
-  } catch (error) {
-    console.error('\n--- Error during database seeding ---');
-    console.error(error);
-    process.exit(1); // Exit with error code
-  } finally {
-    if (mongoose.connection.readyState !== 0) {
-      await mongoose.connection.close();
-      console.log('Database connection closed.');
-    }
-  }
-}
-
-// Execute the seeding process
-seedDatabase(SEED_START_DATE, DEMO_CURRENT_DATE);
diff --git a/backend/src/scripts/seed/seedFinancials.js b/backend/src/scripts/seed/seedFinancials.js
deleted file mode 100644
index 35832b8..0000000
--- a/backend/src/scripts/seed/seedFinancials.js
+++ /dev/null
@@ -1,785 +0,0 @@
-/**
- * Seed Financial Data Script
- * 
- * This script populates the database with realistic financial data for the SmartBin application.
- * It creates:
- * 1. Subscription plans (if they don't exist)
- * 2. Subscription records for users
- * 3. Payment transactions
- * 4. Expense records
- * 
- * Use for development, testing, and demo purposes.
- */
-
-const mongoose = require('mongoose');
-const path = require('path');
-require('dotenv').config({ path: path.resolve(__dirname, '../../../.env') });
-const config = require('../../config'); // Fixed import path to config
-
-// Import models
-const User = require('../../models/User');
-const SubscriptionPlan = require('../../models/SubscriptionPlan');
-const UserSubscription = require('../../models/UserSubscription');
-const Payment = require('../../models/Payment');
-const Expense = require('../../models/Expense');
-const Complaint = require('../../models/Complaint');
-const Budget = require('../../models/Budget');
-
-// Utility function to generate a random date between two dates
-const randomDate = (start, end) => {
-  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
-};
-
-// Utility function to generate random number between min and max
-const randomNumber = (min, max) => {
-  return Math.floor(Math.random() * (max - min + 1) + min);
-};
-
-// Utility function to get a random element from an array
-const randomElement = (array) => {
-  return array[Math.floor(Math.random() * array.length)];
-};
-
-// Utility function to add days to a date
-const addDays = (date, days) => {
-  const result = new Date(date);
-  result.setDate(result.getDate() + days);
-  return result;
-};
-
-// Utility function to add months to a date
-const addMonths = (date, months) => {
-  const result = new Date(date);
-  result.setMonth(result.getMonth() + months);
-  return result;
-};
-
-// Main seeding function
-const seedFinancialData = async () => {
-  try {
-    // Connect to MongoDB
-    console.log('Connecting to MongoDB...');
-    // const MONGODB_URI = process.env.MONGODB_URI; // Replaced with config
-    const MONGODB_URI = config.mongodbUri; // Now config is defined
-    if (!MONGODB_URI) {
-      throw new Error("MONGODB_URI not configured in config/index.js or .env file. Please check your .env file.");
-    }
-    
-    await mongoose.connect(MONGODB_URI);
-    console.log('MongoDB Connected');
-
-    // Get financial manager user (needed for expense creation)
-    const financialManager = await User.findOne({ role: 'financial_manager' });
-    if (!financialManager) {
-      console.log('No financial manager found. Please run createTestUsers.js first.');
-      return;
-    }
-    // Get admin user (needed for assigning complaints)
-    const adminUser = await User.findOne({ role: 'admin' });
-    // Get staff users (needed for assigning complaints)
-    const staffUsers = await User.find({ role: 'staff' });
-
-    // Get all users (residents/customers)
-    const users = await User.find({ role: { $ne: 'admin', $ne: 'financial_manager', $ne: 'staff' } });
-    if (users.length === 0) {
-      // Create some test customer users if none exist
-      console.log('No customer users found. Creating some test customers...');
-      
-      const customerNames = [
-        'John Smith', 'Emma Wilson', 'Michael Brown', 'Sophia Davis', 
-        'William Johnson', 'Olivia Taylor', 'James Miller', 'Ava Anderson',
-        'Robert Thomas', 'Isabella Jackson', 'Daniel White', 'Mia Harris',
-        'David Martinez', 'Charlotte Thompson', 'Joseph Garcia', 'Amelia Robinson'
-      ];
-      
-      for (let i = 0; i < customerNames.length; i++) {
-        const newUser = new User({
-          name: customerNames[i],
-          email: customerNames[i].toLowerCase().replace(' ', '.') + '@example.com',
-          password: '$2a$10$XA9UJn3AJlszUVCjsxAN1uhkZ8qzBqOn9jBp0ZBOg5AfU9Hgu5P5W', // Password123!
-          role: 'customer', // Updated role
-          createdAt: randomDate(new Date(2024, 0, 1), new Date())
-        });
-        
-        await newUser.save();
-        console.log(`Created test customer: ${newUser.name}`);
-      }
-      
-      // Fetch the newly created users
-      users.push(...await User.find({ role: 'customer' })); // Updated role
-    }
-
-    // 1. Create subscription plans if they don't exist
-    console.log('Setting up subscription plans...');
-    
-    const subscriptionPlans = [
-      {
-        name: 'Basic',
-        price: '49.99',
-        description: 'Basic waste collection service with weekly pickup and app access.',
-        duration: 'Monthly'
-      },
-      {
-        name: 'Standard',
-        price: '79.99',
-        description: 'Enhanced service with twice-weekly pickup, recycling options, and advanced app features.',
-        duration: 'Monthly'
-      },
-      {
-        name: 'Premium',
-        price: '99.99',
-        description: 'Premium service with unlimited pickup, priority service, recycling and composting options, and full app features.',
-        duration: 'Monthly'
-      },
-      {
-        name: 'Business',
-        price: '199.99',
-        description: 'Comprehensive waste management solution for small to medium businesses with daily collection and dedicated support.',
-        duration: 'Monthly'
-      }
-    ];
-    
-    // Create plans if they don't exist
-    for (const plan of subscriptionPlans) {
-      const existingPlan = await SubscriptionPlan.findOne({ name: plan.name });
-      
-      if (existingPlan) {
-        console.log(`Subscription plan ${plan.name} already exists.`);
-      } else {
-        await SubscriptionPlan.create(plan);
-        console.log(`Created subscription plan: ${plan.name}`);
-      }
-    }
-    
-    const allPlans = await SubscriptionPlan.find({}); // Ensure plans are fetched after creation/check
-
-    // 2. Create user subscriptions
-    console.log('Creating user subscriptions...');
-    
-    // Get current date for subscription calculations
-    const currentDate = new Date(2025, 3, 26); // Set a fixed current date for consistency (April 26, 2025)
-    const currentMonthStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
-    const currentYearStart = new Date(currentDate.getFullYear(), 0, 1);
-
-    console.log(`Current Date set to: ${currentDate.toDateString()}`);
-    console.log(`Generating data for the period up to ${currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}...`);
-
-    // Clear existing user subscriptions 
-    await UserSubscription.deleteMany({});
-    await SubscriptionPlan.deleteMany({});
-    
-    // --- Ensure Roles Exist ---
-    const roles = ['admin', 'financial_manager', 'staff', 'customer'];
-    for (const role of roles) {
-      const existingRole = await User.findOne({ role });
-      if (!existingRole) {
-        const newUser = new User({
-          name: `${role} User`,
-          email: `${role}@example.com`,
-          password: 'Password123!',
-          role,
-          createdAt: new Date()
-        });
-        await newUser.save();
-        console.log(`Created test ${role} user: ${newUser.name}`);
-      }
-    }
-
-    // --- Create Subscription Plans ---
-    // Removed duplicate declaration of subscriptionPlans
-    // const subscriptionPlans = [...]; 
-
-    // Create plans if they don't exist
-    for (const plan of subscriptionPlans) {
-      const existingPlan = await SubscriptionPlan.findOne({ name: plan.name });
-      
-      if (existingPlan) {
-        console.log(`Subscription plan ${plan.name} already exists.`);
-      } else {
-        await SubscriptionPlan.create(plan);
-        console.log(`Created subscription plan: ${plan.name}`);
-      }
-    }
-
-    // --- Create Users and Subscriptions ---
-    for (const user of users) {
-      // Randomly select a plan with weighted distribution
-      // Premium and Business plans are less common
-      const planWeights = [0.4, 0.3, 0.2, 0.1]; // Probabilities for Basic, Standard, Premium, Business
-      const randomValue = Math.random();
-      let cumulativeProbability = 0;
-      let selectedPlanIndex = 0;
-      
-      for (let i = 0; i < planWeights.length; i++) {
-        cumulativeProbability += planWeights[i];
-        if (randomValue <= cumulativeProbability) {
-          selectedPlanIndex = i;
-          break;
-        }
-      }
-      
-      const selectedPlan = allPlans[selectedPlanIndex];
-      
-      // Random start date between 6 months ago and now
-      const startDate = randomDate(currentYearStart, currentDate);
-      
-      // Determine duration based on plan
-      let durationInMonths = 1; // Default monthly
-      
-      if (Math.random() > 0.7) {
-        // 30% chance of longer subscription
-        if (selectedPlan.duration === 'Monthly') {
-          // Some users choose longer terms for monthly plans
-          durationInMonths = randomElement([3, 6, 12]);
-        }
-      }
-      
-      // Calculate end and next billing dates
-      const endDate = addMonths(startDate, durationInMonths);
-      let nextBillingDate = new Date(startDate);
-      
-      // If the subscription would have already ended, create a renewed one
-      if (endDate < currentDate) {
-        // This is a renewal
-        const renewalCycles = Math.floor((currentDate - startDate) / (durationInMonths * 30 * 24 * 60 * 60 * 1000)) + 1;
-        nextBillingDate = addMonths(startDate, durationInMonths * renewalCycles);
-      }
-      
-      // Create the subscription
-      const subscription = new UserSubscription({
-        user: user._id,
-        subscriptionPlan: selectedPlan._id,
-        startDate,
-        endDate: addMonths(nextBillingDate, durationInMonths),
-        status: 'active',
-        autoRenew: Math.random() > 0.1, // 90% have auto-renew on
-        lastBillingDate: startDate,
-        nextBillingDate
-      });
-      
-      await subscription.save();
-      console.log(`Created subscription for user ${user.name}: ${selectedPlan.name} plan`);
-      
-      // Update subscription count on the plan
-      await SubscriptionPlan.findByIdAndUpdate(
-        selectedPlan._id, 
-        { $inc: { subscriberCount: 1 } }
-      );
-    } // End user creation loop
-
-    // --- Guarantee some subscriptions started THIS MONTH ---
-    console.log('\\nEnsuring some subscriptions started this month...');
-    const currentMonthUsers = await User.find({ role: 'customer' }).limit(3); // Get a few customers
-    const currentMonthPlan = await SubscriptionPlan.findOne({ name: 'Standard Monthly' }); // Use a specific plan
-
-    if (currentMonthUsers.length > 0 && currentMonthPlan) {
-      for (const user of currentMonthUsers) {
-        // Check if user already has an active sub this month to avoid duplicates
-        const existingSub = await UserSubscription.findOne({ 
-          user: user._id, 
-          startDate: { $gte: currentMonthStart, $lte: currentDate } 
-        });
-        
-        if (!existingSub) {
-          const newSubStartDate = addDays(currentMonthStart, Math.floor(Math.random() * (currentDate.getDate()))); // Random day this month
-          const newSubEndDate = addMonths(newSubStartDate, 1); // Assuming monthly plan
-          
-          const newUserSub = new UserSubscription({
-            user: user._id,
-            subscriptionPlan: currentMonthPlan._id,
-            startDate: newSubStartDate,
-            endDate: newSubEndDate,
-            status: 'active',
-            billingCycle: currentMonthPlan.duration,
-          });
-          await newUserSub.save();
-          console.log(`Created a new subscription for ${user.name} starting ${newSubStartDate.toLocaleDateString()}`);
-
-          // --- Also create a corresponding PAYMENT for this new subscription ---
-          const paymentForNewSub = new Payment({
-            user: user._id,
-            amount: currentMonthPlan.price,
-            paymentDate: newSubStartDate, // Pay on the start date
-            status: 'completed',
-            paymentMethod: randomElement(['credit_card', 'paypal']),
-            description: `Payment for ${currentMonthPlan.name} subscription`,
-            userSubscription: newUserSub._id // Link payment to the subscription
-          });
-          await paymentForNewSub.save();
-          console.log(`Created corresponding payment for ${user.name}'s new subscription.`);
-        }
-      }
-    } else {
-      console.log('Could not find users or Standard Monthly plan to guarantee current month subscriptions.');
-    }
-
-
-    // --- Generate Expenses ---
-    console.log('Generating expense records...');
-    
-    // Clear existing expenses
-    await Expense.deleteMany({});
-    
-    // Define expense categories and their relative frequencies and ranges
-    const expenseCategories = [
-      { category: 'fuel', frequency: 0.15, min: 200, max: 800 },
-      { category: 'maintenance', frequency: 0.15, min: 100, max: 1000 },
-      { category: 'salaries', frequency: 0.3, min: 1500, max: 5000 },
-      { category: 'utilities', frequency: 0.1, min: 300, max: 800 },
-      { category: 'equipment', frequency: 0.1, min: 200, max: 2000 },
-      { category: 'office', frequency: 0.05, min: 50, max: 300 },
-      { category: 'rent', frequency: 0.05, min: 1000, max: 3000 },
-      { category: 'marketing', frequency: 0.05, min: 200, max: 1500 },
-      { category: 'insurance', frequency: 0.03, min: 500, max: 2000 },
-      { category: 'taxes', frequency: 0.02, min: 500, max: 5000 },
-    ];
-    
-    // Expense descriptions for each category
-    const expenseDescriptions = {
-      fuel: ['Vehicle refueling', 'Truck fleet fuel', 'Collection vehicle diesel', 'Transportation fuel'],
-      maintenance: ['Vehicle maintenance', 'Equipment repair', 'Bin repair services', 'Facility maintenance', 'Machinery servicing'],
-      salaries: ['Staff payroll', 'Employee benefits', 'Contractor payments', 'Overtime payments', 'Management salaries'],
-      utilities: ['Electricity bill', 'Water services', 'Internet and phone', 'Gas bill', 'Waste facility utilities'],
-      equipment: ['New sorting equipment', 'Replacement bins', 'Office equipment', 'Safety equipment', 'Processing machinery'],
-      office: ['Office supplies', 'Stationery', 'Cleaning supplies', 'Break room supplies', 'Small equipment'],
-      rent: ['Office space rent', 'Warehouse rental', 'Storage facility', 'Equipment leasing', 'Temporary space rental'],
-      marketing: ['Promotional materials', 'Digital advertising', 'Community outreach', 'Website maintenance', 'Marketing campaign'],
-      insurance: ['Vehicle insurance', 'Liability coverage', 'Property insurance', 'Worker compensation', 'Business insurance'],
-      taxes: ['Property tax', 'Business tax payment', 'Regulatory fees', 'Environmental compliance fees', 'Local taxes']
-    };
-    
-    // Generate monthly expenses for each category for the past 12 months up to the current month
-    // Ensure we cover the start of the current year and the last few months explicitly
-    const firstExpenseMonth = new Date(currentDate.getFullYear(), 0, 1); // Start from Jan of the current year
-
-    // Generate for Jan 2025 up to the current month (April 2025)
-    for (let monthOffset = 0; monthOffset <= currentDate.getMonth(); monthOffset++) {
-      const targetMonthDate = addMonths(firstExpenseMonth, monthOffset);
-      const daysInMonth = new Date(targetMonthDate.getFullYear(), targetMonthDate.getMonth() + 1, 0).getDate();
-      const monthEndDay = (targetMonthDate.getFullYear() === currentDate.getFullYear() && targetMonthDate.getMonth() === currentDate.getMonth())
-                          ? currentDate.getDate() // Use current day for the current month
-                          : daysInMonth; // Use last day for past months
-
-      console.log(`Generating expenses for ${targetMonthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}...`);
-
-      // For each expense category
-      for (const expenseCat of expenseCategories) {
-        // Create 2-5 expenses per category per month for richer data
-        const numExpenses = randomNumber(2, 5);
-        for (let i = 0; i < numExpenses; i++) {
-          const randomDay = randomNumber(1, monthEndDay); // Ensure date is within the valid range for the month
-          const expenseDate = new Date(targetMonthDate.getFullYear(), targetMonthDate.getMonth(), randomDay);
-          
-          // Skip if the generated date is in the future relative to currentDate (shouldn't happen with logic above, but good safeguard)
-          if (expenseDate > currentDate) continue;
-
-          const expense = new Expense({
-            category: expenseCat.category,
-            amount: randomNumber(expenseCat.min, expenseCat.max),
-            description: randomElement(expenseDescriptions[expenseCat.category]),
-            date: expenseDate,
-            createdBy: financialManager._id, // Assign to the financial manager
-            status: randomElement(['pending', 'approved', 'rejected']), // Random status
-            paymentMethod: randomElement(['company_account', 'credit_card', 'bank_transfer'])
-          });
-          await expense.save();
-        }
-      }
-    }
-
-    // --- Generate Budget Allocations ---
-    console.log('\nGenerating budget allocations...');
-    
-    // Clear existing budgets
-    await Budget.deleteMany({});
-    
-    // Define budget notes for different categories
-    const budgetNotes = {
-      fuel: ['Allocated for fleet operations', 'Vehicle fuel budgeting', 'Transportation cost allocation'],
-      maintenance: ['Equipment upkeep and repairs', 'Preventive maintenance allocation', 'Repair service budget'],
-      salaries: ['Staff compensation planning', 'Employee salary allocation', 'Payroll budget planning'],
-      utilities: ['Facility operational costs', 'Utilities expense planning', 'Service infrastructure budget'],
-      equipment: ['New equipment acquisition', 'Equipment upgrade planning', 'Technology investment'],
-      office: ['Office operational expenses', 'Administrative supply budget', 'Workplace essentials'],
-      rent: ['Facility leasing costs', 'Space rental allocation', 'Property usage budget'],
-      marketing: ['Promotional campaign funding', 'Marketing initiative budget', 'Brand development allocation'],
-      insurance: ['Risk management allocation', 'Insurance policy budget', 'Coverage planning'],
-      taxes: ['Regulatory fee allocation', 'Tax obligation planning', 'Compliance cost budget']
-    };
-    
-    // Define monthly average budget target for different categories based on expense ranges
-    // slightly higher than the average expense to account for planning and contingencies
-    const monthlyTargetsByCategory = {
-      fuel: 600,
-      maintenance: 800,
-      salaries: 4000,
-      utilities: 600, 
-      equipment: 1500,
-      office: 200,
-      rent: 2500,
-      marketing: 1000,
-      insurance: 1500,
-      taxes: 3000
-    };
-    
-    // Generate Monthly budgets for the current year (Jan-Dec 2025)
-    console.log('Creating monthly budgets for 2025...');
-    
-    // Create monthly budgets starting from January through December 2025
-    const monthlyPeriodTypes = ['Monthly'];
-    const startMonth = 0; // January
-    const endMonth = 11; // December
-    
-    for (let monthIdx = startMonth; monthIdx <= endMonth; monthIdx++) {
-      // Create a monthly budget for each category
-      for (const expenseCat of expenseCategories) {
-        const category = expenseCat.category;
-        const monthStartDate = new Date(currentDate.getFullYear(), monthIdx, 1); // 1st day of month
-        const monthEndDate = new Date(currentDate.getFullYear(), monthIdx + 1, 0); // Last day of month
-        
-        // Skip if the month is in the past compared to the current date
-        if (monthEndDate < currentMonthStart) continue;
-        
-        // Add some variability to the budget (±10% of target)
-        const variabilityFactor = 0.9 + Math.random() * 0.2; // 0.9 to 1.1
-        const baseAmount = monthlyTargetsByCategory[category] || 1000; // Default to 1000 if category not defined
-        const allocatedAmount = Math.round(baseAmount * variabilityFactor);
-        
-        const budget = new Budget({
-          category: category,
-          periodType: 'Monthly',
-          periodStartDate: monthStartDate,
-          periodEndDate: monthEndDate,
-          allocatedAmount: allocatedAmount,
-          notes: randomElement(budgetNotes[category] || [`Budget for ${category}`]),
-          createdBy: financialManager._id
-        });
-        
-        await budget.save();
-      }
-      console.log(`Created monthly budgets for ${new Date(currentDate.getFullYear(), monthIdx, 1).toLocaleString('default', { month: 'long', year: 'numeric' })}`);
-    }
-    
-    // Generate Quarterly budgets for the current year (Q1-Q4 2025)
-    console.log('\nCreating quarterly budgets for 2025...');
-    
-    const quarters = [
-      {name: 'Q1', startMonth: 0, endMonth: 2},
-      {name: 'Q2', startMonth: 3, endMonth: 5},
-      {name: 'Q3', startMonth: 6, endMonth: 8},
-      {name: 'Q4', startMonth: 9, endMonth: 11}
-    ];
-    
-    for (const quarter of quarters) {
-      const quarterStartDate = new Date(currentDate.getFullYear(), quarter.startMonth, 1);
-      const quarterEndDate = new Date(currentDate.getFullYear(), quarter.endMonth + 1, 0);
-      
-      // Skip if the quarter is completely in the past
-      if (quarterEndDate < currentMonthStart) continue;
-      
-      // Create quarterly budget for each expense category
-      for (const expenseCat of expenseCategories) {
-        const category = expenseCat.category;
-        
-        // Calculate quarterly budget (3x monthly with some economies of scale)
-        const monthlyBase = monthlyTargetsByCategory[category] || 1000;
-        const quarterlyBase = monthlyBase * 3 * 0.95; // 5% savings for quarterly planning
-        // Add variability (±8%)
-        const variabilityFactor = 0.92 + Math.random() * 0.16; // 0.92 to 1.08
-        const allocatedAmount = Math.round(quarterlyBase * variabilityFactor);
-        
-        const budget = new Budget({
-          category: category,
-          periodType: 'Quarterly',
-          periodStartDate: quarterStartDate,
-          periodEndDate: quarterEndDate,
-          allocatedAmount: allocatedAmount,
-          notes: `${quarter.name} ${currentDate.getFullYear()} planning for ${category} expenses`,
-          createdBy: financialManager._id
-        });
-        
-        await budget.save();
-      }
-      console.log(`Created quarterly budgets for ${quarter.name} ${currentDate.getFullYear()}`);
-    }
-    
-    // Generate Yearly budgets for the current year (2025)
-    console.log('\nCreating yearly budgets for 2025...');
-    
-    const yearStartDate = new Date(currentDate.getFullYear(), 0, 1);
-    const yearEndDate = new Date(currentDate.getFullYear(), 11, 31);
-    
-    // Create yearly budget for each expense category
-    for (const expenseCat of expenseCategories) {
-      const category = expenseCat.category;
-      
-      // Calculate yearly budget (12x monthly with more significant economies of scale)
-      const monthlyBase = monthlyTargetsByCategory[category] || 1000;
-      const yearlyBase = monthlyBase * 12 * 0.9; // 10% savings for yearly planning
-      // Add variability (±5%)
-      const variabilityFactor = 0.95 + Math.random() * 0.1; // 0.95 to 1.05
-      const allocatedAmount = Math.round(yearlyBase * variabilityFactor);
-      
-      const budget = new Budget({
-        category: category,
-        periodType: 'Yearly',
-        periodStartDate: yearStartDate,
-        periodEndDate: yearEndDate,
-        allocatedAmount: allocatedAmount,
-        notes: `Annual budget planning for ${category} - ${currentDate.getFullYear()}`,
-        createdBy: financialManager._id
-      });
-      
-      await budget.save();
-    }
-    console.log(`Created yearly budgets for ${currentDate.getFullYear()}`);
-    
-    // Create some budgets for next year (2026) for planning purposes
-    console.log('\nCreating some budgets for next year (2026) for planning purposes...');
-    
-    const nextYearStartDate = new Date(currentDate.getFullYear() + 1, 0, 1);
-    const nextYearEndDate = new Date(currentDate.getFullYear() + 1, 11, 31);
-    
-    // Just create a few quarterly budgets for Q1 and Q2 of next year
-    const nextYearQuarters = [
-      {name: 'Q1', startMonth: 0, endMonth: 2},
-      {name: 'Q2', startMonth: 3, endMonth: 5}
-    ];
-    
-    for (const quarter of nextYearQuarters) {
-      const quarterStartDate = new Date(currentDate.getFullYear() + 1, quarter.startMonth, 1);
-      const quarterEndDate = new Date(currentDate.getFullYear() + 1, quarter.endMonth + 1, 0);
-      
-      // Only create for a subset of categories for next year (preliminary planning)
-      const planningCategories = ['fuel', 'salaries', 'rent', 'utilities'];
-      
-      for (const category of planningCategories) {
-        const monthlyBase = monthlyTargetsByCategory[category] || 1000;
-        // Add some inflation for next year (3-7%)
-        const inflationFactor = 1.03 + Math.random() * 0.04; 
-        const quarterlyBase = monthlyBase * 3 * inflationFactor;
-        const allocatedAmount = Math.round(quarterlyBase);
-        
-        const budget = new Budget({
-          category: category,
-          periodType: 'Quarterly',
-          periodStartDate: quarterStartDate,
-          periodEndDate: quarterEndDate,
-          allocatedAmount: allocatedAmount,
-          notes: `Preliminary ${quarter.name} ${currentDate.getFullYear() + 1} planning for ${category}`,
-          createdBy: financialManager._id
-        });
-        
-        await budget.save();
-      }
-      console.log(`Created preliminary quarterly budgets for ${quarter.name} ${currentDate.getFullYear() + 1}`);
-    }
-    
-    // Generate monthly payments for each plan for the past 12 months up to the current month
-    // Ensure we cover the start of the current year and the last few months explicitly
-    const firstPaymentMonth = new Date(currentDate.getFullYear(), 0, 1); // Start from Jan of the current year
-
-    // Generate for Jan 2025 up to the current month (April 2025)
-    for (let monthOffset = 0; monthOffset <= currentDate.getMonth(); monthOffset++) {
-      const targetMonthDate = addMonths(firstPaymentMonth, monthOffset);
-      const daysInMonth = new Date(targetMonthDate.getFullYear(), targetMonthDate.getMonth() + 1, 0).getDate();
-      const monthEndDay = (targetMonthDate.getFullYear() === currentDate.getFullYear() && targetMonthDate.getMonth() === currentDate.getMonth())
-                          ? currentDate.getDate() // Use current day for the current month
-                          : daysInMonth; // Use last day for past months
-
-      console.log(`Generating payments for ${targetMonthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}...`);
-
-      // For each subscription plan
-      for (const plan of subscriptionPlans) {
-        // Find active subscriptions for this plan (FIX: use 'subscriptionPlan' field)
-        const activeSubs = await UserSubscription.find({ subscriptionPlan: plan._id, status: 'active' });
-        
-        // Create payments for a subset of active subscribers each month
-        const numPayments = Math.min(activeSubs.length, randomNumber(5, 15)); // Simulate payments from 5-15 active users
-        
-        for (let i = 0; i < numPayments; i++) {
-          const sub = activeSubs[i]; // Select a subscriber
-          if (!sub) continue; // Skip if no subscriber found (shouldn't happen if activeSubs exist)
-
-          const randomDay = randomNumber(1, monthEndDay); // Ensure date is within the valid range for the month
-          const paymentDate = new Date(targetMonthDate.getFullYear(), targetMonthDate.getMonth(), randomDay);
-
-          // Skip if the generated date is in the future relative to currentDate
-          if (paymentDate > currentDate) continue;
-
-          const payment = new Payment({
-            user: sub.user,
-            userSubscription: sub._id,
-            amount: plan.price,
-            paymentDate: paymentDate,
-            // Increase probability of 'completed' status for revenue calculations
-            status: Math.random() < 0.8 ? 'completed' : randomElement(['pending', 'failed']), // 80% chance completed
-            paymentMethod: randomElement(['credit_card', 'paypal', 'bank_transfer']),
-            description: `Payment for ${plan.name} subscription` // Always provide a description
-          });
-          await payment.save();
-        }
-      }
-    }
-
-    // Guarantee at least 3 approved expenses and 3 completed payments for the CURRENT month (April 2025)
-    console.log(`Ensuring some data exists for the current month (${currentMonthStart.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })})...`);
-    const expenseCategoriesList = expenseCategories.map(ec => ec.category); // Get list of category names
-    for (let i = 0; i < 3; i++) {
-      const expense = new Expense({
-        category: randomElement(expenseCategoriesList),
-        amount: randomNumber(200, 2000),
-        description: `Guaranteed expense for current month (${i + 1})`,
-        date: addDays(currentMonthStart, randomNumber(0, currentDate.getDate() - 1)), // Random day within current month up to today
-        createdBy: financialManager._id,
-        status: 'approved',
-        paymentMethod: randomElement(['company_account', 'credit_card', 'bank_transfer'])
-      });
-      await expense.save();
-    }
-
-    const activeSubsCurrent = await UserSubscription.find({ status: 'active' }).limit(3);
-    for (let i = 0; i < Math.min(3, activeSubsCurrent.length); i++) {
-      const sub = activeSubsCurrent[i];
-      const plan = await SubscriptionPlan.findById(sub.subscriptionPlan); // FIX: use 'subscriptionPlan' field
-      if (!plan) continue;
-      const payment = new Payment({
-        user: sub.user,
-        userSubscription: sub._id,
-        amount: plan.price,
-        paymentDate: addDays(currentMonthStart, randomNumber(0, currentDate.getDate() - 1)), // Random day within current month up to today
-        status: 'completed',
-        paymentMethod: randomElement(['credit_card', 'paypal', 'bank_transfer']),
-        description: `Payment for ${plan.name} subscription` // Always provide a description
-      });
-      await payment.save();
-    }
-
-    // --- Guarantee some subscriptions are ENDING SOON ---
-    console.log('\nEnsuring some subscriptions are ending soon...');
-    const soonEndingSubs = await UserSubscription.find({ status: 'active' }).limit(3);
-    for (const sub of soonEndingSubs) {
-      const newEndDate = addDays(currentDate, randomNumber(3, 14)); // Ending in 3-14 days from 'today'
-      sub.endDate = newEndDate;
-      sub.nextBillingDate = newEndDate; // Adjust next billing too
-      await sub.save();
-      console.log(`Adjusted subscription ${sub._id} for user ${sub.user} to end on ${newEndDate.toLocaleDateString()}`);
-    }
-
-
-    // --- Guarantee specific data points for Dashboard ---
-    console.log(`\nEnsuring specific data points exist for the current date (${currentDate.toLocaleDateString()})...`);
-
-    // 1. Guarantee PENDING Expenses
-    const pendingExpenseCategories = expenseCategories.map(ec => ec.category);
-    for (let i = 0; i < 2; i++) {
-      const expense = new Expense({
-        category: randomElement(pendingExpenseCategories),
-        amount: randomNumber(50, 500),
-        description: `Guaranteed PENDING expense (${i + 1})`,
-        date: addDays(currentDate, randomNumber(-5, 0)), // Created recently
-        createdBy: financialManager._id,
-        status: 'pending', // Explicitly set to pending
-        paymentMethod: randomElement(['company_account', 'credit_card', 'bank_transfer'])
-      });
-      await expense.save();
-      console.log(`Created PENDING expense: ${expense.description}`);
-    }
-
-    // 2. Guarantee PENDING Payments (e.g., upcoming scheduled payments)
-    const customersForPending = await User.find({ role: 'customer' }).limit(2);
-    for (let i = 0; i < customersForPending.length; i++) {
-        const user = customersForPending[i];
-        const dueDate = addDays(currentDate, randomNumber(1, 7)); // Due in 1-7 days
-        const payment = new Payment({
-            user: user._id,
-            amount: randomNumber(50, 200),
-            paymentDate: null, // Not paid yet
-            dueDate: dueDate, // Set a due date
-            status: 'pending', // Explicitly set to pending
-            paymentMethod: randomElement(['credit_card', 'paypal']),
-            description: `Guaranteed PENDING payment for ${user.name} (${i + 1})`
-        });
-        await payment.save();
-        console.log(`Created PENDING payment for ${user.name} due ${dueDate.toLocaleDateString()}`);
-    }
-
-    // 3. Guarantee Payments made TODAY
-    const customersForTodayPayment = await User.find({ role: 'customer' }).limit(2);
-    for (let i = 0; i < customersForTodayPayment.length; i++) {
-        const user = customersForTodayPayment[i];
-        const plan = randomElement(allPlans); // Use a random plan
-        // Find the user's active subscription for this plan
-        const userSub = await UserSubscription.findOne({ user: user._id, subscriptionPlan: plan._id, status: 'active' });
-        if (!userSub) {
-            console.warn(`No active subscription found for user ${user.name} and plan ${plan.name}. Skipping payment.`);
-            continue;
-        }
-        const payment = new Payment({
-            user: user._id,
-            userSubscription: userSub._id, // Link payment to the subscription
-            amount: plan.price,
-            paymentDate: currentDate, // Set payment date to 'today'
-            status: 'completed',
-            paymentMethod: randomElement(['credit_card', 'paypal']),
-            description: `Guaranteed TODAY's payment for ${plan.name} (${i + 1})`
-        });
-        await payment.save();
-        console.log(`Created TODAY's payment for ${user.name}`);
-    }
-
-    // 4. Guarantee Financial-related Complaints
-    console.log('\nGenerating financial-related complaints...');
-    await Complaint.deleteMany({ subject: /Billing Issue|Payment Problem|Subscription Query/ }); // Clear previous seeded financial complaints
-    const complaintSubjects = [
-        'Billing Issue: Incorrect charge on invoice',
-        'Payment Problem: Payment failed to process',
-        'Subscription Query: How to upgrade plan?',
-        'Billing Issue: Double charged for service',
-        'Payment Problem: Cannot update payment method'
-    ];
-    const customersForComplaints = await User.find({ role: 'customer' }).limit(complaintSubjects.length);
-    const staffOrAdmin = [...staffUsers, adminUser].filter(Boolean); // Combine staff and admin
-
-    for (let i = 0; i < complaintSubjects.length; i++) {
-        if (customersForComplaints.length === 0) break; // No customers to assign complaints to
-        const user = customersForComplaints[i % customersForComplaints.length]; // Cycle through customers
-        const assignedTo = staffOrAdmin.length > 0 ? randomElement(staffOrAdmin)._id : null; // Assign randomly if staff/admin exist
-
-        const complaint = new Complaint({
-            user: user._id,
-            subject: complaintSubjects[i],
-            description: `This is a seeded complaint about: ${complaintSubjects[i]}. User ${user.name} needs assistance. Please investigate.`,
-            status: randomElement(['Open', 'In Progress']), // Mostly open or in progress
-            createdAt: addDays(currentDate, randomNumber(-14, 0)), // Created within the last 2 weeks
-            assignedAdmin: assignedTo
-        });
-        await complaint.save();
-        console.log(`Created complaint: "${complaint.subject}" for user ${user.name}`);
-    }
-
-
-    // Calculate and log summary statistics
-    const totalPayments = await Payment.countDocuments();
-    const totalExpenses = await Expense.countDocuments();
-    const activeSubscriptionsCount = await UserSubscription.countDocuments({ status: 'active' });
-    
-    console.log('\n=== Financial Data Seeding Complete ===');
-    console.log(`Created ${totalPayments} payment records`);
-    console.log(`Created ${totalExpenses} expense records`);
-    console.log(`Set up ${activeSubscriptionsCount} active subscriptions`);
-    console.log('\nYour dashboard should now be populated with realistic data!');
-    
-  } catch (error) {
-    console.error('Error seeding financial data:', error);
-  } finally {
-    // Close database connection
-    if (mongoose.connection.readyState !== 0) {
-      await mongoose.connection.close();
-      console.log('Database connection closed');
-    }
-  }
-};
-
-// Run the seeding function
-seedFinancialData();
\ No newline at end of file
diff --git a/backend/src/scripts/seed/seedUsers.js b/backend/src/scripts/seed/seedUsers.js
deleted file mode 100644
index 0eb8a5d..0000000
--- a/backend/src/scripts/seed/seedUsers.js
+++ /dev/null
@@ -1,43 +0,0 @@
-const mongoose = require('mongoose');
-const User = require('../models/User');
-const config = require('../config');
-require('dotenv').config({ path: '../../.env' });
-
-const recreateUsers = async () => {
-    try {
-      // await mongoose.connect(process.env.MONGODB_URI || 'mongodb+srv://sasindu10:12345@smartbincluster.ij7fd.mongodb.net/smartbin?retryWrites=true&w=majority&appName=SmartBinCluster'); // Replaced with config
-      if (!config.mongodbUri) {
-        console.error('Error: MONGODB_URI not configured in config/index.js or .env file.');
-        process.exit(1);
-      }
-      await mongoose.connect(config.mongodbUri);
-      console.log('Connected to MongoDB');
-    
-    // Test users with plain-text passwords.
-    const testUsers = [
-      { name: 'Admin User', email: 'admin@smartbin.com', password: 'Admin123!', role: 'admin' },
-      { name: 'Staff Member', email: 'staff@smartbin.com', password: 'Staff123!', role: 'staff' },
-      { name: 'Financial Manager', email: 'finance@smartbin.com', password: 'Finance123!', role: 'financial_manager' }
-    ];
-    
-    // Delete any existing test users
-    for (const user of testUsers) {
-      await User.deleteOne({ email: user.email });
-      console.log(`Deleted user if exists: ${user.email}`);
-    }
-    
-    // Create new users (the pre-save hook will hash the passwords)
-    for (const user of testUsers) {
-      const newUser = await User.create(user);
-      console.log(`Recreated user: ${newUser.email}`);
-    }
-    
-  } catch (error) {
-    console.error('Error:', error.message);
-  } finally {
-    await mongoose.connection.close();
-    console.log('Database connection closed');
-  }
-};
-
-recreateUsers();
\ No newline at end of file
diff --git a/backend/src/scripts/testStripePayment.js b/backend/src/scripts/testStripePayment.js
deleted file mode 100644
index 53a899e..0000000
--- a/backend/src/scripts/testStripePayment.js
+++ /dev/null
@@ -1,17 +0,0 @@
-// backend/src/scripts/testStripePayment.js
-require('dotenv').config();
-const { createPaymentIntent } = require('../services/paymentService');
-
-(async () => {
-  try {
-    const pi = await createPaymentIntent({
-      amount: 0.5, // $0.50
-      userId: 'test',
-      planId: 'test',
-      userEmail: 'a@b.com'
-    });
-    console.log('Client secret:', pi.clientSecret);
-  } catch (err) {
-    console.error('Stripe test payment failed:', err);
-  }
-})();
diff --git a/backend/src/scripts/utils/verifyPasswords.js b/backend/src/scripts/utils/verifyPasswords.js
deleted file mode 100644
index a684c53..0000000
--- a/backend/src/scripts/utils/verifyPasswords.js
+++ /dev/null
@@ -1,48 +0,0 @@
-const mongoose = require('mongoose');
-const bcryptjs = require('bcryptjs');
-const User = require('../models/User');
-
-const verifyPasswords = async () => {
-  try {
-    // Connect to MongoDB
-    await mongoose.connect('mongodb+srv://sasindu10:12345@smartbincluster.ij7fd.mongodb.net/smartbin?retryWrites=true&w=majority&appName=SmartBinCluster');
-    console.log('Connected to MongoDB');
-    
-    // Test credentials
-    const testUsers = [
-      { email: 'admin@smartbin.com', password: 'Admin123!' },
-      { email: 'staff@smartbin.com', password: 'Staff123!' },
-      { email: 'finance@smartbin.com', password: 'Finance123!' }
-    ];
-    
-    for (const user of testUsers) {
-      // Find user and explicitly select password
-      const foundUser = await User.findOne({ email: user.email }).select('+password');
-      
-      if (!foundUser) {
-        console.log(`❌ User not found: ${user.email}`);
-        continue;
-      }
-      
-      console.log(`Found user: ${foundUser.email} (${foundUser.role})`);
-      console.log(`Password hash: ${foundUser.password ? foundUser.password.substring(0, 20) + '...' : 'NO PASSWORD FOUND'}`);
-      
-      // Direct bcryptjs comparison
-      if (foundUser.password) {
-        const passwordMatches = await bcryptjs.compare(user.password, foundUser.password);
-        console.log(`Password direct comparison: ${passwordMatches ? '✅ MATCH' : '❌ NO MATCH'}`);
-      } else {
-        console.log('⚠️ No password hash found for comparison');
-      }
-      
-      console.log('-------------------');
-    }
-    
-    mongoose.connection.close();
-  } catch (error) {
-    console.error('Error:', error);
-    mongoose.connection.close();
-  }
-};
-
-verifyPasswords();
\ No newline at end of file
diff --git a/backend/src/server.js b/backend/src/server.js
deleted file mode 100644
index b4b6e33..0000000
--- a/backend/src/server.js
+++ /dev/null
@@ -1,262 +0,0 @@
-// In src/server.js
-const express = require('express');
-const mongoose = require('mongoose');
-const cors = require('cors');
-const helmet = require('helmet');
-const morgan = require('morgan');
-const compression = require('compression'); // Import compression
-const rateLimit = require('express-rate-limit'); // Import rate-limit
-const mongoSanitize = require('express-mongo-sanitize'); // Import mongo-sanitize
-const xss = require('xss-clean'); // Import xss-clean
-const hpp = require('hpp'); // Import hpp
-require('dotenv').config();
-const path = require('path');
-const fs = require('fs');
-const config = require('./config');
-const ApiError = require('./errors/ApiError');
-const { UnauthorizedError, ForbiddenError, BadRequestError, NotFoundError } = require('./errors');
-const multer = require('multer');
-const { JsonWebTokenError, TokenExpiredError } = require('jsonwebtoken');
-const { preserveRawBody } = require('./middleware/webhookMiddleware'); // Import webhook middleware
-const net = require('net'); // Import net module for port checking
-const adminRoutes = require('./routes/adminRoutes'); // Import admin routes
-const globalErrorHandler = require('./controllers/errorController'); // Assuming error handler path
-const AppError = require('./utils/appError'); // Assuming AppError path
-
-// Global handlers for uncaught exceptions and unhandled rejections
-process.on('uncaughtException', (error) => {
-  console.error('UNCAUGHT EXCEPTION! 💥 Shutting down...');
-  console.error(error.name, error.message, error.stack);
-  // Don't exit for EADDRINUSE errors - they will be handled by port checking
-  if (error.code !== 'EADDRINUSE') {
-    process.exit(1); // Mandatory shutdown for other uncaught exceptions
-  }
-});
-
-process.on('unhandledRejection', (reason, promise) => {
-  console.error('UNHANDLED REJECTION! 💥 Shutting down...');
-  console.error(reason);
-  // Graceful shutdown
-  if (server) {
-    server.close(() => {
-      console.log('Server closed due to unhandled promise rejection');
-      process.exit(1);
-    });
-  } else {
-    process.exit(1);
-  }
-});
-
-const app = express();
-
-// --- Global Middleware ---
-
-// Webhook middleware - must be before body parsing middleware
-app.use(preserveRawBody);
-
-// Security Headers
-app.use(helmet());
-
-// Enable CORS
-app.use(cors());
-app.options('*', cors()); // Enable CORS pre-flight
-
-// Response Compression
-app.use(compression()); // Add compression middleware
-
-// Rate Limiting (apply before routes)
-const limiter = rateLimit({
-  max: 1000, // Limit each IP to 1000 requests per windowMs
-  windowMs: 60 * 60 * 1000, // 1 hour
-  message: 'Too many requests from this IP, please try again in an hour!'
-});
-app.use('/api', limiter);
-
-// Body Parsing - must be after preserveRawBody to not interfere with webhook processing
-app.use(express.json({ limit: '10kb' })); // Body parser, reading data from body into req.body
-app.use(express.urlencoded({ extended: true, limit: '10kb' })); // Parse URL-encoded bodies
-
-// Data sanitization against NoSQL query injection
-app.use(mongoSanitize());
-
-// Data sanitization against XSS
-app.use(xss());
-
-// Prevent parameter pollution - specify allowed parameters for HPP whitelist if needed
-app.use(hpp({
-  // whitelist: [ 'duration', 'ratingsQuantity', 'ratingsAverage', 'maxGroupSize', 'difficulty', 'price' ]
-}));
-
-// Logging
-app.use(morgan('dev'));
-
-// Import routes
-const authRoutes = require('./routes/authRoutes');
-const userRoutes = require('./routes/userRoutes');
-const documentRoutes = require('./routes/documentRoutes');
-const attendanceRoutes = require('./routes/attendanceRoutes');
-const subscriptionPlanRoutes = require('./routes/subscriptionPlanRoutes');
-const userSubscriptionRoutes = require('./routes/userSubscriptionRoutes');
-const complaintRoutes = require('./routes/complaintRoutes');
-const performanceRoutes = require('./routes/performanceRoutes');
-const payrollRoutes = require('./routes/payrollRoutes');
-const financialRoutes = require('./routes/financialRoutes'); // Import financial routes
-const mfaRoutes = require('./routes/mfaRoutes');
-const dashboardRoutes = require('./routes/dashboardRoutes'); // Import dashboard routes
-const budgetRoutes = require('./routes/budgetRoutes'); // Import budget routes
-const statisticsRoutes = require('./routes/statisticsRoutes'); // Import statistics routes
-const settingsRoutes = require('./routes/settingsRoutes'); // Import settings routes
-
-// Use routes
-app.use('/api/auth', authRoutes);
-app.use('/api/users', userRoutes);
-app.use('/api/documents', documentRoutes);
-app.use('/api/attendance', attendanceRoutes);
-app.use('/api/subscription-plans', subscriptionPlanRoutes);
-app.use('/api/user-subscriptions', userSubscriptionRoutes);
-app.use('/api/complaints', complaintRoutes);
-app.use('/api/performance', performanceRoutes);
-app.use('/api/payroll', payrollRoutes);
-app.use('/api/financials', financialRoutes); // Mount financial routes
-app.use('/api/mfa', mfaRoutes);
-app.use('/api/dashboard', dashboardRoutes); // Mount dashboard routes
-app.use('/api/budgets', budgetRoutes); // Mount budget routes
-app.use('/api/admin', adminRoutes); // Mount admin routes
-app.use('/api/statistics', statisticsRoutes); // Mount statistics routes
-app.use('/api/settings', settingsRoutes); // Mount settings routes
-
-// Handle undefined routes
-app.all('*', (req, res, next) => {
-  next(new AppError(`Can't find ${req.originalUrl} on this server!`, 404));
-});
-
-// Basic route for testing
-app.get('/', (req, res) => {
-  res.json({ message: 'SmartBin API is running' });
-});
-
-// Ensure you have this directory for uploads
-const uploadDir = path.join(__dirname, '../uploads/documents');
-if (!fs.existsSync(uploadDir)) {
-  fs.mkdirSync(uploadDir, { recursive: true });
-}
-
-// Make the uploads directory accessible
-app.use('/uploads', express.static(path.join(__dirname, '../uploads')));
-
-// --- Database Connection ---
-const connectDB = async () => {
-  try {
-    // Use config value
-    await mongoose.connect(config.mongodbUri);
-    console.log('Connected to MongoDB');
-  } catch (err) {
-    console.error('MongoDB connection error:', err);
-    process.exit(1); // Exit if DB connection fails
-  }
-};
-
-// --- Server Start/Stop ---
-let server; // Define server variable outside
-
-// Function to check if a port is in use
-const isPortAvailable = (port) => {
-  return new Promise((resolve) => {
-    const tester = net.createServer()
-      .once('error', () => resolve(false))
-      .once('listening', () => {
-        tester.close();
-        resolve(true);
-      })
-      .listen(port);
-  });
-};
-
-// Find an available port starting from the specified one
-const findAvailablePort = async (startPort) => {
-  let port = startPort;
-  const maxAttempts = 10; // Try up to 10 ports
-  
-  for (let i = 0; i < maxAttempts; i++) {
-    if (await isPortAvailable(port)) {
-      return port;
-    }
-    port++;
-  }
-  
-  throw new Error(`Could not find an available port after ${maxAttempts} attempts`);
-};
-
-const startServer = async () => {
-  if (server) {
-    // If server already exists, don't try to start again
-    return server;
-  }
-  
-  try {
-    // Find an available port, starting from the configured one
-    const port = await findAvailablePort(config.port);
-    
-    // Log if we're using a different port than configured
-    if (port !== config.port) {
-      console.log(`Port ${config.port} is in use, using port ${port} instead`);
-    }
-    
-    // Start the server on the available port
-    server = app.listen(port, () => console.log(`Server running on port ${port}`));
-    return server;
-  } catch (err) {
-    console.error('Failed to start server:', err.message);
-    throw err;
-  }
-};
-
-const closeServer = (callback) => {
-  if (server) {
-    console.log('Closing HTTP server...');
-    server.close(() => {
-        console.log('HTTP server closed.');
-        if (callback) callback();
-    });
-  } else if (callback) {
-    callback(); // If server never started, just callback
-  }
-};
-
-
-// --- Global Error Handler --- (Keep this after routes and before starting server)
-app.use(globalErrorHandler);
-
-// --- Main Execution Block ---
-// Connect to DB and start server only if this file is run directly
-if (require.main === module) {
-  connectDB().then(() => {
-    startServer().catch(err => {
-      console.error('Failed to start server:', err.message);
-      // Don't exit for port issues - let nodemon handle restart
-      if (err.code !== 'EADDRINUSE') {
-        process.exit(1);
-      }
-    });
-  });
-
-  // Graceful shutdown handler
-  const gracefulShutdown = (signal) => {
-    console.log(`${signal} signal received: closing gracefully.`);
-    closeServer(() => {
-      mongoose.connection.close(false, () => {
-         console.log('MongoDb connection closed.');
-         process.exit(0);
-      });
-    });
-  };
-
-  // Listen for termination signals
-  process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
-  process.on('SIGINT', () => gracefulShutdown('SIGINT')); // Handle Ctrl+C
-
-}
-
-// Export app and control functions for testing
-// Note: We export mongoose itself, not connectDB, as tests handle their own connection
-module.exports = { app, startServer, closeServer, mongooseInstance: mongoose };
\ No newline at end of file
diff --git a/backend/src/services/budgetService.js b/backend/src/services/budgetService.js
deleted file mode 100644
index 0a69d6c..0000000
--- a/backend/src/services/budgetService.js
+++ /dev/null
@@ -1,106 +0,0 @@
-// backend/src/services/budgetService.js
-const Budget = require('../models/Budget');
-const Expense = require('../models/Expense');
-const BadRequestError = require('../errors/BadRequestError');
-
-/**
- * Calculates the budget vs. actual spending summary for a given period.
- * @param {Date} startDate - The start date of the summary period.
- * @param {Date} endDate - The end date of the summary period.
- * @returns {Promise<Array<Object>>} - A promise that resolves to an array of summary objects.
- */
-const calculateBudgetVsActual = async (startDate, endDate) => {
-    if (!startDate || !endDate || isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
-        throw new BadRequestError('Valid start and end dates are required for summary calculation');
-    }
-
-    const start = new Date(startDate);
-    const end = new Date(endDate);
-    end.setHours(23, 59, 59, 999); // Ensure the entire end day is included
-
-    // 1. Find relevant budgets overlapping the query period
-    const relevantBudgets = await Budget.find({
-        $or: [
-            { periodStartDate: { $gte: start, $lte: end }, periodEndDate: { $gte: start, $lte: end } },
-            { periodStartDate: { $lt: start }, periodEndDate: { $gte: start, $lte: end } },
-            { periodStartDate: { $gte: start, $lte: end }, periodEndDate: { $gt: end } },
-            { periodStartDate: { $lt: start }, periodEndDate: { $gt: end } }
-        ]
-    }).select('category allocatedAmount periodStartDate periodEndDate');
-
-    if (relevantBudgets.length === 0) {
-        return []; // No budgets found for the period
-    }
-
-    // 2. Aggregate actual expenses for relevant categories within the period
-    const categories = [...new Set(relevantBudgets.map(b => b.category))];
-    const actualExpenses = await Expense.aggregate([
-        {
-            $match: {
-                category: { $in: categories },
-                date: { $gte: start, $lte: end },
-                // status: 'approved' // Optional: Filter by status if needed
-            }
-        },
-        {
-            $group: {
-                _id: '$category',
-                actual: { $sum: '$amount' }
-            }
-        },
-        {
-            $project: {
-                _id: 0,
-                category: '$_id',
-                actual: 1
-            }
-        }
-    ]);
-
-    // 3. Combine budget and actual expense data
-    const summaryMap = new Map();
-
-    relevantBudgets.forEach(budget => {
-        const budgetStart = budget.periodStartDate;
-        const budgetEnd = budget.periodEndDate;
-        const budgetDuration = budgetEnd.getTime() - budgetStart.getTime();
-
-        const intersectionStart = Math.max(budgetStart.getTime(), start.getTime());
-        const intersectionEnd = Math.min(budgetEnd.getTime(), end.getTime());
-        const intersectionDuration = Math.max(0, intersectionEnd - intersectionStart);
-
-        let relevantAllocatedAmount = 0;
-        if (budgetDuration > 0 && intersectionDuration > 0) {
-            relevantAllocatedAmount = (intersectionDuration / budgetDuration) * budget.allocatedAmount;
-        } else if (budgetDuration === 0 && budgetStart >= start && budgetStart <= end) {
-            relevantAllocatedAmount = budget.allocatedAmount;
-        }
-
-        const existing = summaryMap.get(budget.category) || { category: budget.category, allocated: 0, actual: 0 };
-        existing.allocated += relevantAllocatedAmount;
-        summaryMap.set(budget.category, existing);
-    });
-
-    actualExpenses.forEach(expense => {
-        if (summaryMap.has(expense.category)) {
-            summaryMap.get(expense.category).actual = expense.actual;
-        } else {
-            // Include expenses even if no specific budget was set for that category in the period
-            summaryMap.set(expense.category, { category: expense.category, allocated: 0, actual: expense.actual });
-        }
-    });
-
-    // Format the final summary array
-    const summary = Array.from(summaryMap.values()).map(item => ({
-        ...item,
-        allocated: parseFloat(item.allocated.toFixed(2)),
-        difference: parseFloat((item.allocated - item.actual).toFixed(2)),
-        percentageUsed: item.allocated > 0 ? parseFloat(((item.actual / item.allocated) * 100).toFixed(2)) : (item.actual > 0 ? Infinity : 0)
-    })).sort((a, b) => a.category.localeCompare(b.category));
-
-    return summary;
-};
-
-module.exports = {
-    calculateBudgetVsActual,
-};
diff --git a/backend/src/services/cacheService.js b/backend/src/services/cacheService.js
deleted file mode 100644
index a444297..0000000
--- a/backend/src/services/cacheService.js
+++ /dev/null
@@ -1,311 +0,0 @@
-/**
- * Redis Caching Service
- * 
- * This service provides centralized Redis caching functionality for the SmartBin application.
- * It handles common caching operations with error handling and fallbacks.
- */
-
-let Redis;
-let redisClient = null;
-
-// Try to require ioredis, but make it optional
-try {
-  Redis = require('ioredis');
-} catch (err) {
-  console.warn('ioredis module not found. Caching will be disabled.');
-}
-
-// Default TTL (time to live) values in seconds
-const DEFAULT_TTL = {
-  DASHBOARD: 1800,      // 30 minutes for dashboard data
-  USER: 900,            // 15 minutes for user data
-  SUBSCRIPTION: 3600,   // 1 hour for subscription plans
-  REPORTS: 3600,        // 1 hour for financial reports
-  SHORT: 60,            // 1 minute for short-lived data
-  STANDARD: 600,        // 10 minutes standard TTL
-};
-
-/**
- * Initialize Redis connection
- */
-const initialize = () => {
-  try {
-    // Skip initialization if Redis module is not available
-    if (!Redis) {
-      console.log('Redis module not available. Caching will be disabled.');
-      return false;
-    }
-
-    // Check if Redis URL is provided
-    const redisUrl = process.env.REDIS_URL;
-    if (!redisUrl) {
-      console.log('Redis URL not found. Caching will be disabled.');
-      return false;
-    }
-
-    // Create Redis client with options
-    redisClient = new Redis(redisUrl, {
-      connectTimeout: 10000,    // 10 seconds connection timeout
-      maxRetriesPerRequest: 3,  // Retry connection 3 times
-      enableReadyCheck: true,
-      retryStrategy: (times) => {
-        // Backoff strategy: 200ms, 1s, 3s, 7s, etc.
-        return Math.min(times * 200, 5000);
-      },
-    });
-
-    // Set up event handlers
-    redisClient.on('connect', () => {
-      console.log('Redis client connected');
-    });
-
-    redisClient.on('error', (err) => {
-      console.error('Redis client error:', err);
-    });
-
-    redisClient.on('reconnecting', () => {
-      console.log('Redis client reconnecting');
-    });
-
-    return true;
-  } catch (error) {
-    console.error('Error initializing Redis client:', error);
-    return false;
-  }
-};
-
-/**
- * Check if Redis is connected and available
- * @returns {boolean} - True if Redis is available, false otherwise
- */
-const isAvailable = () => {
-  return redisClient && redisClient.status === 'ready';
-};
-
-/**
- * Get value from cache
- * @param {string} key - Cache key
- * @returns {Promise<any>} - Cached value (parsed from JSON) or null if not found
- */
-const getCache = async (key) => {
-  if (!isAvailable()) return null;
-  
-  try {
-    const value = await redisClient.get(key);
-    if (!value) return null;
-    
-    // Parse the cached JSON value
-    try {
-      return JSON.parse(value);
-    } catch (parseError) {
-      console.error(`Error parsing cached value for key ${key}:`, parseError);
-      return value; // Return raw value if parsing fails
-    }
-  } catch (error) {
-    console.error(`Error getting cache for key ${key}:`, error);
-    return null;
-  }
-};
-
-/**
- * Set value in cache
- * @param {string} key - Cache key
- * @param {any} value - Value to cache (will be stringified to JSON)
- * @param {number} ttl - Time to live in seconds
- * @returns {Promise<boolean>} - True if successful, false otherwise
- */
-const setCache = async (key, value, ttl = DEFAULT_TTL.STANDARD) => {
-  if (!isAvailable()) return false;
-  
-  try {
-    // Stringify the value to JSON
-    const stringValue = JSON.stringify(value);
-    
-    // Set with expiry
-    await redisClient.set(key, stringValue, 'EX', ttl);
-    return true;
-  } catch (error) {
-    console.error(`Error setting cache for key ${key}:`, error);
-    return false;
-  }
-};
-
-/**
- * Delete value from cache
- * @param {string} key - Cache key
- * @returns {Promise<boolean>} - True if successful, false otherwise
- */
-const deleteCache = async (key) => {
-  if (!isAvailable()) return false;
-  
-  try {
-    await redisClient.del(key);
-    return true;
-  } catch (error) {
-    console.error(`Error deleting cache for key ${key}:`, error);
-    return false;
-  }
-};
-
-/**
- * Delete cache keys by pattern
- * @param {string} pattern - Pattern to match (e.g. 'user:*')
- * @returns {Promise<boolean>} - True if successful, false otherwise
- */
-const deleteCacheByPattern = async (pattern) => {
-  if (!isAvailable()) return false;
-  
-  try {
-    // SCAN is more production-friendly than KEYS for large datasets
-    let cursor = '0';
-    do {
-      const [nextCursor, keys] = await redisClient.scan(cursor, 'MATCH', pattern, 'COUNT', 100);
-      cursor = nextCursor;
-      
-      if (keys.length > 0) {
-        await redisClient.del(...keys);
-      }
-    } while (cursor !== '0');
-    
-    return true;
-  } catch (error) {
-    console.error(`Error deleting cache by pattern ${pattern}:`, error);
-    return false;
-  }
-};
-
-/**
- * Cache middleware - wraps controller methods with caching
- * @param {string} key - Cache key or key prefix
- * @param {number} ttl - Time to live in seconds
- * @returns {Function} - Express middleware
- */
-const cacheMiddleware = (keyGenerator, ttl = DEFAULT_TTL.STANDARD) => {
-  return async (req, res, next) => {
-    if (!isAvailable()) {
-      return next(); // Skip caching if Redis is unavailable
-    }
-    
-    // Generate cache key using the provided function or use default
-    const key = typeof keyGenerator === 'function' 
-      ? keyGenerator(req) 
-      : `${keyGenerator}:${req.originalUrl}`;
-    
-    try {
-      // Try to get from cache
-      const cachedData = await getCache(key);
-      
-      if (cachedData) {
-        console.log(`Serving from cache: ${key}`);
-        return res.json(cachedData);
-      }
-      
-      // Cache miss - store original res.json to intercept response
-      const originalJson = res.json;
-      res.json = function(data) {
-        // Restore original function
-        res.json = originalJson;
-        
-        // Cache the response data
-        setCache(key, data, ttl).catch(err => {
-          console.error(`Error caching response for ${key}:`, err);
-        });
-        
-        // Call the original json method
-        return originalJson.call(this, data);
-      };
-      
-      next();
-    } catch (error) {
-      console.error(`Cache middleware error for ${key}:`, error);
-      next();
-    }
-  };
-};
-
-/**
- * Get hash map cache
- * @param {string} key - Hash key
- * @returns {Promise<object>} - Hash map as object or empty object if not found
- */
-const getHashCache = async (key) => {
-  if (!isAvailable()) return {};
-  
-  try {
-    const hash = await redisClient.hgetall(key);
-    return hash || {};
-  } catch (error) {
-    console.error(`Error getting hash cache for key ${key}:`, error);
-    return {};
-  }
-};
-
-/**
- * Set hash map cache
- * @param {string} key - Hash key
- * @param {object} hash - Hash map object
- * @param {number} ttl - Time to live in seconds
- * @returns {Promise<boolean>} - True if successful, false otherwise
- */
-const setHashCache = async (key, hash, ttl = DEFAULT_TTL.STANDARD) => {
-  if (!isAvailable() || !hash || typeof hash !== 'object') return false;
-  
-  try {
-    // Use pipeline for better performance with multiple operations
-    const pipeline = redisClient.pipeline();
-    
-    // Delete existing hash if it exists
-    pipeline.del(key);
-    
-    // Add all hash fields
-    for (const [field, value] of Object.entries(hash)) {
-      pipeline.hset(key, field, typeof value === 'object' ? JSON.stringify(value) : value);
-    }
-    
-    // Set expiry
-    pipeline.expire(key, ttl);
-    
-    // Execute pipeline
-    await pipeline.exec();
-    return true;
-  } catch (error) {
-    console.error(`Error setting hash cache for key ${key}:`, error);
-    return false;
-  }
-};
-
-/**
- * Clear all cache
- * @returns {Promise<boolean>} - True if successful, false otherwise
- */
-const clearAllCache = async () => {
-  if (!isAvailable()) return false;
-  
-  try {
-    await redisClient.flushdb();
-    console.log('Cache cleared successfully');
-    return true;
-  } catch (error) {
-    console.error('Error clearing cache:', error);
-    return false;
-  }
-};
-
-// Initialize Redis when this module is imported, but only if available
-if (Redis) {
-  initialize();
-}
-
-module.exports = {
-  initialize,
-  isAvailable,
-  getCache,
-  setCache,
-  deleteCache,
-  deleteCacheByPattern,
-  cacheMiddleware,
-  getHashCache,
-  setHashCache,
-  clearAllCache,
-  DEFAULT_TTL
-};
\ No newline at end of file
diff --git a/backend/src/services/logService.js b/backend/src/services/logService.js
deleted file mode 100644
index 2a1b3f8..0000000
--- a/backend/src/services/logService.js
+++ /dev/null
@@ -1,73 +0,0 @@
-const Log = require('../models/Log');
-const ApiError = require('../errors/ApiError');
-
-/**
- * Fetches system logs with pagination and filtering options.
- * @param {object} options - Filtering and pagination options.
- * @param {number} [options.page=1] - Page number.
- * @param {number} [options.limit=20] - Number of logs per page.
- * @param {string} [options.level] - Filter by log level (info, warn, error, debug).
- * @param {Date} [options.startDate] - Filter logs after this date.
- * @param {Date} [options.endDate] - Filter logs before this date.
- * @returns {Promise<object>} - Promise resolving to paginated logs.
- */
-const fetchSystemLogs = async ({ page = 1, limit = 20, level, startDate, endDate }) => {
-  try {
-    const query = {};
-    if (level) {
-      query.level = level;
-    }
-    if (startDate || endDate) {
-      query.timestamp = {};
-      if (startDate) query.timestamp.$gte = new Date(startDate);
-      if (endDate) query.timestamp.$lte = new Date(endDate);
-    }
-
-    const options = {
-      page: parseInt(page, 10),
-      limit: parseInt(limit, 10),
-      sort: { timestamp: -1 }, // Sort by newest first
-      populate: { path: 'userId', select: 'name email role' }, // Populate user details
-    };
-
-    // Use the paginate method provided by mongoose-paginate-v2
-    const logs = await Log.paginate(query, options);
-    return logs;
-  } catch (error) {
-    console.error('Error fetching system logs:', error);
-    // Let the controller handle sending the error response
-    throw new Error('Failed to fetch system logs');
-  }
-};
-
-/**
- * Adds a new log entry to the database.
- * @param {string} level - Log level (info, warn, error, debug).
- * @param {string} message - Log message.
- * @param {object} [details={}] - Additional details (userId, ipAddress, etc.).
- * @returns {Promise<void>}
- */
-const addLogEntry = async (level, message, details = {}) => {
-  try {
-    const logEntry = new Log({
-      level,
-      message,
-      userId: details.userId,
-      ipAddress: details.ipAddress,
-      timestamp: new Date(), // Explicitly set timestamp
-      // Add other details as needed
-    });
-    await logEntry.save();
-    // Optional: Log to console as well, depending on environment/configuration
-    // console.log(`[${level.toUpperCase()}] ${message}`);
-  } catch (error) {
-    console.error('Failed to add log entry:', error);
-    // Decide if this failure should throw an error upwards or just be logged
-  }
-};
-
-
-module.exports = {
-  fetchSystemLogs,
-  addLogEntry,
-};
diff --git a/backend/src/services/paymentService.js b/backend/src/services/paymentService.js
deleted file mode 100644
index 10ddc90..0000000
--- a/backend/src/services/paymentService.js
+++ /dev/null
@@ -1,97 +0,0 @@
-/**
- * Payment Service - Handles interaction with the payment gateway
- * This service provides an abstraction layer between the application and Stripe
- */
-const config = require('../config');
-const stripe = require('stripe')(config.stripeSecretKey);
-
-/**
- * Creates a payment intent with Stripe
- * @param {Object} params - Payment parameters
- * @param {number} params.amount - Payment amount
- * @param {string} params.currency - Currency code (default: 'usd')
- * @param {string} params.userId - ID of the user making the payment
- * @param {string} params.planId - ID of the subscription plan
- * @param {string} params.userEmail - Email of the user
- * @returns {Object} - Object containing clientSecret and intentId
- */
-const createPaymentIntent = async ({ amount, currency = 'usd', userId, planId, userEmail }) => {
-    // Convert amount to smallest currency unit (e.g., cents for USD)
-    const amountInCents = Math.round(amount * 100);
-
-    try {
-        // Find or create a Stripe Customer
-        let customer = await findOrCreateStripeCustomer(userEmail, userId);
-
-        const paymentIntent = await stripe.paymentIntents.create({
-            amount: amountInCents,
-            currency: currency,
-            customer: customer.id, // Link to Stripe customer
-            metadata: { // Store your internal IDs
-                userId: userId,
-                planId: planId
-            },
-            // Enable automatic payment methods for flexibility
-            automatic_payment_methods: { enabled: true },
-        });
-        
-        return { 
-            clientSecret: paymentIntent.client_secret, 
-            intentId: paymentIntent.id 
-        };
-    } catch (error) {
-        console.error("Stripe Payment Intent Error:", error);
-        throw new Error(`Payment gateway error: ${error.message}`);
-    }
-};
-
-/**
- * Verifies the signature of a webhook event and constructs the event
- * @param {string} rawBody - Raw request body
- * @param {string} signature - Stripe signature from header
- * @returns {Object} - Constructed Stripe event
- */
-const verifyAndConstructEvent = (rawBody, signature) => {
-    try {
-        const event = stripe.webhooks.constructEvent(
-            rawBody,
-            signature,
-            config.stripeWebhookSecret
-        );
-        return event;
-    } catch (err) {
-        console.error(`⚠️ Webhook signature verification failed: ${err.message}`);
-        throw new Error('Webhook signature verification failed');
-    }
-};
-
-/**
- * Helper function to find or create a Stripe customer to avoid duplicates
- * @param {string} email - Customer email
- * @param {string} userId - Internal user ID
- * @returns {Object} - Stripe customer object
- */
-const findOrCreateStripeCustomer = async (email, userId) => {
-    // Search for existing customer by email
-    const existingCustomers = await stripe.customers.list({ 
-        email: email, 
-        limit: 1 
-    });
-    
-    if (existingCustomers.data.length > 0) {
-        return existingCustomers.data[0];
-    }
-
-    // Create new customer if one doesn't exist
-    const newCustomer = await stripe.customers.create({
-        email: email,
-        metadata: { userId: userId }
-    });
-    
-    return newCustomer;
-};
-
-module.exports = { 
-    createPaymentIntent, 
-    verifyAndConstructEvent 
-};
\ No newline at end of file
diff --git a/backend/src/services/payrollService.js b/backend/src/services/payrollService.js
deleted file mode 100644
index fbba518..0000000
--- a/backend/src/services/payrollService.js
+++ /dev/null
@@ -1,183 +0,0 @@
-const Attendance = require('../models/Attendance');
-const Performance = require('../models/Performance');
-const User = require('../models/User');
-const PayrollLog = require('../models/PayrollLog');
-const { BadRequestError } = require('../errors');
-
-/**
- * Calculates payroll details (earnings, deductions, net pay) for a specific staff member
- * over a given period based on attendance, performance, and base salary.
- * This is a complex function and needs detailed business logic.
- *
- * @async
- * @param {string | mongoose.Types.ObjectId} staffId - The MongoDB ObjectId of the staff member.
- * @param {Date} periodStart - The start date of the pay period (inclusive).
- * @param {Date} periodEnd - The end date of the pay period (inclusive).
- * @returns {Promise<object>} An object containing calculated payroll figures:
- *   { baseSalary, hoursWorked, overtimeHours, overtimeRate, bonusAmount, deductions, netPay, calculationNotes }
- * @throws {BadRequestError} If the staff user is not found or not a staff member.
- */
-const calculatePayrollForStaff = async (staffId, periodStart, periodEnd) => {
-    console.log(`Calculating payroll for staff ${staffId} from ${periodStart.toISOString()} to ${periodEnd.toISOString()}`);
-
-    const staffUser = await User.findById(staffId);
-    if (!staffUser || staffUser.role !== 'staff') {
-        throw new BadRequestError(`User ${staffId} not found or is not staff.`);
-    }
-
-    // --- 1. Fetch Base Salary ---
-    // TODO: Determine where base salary is stored (User model? Separate config? Contract model?)
-    // Example: Assuming it's stored on the User model (add this field if needed)
-    const baseSalary = staffUser.baseSalary || 30000; // Placeholder: Get actual base salary
-    const hourlyRate = staffUser.hourlyRate || (baseSalary / (4 * 40)); // Example hourly rate calculation
-    const overtimeRate = hourlyRate * 1.5; // Example overtime rate
-
-    // --- 2. Fetch Attendance Data ---
-    const attendanceRecords = await Attendance.find({
-        staff: staffId,
-        date: { $gte: periodStart, $lte: periodEnd },
-        // status: 'Present' // Optionally filter by status
-    });
-
-    let totalHoursWorked = 0;
-    attendanceRecords.forEach(record => {
-        totalHoursWorked += record.totalHours || 0;
-    });
-    // TODO: Implement more sophisticated logic (e.g., handling missing checkouts, minimum hours)
-
-    // --- 3. Calculate Overtime ---
-    // TODO: Define standard working hours per period (e.g., 40 hrs/week * weeks in period)
-    const standardHoursForPeriod = 160; // Placeholder
-    const overtimeHours = Math.max(0, totalHoursWorked - standardHoursForPeriod);
-
-    // --- 4. Fetch Performance Data ---
-    // TODO: Fetch relevant performance reviews/metrics for the period
-    const performanceRecords = await Performance.find({
-        staff: staffId,
-        'reviewPeriod.endDate': { $gte: periodStart, $lte: periodEnd } // Example: reviews ending in the period
-    });
-    // Example: Calculate average rating for the period
-    let averageRating = 0;
-    if (performanceRecords.length > 0) {
-        averageRating = performanceRecords.reduce((sum, record) => sum + (record.overallRating || 0), 0) / performanceRecords.length;
-    }
-
-    // --- 5. Calculate Bonus Amount ---
-    // TODO: Implement bonus logic based on attendance, performance, KPIs etc. (Proposal 3.2.2 Obj 7)
-    let bonusAmount = 0;
-    if (averageRating > 8.5) bonusAmount += 500; // Example: Bonus for high performance
-    // Add bonus for attendance based on attendanceRecords (e.g., no absences)
-    // Example: Check for perfect attendance (needs more detailed attendance data)
-    const presentDays = attendanceRecords.filter(r => r.status === 'Present').length;
-    // const totalDaysInPeriod = ... calculate business days ...
-    // if (presentDays === totalDaysInPeriod) bonusAmount += 200; // Example attendance bonus
-
-
-    // --- 6. Calculate Deductions ---
-    // TODO: Implement deduction logic (taxes, EPF/ETF, loans, etc.)
-    const deductions = [];
-    // Example: Simple tax deduction
-    const taxableIncome = baseSalary + bonusAmount + (overtimeHours * overtimeRate);
-    if (taxableIncome > 25000) { // Example threshold
-        deductions.push({ name: 'Income Tax (PAYE)', amount: parseFloat((taxableIncome * 0.05).toFixed(2)) }); // Example 5% tax
-    }
-    // Add EPF/ETF based on Sri Lankan regulations if applicable
-
-    const totalDeductions = deductions.reduce((sum, d) => sum + d.amount, 0);
-
-    // --- 7. Calculate Net Pay ---
-    const netPay = parseFloat(
-      (baseSalary + (overtimeHours * overtimeRate) + bonusAmount - totalDeductions).toFixed(2)
-    );
-
-    console.log(`Calculation results for ${staffId}: Base=${baseSalary}, Bonus=${bonusAmount}, OT=${overtimeHours}hrs, Deductions=${totalDeductions}, Net=${netPay}`);
-
-    return {
-        baseSalary,
-        hoursWorked: parseFloat(totalHoursWorked.toFixed(2)),
-        overtimeHours: parseFloat(overtimeHours.toFixed(2)),
-        overtimeRate,
-        bonusAmount: parseFloat(bonusAmount.toFixed(2)),
-        deductions, // Array of deduction objects
-        netPay,
-        calculationNotes: `Avg Rating: ${averageRating.toFixed(1)}. OT Hours: ${overtimeHours.toFixed(1)}. Bonus: ${bonusAmount.toFixed(2)}.` // Example notes
-    };
-};
-
-/**
- * Checks if a payroll log exists for the given staff and period. If it exists and is calculated,
- * returns it. Otherwise, triggers a new calculation and saves/updates the log entry.
- *
- * @async
- * @param {string | mongoose.Types.ObjectId} staffId - The MongoDB ObjectId of the staff member.
- * @param {Date} periodStart - The start date of the pay period.
- * @param {Date} periodEnd - The end date of the pay period.
- * @returns {Promise<PayrollLog>} The existing or newly created payroll log document.
- * @throws {Error} If calculation fails or there are issues saving the log.
- */
-const generateOrGetPayrollLog = async (staffId, periodStart, periodEnd) => {
-    // Check if a log already exists
-    let payrollLog = await PayrollLog.findOne({
-        staff: staffId,
-        payPeriodStart: periodStart,
-        payPeriodEnd: periodEnd
-    });
-
-    if (payrollLog && payrollLog.status !== 'Pending Calculation' && payrollLog.status !== 'Error') {
-        console.log(`Payroll log already exists and calculated for ${staffId}, period ending ${periodEnd.toISOString().split('T')[0]}`);
-        return payrollLog; // Return existing calculated log
-    }
-
-    try {
-        const calculatedData = await calculatePayrollForStaff(staffId, periodStart, periodEnd);
-
-        if (payrollLog) {
-            // Update existing pending/error log
-            payrollLog.set({
-                ...calculatedData,
-                status: 'Pending Payment', // Update status after successful calculation
-                generatedDate: new Date()
-            });
-        } else {
-            // Create new log
-            payrollLog = new PayrollLog({
-                staff: staffId,
-                payPeriodStart: periodStart,
-                payPeriodEnd: periodEnd,
-                ...calculatedData,
-                status: 'Pending Payment' // Set status after successful calculation
-            });
-        }
-
-        await payrollLog.save();
-        console.log(`Successfully generated/updated payroll log for ${staffId}, period ending ${periodEnd.toISOString().split('T')[0]}`);
-        return payrollLog;
-    } catch (error) {
-         console.error(`Error calculating payroll for staff ${staffId}:`, error);
-        // Log the error state if creating/updating fails
-         if (payrollLog) {
-             payrollLog.status = 'Error';
-             payrollLog.calculationNotes = `Calculation failed: ${error.message}`;
-             await payrollLog.save().catch(saveErr => console.error('Failed to save error state to payroll log:', saveErr));
-         } else {
-             // Create a log indicating the error if one didn't exist
-             payrollLog = new PayrollLog({
-                staff: staffId,
-                payPeriodStart: periodStart,
-                payPeriodEnd: periodEnd,
-                status: 'Error',
-                calculationNotes: `Initial calculation failed: ${error.message}`,
-                // Set default numeric values to avoid validation errors on error save
-                baseSalary: 0, netPay: 0
-             });
-             await payrollLog.save().catch(saveErr => console.error('Failed to save initial error state to payroll log:', saveErr));
-         }
-        throw error; // Re-throw the error to be handled by the controller
-    }
-};
-
-
-module.exports = {
-    calculatePayrollForStaff,
-    generateOrGetPayrollLog
-};
\ No newline at end of file
diff --git a/backend/src/services/statisticsService.js b/backend/src/services/statisticsService.js
deleted file mode 100644
index 48d2a74..0000000
--- a/backend/src/services/statisticsService.js
+++ /dev/null
@@ -1,169 +0,0 @@
-const User = require('../models/User');
-const Payment = require('../models/Payment');
-const Expense = require('../models/Expense');
-const UserSubscription = require('../models/UserSubscription');
-const Complaint = require('../models/Complaint');
-const Attendance = require('../models/Attendance');
-const SubscriptionPlan = require('../models/SubscriptionPlan');
-const { parseISO, startOfDay, endOfDay, startOfMonth, endOfMonth, startOfYear, endOfYear, subMonths } = require('date-fns');
-
-// Helper to parse dates and handle ranges
-const getDateRange = (startDate, endDate, range) => {
-    let start, end;
-
-    if (range) {
-        const now = new Date();
-        switch (range) {
-            case 'today':
-                start = startOfDay(now);
-                end = endOfDay(now);
-                break;
-            case 'this_month':
-                start = startOfMonth(now);
-                end = endOfMonth(now);
-                break;
-            case 'last_3_months':
-                start = startOfDay(subMonths(now, 3));
-                end = endOfDay(now);
-                break;
-            case 'this_year':
-                start = startOfYear(now);
-                end = endOfYear(now);
-                break;
-            default: // Default to this month if range is invalid
-                start = startOfMonth(now);
-                end = endOfMonth(now);
-        }
-    } else if (startDate && endDate) {
-        try {
-            start = startOfDay(parseISO(startDate));
-            end = endOfDay(parseISO(endDate));
-        } catch (error) {
-            console.error("Invalid date format provided:", startDate, endDate);
-            // Default to this month if custom dates are invalid
-            const now = new Date();
-            start = startOfMonth(now);
-            end = endOfMonth(now);
-        }
-    } else {
-        // Default range if nothing is provided (e.g., this month)
-        const now = new Date();
-        start = startOfMonth(now);
-        end = endOfMonth(now);
-    }
-    return { startDate: start, endDate: end };
-};
-
-// --- Aggregation Helpers ---
-
-const getUsersCountByRole = async (dateFilter) => {
-    // No date filter needed for current user roles usually, but can be added if needed
-    return User.aggregate([
-        { $group: { _id: '$role', count: { $sum: 1 } } },
-        { $project: { _id: 0, role: '$_id', count: 1 } }
-    ]);
-};
-
-const getNewUserRegistrationsTrend = async (dateFilter) => {
-    // Determine date grouping format based on range (daily, monthly)
-    // This is a simplified example; more robust date handling might be needed
-    const rangeInDays = (dateFilter.endDate - dateFilter.startDate) / (1000 * 60 * 60 * 24);
-    const dateFormat = rangeInDays > 90 ? "%Y-%m" : "%Y-%m-%d"; // Monthly if > 3 months, else daily
-
-    return User.aggregate([
-        { $match: { createdAt: { $gte: dateFilter.startDate, $lte: dateFilter.endDate } } },
-        {
-            $group: {
-                _id: { $dateToString: { format: dateFormat, date: '$createdAt' } },
-                count: { $sum: 1 }
-            }
-        },
-        { $sort: { _id: 1 } },
-        { $project: { _id: 0, date: '$_id', count: 1 } }
-    ]);
-};
-
-const getFinancialSummary = async (dateFilter) => {
-    const revenuePromise = Payment.aggregate([
-        { $match: { status: 'completed', paymentDate: { $gte: dateFilter.startDate, $lte: dateFilter.endDate } } },
-        { $group: { _id: null, totalRevenue: { $sum: '$amount' } } }
-    ]);
-    const expensePromise = Expense.aggregate([
-        { $match: { date: { $gte: dateFilter.startDate, $lte: dateFilter.endDate } } },
-        { $group: { _id: null, totalExpenses: { $sum: '$amount' } } }
-    ]);
-
-    const [revenueResult, expenseResult] = await Promise.all([revenuePromise, expensePromise]);
-
-    const totalRevenue = revenueResult[0]?.totalRevenue || 0;
-    const totalExpenses = expenseResult[0]?.totalExpenses || 0;
-    const netProfit = totalRevenue - totalExpenses;
-
-    return { totalRevenue, totalExpenses, netProfit };
-};
-
-const getSubscriptionStats = async () => {
-    const activeSubsPromise = UserSubscription.countDocuments({ status: 'active' });
-    const planPopularityPromise = UserSubscription.aggregate([
-        { $match: { status: 'active' } }, // Count only active subscriptions for popularity
-        { $lookup: { from: 'subscriptionplans', localField: 'plan', foreignField: '_id', as: 'planDetails' } },
-        { $unwind: '$planDetails' },
-        { $group: { _id: '$planDetails.name', count: { $sum: 1 } } },
-        { $project: { _id: 0, planName: '$_id', count: 1 } },
-        { $sort: { count: -1 } }
-    ]);
-
-    const [activeSubscriptionsCount, planPopularity] = await Promise.all([activeSubsPromise, planPopularityPromise]);
-
-    return { activeSubscriptionsCount, planPopularity };
-};
-
-const getPaymentStatusDistribution = async (dateFilter) => {
-    return Payment.aggregate([
-        { $match: { paymentDate: { $gte: dateFilter.startDate, $lte: dateFilter.endDate } } },
-        { $group: { _id: '$status', count: { $sum: 1 } } },
-        { $project: { _id: 0, status: '$_id', count: 1 } }
-    ]);
-};
-
-const getComplaintOverview = async (dateFilter) => {
-    return Complaint.aggregate([
-        // { $match: { createdAt: { $gte: dateFilter.startDate, $lte: dateFilter.endDate } } }, // Optional: filter by creation date
-        { $group: { _id: '$status', count: { $sum: 1 } } },
-        { $project: { _id: 0, status: '$_id', count: 1 } }
-    ]);
-};
-
-// --- Main Service Function ---
-
-exports.calculateStatistics = async ({ startDate, endDate, range }) => {
-    const dateFilter = getDateRange(startDate, endDate, range);
-
-    // Fetch all statistics concurrently
-    const [usersByRole, newUserTrend, financialSummary, subscriptionStats, paymentStatus, complaintOverview] = await Promise.all([
-        getUsersCountByRole(dateFilter),
-        getNewUserRegistrationsTrend(dateFilter),
-        getFinancialSummary(dateFilter),
-        getSubscriptionStats(), // Subscription stats might not need date filter depending on requirements
-        getPaymentStatusDistribution(dateFilter),
-        getComplaintOverview(dateFilter)
-        // Add calls to other helper functions here (e.g., attendance, recycling, pickups)
-    ]);
-
-    // Combine results
-    const statisticsData = {
-        usersByRole,
-        newUserTrend,
-        ...financialSummary,
-        ...subscriptionStats,
-        paymentStatus,
-        complaintOverview,
-        // Add other stats here
-        dateRange: { // Include the actual date range used for clarity
-            startDate: dateFilter.startDate.toISOString(),
-            endDate: dateFilter.endDate.toISOString()
-        }
-    };
-
-    return statisticsData;
-};
diff --git a/backend/src/utils/appError.js b/backend/src/utils/appError.js
deleted file mode 100644
index 39ba2a8..0000000
--- a/backend/src/utils/appError.js
+++ /dev/null
@@ -1,18 +0,0 @@
-// backend/src/utils/appError.js
-
-class AppError extends Error {
-  constructor(message, statusCode) {
-    super(message);
-
-    this.statusCode = statusCode;
-    // Determine status based on statusCode (fail for 4xx, error for 5xx)
-    this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';
-    // Mark this error as operational (predictable, not a bug)
-    this.isOperational = true;
-
-    // Capture the stack trace, excluding the constructor call
-    Error.captureStackTrace(this, this.constructor);
-  }
-}
-
-module.exports = AppError;
diff --git a/backend/src/utils/catchAsync.js b/backend/src/utils/catchAsync.js
deleted file mode 100644
index 3571d1d..0000000
--- a/backend/src/utils/catchAsync.js
+++ /dev/null
@@ -1,12 +0,0 @@
-/**
- * Wraps an asynchronous function to catch errors and pass them to the next middleware.
- * @param {Function} fn - The asynchronous function to wrap.
- * @returns {Function} - A new function that handles errors.
- */
-const catchAsync = (fn) => {
-  return (req, res, next) => {
-    fn(req, res, next).catch(next); // Catches any error and passes it to next()
-  };
-};
-
-module.exports = catchAsync;
diff --git a/backend/tests/integration/auth.test.js b/backend/tests/integration/auth.test.js
deleted file mode 100644
index 2d0e5f0..0000000
--- a/backend/tests/integration/auth.test.js
+++ /dev/null
@@ -1,140 +0,0 @@
-const request = require('supertest');
-const { app } = require('../../src/server'); // Import the exported app
-const User = require('../../src/models/User');
-
-describe('Auth API Endpoints', () => {
-  const registerUrl = '/api/auth/register';
-  const loginUrl = '/api/auth/login';
-
-  const userData = {
-    name: 'Test User',
-    email: 'test@example.com',
-    password: 'password123',
-    address: '123 Test St',
-    phone: '1234567890'
-  };
-
-  describe('POST /api/auth/register', () => {
-    it('should register a new user successfully', async () => {
-      const res = await request(app)
-        .post(registerUrl)
-        .send(userData)
-        .expect(201);
-
-      expect(res.body).toHaveProperty('token');
-      expect(res.body.user).toHaveProperty('name', userData.name);
-      expect(res.body.user).toHaveProperty('email', userData.email);
-      expect(res.body.user).toHaveProperty('role', 'customer'); // Default role
-      expect(res.body.user).not.toHaveProperty('password'); // Ensure password is not returned
-
-      // Verify user was saved in the DB (without password)
-      const dbUser = await User.findOne({ email: userData.email });
-      expect(dbUser).not.toBeNull();
-      expect(dbUser.name).toBe(userData.name);
-    });
-
-    it('should return 400 if email already exists', async () => {
-      // First, register the user
-      await request(app).post(registerUrl).send(userData);
-
-      // Then, try to register again with the same email
-      const res = await request(app)
-        .post(registerUrl)
-        .send({ ...userData, name: 'Another User' })
-        .expect(400);
-
-      expect(res.body).toHaveProperty('message');
-      expect(res.body.message).toMatch(/duplicate field value entered/i);
-    });
-
-    it('should return 400 for invalid data (short password)', async () => {
-      const res = await request(app)
-        .post(registerUrl)
-        .send({ ...userData, password: 'short' })
-        .expect(400);
-
-      expect(res.body).toHaveProperty('message', 'Validation Error');
-      expect(res.body).toHaveProperty('errors');
-      expect(res.body.errors[0]).toMatch(/Password must be at least 8 characters/i);
-    });
-
-     it('should return 400 for invalid data (invalid email)', async () => {
-      const res = await request(app)
-        .post(registerUrl)
-        .send({ ...userData, email: 'invalid-email' })
-        .expect(400);
-
-      expect(res.body).toHaveProperty('message', 'Validation Error');
-      expect(res.body).toHaveProperty('errors');
-      expect(res.body.errors[0]).toMatch(/Please enter a valid email/i);
-    });
-
-    it('should return 400 for missing required fields (e.g., name)', async () => {
-      const { name, ...incompleteData } = userData;
-      const res = await request(app)
-        .post(registerUrl)
-        .send(incompleteData)
-        .expect(400);
-
-      expect(res.body).toHaveProperty('message', 'Validation Error');
-      expect(res.body).toHaveProperty('errors');
-      expect(res.body.errors[0]).toMatch(/Please Enter Your Name/i);
-    });
-  });
-
-  describe('POST /api/auth/login', () => {
-    // Register user before login tests
-    beforeEach(async () => {
-      await request(app).post(registerUrl).send(userData);
-    });
-
-    it('should login successfully with correct credentials', async () => {
-      const res = await request(app)
-        .post(loginUrl)
-        .send({ email: userData.email, password: userData.password })
-        .expect(200);
-
-      expect(res.body).toHaveProperty('token');
-      expect(res.body.user).toHaveProperty('email', userData.email);
-      expect(res.body.user).not.toHaveProperty('password');
-    });
-
-    it('should return 401 for incorrect password', async () => {
-      const res = await request(app)
-        .post(loginUrl)
-        .send({ email: userData.email, password: 'wrongpassword' })
-        .expect(401);
-
-      expect(res.body).toHaveProperty('message', 'Invalid credentials');
-    });
-
-    it('should return 401 for non-existent email', async () => {
-      const res = await request(app)
-        .post(loginUrl)
-        .send({ email: 'nonexistent@example.com', password: userData.password })
-        .expect(401);
-
-      expect(res.body).toHaveProperty('message', 'Invalid credentials');
-    });
-
-    it('should return 400 for missing email', async () => {
-      const res = await request(app)
-        .post(loginUrl)
-        .send({ password: userData.password })
-        .expect(400);
-
-      expect(res.body).toHaveProperty('message', 'Validation Error');
-      expect(res.body.errors[0]).toMatch(/Please enter your email/i);
-    });
-
-    it('should return 400 for missing password', async () => {
-      const res = await request(app)
-        .post(loginUrl)
-        .send({ email: userData.email })
-        .expect(400);
-
-      expect(res.body).toHaveProperty('message', 'Validation Error');
-      expect(res.body.errors[0]).toMatch(/Please enter your password/i);
-    });
-  });
-});
diff --git a/backend/tests/integration/errorHandler.test.js b/backend/tests/integration/errorHandler.test.js
deleted file mode 100644
index b440fb5..0000000
--- a/backend/tests/integration/errorHandler.test.js
+++ /dev/null
@@ -1,134 +0,0 @@
-const request = require('supertest');
-const mongoose = require('mongoose');
-const { app } = require('../../src/server');
-const { BadRequestError, UnauthorizedError, NotFoundError, ForbiddenError } = require('../../src/errors');
-const { JsonWebTokenError, TokenExpiredError } = require('jsonwebtoken');
-
-// Register test routes before running tests
-beforeAll(() => {
-  // Routes for custom API error tests
-  app.get('/test/bad-request', (req, res, next) => {
-    next(new BadRequestError('Invalid input data'));
-  });
-
-  app.get('/test/validation-error', (req, res, next) => {
-    const error = new BadRequestError('Validation Error');
-    error.errors = ['Name is required', 'Email is invalid'];
-    next(error);
-  });
-
-  app.get('/test/unauthorized', (req, res, next) => {
-    next(new UnauthorizedError('Authentication required'));
-  });
-
-  app.get('/test/not-found', (req, res, next) => {
-    next(new NotFoundError('Resource not found'));
-  });
-
-  app.get('/test/forbidden', (req, res, next) => {
-    next(new ForbiddenError('Permission denied'));
-  });
-
-  // Route for Mongoose error
-  app.get('/test/cast-error', (req, res, next) => {
-    const error = new mongoose.Error.CastError('ObjectId', 'invalid-id', '_id');
-    next(error);
-  });
-
-  // Routes for JWT errors
-  app.get('/test/jwt-error', (req, res, next) => {
-    next(new JsonWebTokenError('invalid token'));
-  });
-
-  app.get('/test/jwt-expired', (req, res, next) => {
-    next(new TokenExpiredError('jwt expired', new Date()));
-  });
-
-  // Route for unexpected error
-  app.get('/test/unhandled-error', (req, res, next) => {
-    next(new Error('Something went wrong'));
-  });
-});
-
-describe('Error Handler', () => {
-  // Test for custom API error handling
-  describe('Custom API Errors', () => {
-    it('should handle BadRequestError with proper format', async () => {
-      const response = await request(app).get('/test/bad-request');
-      
-      expect(response.status).toBe(400);
-      expect(response.body).toHaveProperty('message', 'Invalid input data');
-      expect(response.body).toHaveProperty('timestamp');
-    });
-
-    it('should handle BadRequestError with validation errors array', async () => {
-      const response = await request(app).get('/test/validation-error');
-      
-      expect(response.status).toBe(400);
-      expect(response.body).toHaveProperty('message', 'Validation Error');
-      expect(response.body).toHaveProperty('errors');
-      expect(response.body.errors).toEqual(['Name is required', 'Email is invalid']);
-    });
-
-    it('should handle UnauthorizedError', async () => {
-      const response = await request(app).get('/test/unauthorized');
-      
-      expect(response.status).toBe(401);
-      expect(response.body).toHaveProperty('message', 'Authentication required');
-    });
-
-    it('should handle NotFoundError', async () => {
-      const response = await request(app).get('/test/not-found');
-      
-      expect(response.status).toBe(404);
-      expect(response.body).toHaveProperty('message', 'Resource not found');
-    });
-
-    it('should handle ForbiddenError', async () => {
-      const response = await request(app).get('/test/forbidden');
-      
-      expect(response.status).toBe(403);
-      expect(response.body).toHaveProperty('message', 'Permission denied');
-    });
-  });
-
-  // Test for Mongoose errors
-  describe('Mongoose Errors', () => {
-    it('should handle Mongoose CastError (e.g., invalid ObjectId)', async () => {
-      const response = await request(app).get('/test/cast-error');
-      
-      expect(response.status).toBe(400);
-      expect(response.body).toHaveProperty('message');
-      expect(response.body.message).toContain('Invalid _id');
-    });
-  });
-
-  // Test for JWT errors
-  describe('JWT Errors', () => {
-    it('should handle invalid JWT token', async () => {
-      const response = await request(app).get('/test/jwt-error');
-      
-      expect(response.status).toBe(401);
-      expect(response.body).toHaveProperty('message', 'Invalid authentication token');
-    });
-
-    it('should handle expired JWT token', async () => {
-      const response = await request(app).get('/test/jwt-expired');
-      
-      expect(response.status).toBe(401);
-      expect(response.body).toHaveProperty('message', 'Authentication token has expired');
-    });
-  });
-
-  // Test for unhandled errors (500)
-  describe('Unhandled Errors', () => {
-    it('should handle unexpected errors with 500 status', async () => {
-      const response = await request(app).get('/test/unhandled-error');
-      
-      expect(response.status).toBe(500);
-      expect(response.body).toHaveProperty('message', 'Internal Server Error');
-      // Should not expose error details in response
-      expect(response.body).not.toHaveProperty('stack');
-    });
-  });
-});
\ No newline at end of file
diff --git a/backend/tests/manualErrorVerify.js b/backend/tests/manualErrorVerify.js
deleted file mode 100644
index de8290e..0000000
--- a/backend/tests/manualErrorVerify.js
+++ /dev/null
@@ -1,143 +0,0 @@
-/**
- * This script manually verifies the error handler functionality
- * Run it with: node tests/manualErrorVerify.js
- */
-const express = require('express');
-const { BadRequestError, UnauthorizedError, NotFoundError, ForbiddenError } = require('../src/errors');
-const mongoose = require('mongoose');
-const { JsonWebTokenError, TokenExpiredError } = require('jsonwebtoken');
-require('dotenv').config();
-
-// Create a simple express application for testing
-const app = express();
-
-// Import the error handler middleware from server.js
-// This is a simplified version of the error handler for testing
-app.use(express.json());
-
-// Add test routes
-app.get('/', (req, res) => {
-  res.json({ message: 'Error Handler Test Server' });
-});
-
-app.get('/test/bad-request', (req, res, next) => {
-  next(new BadRequestError('Invalid input data'));
-});
-
-app.get('/test/validation-error', (req, res, next) => {
-  const error = new BadRequestError('Validation Error');
-  error.errors = ['Name is required', 'Email is invalid'];
-  next(error);
-});
-
-app.get('/test/unauthorized', (req, res, next) => {
-  next(new UnauthorizedError('Authentication required'));
-});
-
-app.get('/test/not-found', (req, res, next) => {
-  next(new NotFoundError('Resource not found'));
-});
-
-app.get('/test/forbidden', (req, res, next) => {
-  next(new ForbiddenError('Permission denied'));
-});
-
-app.get('/test/mongoose-cast', (req, res, next) => {
-  const error = new mongoose.Error.CastError('ObjectId', 'invalid-id', '_id');
-  next(error);
-});
-
-app.get('/test/jwt-invalid', (req, res, next) => {
-  next(new JsonWebTokenError('invalid token'));
-});
-
-app.get('/test/jwt-expired', (req, res, next) => {
-  next(new TokenExpiredError('jwt expired', new Date()));
-});
-
-app.get('/test/unhandled', (req, res, next) => {
-  next(new Error('Something went wrong'));
-});
-
-// Add the error handler middleware
-app.use((err, req, res, next) => {
-  // Log the error with enhanced context
-  const timestamp = new Date().toISOString();
-  console.error(`[${timestamp}] ${req.method} ${req.originalUrl} - ERROR: ${err.name || 'Unknown'} - ${err.message}`);
-  
-  // Standard response structure
-  let responseError = {
-    message: 'An error occurred',
-    timestamp: timestamp
-  };
-
-  // Handle custom ApiErrors
-  if (err.constructor.name === 'BadRequestError' || 
-      err.constructor.name === 'UnauthorizedError' || 
-      err.constructor.name === 'NotFoundError' || 
-      err.constructor.name === 'ForbiddenError') {
-    responseError.message = err.message;
-    
-    if (err.errors) {
-      responseError.errors = err.errors;
-    }
-    
-    return res.status(err.statusCode).json(responseError);
-  }
-
-  // Handle Mongoose validation errors
-  if (err.name === 'ValidationError') {
-    const messages = Object.values(err.errors).map(val => val.message);
-    responseError = {
-      message: 'Validation Error',
-      errors: messages,
-      timestamp: timestamp
-    };
-    return res.status(400).json(responseError);
-  }
-  
-  // Handle Mongoose duplicate key errors
-  if (err.code === 11000) {
-    const field = Object.keys(err.keyValue)[0];
-    const value = err.keyValue[field];
-    responseError.message = `Duplicate value for ${field}: "${value}". Please use another value.`;
-    return res.status(400).json(responseError);
-  }
-  
-  // Handle Mongoose cast errors (e.g., invalid ObjectId)
-  if (err.name === 'CastError') {
-    responseError.message = `Invalid ${err.path}: "${err.value}"`;
-    return res.status(400).json(responseError);
-  }
-
-  // Handle JWT errors
-  if (err instanceof JsonWebTokenError) {
-    responseError.message = 'Invalid authentication token';
-    return res.status(401).json(responseError);
-  }
-
-  if (err instanceof TokenExpiredError) {
-    responseError.message = 'Authentication token has expired';
-    return res.status(401).json(responseError);
-  }
-
-  // Default 500 handler
-  responseError.message = 'Internal Server Error';
-  res.status(500).json(responseError);
-});
-
-// Start the server
-const PORT = 3099; // Use a different port for testing
-app.listen(PORT, () => {
-  console.log(`Error handler test server running on port ${PORT}`);
-  console.log(`Test URLs:`);
-  console.log(`- http://localhost:${PORT}/test/bad-request`);
-  console.log(`- http://localhost:${PORT}/test/validation-error`);
-  console.log(`- http://localhost:${PORT}/test/unauthorized`);
-  console.log(`- http://localhost:${PORT}/test/not-found`);
-  console.log(`- http://localhost:${PORT}/test/forbidden`);
-  console.log(`- http://localhost:${PORT}/test/mongoose-cast`);
-  console.log(`- http://localhost:${PORT}/test/jwt-invalid`);
-  console.log(`- http://localhost:${PORT}/test/jwt-expired`);
-  console.log(`- http://localhost:${PORT}/test/unhandled`);
-});
\ No newline at end of file
diff --git a/backend/tests/setup.js b/backend/tests/setup.js
deleted file mode 100644
index 585c066..0000000
--- a/backend/tests/setup.js
+++ /dev/null
@@ -1,29 +0,0 @@
-const { MongoMemoryServer } = require('mongodb-memory-server');
-// Import mongoose instance and server control from the refactored server.js
-const { mongooseInstance, closeServer } = require('../src/server');
-
-let mongoServer;
-
-beforeAll(async () => {
-  mongoServer = await MongoMemoryServer.create();
-  const mongoUri = mongoServer.getUri();
-  // Use the imported mongoose instance to connect
-  await mongooseInstance.connect(mongoUri);
-});
-
-afterEach(async () => {
-  // Clear all collections after each test
-  const collections = mongooseInstance.connection.collections;
-  for (const key in collections) {
-    const collection = collections[key];
-    await collection.deleteMany({});
-  }
-});
-
-afterAll(async () => {
-  // Use the imported mongoose instance to disconnect
-  await mongooseInstance.disconnect();
-  await mongoServer.stop();
-  // Use the imported closeServer function
-  await new Promise(resolve => closeServer(resolve));
-});
diff --git a/backend/tests/unit/userModel.test.js b/backend/tests/unit/userModel.test.js
deleted file mode 100644
index 297ffdf..0000000
--- a/backend/tests/unit/userModel.test.js
+++ /dev/null
@@ -1,32 +0,0 @@
-const mongoose = require('mongoose');
-const bcryptjs = require('bcryptjs');
-const User = require('../../src/models/User'); // Adjust path as needed
-
-describe('User Model - Password Matching', () => {
-  let testUser;
-  const plainPassword = 'password123';
-
-  beforeAll(async () => {
-    // No need to connect here, setup.js handles it
-    // Create a user directly for testing the method
-    const salt = await bcryptjs.genSalt(10);
-    const hashedPassword = await bcryptjs.hash(plainPassword, salt);
-    testUser = new User({
-      name: 'Test User',
-      email: 'test@example.com',
-      password: hashedPassword, // Store the hashed password
-      role: 'customer'
-    });
-    // We don't save it to the DB for this unit test, just need the instance method
-  });
-
-  it('should return true for matching passwords', async () => {
-    const isMatch = await testUser.matchPassword(plainPassword);
-    expect(isMatch).toBe(true);
-  });
-
-  it('should return false for non-matching passwords', async () => {
-    const isMatch = await testUser.matchPassword('wrongpassword');
-    expect(isMatch).toBe(false);
-  });
-});
diff --git a/backend/tsconfig.json b/backend/tsconfig.json
new file mode 100644
index 0000000..f5b4ba4
--- /dev/null
+++ b/backend/tsconfig.json
@@ -0,0 +1,15 @@
+{
+  "compilerOptions": {
+    "target": "ES6",
+    "module": "commonjs",
+    "outDir": "./dist",
+    "rootDir": "./",
+    "strict": true,
+    "esModuleInterop": true,
+    "skipLibCheck": true,
+    "forceConsistentCasingInFileNames": true,
+    "moduleResolution": "node"
+  },
+  "include": ["**/*.ts"],
+  "exclude": ["node_modules"]
+}
\ No newline at end of file
diff --git a/backend/utils/email.d.ts b/backend/utils/email.d.ts
new file mode 100644
index 0000000..c9e0f91
--- /dev/null
+++ b/backend/utils/email.d.ts
@@ -0,0 +1,3 @@
+declare module 'utils/email' {
+    export function sendEmail(to: string, subject: string, text: string): Promise<void>;
+  }
\ No newline at end of file
diff --git a/backend/utils/email.ts b/backend/utils/email.ts
new file mode 100644
index 0000000..a1e85bc
--- /dev/null
+++ b/backend/utils/email.ts
@@ -0,0 +1,26 @@
+import nodemailer from 'nodemailer';
+
+export const sendEmail = async (to: string, subject: string, text: string) => {
+  const transporter = nodemailer.createTransport({
+    service: 'gmail',
+    auth: {
+      user: process.env.EMAIL_USER,
+      pass: process.env.EMAIL_PASS,
+    },
+  });
+
+  const mailOptions = {
+    from: process.env.EMAIL_USER,
+    to,
+    subject,
+    text,
+  };
+
+  try {
+    await transporter.sendMail(mailOptions);
+    console.log('Email sent successfully');
+  } catch (error) {
+    console.error('Error sending email:', error);
+    throw new Error('Failed to send email');
+  }
+};
\ No newline at end of file
diff --git a/changes-summary.txt b/changes-summary.txt
deleted file mode 100644
index 89656d4..0000000
--- a/changes-summary.txt
+++ /dev/null
@@ -1,1306 +0,0 @@
-diff --git a/frontend/src/components/common/DateRangePicker.jsx b/frontend/src/components/common/DateRangePicker.jsx
-new file mode 100644
-index 0000000..41d4d36
---- /dev/null
-+++ b/frontend/src/components/common/DateRangePicker.jsx
-@@ -0,0 +1,172 @@
-+import React, { useState } from 'react';
-+import { TextField, IconButton, Box, Paper, Popover, Button } from '@mui/material';
-+import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
-+import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
-+import { format } from 'date-fns';
-+import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
-+
-+/**
-+ * DateRangePicker Component
-+ * 
-+ * A reusable component for selecting a date range with start and end dates
-+ * 
-+ * @param {Date} startDate - Initial start date
-+ * @param {Date} endDate - Initial end date
-+ * @param {Function} onDateChange - Callback function that receives the new start and end dates
-+ * @param {Object} sx - Additional style properties for the component
-+ */
-+const DateRangePicker = ({ startDate, endDate, onDateChange, sx }) => {
-+  const [anchorEl, setAnchorEl] = useState(null);
-+  const [tempStartDate, setTempStartDate] = useState(startDate);
-+  const [tempEndDate, setTempEndDate] = useState(endDate);
-+  
-+  const open = Boolean(anchorEl);
-+  
-+  // Format date for display in the input field
-+  const formatDisplayDate = (start, end) => {
-+    return `${format(start, 'MMM dd, yyyy')} - ${format(end, 'MMM dd, yyyy')}`;
-+  };
-+  
-+  const handleOpen = (event) => {
-+    setAnchorEl(event.currentTarget);
-+  };
-+  
-+  const handleClose = () => {
-+    setAnchorEl(null);
-+    // Reset temp dates to current selected dates when canceling
-+    setTempStartDate(startDate);
-+    setTempEndDate(endDate);
-+  };
-+  
-+  const handleApply = () => {
-+    // Ensure end date is not before start date
-+    if (tempEndDate < tempStartDate) {
-+      setTempEndDate(tempStartDate);
-+    }
-+    
-+    // Call the onDateChange callback with the new dates
-+    onDateChange(tempStartDate, tempEndDate);
-+    handleClose();
-+  };
-+  
-+  // Predefined date ranges
-+  const dateRanges = [
-+    { label: 'Today', getRange: () => {
-+      const today = new Date();
-+      return [today, today];
-+    }},
-+    { label: 'Last 7 Days', getRange: () => {
-+      const end = new Date();
-+      const start = new Date();
-+      start.setDate(start.getDate() - 6);
-+      return [start, end];
-+    }},
-+    { label: 'Last 30 Days', getRange: () => {
-+      const end = new Date();
-+      const start = new Date();
-+      start.setDate(start.getDate() - 29);
-+      return [start, end];
-+    }},
-+    { label: 'This Month', getRange: () => {
-+      const now = new Date();
-+      const start = new Date(now.getFullYear(), now.getMonth(), 1);
-+      const end = new Date();
-+      return [start, end];
-+    }},
-+    { label: 'Last Month', getRange: () => {
-+      const now = new Date();
-+      const start = new Date(now.getFullYear(), now.getMonth() - 1, 1);
-+      const end = new Date(now.getFullYear(), now.getMonth(), 0);
-+      return [start, end];
-+    }}
-+  ];
-+  
-+  const applyPresetRange = (rangeIndex) => {
-+    const [start, end] = dateRanges[rangeIndex].getRange();
-+    setTempStartDate(start);
-+    setTempEndDate(end);
-+  };
-+
-+  return (
-+    <Box sx={{ display: 'inline-block', ...sx }}>
-+      <TextField
-+        value={formatDisplayDate(startDate, endDate)}
-+        InputProps={{
-+          readOnly: true,
-+          endAdornment: (
-+            <IconButton onClick={handleOpen} edge="end">
-+              <CalendarTodayIcon />
-+            </IconButton>
-+          )
-+        }}
-+        onClick={handleOpen}
-+        sx={{ cursor: 'pointer' }}
-+      />
-+      
-+      <Popover
-+        open={open}
-+        anchorEl={anchorEl}
-+        onClose={handleClose}
-+        anchorOrigin={{
-+          vertical: 'bottom',
-+          horizontal: 'left',
-+        }}
-+        transformOrigin={{
-+          vertical: 'top',
-+          horizontal: 'left',
-+        }}
-+      >
-+        <Paper sx={{ p: 2, width: 320 }}>
-+          <LocalizationProvider dateAdapter={AdapterDateFns}>
-+            <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
-+              <DatePicker
-+                label="Start Date"
-+                value={tempStartDate}
-+                onChange={(newDate) => setTempStartDate(newDate)}
-+                slotProps={{ textField: { size: 'small', fullWidth: true } }}
-+              />
-+              <DatePicker
-+                label="End Date"
-+                value={tempEndDate}
-+                onChange={(newDate) => setTempEndDate(newDate)}
-+                minDate={tempStartDate}
-+                slotProps={{ textField: { size: 'small', fullWidth: true } }}
-+              />
-+            </Box>
-+          </LocalizationProvider>
-+          
-+          <Box sx={{ mb: 2 }}>
-+            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
-+              {dateRanges.map((range, index) => (
-+                <Button 
-+                  key={index} 
-+                  variant="outlined" 
-+                  size="small"
-+                  onClick={() => applyPresetRange(index)}
-+                >
-+                  {range.label}
-+                </Button>
-+              ))}
-+            </Box>
-+          </Box>
-+          
-+          <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
-+            <Button onClick={handleClose} size="small">
-+              Cancel
-+            </Button>
-+            <Button 
-+              onClick={handleApply} 
-+              variant="contained" 
-+              size="small"
-+              disabled={!tempStartDate || !tempEndDate}
-+            >
-+              Apply
-+            </Button>
-+          </Box>
-+        </Paper>
-+      </Popover>
-+    </Box>
-+  );
-+};
-+
-+export default DateRangePicker;
-\ No newline at end of file
-diff --git a/frontend/src/components/layouts/DashboardLayout.jsx b/frontend/src/components/layouts/DashboardLayout.jsx
-index 419e665..91911db 100644
---- a/frontend/src/components/layouts/DashboardLayout.jsx
-+++ b/frontend/src/components/layouts/DashboardLayout.jsx
-@@ -31,7 +31,12 @@ import PaymentsPage from '../../pages/payments/PaymentsPage';
- // Import Admin specific pages
- import UserManagementPage from '../../pages/admin/UserManagementPage';
- import StatisticsPage from '../../pages/statistics/StatisticsPage';
--import SystemSettingsPage from '../../pages/admin/SystemSettingsPage'; // Import the System Settings page
-+import SystemSettingsPage from '../../pages/admin/SystemSettingsPage';
-+
-+// Import Staff specific pages
-+import StaffAttendancePage from '../../pages/staff/StaffAttendancePage';
-+import StaffPayslipsPage from '../../pages/staff/StaffPayslipsPage';
-+import StaffPerformancePage from '../../pages/staff/StaffPerformancePage';
- 
- import './DashboardLayout.css';
- 
-@@ -89,11 +94,13 @@ function DashboardLayout() {
-               </>
-             )}
- 
--            {/* Staff routes */}
-+            {/* Staff routes - match exact paths from sidebar navigation */}
-             {user?.role === 'staff' && (
-               <>
--                <Route path="/my-payslips" element={<StaffPayslipViewPage />} />
--                <Route path="/my-performance" element={<div className="dashboard-content"><h2>My Performance</h2></div>} />
-+                <Route path="/attendance" element={<StaffAttendancePage />} />
-+                <Route path="/tasks" element={<div className="dashboard-content"><h2>Task Management</h2><p>Task management features coming soon!</p></div>} />
-+                <Route path="/my-payslips" element={<StaffPayslipsPage />} />
-+                <Route path="/performance" element={<StaffPerformancePage />} />
-                 <Route path="/complaints" element={<AllComplaintsPage />} />
-               </>
-             )}
-diff --git a/frontend/src/pages/staff/StaffAttendancePage.jsx b/frontend/src/pages/staff/StaffAttendancePage.jsx
-new file mode 100644
-index 0000000..22a86e1
---- /dev/null
-+++ b/frontend/src/pages/staff/StaffAttendancePage.jsx
-@@ -0,0 +1,322 @@
-+import React, { useState, useEffect } from 'react';
-+import { format, parseISO, isToday } from 'date-fns';
-+import attendanceApi from '../../services/attendanceApi';
-+import { Box, Typography, Paper, Button, Chip, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Alert, CircularProgress, Card, CardContent, Divider } from '@mui/material';
-+import AccessTimeIcon from '@mui/icons-material/AccessTime';
-+import HistoryIcon from '@mui/icons-material/History';
-+import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
-+import DateRangePicker from '../../components/common/DateRangePicker';
-+
-+/**
-+ * Staff Attendance Page
-+ * 
-+ * Allows staff members to:
-+ * - Check in/out for their shifts
-+ * - View their attendance history with filtering
-+ * - See attendance statistics and status
-+ */
-+const StaffAttendancePage = () => {
-+  const [attendanceHistory, setAttendanceHistory] = useState([]);
-+  const [loading, setLoading] = useState(true);
-+  const [checkInLoading, setCheckInLoading] = useState(false);
-+  const [checkOutLoading, setCheckOutLoading] = useState(false);
-+  const [error, setError] = useState('');
-+  const [todayRecord, setTodayRecord] = useState(null);
-+  const [dateRange, setDateRange] = useState({
-+    startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days
-+    endDate: new Date()
-+  });
-+  
-+  // Calculate stats from attendance history
-+  const stats = {
-+    present: attendanceHistory.filter(record => record.status === 'Present').length,
-+    late: attendanceHistory.filter(record => record.status === 'Late').length,
-+    absent: attendanceHistory.filter(record => record.status === 'Absent').length,
-+    onLeave: attendanceHistory.filter(record => record.status === 'On Leave').length
-+  };
-+
-+  // Fetch attendance history whenever date range changes
-+  useEffect(() => {
-+    const fetchAttendanceHistory = async () => {
-+      setLoading(true);
-+      setError('');
-+      try {
-+        const formattedStartDate = format(dateRange.startDate, 'yyyy-MM-dd');
-+        const formattedEndDate = format(dateRange.endDate, 'yyyy-MM-dd');
-+        
-+        const response = await attendanceApi.getMyAttendance(formattedStartDate, formattedEndDate);
-+        if (response && response.data) {
-+          setAttendanceHistory(response.data);
-+          
-+          // Check if there's a record for today
-+          const todayEntry = response.data.find(record => isToday(new Date(record.date)));
-+          setTodayRecord(todayEntry || null);
-+        }
-+      } catch (err) {
-+        console.error('Error fetching attendance history:', err);
-+        setError(err.response?.data?.message || 'Failed to load attendance history. Please try again.');
-+      } finally {
-+        setLoading(false);
-+      }
-+    };
-+    
-+    fetchAttendanceHistory();
-+  }, [dateRange]);
-+  
-+  // Handle Check In
-+  const handleCheckIn = async () => {
-+    setCheckInLoading(true);
-+    setError('');
-+    try {
-+      const response = await attendanceApi.checkIn();
-+      if (response && response.data) {
-+        // Update today's record in state
-+        setTodayRecord(response.data);
-+        
-+        // Refresh attendance history
-+        const formattedStartDate = format(dateRange.startDate, 'yyyy-MM-dd');
-+        const formattedEndDate = format(dateRange.endDate, 'yyyy-MM-dd');
-+        const historyResponse = await attendanceApi.getMyAttendance(formattedStartDate, formattedEndDate);
-+        if (historyResponse && historyResponse.data) {
-+          setAttendanceHistory(historyResponse.data);
-+        }
-+      }
-+    } catch (err) {
-+      console.error('Error checking in:', err);
-+      setError(err.response?.data?.message || 'Failed to check in. Please try again.');
-+    } finally {
-+      setCheckInLoading(false);
-+    }
-+  };
-+  
-+  // Handle Check Out
-+  const handleCheckOut = async () => {
-+    setCheckOutLoading(true);
-+    setError('');
-+    try {
-+      const response = await attendanceApi.checkOut();
-+      if (response && response.data) {
-+        // Update today's record in state
-+        setTodayRecord(response.data);
-+        
-+        // Refresh attendance history
-+        const formattedStartDate = format(dateRange.startDate, 'yyyy-MM-dd');
-+        const formattedEndDate = format(dateRange.endDate, 'yyyy-MM-dd');
-+        const historyResponse = await attendanceApi.getMyAttendance(formattedStartDate, formattedEndDate);
-+        if (historyResponse && historyResponse.data) {
-+          setAttendanceHistory(historyResponse.data);
-+        }
-+      }
-+    } catch (err) {
-+      console.error('Error checking out:', err);
-+      setError(err.response?.data?.message || 'Failed to check out. Please try again.');
-+    } finally {
-+      setCheckOutLoading(false);
-+    }
-+  };
-+
-+  // Get status chip color
-+  const getStatusChipColor = (status) => {
-+    switch (status) {
-+      case 'Present': return 'success';
-+      case 'Late': return 'warning';
-+      case 'Absent': return 'error';
-+      case 'On Leave': return 'info';
-+      default: return 'default';
-+    }
-+  };
-+
-+  // Format time for display
-+  const formatTime = (dateTimeString) => {
-+    if (!dateTimeString) return '—';
-+    return format(new Date(dateTimeString), 'hh:mm a');
-+  };
-+
-+  return (
-+    <div className="staff-attendance-page">
-+      <Typography variant="h4" component="h1" gutterBottom>
-+        My Attendance
-+      </Typography>
-+
-+      {/* Error message if any */}
-+      {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}
-+      
-+      {/* Today's status and check-in/out actions */}
-+      <Card sx={{ mb: 4 }}>
-+        <CardContent>
-+          <Typography variant="h6" gutterBottom>
-+            <CalendarTodayIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
-+            Today's Attendance
-+          </Typography>
-+          
-+          <Grid container spacing={3} sx={{ mt: 1 }}>
-+            <Grid item xs={12} md={7}>
-+              <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
-+                <Typography variant="body1" gutterBottom>
-+                  {todayRecord ? (
-+                    <>
-+                      <strong>Status:</strong>{' '}
-+                      <Chip 
-+                        label={todayRecord.status || 'Not Set'} 
-+                        color={getStatusChipColor(todayRecord.status)}
-+                        size="small"
-+                      />
-+                    </>
-+                  ) : (
-+                    'Not checked in yet today.'
-+                  )}
-+                </Typography>
-+                
-+                {todayRecord && (
-+                  <>
-+                    <Box sx={{ display: 'flex', gap: 4, mt: 1 }}>
-+                      <Typography variant="body2">
-+                        <strong>Check-in:</strong> {formatTime(todayRecord.checkInTime)}
-+                      </Typography>
-+                      <Typography variant="body2">
-+                        <strong>Check-out:</strong> {formatTime(todayRecord.checkOutTime)}
-+                      </Typography>
-+                    </Box>
-+                    {todayRecord.notes && (
-+                      <Typography variant="body2" sx={{ mt: 1 }}>
-+                        <strong>Notes:</strong> {todayRecord.notes}
-+                      </Typography>
-+                    )}
-+                  </>
-+                )}
-+              </Box>
-+            </Grid>
-+            
-+            <Grid item xs={12} md={5}>
-+              <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2, height: '100%', alignItems: 'center' }}>
-+                {!todayRecord || !todayRecord.checkInTime ? (
-+                  <Button
-+                    variant="contained"
-+                    color="primary"
-+                    onClick={handleCheckIn}
-+                    disabled={checkInLoading}
-+                    startIcon={checkInLoading ? <CircularProgress size={20} /> : <AccessTimeIcon />}
-+                  >
-+                    Check In
-+                  </Button>
-+                ) : !todayRecord.checkOutTime ? (
-+                  <Button
-+                    variant="contained"
-+                    color="secondary"
-+                    onClick={handleCheckOut}
-+                    disabled={checkOutLoading}
-+                    startIcon={checkOutLoading ? <CircularProgress size={20} /> : <AccessTimeIcon />}
-+                  >
-+                    Check Out
-+                  </Button>
-+                ) : (
-+                  <Chip label="Shift Completed" color="success" />
-+                )}
-+              </Box>
-+            </Grid>
-+          </Grid>
-+        </CardContent>
-+      </Card>
-+
-+      {/* Attendance statistics summary */}
-+      <Box sx={{ mb: 4 }}>
-+        <Typography variant="h6" gutterBottom>
-+          <HistoryIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
-+          Attendance Summary
-+        </Typography>
-+        
-+        <Grid container spacing={2}>
-+          <Grid item xs={6} sm={3}>
-+            <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'success.light', color: 'white' }}>
-+              <Typography variant="h4">{stats.present}</Typography>
-+              <Typography variant="body2">Present</Typography>
-+            </Paper>
-+          </Grid>
-+          <Grid item xs={6} sm={3}>
-+            <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'warning.light', color: 'white' }}>
-+              <Typography variant="h4">{stats.late}</Typography>
-+              <Typography variant="body2">Late</Typography>
-+            </Paper>
-+          </Grid>
-+          <Grid item xs={6} sm={3}>
-+            <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'error.light', color: 'white' }}>
-+              <Typography variant="h4">{stats.absent}</Typography>
-+              <Typography variant="body2">Absent</Typography>
-+            </Paper>
-+          </Grid>
-+          <Grid item xs={6} sm={3}>
-+            <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'info.light', color: 'white' }}>
-+              <Typography variant="h4">{stats.onLeave}</Typography>
-+              <Typography variant="body2">On Leave</Typography>
-+            </Paper>
-+          </Grid>
-+        </Grid>
-+      </Box>
-+      
-+      {/* Attendance History with Date Range Picker */}
-+      <Box sx={{ mb: 3 }}>
-+        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
-+          <Typography variant="h6">
-+            <HistoryIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
-+            Attendance History
-+          </Typography>
-+          
-+          <DateRangePicker 
-+            startDate={dateRange.startDate}
-+            endDate={dateRange.endDate}
-+            onDateChange={(start, end) => setDateRange({ startDate: start, endDate: end })}
-+          />
-+        </Box>
-+        
-+        {loading ? (
-+          <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
-+            <CircularProgress />
-+          </Box>
-+        ) : attendanceHistory.length > 0 ? (
-+          <TableContainer component={Paper}>
-+            <Table>
-+              <TableHead>
-+                <TableRow>
-+                  <TableCell>Date</TableCell>
-+                  <TableCell>Status</TableCell>
-+                  <TableCell>Check In</TableCell>
-+                  <TableCell>Check Out</TableCell>
-+                  <TableCell>Hours Worked</TableCell>
-+                  <TableCell>Notes</TableCell>
-+                </TableRow>
-+              </TableHead>
-+              <TableBody>
-+                {attendanceHistory.map((record) => (
-+                  <TableRow key={record._id}>
-+                    <TableCell>{format(new Date(record.date), 'dd MMM yyyy')}</TableCell>
-+                    <TableCell>
-+                      <Chip 
-+                        label={record.status} 
-+                        color={getStatusChipColor(record.status)}
-+                        size="small"
-+                      />
-+                    </TableCell>
-+                    <TableCell>{formatTime(record.checkInTime)}</TableCell>
-+                    <TableCell>{formatTime(record.checkOutTime)}</TableCell>
-+                    <TableCell>
-+                      {record.checkInTime && record.checkOutTime ? (
-+                        `${((new Date(record.checkOutTime) - new Date(record.checkInTime)) / (1000 * 60 * 60)).toFixed(2)} hrs`
-+                      ) : '—'}
-+                    </TableCell>
-+                    <TableCell>{record.notes || '—'}</TableCell>
-+                  </TableRow>
-+                ))}
-+              </TableBody>
-+            </Table>
-+          </TableContainer>
-+        ) : (
-+          <Paper sx={{ p: 3, textAlign: 'center', bgcolor: 'background.default' }}>
-+            <Typography>No attendance records found for the selected period.</Typography>
-+          </Paper>
-+        )}
-+      </Box>
-+    </div>
-+  );
-+};
-+
-+export default StaffAttendancePage;
-\ No newline at end of file
-diff --git a/frontend/src/pages/staff/StaffPayslipsPage.jsx b/frontend/src/pages/staff/StaffPayslipsPage.jsx
-new file mode 100644
-index 0000000..02239d9
---- /dev/null
-+++ b/frontend/src/pages/staff/StaffPayslipsPage.jsx
-@@ -0,0 +1,326 @@
-+import React, { useState, useEffect } from 'react';
-+import { format } from 'date-fns';
-+import { useAuth } from '../../contexts/AuthContext';
-+import payrollApi from '../../services/payrollApi';
-+import { 
-+  Box, 
-+  Typography, 
-+  Paper, 
-+  Button, 
-+  Grid, 
-+  Card, 
-+  CardContent,
-+  Table, 
-+  TableBody, 
-+  TableCell, 
-+  TableContainer, 
-+  TableHead, 
-+  TableRow, 
-+  Alert, 
-+  CircularProgress,
-+  Chip,
-+  Accordion,
-+  AccordionSummary,
-+  AccordionDetails,
-+  Divider
-+} from '@mui/material';
-+import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
-+import DownloadIcon from '@mui/icons-material/Download';
-+import ReceiptIcon from '@mui/icons-material/Receipt';
-+import PaymentIcon from '@mui/icons-material/Payment';
-+
-+/**
-+ * Staff Payslips Page
-+ * 
-+ * Displays payroll history for the logged-in staff member
-+ * Allows downloading of payslips
-+ */
-+const StaffPayslipsPage = () => {
-+  const { user } = useAuth();
-+  const [payrollHistory, setPayrollHistory] = useState([]);
-+  const [loading, setLoading] = useState(true);
-+  const [error, setError] = useState('');
-+  const [selectedPayroll, setSelectedPayroll] = useState(null);
-+  const [downloadingId, setDownloadingId] = useState(null);
-+
-+  // Fetch payroll history when component mounts
-+  useEffect(() => {
-+    const fetchPayrollHistory = async () => {
-+      if (!user || !user._id) return;
-+      
-+      setLoading(true);
-+      setError('');
-+      try {
-+        const response = await payrollApi.getStaffPayrollHistory(user._id);
-+        if (response && response.data) {
-+          setPayrollHistory(response.data);
-+        }
-+      } catch (err) {
-+        console.error('Error fetching payroll history:', err);
-+        setError(err.response?.data?.message || 'Failed to load payroll history. Please try again.');
-+      } finally {
-+        setLoading(false);
-+      }
-+    };
-+    
-+    fetchPayrollHistory();
-+  }, [user]);
-+
-+  // Handle payslip download
-+  const handleDownloadPayslip = async (payrollId) => {
-+    setDownloadingId(payrollId);
-+    try {
-+      // In a real implementation, this would call an API endpoint that returns a PDF blob
-+      // For now, we'll just simulate a download with a timeout
-+      await new Promise(resolve => setTimeout(resolve, 1500));
-+      
-+      // Alert the user that this is a placeholder
-+      alert('This is a placeholder for payslip download functionality. In a real implementation, this would download your payslip as a PDF.');
-+    } catch (err) {
-+      console.error('Error downloading payslip:', err);
-+      alert('Failed to download payslip. Please try again later.');
-+    } finally {
-+      setDownloadingId(null);
-+    }
-+  };
-+
-+  // Handle view payslip details
-+  const handleViewPayslip = async (payrollId) => {
-+    try {
-+      const response = await payrollApi.getPayrollLogById(payrollId);
-+      if (response && response.data) {
-+        setSelectedPayroll(response.data);
-+      }
-+    } catch (err) {
-+      console.error('Error fetching payroll details:', err);
-+      alert('Failed to load payroll details. Please try again.');
-+    }
-+  };
-+
-+  // Format currency for display
-+  const formatCurrency = (amount) => {
-+    return new Intl.NumberFormat('en-US', {
-+      style: 'currency',
-+      currency: 'USD'
-+    }).format(amount);
-+  };
-+
-+  // Format date for display
-+  const formatDate = (dateString) => {
-+    if (!dateString) return 'N/A';
-+    return format(new Date(dateString), 'dd MMM yyyy');
-+  };
-+
-+  // Get payment status chip color
-+  const getPaymentStatusColor = (status) => {
-+    switch (status.toLowerCase()) {
-+      case 'paid': return 'success';
-+      case 'pending': return 'warning';
-+      case 'processing': return 'info';
-+      default: return 'default';
-+    }
-+  };
-+
-+  return (
-+    <div className="staff-payslips-page">
-+      <Typography variant="h4" component="h1" gutterBottom>
-+        My Payslips
-+      </Typography>
-+      
-+      {/* Error message if any */}
-+      {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}
-+      
-+      {/* Summary of upcoming payment if available */}
-+      {payrollHistory.length > 0 && payrollHistory[0].status === 'pending' && (
-+        <Card sx={{ mb: 4 }}>
-+          <CardContent>
-+            <Typography variant="h6" gutterBottom>
-+              <PaymentIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
-+              Next Payment
-+            </Typography>
-+            
-+            <Grid container spacing={3}>
-+              <Grid item xs={12} md={8}>
-+                <Typography variant="body1">
-+                  <strong>Period:</strong> {formatDate(payrollHistory[0].periodStart)} - {formatDate(payrollHistory[0].periodEnd)}
-+                </Typography>
-+                <Typography variant="body1" mt={1}>
-+                  <strong>Net Pay:</strong> {formatCurrency(payrollHistory[0].netPay)}
-+                </Typography>
-+                {payrollHistory[0].expectedPaymentDate && (
-+                  <Typography variant="body1" mt={1}>
-+                    <strong>Expected Payment Date:</strong> {formatDate(payrollHistory[0].expectedPaymentDate)}
-+                  </Typography>
-+                )}
-+              </Grid>
-+              <Grid item xs={12} md={4}>
-+                <Box sx={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', height: '100%' }}>
-+                  <Chip 
-+                    label={payrollHistory[0].status.charAt(0).toUpperCase() + payrollHistory[0].status.slice(1)} 
-+                    color={getPaymentStatusColor(payrollHistory[0].status)}
-+                  />
-+                </Box>
-+              </Grid>
-+            </Grid>
-+          </CardContent>
-+        </Card>
-+      )}
-+      
-+      {/* Payroll History */}
-+      <Card>
-+        <CardContent>
-+          <Typography variant="h6" gutterBottom>
-+            <ReceiptIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
-+            Payroll History
-+          </Typography>
-+          
-+          {loading ? (
-+            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
-+              <CircularProgress />
-+            </Box>
-+          ) : payrollHistory.length > 0 ? (
-+            <TableContainer component={Paper} sx={{ mt: 2 }}>
-+              <Table>
-+                <TableHead>
-+                  <TableRow>
-+                    <TableCell>Pay Period</TableCell>
-+                    <TableCell>Payment Date</TableCell>
-+                    <TableCell>Gross Pay</TableCell>
-+                    <TableCell>Net Pay</TableCell>
-+                    <TableCell>Status</TableCell>
-+                    <TableCell>Actions</TableCell>
-+                  </TableRow>
-+                </TableHead>
-+                <TableBody>
-+                  {payrollHistory.map((payroll) => (
-+                    <TableRow key={payroll._id}>
-+                      <TableCell>{formatDate(payroll.periodStart)} - {formatDate(payroll.periodEnd)}</TableCell>
-+                      <TableCell>{formatDate(payroll.paymentDate) || 'Pending'}</TableCell>
-+                      <TableCell>{formatCurrency(payroll.grossPay)}</TableCell>
-+                      <TableCell>{formatCurrency(payroll.netPay)}</TableCell>
-+                      <TableCell>
-+                        <Chip 
-+                          label={payroll.status.charAt(0).toUpperCase() + payroll.status.slice(1)} 
-+                          color={getPaymentStatusColor(payroll.status)}
-+                          size="small"
-+                        />
-+                      </TableCell>
-+                      <TableCell>
-+                        <Box sx={{ display: 'flex', gap: 1 }}>
-+                          <Button 
-+                            size="small" 
-+                            variant="outlined" 
-+                            onClick={() => handleViewPayslip(payroll._id)}
-+                          >
-+                            View
-+                          </Button>
-+                          <Button 
-+                            size="small" 
-+                            variant="outlined"
-+                            color="secondary"
-+                            startIcon={downloadingId === payroll._id ? <CircularProgress size={16} /> : <DownloadIcon />}
-+                            onClick={() => handleDownloadPayslip(payroll._id)}
-+                            disabled={downloadingId === payroll._id || payroll.status !== 'paid'}
-+                          >
-+                            Payslip
-+                          </Button>
-+                        </Box>
-+                      </TableCell>
-+                    </TableRow>
-+                  ))}
-+                </TableBody>
-+              </Table>
-+            </TableContainer>
-+          ) : (
-+            <Paper sx={{ p: 3, textAlign: 'center', bgcolor: 'background.default' }}>
-+              <Typography>No payroll records found.</Typography>
-+            </Paper>
-+          )}
-+        </CardContent>
-+      </Card>
-+      
-+      {/* Selected Payroll Details */}
-+      {selectedPayroll && (
-+        <Card sx={{ mt: 4 }}>
-+          <CardContent>
-+            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
-+              <Typography variant="h6">
-+                Payslip Details
-+              </Typography>
-+              <Button 
-+                variant="contained" 
-+                color="secondary"
-+                startIcon={<DownloadIcon />}
-+                onClick={() => handleDownloadPayslip(selectedPayroll._id)}
-+                disabled={downloadingId === selectedPayroll._id || selectedPayroll.status !== 'paid'}
-+              >
-+                Download Payslip
-+              </Button>
-+            </Box>
-+            
-+            <Grid container spacing={3}>
-+              <Grid item xs={12} md={6}>
-+                <Typography variant="subtitle1" gutterBottom>Payment Information</Typography>
-+                <Paper variant="outlined" sx={{ p: 2, height: '100%' }}>
-+                  <Typography variant="body2"><strong>Pay Period:</strong> {formatDate(selectedPayroll.periodStart)} - {formatDate(selectedPayroll.periodEnd)}</Typography>
-+                  <Typography variant="body2" mt={1}><strong>Payment Date:</strong> {formatDate(selectedPayroll.paymentDate) || 'Pending'}</Typography>
-+                  <Typography variant="body2" mt={1}><strong>Payment Method:</strong> {selectedPayroll.paymentMethod || 'Direct Deposit'}</Typography>
-+                  {selectedPayroll.transactionRef && (
-+                    <Typography variant="body2" mt={1}><strong>Transaction Reference:</strong> {selectedPayroll.transactionRef}</Typography>
-+                  )}
-+                </Paper>
-+              </Grid>
-+              
-+              <Grid item xs={12} md={6}>
-+                <Typography variant="subtitle1" gutterBottom>Earnings Summary</Typography>
-+                <Paper variant="outlined" sx={{ p: 2, height: '100%' }}>
-+                  <Typography variant="body2"><strong>Base Salary:</strong> {formatCurrency(selectedPayroll.basePay || 0)}</Typography>
-+                  <Typography variant="body2" mt={1}><strong>Overtime:</strong> {formatCurrency(selectedPayroll.overtime || 0)}</Typography>
-+                  <Typography variant="body2" mt={1}><strong>Bonus:</strong> {formatCurrency(selectedPayroll.bonus || 0)}</Typography>
-+                  <Divider sx={{ my: 1 }} />
-+                  <Typography variant="body2"><strong>Gross Pay:</strong> {formatCurrency(selectedPayroll.grossPay)}</Typography>
-+                </Paper>
-+              </Grid>
-+              
-+              <Grid item xs={12} md={6}>
-+                <Typography variant="subtitle1" gutterBottom>Deductions</Typography>
-+                <Paper variant="outlined" sx={{ p: 2, height: '100%' }}>
-+                  <Typography variant="body2"><strong>Tax:</strong> {formatCurrency(selectedPayroll.taxDeductions || 0)}</Typography>
-+                  <Typography variant="body2" mt={1}><strong>Insurance:</strong> {formatCurrency(selectedPayroll.insuranceDeductions || 0)}</Typography>
-+                  <Typography variant="body2" mt={1}><strong>Other Deductions:</strong> {formatCurrency(selectedPayroll.otherDeductions || 0)}</Typography>
-+                  <Divider sx={{ my: 1 }} />
-+                  <Typography variant="body2"><strong>Total Deductions:</strong> {formatCurrency((selectedPayroll.taxDeductions || 0) + (selectedPayroll.insuranceDeductions || 0) + (selectedPayroll.otherDeductions || 0))}</Typography>
-+                </Paper>
-+              </Grid>
-+              
-+              <Grid item xs={12} md={6}>
-+                <Typography variant="subtitle1" gutterBottom>Net Pay</Typography>
-+                <Paper variant="outlined" sx={{ p: 2, bgcolor: 'success.light', color: 'white', height: '100%' }}>
-+                  <Typography variant="h5" align="center" gutterBottom>{formatCurrency(selectedPayroll.netPay)}</Typography>
-+                  <Typography variant="body2" align="center">
-+                    {selectedPayroll.status === 'paid' ? 'Paid' : 'Pending payment'}
-+                  </Typography>
-+                </Paper>
-+              </Grid>
-+              
-+              {selectedPayroll.notes && (
-+                <Grid item xs={12}>
-+                  <Accordion>
-+                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>
-+                      <Typography>Additional Notes</Typography>
-+                    </AccordionSummary>
-+                    <AccordionDetails>
-+                      <Typography>{selectedPayroll.notes}</Typography>
-+                    </AccordionDetails>
-+                  </Accordion>
-+                </Grid>
-+              )}
-+            </Grid>
-+          </CardContent>
-+        </Card>
-+      )}
-+    </div>
-+  );
-+};
-+
-+export default StaffPayslipsPage;
-\ No newline at end of file
-diff --git a/frontend/src/pages/staff/StaffPerformancePage.jsx b/frontend/src/pages/staff/StaffPerformancePage.jsx
-new file mode 100644
-index 0000000..68c67be
---- /dev/null
-+++ b/frontend/src/pages/staff/StaffPerformancePage.jsx
-@@ -0,0 +1,423 @@
-+import React, { useState, useEffect } from 'react';
-+import { format } from 'date-fns';
-+import { useAuth } from '../../contexts/AuthContext';
-+import performanceApi from '../../services/performanceApi';
-+import { 
-+  Box, 
-+  Typography, 
-+  Paper, 
-+  Grid, 
-+  Card, 
-+  CardContent,
-+  Table, 
-+  TableBody, 
-+  TableCell, 
-+  TableContainer, 
-+  TableHead, 
-+  TableRow, 
-+  Alert, 
-+  CircularProgress,
-+  Chip,
-+  Rating,
-+  LinearProgress,
-+  List,
-+  ListItem,
-+  ListItemIcon,
-+  ListItemText,
-+  Divider,
-+  Button
-+} from '@mui/material';
-+import StarIcon from '@mui/icons-material/Star';
-+import AssessmentIcon from '@mui/icons-material/Assessment';
-+import TrendingUpIcon from '@mui/icons-material/TrendingUp';
-+import CheckCircleIcon from '@mui/icons-material/CheckCircle';
-+import WarningIcon from '@mui/icons-material/Warning';
-+import SchoolIcon from '@mui/icons-material/School';
-+import QueryBuilderIcon from '@mui/icons-material/QueryBuilder';
-+import PieChartIcon from '@mui/icons-material/PieChart';
-+
-+/**
-+ * Staff Performance Page
-+ * 
-+ * Displays performance reviews and metrics for the logged-in staff member
-+ * Shows historical performance data and improvement areas
-+ */
-+const StaffPerformancePage = () => {
-+  const { user } = useAuth();
-+  const [performanceReviews, setPerformanceReviews] = useState([]);
-+  const [loading, setLoading] = useState(true);
-+  const [error, setError] = useState('');
-+  const [selectedReview, setSelectedReview] = useState(null);
-+
-+  // Fetch performance reviews when component mounts
-+  useEffect(() => {
-+    const fetchPerformanceReviews = async () => {
-+      setLoading(true);
-+      setError('');
-+      try {
-+        const response = await performanceApi.getMyReviews();
-+        if (response && response.data) {
-+          setPerformanceReviews(response.data);
-+          
-+          // Set the most recent review as selected by default
-+          if (response.data.length > 0) {
-+            setSelectedReview(response.data[0]);
-+          }
-+        }
-+      } catch (err) {
-+        console.error('Error fetching performance reviews:', err);
-+        setError(err.response?.data?.message || 'Failed to load performance reviews. Please try again.');
-+      } finally {
-+        setLoading(false);
-+      }
-+    };
-+    
-+    fetchPerformanceReviews();
-+  }, []);
-+
-+  // Format date for display
-+  const formatDate = (dateString) => {
-+    if (!dateString) return 'N/A';
-+    return format(new Date(dateString), 'dd MMM yyyy');
-+  };
-+
-+  // Calculate performance trends (simplified simulation)
-+  const calculateTrends = () => {
-+    if (performanceReviews.length < 2) return null;
-+    
-+    // Sort reviews by date
-+    const sortedReviews = [...performanceReviews].sort((a, b) => 
-+      new Date(b.reviewDate) - new Date(a.reviewDate)
-+    );
-+    
-+    // Get current and previous ratings
-+    const currentRating = sortedReviews[0].rating;
-+    const previousRating = sortedReviews[1].rating;
-+    
-+    // Calculate difference and trend
-+    const difference = currentRating - previousRating;
-+    const percentChange = ((difference / previousRating) * 100).toFixed(1);
-+    
-+    return {
-+      difference,
-+      percentChange,
-+      improving: difference > 0,
-+      stable: difference === 0,
-+      declining: difference < 0
-+    };
-+  };
-+
-+  // Get trend info for display
-+  const trends = calculateTrends();
-+
-+  // Calculate overall performance metrics
-+  const metrics = {
-+    averageRating: performanceReviews.length > 0 
-+      ? (performanceReviews.reduce((sum, review) => sum + review.rating, 0) / performanceReviews.length).toFixed(1)
-+      : 0,
-+    totalReviews: performanceReviews.length,
-+    mostRecentRating: performanceReviews.length > 0 ? performanceReviews[0].rating : 0,
-+  };
-+
-+  // Get strengths and weaknesses from the latest review
-+  const strengths = selectedReview?.strengths || [];
-+  const weaknesses = selectedReview?.weaknesses || [];
-+  const goals = selectedReview?.goals || [];
-+  const recommendedTraining = selectedReview?.recommendedTraining || [];
-+
-+  // Function to get color based on rating
-+  const getRatingColor = (rating) => {
-+    if (rating >= 4.5) return 'success.main';
-+    if (rating >= 3.5) return 'success.light';
-+    if (rating >= 2.5) return 'warning.light';
-+    return 'error.light';
-+  };
-+
-+  return (
-+    <div className="staff-performance-page">
-+      <Typography variant="h4" component="h1" gutterBottom>
-+        My Performance
-+      </Typography>
-+      
-+      {/* Error message if any */}
-+      {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}
-+      
-+      {loading ? (
-+        <Box sx={{ display: 'flex', justifyContent: 'center', p: 5 }}>
-+          <CircularProgress />
-+        </Box>
-+      ) : performanceReviews.length === 0 ? (
-+        <Alert severity="info" sx={{ mb: 3 }}>
-+          No performance reviews found. Your first performance review will appear here once completed.
-+        </Alert>
-+      ) : (
-+        <>
-+          {/* Performance Overview */}
-+          <Card sx={{ mb: 4 }}>
-+            <CardContent>
-+              <Typography variant="h6" gutterBottom>
-+                <AssessmentIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
-+                Performance Overview
-+              </Typography>
-+              
-+              <Grid container spacing={3}>
-+                <Grid item xs={12} md={4}>
-+                  <Paper sx={{ p: 2, textAlign: 'center', height: '100%' }}>
-+                    <Typography variant="subtitle1" gutterBottom>Overall Rating</Typography>
-+                    <Box sx={{ display: 'flex', justifyContent: 'center', mb: 1 }}>
-+                      <Rating 
-+                        value={Number(metrics.averageRating)}
-+                        precision={0.1}
-+                        readOnly
-+                        emptyIcon={<StarIcon style={{ opacity: 0.55 }} fontSize="inherit" />}
-+                      />
-+                    </Box>
-+                    <Typography variant="h3" sx={{ color: getRatingColor(metrics.averageRating) }}>
-+                      {metrics.averageRating}
-+                    </Typography>
-+                    <Typography variant="body2" color="text.secondary">
-+                      Based on {metrics.totalReviews} reviews
-+                    </Typography>
-+                  </Paper>
-+                </Grid>
-+                
-+                <Grid item xs={12} md={4}>
-+                  <Paper sx={{ p: 2, textAlign: 'center', height: '100%' }}>
-+                    <Typography variant="subtitle1" gutterBottom>Latest Review</Typography>
-+                    <Box sx={{ display: 'flex', justifyContent: 'center', mb: 1 }}>
-+                      <Rating 
-+                        value={selectedReview?.rating || 0}
-+                        readOnly
-+                        emptyIcon={<StarIcon style={{ opacity: 0.55 }} fontSize="inherit" />}
-+                      />
-+                    </Box>
-+                    <Typography variant="h3" sx={{ color: getRatingColor(selectedReview?.rating || 0) }}>
-+                      {selectedReview?.rating.toFixed(1) || 'N/A'}
-+                    </Typography>
-+                    <Typography variant="body2" color="text.secondary">
-+                      {selectedReview?.reviewDate ? formatDate(selectedReview.reviewDate) : 'N/A'}
-+                    </Typography>
-+                  </Paper>
-+                </Grid>
-+                
-+                <Grid item xs={12} md={4}>
-+                  <Paper sx={{ p: 2, textAlign: 'center', height: '100%' }}>
-+                    <Typography variant="subtitle1" gutterBottom>Performance Trend</Typography>
-+                    {trends ? (
-+                      <>
-+                        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', mb: 1 }}>
-+                          {trends.improving ? (
-+                            <TrendingUpIcon sx={{ color: 'success.main', fontSize: 30 }} />
-+                          ) : trends.stable ? (
-+                            <PieChartIcon sx={{ color: 'info.main', fontSize: 30 }} />
-+                          ) : (
-+                            <TrendingUpIcon sx={{ color: 'error.main', fontSize: 30, transform: 'rotate(180deg)' }} />
-+                          )}
-+                        </Box>
-+                        <Typography variant="h3" sx={{ 
-+                          color: trends.improving ? 'success.main' : trends.stable ? 'info.main' : 'error.main' 
-+                        }}>
-+                          {trends.improving ? '+' : trends.declining ? '-' : ''}{Math.abs(trends.difference).toFixed(1)}
-+                        </Typography>
-+                        <Typography variant="body2" color="text.secondary">
-+                          {trends.improving 
-+                            ? `Improved by ${trends.percentChange}%` 
-+                            : trends.stable 
-+                              ? 'Maintaining performance' 
-+                              : `Decreased by ${Math.abs(trends.percentChange)}%`}
-+                        </Typography>
-+                      </>
-+                    ) : (
-+                      <Typography variant="body2" color="text.secondary">
-+                        Insufficient data for trend analysis
-+                      </Typography>
-+                    )}
-+                  </Paper>
-+                </Grid>
-+              </Grid>
-+            </CardContent>
-+          </Card>
-+          
-+          {/* Performance Details */}
-+          {selectedReview && (
-+            <Card sx={{ mb: 4 }}>
-+              <CardContent>
-+                <Typography variant="h6" gutterBottom>
-+                  Latest Performance Review
-+                </Typography>
-+                
-+                <Grid container spacing={3}>
-+                  <Grid item xs={12}>
-+                    <Paper variant="outlined" sx={{ p: 2 }}>
-+                      <Typography variant="subtitle1" gutterBottom>Review Period: {selectedReview.reviewPeriod}</Typography>
-+                      <Typography variant="body2" gutterBottom>
-+                        <strong>Review Date:</strong> {formatDate(selectedReview.reviewDate)}
-+                      </Typography>
-+                      
-+                      <Typography variant="body1" sx={{ mt: 2 }}>
-+                        <strong>Manager Comments:</strong>
-+                      </Typography>
-+                      <Typography variant="body2" paragraph>
-+                        {selectedReview.reviewComments}
-+                      </Typography>
-+                    </Paper>
-+                  </Grid>
-+                  
-+                  <Grid item xs={12} md={6}>
-+                    <Typography variant="subtitle1" gutterBottom>Strengths</Typography>
-+                    <Paper variant="outlined" sx={{ p: 2, bgcolor: 'success.light', color: 'success.contrastText', height: '100%' }}>
-+                      {strengths.length > 0 ? (
-+                        <List dense>
-+                          {strengths.map((strength, index) => (
-+                            <ListItem key={index}>
-+                              <ListItemIcon>
-+                                <CheckCircleIcon sx={{ color: 'success.contrastText' }} />
-+                              </ListItemIcon>
-+                              <ListItemText primary={strength} />
-+                            </ListItem>
-+                          ))}
-+                        </List>
-+                      ) : (
-+                        <Typography variant="body2">No strengths specified in this review.</Typography>
-+                      )}
-+                    </Paper>
-+                  </Grid>
-+                  
-+                  <Grid item xs={12} md={6}>
-+                    <Typography variant="subtitle1" gutterBottom>Areas for Improvement</Typography>
-+                    <Paper variant="outlined" sx={{ p: 2, bgcolor: 'warning.light', color: 'warning.contrastText', height: '100%' }}>
-+                      {weaknesses.length > 0 ? (
-+                        <List dense>
-+                          {weaknesses.map((weakness, index) => (
-+                            <ListItem key={index}>
-+                              <ListItemIcon>
-+                                <WarningIcon sx={{ color: 'warning.contrastText' }} />
-+                              </ListItemIcon>
-+                              <ListItemText primary={weakness} />
-+                            </ListItem>
-+                          ))}
-+                        </List>
-+                      ) : (
-+                        <Typography variant="body2">No areas for improvement specified in this review.</Typography>
-+                      )}
-+                    </Paper>
-+                  </Grid>
-+                </Grid>
-+              </CardContent>
-+            </Card>
-+          )}
-+          
-+          {/* Development Plan */}
-+          {selectedReview && (
-+            <Card sx={{ mb: 4 }}>
-+              <CardContent>
-+                <Typography variant="h6" gutterBottom>
-+                  Development Plan
-+                </Typography>
-+                
-+                <Grid container spacing={3}>
-+                  <Grid item xs={12} md={6}>
-+                    <Typography variant="subtitle1" gutterBottom>Performance Goals</Typography>
-+                    <Paper variant="outlined" sx={{ p: 2, height: '100%' }}>
-+                      {goals.length > 0 ? (
-+                        <List dense>
-+                          {goals.map((goal, index) => (
-+                            <ListItem key={index}>
-+                              <ListItemIcon>
-+                                <TrendingUpIcon color="primary" />
-+                              </ListItemIcon>
-+                              <ListItemText primary={goal} />
-+                            </ListItem>
-+                          ))}
-+                        </List>
-+                      ) : (
-+                        <Typography variant="body2">No goals specified in this review.</Typography>
-+                      )}
-+                    </Paper>
-+                  </Grid>
-+                  
-+                  <Grid item xs={12} md={6}>
-+                    <Typography variant="subtitle1" gutterBottom>Recommended Training</Typography>
-+                    <Paper variant="outlined" sx={{ p: 2, height: '100%' }}>
-+                      {recommendedTraining.length > 0 ? (
-+                        <List dense>
-+                          {recommendedTraining.map((training, index) => (
-+                            <ListItem key={index}>
-+                              <ListItemIcon>
-+                                <SchoolIcon color="primary" />
-+                              </ListItemIcon>
-+                              <ListItemText primary={training} />
-+                            </ListItem>
-+                          ))}
-+                        </List>
-+                      ) : (
-+                        <Typography variant="body2">No training recommendations in this review.</Typography>
-+                      )}
-+                    </Paper>
-+                  </Grid>
-+                </Grid>
-+              </CardContent>
-+            </Card>
-+          )}
-+          
-+          {/* Performance History */}
-+          <Card>
-+            <CardContent>
-+              <Typography variant="h6" gutterBottom>
-+                <QueryBuilderIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
-+                Performance History
-+              </Typography>
-+              
-+              <TableContainer component={Paper} sx={{ mt: 2 }}>
-+                <Table>
-+                  <TableHead>
-+                    <TableRow>
-+                      <TableCell>Review Period</TableCell>
-+                      <TableCell>Date</TableCell>
-+                      <TableCell>Rating</TableCell>
-+                      <TableCell>Actions</TableCell>
-+                    </TableRow>
-+                  </TableHead>
-+                  <TableBody>
-+                    {performanceReviews.map((review) => (
-+                      <TableRow 
-+                        key={review._id}
-+                        selected={selectedReview && selectedReview._id === review._id}
-+                        hover
-+                      >
-+                        <TableCell>{review.reviewPeriod}</TableCell>
-+                        <TableCell>{formatDate(review.reviewDate)}</TableCell>
-+                        <TableCell>
-+                          <Box sx={{ display: 'flex', alignItems: 'center' }}>
-+                            <Typography sx={{ mr: 1 }}>{review.rating.toFixed(1)}</Typography>
-+                            <Rating 
-+                              value={review.rating} 
-+                              readOnly 
-+                              size="small" 
-+                              precision={0.5}
-+                            />
-+                          </Box>
-+                        </TableCell>
-+                        <TableCell>
-+                          <Button 
-+                            size="small" 
-+                            variant="outlined"
-+                            onClick={() => setSelectedReview(review)}
-+                          >
-+                            View Details
-+                          </Button>
-+                        </TableCell>
-+                      </TableRow>
-+                    ))}
-+                  </TableBody>
-+                </Table>
-+              </TableContainer>
-+            </CardContent>
-+          </Card>
-+        </>
-+      )}
-+    </div>
-+  );
-+};
-+
-+export default StaffPerformancePage;
-\ No newline at end of file
diff --git a/collect_frontend_config.ps1 b/collect_frontend_config.ps1
deleted file mode 100644
index 0697d8e..0000000
--- a/collect_frontend_config.ps1
+++ /dev/null
@@ -1,39 +0,0 @@
-# Script to collect specific frontend configuration and component files
-
-$outputFile = "frontend_config_dump.txt"
-$basePath = ".\frontend" # Relative path from workspace root
-
-# Clear the output file if it exists
-if (Test-Path $outputFile) {
-    Clear-Content $outputFile
-}
-
-# List of files to collect (relative to the frontend directory)
-$files = @(
-    "package.json",
-    "tailwind.config.js",
-    "postcss.config.cjs",
-    "vite.config.js",
-    "src\index.css",
-    "src\main.jsx",
-    "src\App.jsx",
-    "src\pages\experimental\ShadcnExperimentPage.jsx" # Assuming .jsx
-)
-
-# Loop through files, add content to output
-foreach ($file in $files) {
-    $filePath = Join-Path $basePath $file
-    # Use absolute path for Get-Content
-    $absoluteFilePath = Resolve-Path $filePath -ErrorAction SilentlyContinue
-
-    if ($absoluteFilePath) {
-        Add-Content $outputFile "--- File: $($filePath) ---`n" # Corrected newline
-        # Ensure UTF8 encoding is preserved
-        Get-Content $absoluteFilePath -Raw | Add-Content $outputFile -Encoding UTF8
-        Add-Content $outputFile "`n--- End File: $($filePath) ---`n`n" # Corrected newlines
-    } else {
-        Add-Content $outputFile "--- File Not Found: $($filePath) ---`n`n" # Corrected newlines
-    }
-} # Added missing closing brace
-
-Write-Host "Collected specified frontend files into $outputFile" # Corrected string termination
\ No newline at end of file
diff --git a/frontend/env.d.ts b/frontend/env.d.ts
new file mode 100644
index 0000000..7807893
--- /dev/null
+++ b/frontend/env.d.ts
@@ -0,0 +1,8 @@
+interface ImportMetaEnv {
+    readonly VITE_GOOGLE_MAPS_API_KEY: string;
+    readonly VITE_API_URL?: string;
+}
+
+interface ImportMeta {
+    readonly env: ImportMetaEnv;
+}
\ No newline at end of file
diff --git a/frontend/frontend/src/styles/themeStyles.css b/frontend/frontend/src/styles/themeStyles.css
deleted file mode 100644
index a61f7e7..0000000
--- a/frontend/frontend/src/styles/themeStyles.css
+++ /dev/null
@@ -1 +0,0 @@
-/* Theme styles for SmartBin application */\n\n:root {\n  --primary-color: #4ea14a;\n  --secondary-color: #88afa1;\n  --accent-color: #b4c3a2;\n  --text-color: #333333;\n  --light-bg: #f9f9f9;\n  --dark-bg: #141a17;\n}\n\nbody {\n  color: var(--text-color);\n  background-color: var(--light-bg);\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\n/* Global theme styles */\n.theme-primary-bg {\n  background-color: var(--primary-color);\n  color: white;\n}\n\n.theme-secondary-bg {\n  background-color: var(--secondary-color);\n  color: white;\n}\n\n.theme-text {\n  color: var(--text-color);\n}\n
diff --git a/frontend/frontend/src/variables.css b/frontend/frontend/src/variables.css
deleted file mode 100644
index 600a2c6..0000000
--- a/frontend/frontend/src/variables.css
+++ /dev/null
@@ -1 +0,0 @@
-/* CSS Variables for SmartBin application */\n\n:root {\n  /* Colors */\n  --primary-color: #4ea14a;\n  --primary-light: #73c56d;\n  --primary-dark: #3c8a38;\n  --secondary-color: #88afa1;\n  --secondary-light: #a8cfc1;\n  --secondary-dark: #6b9b8d;\n  --accent-color: #b4c3a2;\n  --error-color: #d32f2f;\n  --warning-color: #f57c00;\n  --success-color: #388e3c;\n  --info-color: #0288d1;\n  \n  /* Text colors */\n  --text-primary: #333333;\n  --text-secondary: #666666;\n  --text-disabled: #999999;\n  --text-white: #ffffff;\n  \n  /* Background colors */\n  --bg-default: #f9f9f9;\n  --bg-paper: #ffffff;\n  --bg-light: #f5f5f5;\n  --bg-dark: #121212;\n  \n  /* Border */\n  --border-color: #e0e0e0;\n  --border-light: #f0f0f0;\n  --border-dark: #bdbdbd;\n  --border-radius-sm: 4px;\n  --border-radius-md: 6px;\n  --border-radius-lg: 8px;\n  \n  /* Spacing */\n  --space-xs: 0.25rem;\n  --space-sm: 0.5rem;\n  --space-md: 1rem;\n  --space-lg: 1.5rem;\n  --space-xl: 2rem;\n  \n  /* Shadows */\n  --shadow-sm: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.08);\n  --shadow-md: 0 3px 6px rgba(0,0,0,0.15), 0 2px 4px rgba(0,0,0,0.12);\n  --shadow-lg: 0 10px 20px rgba(0,0,0,0.15), 0 3px 6px rgba(0,0,0,0.1);\n  \n  /* Typography */\n  --font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  --font-weight-light: 300;\n  --font-weight-regular: 400;\n  --font-weight-medium: 500;\n  --font-weight-bold: 700;\n  --font-size-xs: 0.75rem; /* 12px */\n  --font-size-sm: 0.875rem; /* 14px */\n  --font-size-md: 1rem;    /* 16px */\n  --font-size-lg: 1.25rem;  /* 20px */\n  --font-size-xl: 1.5rem;   /* 24px */\n  --font-size-xxl: 2rem;    /* 32px */\n  \n  /* Transitions */\n  --transition-speed-fast: 0.15s;\n  --transition-speed-normal: 0.3s;\n  --transition-speed-slow: 0.5s;\n  --transition-ease: cubic-bezier(0.4, 0, 0.2, 1);\n  \n  /* Component specific */\n  --header-height: 64px;\n  --footer-height: 60px;\n  --sidebar-width: 250px;\n  --card-padding: 1.5rem;\n}
diff --git a/frontend/index.html b/frontend/index.html
index 5f97c75..b87b7b9 100644
--- a/frontend/index.html
+++ b/frontend/index.html
@@ -1,8 +1,7 @@
-<!doctype html>
+<!DOCTYPE html>
 <html lang="en">
   <head>
     <meta charset="UTF-8" />
-    <link rel="icon" type="image/svg+xml" href="https://fonts.gstatic.com/s/i/short-term/release/materialsymbolsoutlined/recycling/default/24px.svg" />
     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     <title>SmartBin</title>
   </head>
@@ -10,4 +9,4 @@
     <div id="root"></div>
     <script type="module" src="/src/main.jsx"></script>
   </body>
-</html>
+</html>
\ No newline at end of file
diff --git a/frontend/package-lock.json b/frontend/package-lock.json
index 40c25f2..e80e186 100644
--- a/frontend/package-lock.json
+++ b/frontend/package-lock.json
@@ -8,43 +8,23 @@
       "name": "frontend",
       "version": "0.0.0",
       "dependencies": {
-        "@emotion/react": "^11.14.0",
-        "@emotion/styled": "^11.14.0",
-        "@fortawesome/fontawesome-svg-core": "^6.7.2",
-        "@fortawesome/free-brands-svg-icons": "^6.7.2",
-        "@fortawesome/free-solid-svg-icons": "^6.7.2",
-        "@fortawesome/react-fontawesome": "^0.2.2",
-        "@mui/icons-material": "^7.0.2",
-        "@mui/material": "^7.0.2",
-        "@mui/x-date-pickers": "^8.1.0",
-        "@stripe/react-stripe-js": "^3.6.0",
-        "@stripe/stripe-js": "^2.4.0",
-        "axios": "^1.8.4",
-        "chart.js": "^4.4.9",
-        "date-fns": "^4.1.0",
-        "jspdf": "^3.0.1",
-        "jspdf-autotable": "^5.0.2",
-        "react": "^19.0.0",
-        "react-chartjs-2": "^5.3.0",
-        "react-dom": "^19.0.0",
-        "react-router-dom": "^7.4.0",
-        "react-transition-group": "^4.4.5",
-        "recharts": "^2.15.3"
+        "axios": "^1.9.0",
+        "jspdf": "^2.5.1",
+        "react": "^18.2.0",
+        "react-dom": "^18.2.0",
+        "react-router-dom": "^6.26.2"
       },
       "devDependencies": {
-        "@eslint/js": "^9.21.0",
-        "@shadcn/ui": "^0.0.4",
-        "@types/react": "^19.0.10",
-        "@types/react-dom": "^19.0.4",
-        "@vitejs/plugin-react": "^4.3.4",
-        "autoprefixer": "^10.4.21",
-        "eslint": "^9.21.0",
-        "eslint-plugin-react-hooks": "^5.1.0",
-        "eslint-plugin-react-refresh": "^0.4.19",
-        "globals": "^15.15.0",
-        "postcss": "^8.5.3",
-        "tailwindcss": "^4.1.5",
-        "vite": "^6.2.0"
+        "@types/react": "^18.2.66",
+        "@types/react-dom": "^18.2.22",
+        "@typescript-eslint/eslint-plugin": "^7.2.0",
+        "@typescript-eslint/parser": "^7.2.0",
+        "@vitejs/plugin-react": "^4.2.1",
+        "eslint": "^8.57.0",
+        "eslint-plugin-react-hooks": "^4.6.0",
+        "eslint-plugin-react-refresh": "^0.4.6",
+        "typescript": "^5.2.2",
+        "vite": "^6.3.4"
       }
     },
     "node_modules/@ampproject/remapping": {
@@ -65,6 +45,7 @@
       "version": "7.26.2",
       "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz",
       "integrity": "sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@babel/helper-validator-identifier": "^7.25.9",
@@ -120,6 +101,7 @@
       "version": "7.26.10",
       "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.26.10.tgz",
       "integrity": "sha512-rRHT8siFIXQrAYOYqZQVsAr8vJ+cBNqcVAY6m5V8/4QqzaPl+zDBe6cLEPRDuNOUf3ww8RfJVlOyQMoSI+5Ang==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@babel/parser": "^7.26.10",
@@ -153,6 +135,7 @@
       "version": "7.25.9",
       "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.9.tgz",
       "integrity": "sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@babel/traverse": "^7.25.9",
@@ -194,6 +177,7 @@
       "version": "7.25.9",
       "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz",
       "integrity": "sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=6.9.0"
@@ -203,6 +187,7 @@
       "version": "7.25.9",
       "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz",
       "integrity": "sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=6.9.0"
@@ -236,6 +221,7 @@
       "version": "7.26.10",
       "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.26.10.tgz",
       "integrity": "sha512-6aQR2zGE/QFi8JpDLjUZEPYOs7+mhKXm86VaKFiLP35JQwQb6bwUE+XbvkH0EptsYhbNBSUGaUBLKqxH1xSgsA==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@babel/types": "^7.26.10"
@@ -280,13 +266,10 @@
       }
     },
     "node_modules/@babel/runtime": {
-      "version": "7.27.0",
-      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.27.0.tgz",
-      "integrity": "sha512-VtPOkrdPHZsKc/clNqyi9WUA8TINkZ4cGk63UUE3u4pmB2k+ZMQRDuIOagv8UVd6j7k0T3+RRIb7beKTebNbcw==",
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.27.1.tgz",
+      "integrity": "sha512-1x3D2xEk2fRo3PAhwQwu5UubzgiVWSXTBfWpVd2Mx2AzRqJuDJCsgaDVZ7HB5iGzDW1Hl1sWN2mFyKjmR9uAog==",
       "license": "MIT",
-      "dependencies": {
-        "regenerator-runtime": "^0.14.0"
-      },
       "engines": {
         "node": ">=6.9.0"
       }
@@ -295,6 +278,7 @@
       "version": "7.26.9",
       "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.26.9.tgz",
       "integrity": "sha512-qyRplbeIpNZhmzOysF/wFMuP9sctmh2cFzRAZOn1YapxBsE1i9bJIY586R/WBLfLcmcBlM8ROBiQURnnNy+zfA==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@babel/code-frame": "^7.26.2",
@@ -309,6 +293,7 @@
       "version": "7.26.10",
       "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.26.10.tgz",
       "integrity": "sha512-k8NuDrxr0WrPH5Aupqb2LCVURP/S0vBEn5mK6iH+GIYob66U5EtoZvcdudR2jQ4cmTwhEwW1DLB+Yyas9zjF6A==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@babel/code-frame": "^7.26.2",
@@ -323,19 +308,11 @@
         "node": ">=6.9.0"
       }
     },
-    "node_modules/@babel/traverse/node_modules/globals": {
-      "version": "11.12.0",
-      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
-      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=4"
-      }
-    },
     "node_modules/@babel/types": {
       "version": "7.26.10",
       "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.26.10.tgz",
       "integrity": "sha512-emqcG3vHrpxUKTrxcblR36dcrcoRDvKmnL/dCL6ZsHaShW80qxCAcNhzQZrpeM765VzEos+xOi4s+r4IXzTwdQ==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@babel/helper-string-parser": "^7.25.9",
@@ -345,162 +322,10 @@
         "node": ">=6.9.0"
       }
     },
-    "node_modules/@emotion/babel-plugin": {
-      "version": "11.13.5",
-      "resolved": "https://registry.npmjs.org/@emotion/babel-plugin/-/babel-plugin-11.13.5.tgz",
-      "integrity": "sha512-pxHCpT2ex+0q+HH91/zsdHkw/lXd468DIN2zvfvLtPKLLMo6gQj7oLObq8PhkrxOZb/gGCq03S3Z7PDhS8pduQ==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/helper-module-imports": "^7.16.7",
-        "@babel/runtime": "^7.18.3",
-        "@emotion/hash": "^0.9.2",
-        "@emotion/memoize": "^0.9.0",
-        "@emotion/serialize": "^1.3.3",
-        "babel-plugin-macros": "^3.1.0",
-        "convert-source-map": "^1.5.0",
-        "escape-string-regexp": "^4.0.0",
-        "find-root": "^1.1.0",
-        "source-map": "^0.5.7",
-        "stylis": "4.2.0"
-      }
-    },
-    "node_modules/@emotion/babel-plugin/node_modules/convert-source-map": {
-      "version": "1.9.0",
-      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
-      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
-      "license": "MIT"
-    },
-    "node_modules/@emotion/cache": {
-      "version": "11.14.0",
-      "resolved": "https://registry.npmjs.org/@emotion/cache/-/cache-11.14.0.tgz",
-      "integrity": "sha512-L/B1lc/TViYk4DcpGxtAVbx0ZyiKM5ktoIyafGkH6zg/tj+mA+NE//aPYKG0k8kCHSHVJrpLpcAlOBEXQ3SavA==",
-      "license": "MIT",
-      "dependencies": {
-        "@emotion/memoize": "^0.9.0",
-        "@emotion/sheet": "^1.4.0",
-        "@emotion/utils": "^1.4.2",
-        "@emotion/weak-memoize": "^0.4.0",
-        "stylis": "4.2.0"
-      }
-    },
-    "node_modules/@emotion/hash": {
-      "version": "0.9.2",
-      "resolved": "https://registry.npmjs.org/@emotion/hash/-/hash-0.9.2.tgz",
-      "integrity": "sha512-MyqliTZGuOm3+5ZRSaaBGP3USLw6+EGykkwZns2EPC5g8jJ4z9OrdZY9apkl3+UP9+sdz76YYkwCKP5gh8iY3g==",
-      "license": "MIT"
-    },
-    "node_modules/@emotion/is-prop-valid": {
-      "version": "1.3.1",
-      "resolved": "https://registry.npmjs.org/@emotion/is-prop-valid/-/is-prop-valid-1.3.1.tgz",
-      "integrity": "sha512-/ACwoqx7XQi9knQs/G0qKvv5teDMhD7bXYns9N/wM8ah8iNb8jZ2uNO0YOgiq2o2poIvVtJS2YALasQuMSQ7Kw==",
-      "license": "MIT",
-      "dependencies": {
-        "@emotion/memoize": "^0.9.0"
-      }
-    },
-    "node_modules/@emotion/memoize": {
-      "version": "0.9.0",
-      "resolved": "https://registry.npmjs.org/@emotion/memoize/-/memoize-0.9.0.tgz",
-      "integrity": "sha512-30FAj7/EoJ5mwVPOWhAyCX+FPfMDrVecJAM+Iw9NRoSl4BBAQeqj4cApHHUXOVvIPgLVDsCFoz/hGD+5QQD1GQ==",
-      "license": "MIT"
-    },
-    "node_modules/@emotion/react": {
-      "version": "11.14.0",
-      "resolved": "https://registry.npmjs.org/@emotion/react/-/react-11.14.0.tgz",
-      "integrity": "sha512-O000MLDBDdk/EohJPFUqvnp4qnHeYkVP5B0xEG0D/L7cOKP9kefu2DXn8dj74cQfsEzUqh+sr1RzFqiL1o+PpA==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.18.3",
-        "@emotion/babel-plugin": "^11.13.5",
-        "@emotion/cache": "^11.14.0",
-        "@emotion/serialize": "^1.3.3",
-        "@emotion/use-insertion-effect-with-fallbacks": "^1.2.0",
-        "@emotion/utils": "^1.4.2",
-        "@emotion/weak-memoize": "^0.4.0",
-        "hoist-non-react-statics": "^3.3.1"
-      },
-      "peerDependencies": {
-        "react": ">=16.8.0"
-      },
-      "peerDependenciesMeta": {
-        "@types/react": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@emotion/serialize": {
-      "version": "1.3.3",
-      "resolved": "https://registry.npmjs.org/@emotion/serialize/-/serialize-1.3.3.tgz",
-      "integrity": "sha512-EISGqt7sSNWHGI76hC7x1CksiXPahbxEOrC5RjmFRJTqLyEK9/9hZvBbiYn70dw4wuwMKiEMCUlR6ZXTSWQqxA==",
-      "license": "MIT",
-      "dependencies": {
-        "@emotion/hash": "^0.9.2",
-        "@emotion/memoize": "^0.9.0",
-        "@emotion/unitless": "^0.10.0",
-        "@emotion/utils": "^1.4.2",
-        "csstype": "^3.0.2"
-      }
-    },
-    "node_modules/@emotion/sheet": {
-      "version": "1.4.0",
-      "resolved": "https://registry.npmjs.org/@emotion/sheet/-/sheet-1.4.0.tgz",
-      "integrity": "sha512-fTBW9/8r2w3dXWYM4HCB1Rdp8NLibOw2+XELH5m5+AkWiL/KqYX6dc0kKYlaYyKjrQ6ds33MCdMPEwgs2z1rqg==",
-      "license": "MIT"
-    },
-    "node_modules/@emotion/styled": {
-      "version": "11.14.0",
-      "resolved": "https://registry.npmjs.org/@emotion/styled/-/styled-11.14.0.tgz",
-      "integrity": "sha512-XxfOnXFffatap2IyCeJyNov3kiDQWoR08gPUQxvbL7fxKryGBKUZUkG6Hz48DZwVrJSVh9sJboyV1Ds4OW6SgA==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.18.3",
-        "@emotion/babel-plugin": "^11.13.5",
-        "@emotion/is-prop-valid": "^1.3.0",
-        "@emotion/serialize": "^1.3.3",
-        "@emotion/use-insertion-effect-with-fallbacks": "^1.2.0",
-        "@emotion/utils": "^1.4.2"
-      },
-      "peerDependencies": {
-        "@emotion/react": "^11.0.0-rc.0",
-        "react": ">=16.8.0"
-      },
-      "peerDependenciesMeta": {
-        "@types/react": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@emotion/unitless": {
-      "version": "0.10.0",
-      "resolved": "https://registry.npmjs.org/@emotion/unitless/-/unitless-0.10.0.tgz",
-      "integrity": "sha512-dFoMUuQA20zvtVTuxZww6OHoJYgrzfKM1t52mVySDJnMSEa08ruEvdYQbhvyu6soU+NeLVd3yKfTfT0NeV6qGg==",
-      "license": "MIT"
-    },
-    "node_modules/@emotion/use-insertion-effect-with-fallbacks": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/@emotion/use-insertion-effect-with-fallbacks/-/use-insertion-effect-with-fallbacks-1.2.0.tgz",
-      "integrity": "sha512-yJMtVdH59sxi/aVJBpk9FQq+OR8ll5GT8oWd57UpeaKEVGab41JWaCFA7FRLoMLloOZF/c/wsPoe+bfGmRKgDg==",
-      "license": "MIT",
-      "peerDependencies": {
-        "react": ">=16.8.0"
-      }
-    },
-    "node_modules/@emotion/utils": {
-      "version": "1.4.2",
-      "resolved": "https://registry.npmjs.org/@emotion/utils/-/utils-1.4.2.tgz",
-      "integrity": "sha512-3vLclRofFziIa3J2wDh9jjbkUz9qk5Vi3IZ/FSTKViB0k+ef0fPV7dYrUIugbgupYDx7v9ud/SjrtEP8Y4xLoA==",
-      "license": "MIT"
-    },
-    "node_modules/@emotion/weak-memoize": {
-      "version": "0.4.0",
-      "resolved": "https://registry.npmjs.org/@emotion/weak-memoize/-/weak-memoize-0.4.0.tgz",
-      "integrity": "sha512-snKqtPW01tN0ui7yu9rGv69aJXr/a/Ywvl11sUjNtEcRc+ng/mQriFL0wLXMef74iHa/EkftbDzU9F8iFbH+zg==",
-      "license": "MIT"
-    },
     "node_modules/@esbuild/aix-ppc64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.1.tgz",
-      "integrity": "sha512-kfYGy8IdzTGy+z0vFGvExZtxkFlA4zAxgKEahG9KE1ScBjpQnFsNOX8KTU5ojNru5ed5CVoJYXFtoxaq5nFbjQ==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.3.tgz",
+      "integrity": "sha512-W8bFfPA8DowP8l//sxjJLSLkD8iEjMc7cBVyP+u4cEv9sM7mdUCkgsj+t0n/BWPFtv7WWCN5Yzj0N6FJNUUqBQ==",
       "cpu": [
         "ppc64"
       ],
@@ -515,9 +340,9 @@
       }
     },
     "node_modules/@esbuild/android-arm": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.1.tgz",
-      "integrity": "sha512-dp+MshLYux6j/JjdqVLnMglQlFu+MuVeNrmT5nk6q07wNhCdSnB7QZj+7G8VMUGh1q+vj2Bq8kRsuyA00I/k+Q==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.3.tgz",
+      "integrity": "sha512-PuwVXbnP87Tcff5I9ngV0lmiSu40xw1At6i3GsU77U7cjDDB4s0X2cyFuBiDa1SBk9DnvWwnGvVaGBqoFWPb7A==",
       "cpu": [
         "arm"
       ],
@@ -532,9 +357,9 @@
       }
     },
     "node_modules/@esbuild/android-arm64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.1.tgz",
-      "integrity": "sha512-50tM0zCJW5kGqgG7fQ7IHvQOcAn9TKiVRuQ/lN0xR+T2lzEFvAi1ZcS8DiksFcEpf1t/GYOeOfCAgDHFpkiSmA==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.3.tgz",
+      "integrity": "sha512-XelR6MzjlZuBM4f5z2IQHK6LkK34Cvv6Rj2EntER3lwCBFdg6h2lKbtRjpTTsdEjD/WSe1q8UyPBXP1x3i/wYQ==",
       "cpu": [
         "arm64"
       ],
@@ -549,9 +374,9 @@
       }
     },
     "node_modules/@esbuild/android-x64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.1.tgz",
-      "integrity": "sha512-GCj6WfUtNldqUzYkN/ITtlhwQqGWu9S45vUXs7EIYf+7rCiiqH9bCloatO9VhxsL0Pji+PF4Lz2XXCES+Q8hDw==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.3.tgz",
+      "integrity": "sha512-ogtTpYHT/g1GWS/zKM0cc/tIebFjm1F9Aw1boQ2Y0eUQ+J89d0jFY//s9ei9jVIlkYi8AfOjiixcLJSGNSOAdQ==",
       "cpu": [
         "x64"
       ],
@@ -566,9 +391,9 @@
       }
     },
     "node_modules/@esbuild/darwin-arm64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.1.tgz",
-      "integrity": "sha512-5hEZKPf+nQjYoSr/elb62U19/l1mZDdqidGfmFutVUjjUZrOazAtwK+Kr+3y0C/oeJfLlxo9fXb1w7L+P7E4FQ==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.3.tgz",
+      "integrity": "sha512-eESK5yfPNTqpAmDfFWNsOhmIOaQA59tAcF/EfYvo5/QWQCzXn5iUSOnqt3ra3UdzBv073ykTtmeLJZGt3HhA+w==",
       "cpu": [
         "arm64"
       ],
@@ -583,9 +408,9 @@
       }
     },
     "node_modules/@esbuild/darwin-x64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.1.tgz",
-      "integrity": "sha512-hxVnwL2Dqs3fM1IWq8Iezh0cX7ZGdVhbTfnOy5uURtao5OIVCEyj9xIzemDi7sRvKsuSdtCAhMKarxqtlyVyfA==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.3.tgz",
+      "integrity": "sha512-Kd8glo7sIZtwOLcPbW0yLpKmBNWMANZhrC1r6K++uDR2zyzb6AeOYtI6udbtabmQpFaxJ8uduXMAo1gs5ozz8A==",
       "cpu": [
         "x64"
       ],
@@ -600,9 +425,9 @@
       }
     },
     "node_modules/@esbuild/freebsd-arm64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.1.tgz",
-      "integrity": "sha512-1MrCZs0fZa2g8E+FUo2ipw6jw5qqQiH+tERoS5fAfKnRx6NXH31tXBKI3VpmLijLH6yriMZsxJtaXUyFt/8Y4A==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.3.tgz",
+      "integrity": "sha512-EJiyS70BYybOBpJth3M0KLOus0n+RRMKTYzhYhFeMwp7e/RaajXvP+BWlmEXNk6uk+KAu46j/kaQzr6au+JcIw==",
       "cpu": [
         "arm64"
       ],
@@ -617,9 +442,9 @@
       }
     },
     "node_modules/@esbuild/freebsd-x64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.1.tgz",
-      "integrity": "sha512-0IZWLiTyz7nm0xuIs0q1Y3QWJC52R8aSXxe40VUxm6BB1RNmkODtW6LHvWRrGiICulcX7ZvyH6h5fqdLu4gkww==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.3.tgz",
+      "integrity": "sha512-Q+wSjaLpGxYf7zC0kL0nDlhsfuFkoN+EXrx2KSB33RhinWzejOd6AvgmP5JbkgXKmjhmpfgKZq24pneodYqE8Q==",
       "cpu": [
         "x64"
       ],
@@ -634,9 +459,9 @@
       }
     },
     "node_modules/@esbuild/linux-arm": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.1.tgz",
-      "integrity": "sha512-NdKOhS4u7JhDKw9G3cY6sWqFcnLITn6SqivVArbzIaf3cemShqfLGHYMx8Xlm/lBit3/5d7kXvriTUGa5YViuQ==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.3.tgz",
+      "integrity": "sha512-dUOVmAUzuHy2ZOKIHIKHCm58HKzFqd+puLaS424h6I85GlSDRZIA5ycBixb3mFgM0Jdh+ZOSB6KptX30DD8YOQ==",
       "cpu": [
         "arm"
       ],
@@ -651,9 +476,9 @@
       }
     },
     "node_modules/@esbuild/linux-arm64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.1.tgz",
-      "integrity": "sha512-jaN3dHi0/DDPelk0nLcXRm1q7DNJpjXy7yWaWvbfkPvI+7XNSc/lDOnCLN7gzsyzgu6qSAmgSvP9oXAhP973uQ==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.3.tgz",
+      "integrity": "sha512-xCUgnNYhRD5bb1C1nqrDV1PfkwgbswTTBRbAd8aH5PhYzikdf/ddtsYyMXFfGSsb/6t6QaPSzxtbfAZr9uox4A==",
       "cpu": [
         "arm64"
       ],
@@ -668,9 +493,9 @@
       }
     },
     "node_modules/@esbuild/linux-ia32": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.1.tgz",
-      "integrity": "sha512-OJykPaF4v8JidKNGz8c/q1lBO44sQNUQtq1KktJXdBLn1hPod5rE/Hko5ugKKZd+D2+o1a9MFGUEIUwO2YfgkQ==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.3.tgz",
+      "integrity": "sha512-yplPOpczHOO4jTYKmuYuANI3WhvIPSVANGcNUeMlxH4twz/TeXuzEP41tGKNGWJjuMhotpGabeFYGAOU2ummBw==",
       "cpu": [
         "ia32"
       ],
@@ -685,9 +510,9 @@
       }
     },
     "node_modules/@esbuild/linux-loong64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.1.tgz",
-      "integrity": "sha512-nGfornQj4dzcq5Vp835oM/o21UMlXzn79KobKlcs3Wz9smwiifknLy4xDCLUU0BWp7b/houtdrgUz7nOGnfIYg==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.3.tgz",
+      "integrity": "sha512-P4BLP5/fjyihmXCELRGrLd793q/lBtKMQl8ARGpDxgzgIKJDRJ/u4r1A/HgpBpKpKZelGct2PGI4T+axcedf6g==",
       "cpu": [
         "loong64"
       ],
@@ -702,9 +527,9 @@
       }
     },
     "node_modules/@esbuild/linux-mips64el": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.1.tgz",
-      "integrity": "sha512-1osBbPEFYwIE5IVB/0g2X6i1qInZa1aIoj1TdL4AaAb55xIIgbg8Doq6a5BzYWgr+tEcDzYH67XVnTmUzL+nXg==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.3.tgz",
+      "integrity": "sha512-eRAOV2ODpu6P5divMEMa26RRqb2yUoYsuQQOuFUexUoQndm4MdpXXDBbUoKIc0iPa4aCO7gIhtnYomkn2x+bag==",
       "cpu": [
         "mips64el"
       ],
@@ -719,9 +544,9 @@
       }
     },
     "node_modules/@esbuild/linux-ppc64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.1.tgz",
-      "integrity": "sha512-/6VBJOwUf3TdTvJZ82qF3tbLuWsscd7/1w+D9LH0W/SqUgM5/JJD0lrJ1fVIfZsqB6RFmLCe0Xz3fmZc3WtyVg==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.3.tgz",
+      "integrity": "sha512-ZC4jV2p7VbzTlnl8nZKLcBkfzIf4Yad1SJM4ZMKYnJqZFD4rTI+pBG65u8ev4jk3/MPwY9DvGn50wi3uhdaghg==",
       "cpu": [
         "ppc64"
       ],
@@ -736,9 +561,9 @@
       }
     },
     "node_modules/@esbuild/linux-riscv64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.1.tgz",
-      "integrity": "sha512-nSut/Mx5gnilhcq2yIMLMe3Wl4FK5wx/o0QuuCLMtmJn+WeWYoEGDN1ipcN72g1WHsnIbxGXd4i/MF0gTcuAjQ==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.3.tgz",
+      "integrity": "sha512-LDDODcFzNtECTrUUbVCs6j9/bDVqy7DDRsuIXJg6so+mFksgwG7ZVnTruYi5V+z3eE5y+BJZw7VvUadkbfg7QA==",
       "cpu": [
         "riscv64"
       ],
@@ -753,9 +578,9 @@
       }
     },
     "node_modules/@esbuild/linux-s390x": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.1.tgz",
-      "integrity": "sha512-cEECeLlJNfT8kZHqLarDBQso9a27o2Zd2AQ8USAEoGtejOrCYHNtKP8XQhMDJMtthdF4GBmjR2au3x1udADQQQ==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.3.tgz",
+      "integrity": "sha512-s+w/NOY2k0yC2p9SLen+ymflgcpRkvwwa02fqmAwhBRI3SC12uiS10edHHXlVWwfAagYSY5UpmT/zISXPMW3tQ==",
       "cpu": [
         "s390x"
       ],
@@ -770,9 +595,9 @@
       }
     },
     "node_modules/@esbuild/linux-x64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.1.tgz",
-      "integrity": "sha512-xbfUhu/gnvSEg+EGovRc+kjBAkrvtk38RlerAzQxvMzlB4fXpCFCeUAYzJvrnhFtdeyVCDANSjJvOvGYoeKzFA==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.3.tgz",
+      "integrity": "sha512-nQHDz4pXjSDC6UfOE1Fw9Q8d6GCAd9KdvMZpfVGWSJztYCarRgSDfOVBY5xwhQXseiyxapkiSJi/5/ja8mRFFA==",
       "cpu": [
         "x64"
       ],
@@ -787,9 +612,9 @@
       }
     },
     "node_modules/@esbuild/netbsd-arm64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.1.tgz",
-      "integrity": "sha512-O96poM2XGhLtpTh+s4+nP7YCCAfb4tJNRVZHfIE7dgmax+yMP2WgMd2OecBuaATHKTHsLWHQeuaxMRnCsH8+5g==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.3.tgz",
+      "integrity": "sha512-1QaLtOWq0mzK6tzzp0jRN3eccmN3hezey7mhLnzC6oNlJoUJz4nym5ZD7mDnS/LZQgkrhEbEiTn515lPeLpgWA==",
       "cpu": [
         "arm64"
       ],
@@ -804,9 +629,9 @@
       }
     },
     "node_modules/@esbuild/netbsd-x64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.1.tgz",
-      "integrity": "sha512-X53z6uXip6KFXBQ+Krbx25XHV/NCbzryM6ehOAeAil7X7oa4XIq+394PWGnwaSQ2WRA0KI6PUO6hTO5zeF5ijA==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.3.tgz",
+      "integrity": "sha512-i5Hm68HXHdgv8wkrt+10Bc50zM0/eonPb/a/OFVfB6Qvpiirco5gBA5bz7S2SHuU+Y4LWn/zehzNX14Sp4r27g==",
       "cpu": [
         "x64"
       ],
@@ -821,9 +646,9 @@
       }
     },
     "node_modules/@esbuild/openbsd-arm64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.1.tgz",
-      "integrity": "sha512-Na9T3szbXezdzM/Kfs3GcRQNjHzM6GzFBeU1/6IV/npKP5ORtp9zbQjvkDJ47s6BCgaAZnnnu/cY1x342+MvZg==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.3.tgz",
+      "integrity": "sha512-zGAVApJEYTbOC6H/3QBr2mq3upG/LBEXr85/pTtKiv2IXcgKV0RT0QA/hSXZqSvLEpXeIxah7LczB4lkiYhTAQ==",
       "cpu": [
         "arm64"
       ],
@@ -838,9 +663,9 @@
       }
     },
     "node_modules/@esbuild/openbsd-x64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.1.tgz",
-      "integrity": "sha512-T3H78X2h1tszfRSf+txbt5aOp/e7TAz3ptVKu9Oyir3IAOFPGV6O9c2naym5TOriy1l0nNf6a4X5UXRZSGX/dw==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.3.tgz",
+      "integrity": "sha512-fpqctI45NnCIDKBH5AXQBsD0NDPbEFczK98hk/aa6HJxbl+UtLkJV2+Bvy5hLSLk3LHmqt0NTkKNso1A9y1a4w==",
       "cpu": [
         "x64"
       ],
@@ -855,9 +680,9 @@
       }
     },
     "node_modules/@esbuild/sunos-x64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.1.tgz",
-      "integrity": "sha512-2H3RUvcmULO7dIE5EWJH8eubZAI4xw54H1ilJnRNZdeo8dTADEZ21w6J22XBkXqGJbe0+wnNJtw3UXRoLJnFEg==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.3.tgz",
+      "integrity": "sha512-ROJhm7d8bk9dMCUZjkS8fgzsPAZEjtRJqCAmVgB0gMrvG7hfmPmz9k1rwO4jSiblFjYmNvbECL9uhaPzONMfgA==",
       "cpu": [
         "x64"
       ],
@@ -872,9 +697,9 @@
       }
     },
     "node_modules/@esbuild/win32-arm64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.1.tgz",
-      "integrity": "sha512-GE7XvrdOzrb+yVKB9KsRMq+7a2U/K5Cf/8grVFRAGJmfADr/e/ODQ134RK2/eeHqYV5eQRFxb1hY7Nr15fv1NQ==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.3.tgz",
+      "integrity": "sha512-YWcow8peiHpNBiIXHwaswPnAXLsLVygFwCB3A7Bh5jRkIBFWHGmNQ48AlX4xDvQNoMZlPYzjVOQDYEzWCqufMQ==",
       "cpu": [
         "arm64"
       ],
@@ -889,9 +714,9 @@
       }
     },
     "node_modules/@esbuild/win32-ia32": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.1.tgz",
-      "integrity": "sha512-uOxSJCIcavSiT6UnBhBzE8wy3n0hOkJsBOzy7HDAuTDE++1DJMRRVCPGisULScHL+a/ZwdXPpXD3IyFKjA7K8A==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.3.tgz",
+      "integrity": "sha512-qspTZOIGoXVS4DpNqUYUs9UxVb04khS1Degaw/MnfMe7goQ3lTfQ13Vw4qY/Nj0979BGvMRpAYbs/BAxEvU8ew==",
       "cpu": [
         "ia32"
       ],
@@ -906,9 +731,9 @@
       }
     },
     "node_modules/@esbuild/win32-x64": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.1.tgz",
-      "integrity": "sha512-Y1EQdcfwMSeQN/ujR5VayLOJ1BHaK+ssyk0AEzPjC+t1lITgsnccPqFjb6V+LsTp/9Iov4ysfjxLaGJ9RPtkVg==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.3.tgz",
+      "integrity": "sha512-ICgUR+kPimx0vvRzf+N/7L7tVSQeE3BYY+NhHRHXS1kBuPO7z2+7ea2HbhDyZdTephgvNvKrlDDKUexuCVBVvg==",
       "cpu": [
         "x64"
       ],
@@ -923,9 +748,9 @@
       }
     },
     "node_modules/@eslint-community/eslint-utils": {
-      "version": "4.5.1",
-      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.5.1.tgz",
-      "integrity": "sha512-soEIOALTfTK6EjmKMMoLugwaP0rzkad90iIWd1hMO9ARkSAyjfMfkRRhLvD5qH7vvM0Cg72pieUfR6yh6XxC4w==",
+      "version": "4.6.1",
+      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.6.1.tgz",
+      "integrity": "sha512-KTsJMmobmbrFLe3LDh0PC2FXpcSYJt/MLjlkh/9LEnmKYLSYmT/0EW9JWANjeoemiuZrmogti0tW5Ch+qNUYDw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -941,19 +766,6 @@
         "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
       }
     },
-    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
-      "version": "3.4.3",
-      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
-      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
-      }
-    },
     "node_modules/@eslint-community/regexpp": {
       "version": "4.12.1",
       "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
@@ -964,55 +776,17 @@
         "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
       }
     },
-    "node_modules/@eslint/config-array": {
-      "version": "0.19.2",
-      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.19.2.tgz",
-      "integrity": "sha512-GNKqxfHG2ySmJOBSHg7LxeUx4xpuCoFjacmlCoYWEbaPXLwvfIjixRI12xCQZeULksQb23uiA8F40w5TojpV7w==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@eslint/object-schema": "^2.1.6",
-        "debug": "^4.3.1",
-        "minimatch": "^3.1.2"
-      },
-      "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
-      }
-    },
-    "node_modules/@eslint/config-helpers": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.1.0.tgz",
-      "integrity": "sha512-kLrdPDJE1ckPo94kmPPf9Hfd0DU0Jw6oKYrhe+pwSC0iTUInmTa+w6fw8sGgcfkFJGNdWOUeOaDM4quW4a7OkA==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
-      }
-    },
-    "node_modules/@eslint/core": {
-      "version": "0.12.0",
-      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.12.0.tgz",
-      "integrity": "sha512-cmrR6pytBuSMTaBweKoGMwu3EiHiEC+DoyupPmlZ0HxBJBtIxwe+j/E4XPIKNx+Q74c8lXKPwYawBf5glsTkHg==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@types/json-schema": "^7.0.15"
-      },
-      "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
-      }
-    },
     "node_modules/@eslint/eslintrc": {
-      "version": "3.3.0",
-      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.0.tgz",
-      "integrity": "sha512-yaVPAiNAalnCZedKLdR21GOGILMLKPyqSLWaAjQFvYA2i/ciDi8ArYVr69Anohb6cH2Ukhqti4aFnYyPm8wdwQ==",
+      "version": "2.1.4",
+      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
+      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "ajv": "^6.12.4",
         "debug": "^4.3.2",
-        "espree": "^10.0.1",
-        "globals": "^14.0.0",
+        "espree": "^9.6.0",
+        "globals": "^13.19.0",
         "ignore": "^5.2.0",
         "import-fresh": "^3.2.1",
         "js-yaml": "^4.1.0",
@@ -1020,153 +794,100 @@
         "strip-json-comments": "^3.1.1"
       },
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       },
       "funding": {
         "url": "https://opencollective.com/eslint"
       }
     },
-    "node_modules/@eslint/eslintrc/node_modules/globals": {
-      "version": "14.0.0",
-      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
-      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
+    "node_modules/@eslint/eslintrc/node_modules/brace-expansion": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
       "dev": true,
       "license": "MIT",
-      "engines": {
-        "node": ">=18"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
       }
     },
-    "node_modules/@eslint/js": {
-      "version": "9.22.0",
-      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.22.0.tgz",
-      "integrity": "sha512-vLFajx9o8d1/oL2ZkpMYbkLv8nDB6yaIwFNt7nI4+I80U/z03SxmfOMsLbvWr3p7C+Wnoh//aOu2pQW8cS0HCQ==",
+    "node_modules/@eslint/eslintrc/node_modules/globals": {
+      "version": "13.24.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
+      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
       "dev": true,
       "license": "MIT",
-      "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
-      }
-    },
-    "node_modules/@eslint/object-schema": {
-      "version": "2.1.6",
-      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
-      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
-      }
-    },
-    "node_modules/@eslint/plugin-kit": {
-      "version": "0.2.7",
-      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.7.tgz",
-      "integrity": "sha512-JubJ5B2pJ4k4yGxaNLdbjrnk9d/iDz6/q8wOilpIowd6PJPgaxCuHBnBszq7Ce2TyMrywm5r4PnKm6V3iiZF+g==",
-      "dev": true,
-      "license": "Apache-2.0",
       "dependencies": {
-        "@eslint/core": "^0.12.0",
-        "levn": "^0.4.1"
+        "type-fest": "^0.20.2"
       },
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
-      }
-    },
-    "node_modules/@fortawesome/fontawesome-common-types": {
-      "version": "6.7.2",
-      "resolved": "https://registry.npmjs.org/@fortawesome/fontawesome-common-types/-/fontawesome-common-types-6.7.2.tgz",
-      "integrity": "sha512-Zs+YeHUC5fkt7Mg1l6XTniei3k4bwG/yo3iFUtZWd/pMx9g3fdvkSK9E0FOC+++phXOka78uJcYb8JaFkW52Xg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/@fortawesome/fontawesome-svg-core": {
-      "version": "6.7.2",
-      "resolved": "https://registry.npmjs.org/@fortawesome/fontawesome-svg-core/-/fontawesome-svg-core-6.7.2.tgz",
-      "integrity": "sha512-yxtOBWDrdi5DD5o1pmVdq3WMCvnobT0LU6R8RyyVXPvFRd2o79/0NCuQoCjNTeZz9EzA9xS3JxNWfv54RIHFEA==",
-      "license": "MIT",
+    "node_modules/@eslint/eslintrc/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
       "dependencies": {
-        "@fortawesome/fontawesome-common-types": "6.7.2"
+        "brace-expansion": "^1.1.7"
       },
       "engines": {
-        "node": ">=6"
+        "node": "*"
       }
     },
-    "node_modules/@fortawesome/free-brands-svg-icons": {
-      "version": "6.7.2",
-      "resolved": "https://registry.npmjs.org/@fortawesome/free-brands-svg-icons/-/free-brands-svg-icons-6.7.2.tgz",
-      "integrity": "sha512-zu0evbcRTgjKfrr77/2XX+bU+kuGfjm0LbajJHVIgBWNIDzrhpRxiCPNT8DW5AdmSsq7Mcf9D1bH0aSeSUSM+Q==",
-      "license": "(CC-BY-4.0 AND MIT)",
-      "dependencies": {
-        "@fortawesome/fontawesome-common-types": "6.7.2"
-      },
+    "node_modules/@eslint/js": {
+      "version": "8.57.1",
+      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz",
+      "integrity": "sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==",
+      "dev": true,
+      "license": "MIT",
       "engines": {
-        "node": ">=6"
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       }
     },
-    "node_modules/@fortawesome/free-solid-svg-icons": {
-      "version": "6.7.2",
-      "resolved": "https://registry.npmjs.org/@fortawesome/free-solid-svg-icons/-/free-solid-svg-icons-6.7.2.tgz",
-      "integrity": "sha512-GsBrnOzU8uj0LECDfD5zomZJIjrPhIlWU82AHwa2s40FKH+kcxQaBvBo3Z4TxyZHIyX8XTDxsyA33/Vx9eFuQA==",
-      "license": "(CC-BY-4.0 AND MIT)",
+    "node_modules/@humanwhocodes/config-array": {
+      "version": "0.13.0",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz",
+      "integrity": "sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==",
+      "deprecated": "Use @eslint/config-array instead",
+      "dev": true,
+      "license": "Apache-2.0",
       "dependencies": {
-        "@fortawesome/fontawesome-common-types": "6.7.2"
+        "@humanwhocodes/object-schema": "^2.0.3",
+        "debug": "^4.3.1",
+        "minimatch": "^3.0.5"
       },
       "engines": {
-        "node": ">=6"
+        "node": ">=10.10.0"
       }
     },
-    "node_modules/@fortawesome/react-fontawesome": {
-      "version": "0.2.2",
-      "resolved": "https://registry.npmjs.org/@fortawesome/react-fontawesome/-/react-fontawesome-0.2.2.tgz",
-      "integrity": "sha512-EnkrprPNqI6SXJl//m29hpaNzOp1bruISWaOiRtkMi/xSvHJlzc2j2JAYS7egxt/EbjSNV/k6Xy0AQI6vB2+1g==",
+    "node_modules/@humanwhocodes/config-array/node_modules/brace-expansion": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
-        "prop-types": "^15.8.1"
-      },
-      "peerDependencies": {
-        "@fortawesome/fontawesome-svg-core": "~1 || ~6",
-        "react": ">=16.3"
-      }
-    },
-    "node_modules/@humanfs/core": {
-      "version": "0.19.1",
-      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
-      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=18.18.0"
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
       }
     },
-    "node_modules/@humanfs/node": {
-      "version": "0.16.6",
-      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
-      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
+    "node_modules/@humanwhocodes/config-array/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
       "dev": true,
-      "license": "Apache-2.0",
+      "license": "ISC",
       "dependencies": {
-        "@humanfs/core": "^0.19.1",
-        "@humanwhocodes/retry": "^0.3.0"
+        "brace-expansion": "^1.1.7"
       },
       "engines": {
-        "node": ">=18.18.0"
-      }
-    },
-    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
-      "version": "0.3.1",
-      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
-      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=18.18"
-      },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/nzakas"
+        "node": "*"
       }
     },
     "node_modules/@humanwhocodes/module-importer": {
@@ -1183,24 +904,19 @@
         "url": "https://github.com/sponsors/nzakas"
       }
     },
-    "node_modules/@humanwhocodes/retry": {
-      "version": "0.4.2",
-      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.2.tgz",
-      "integrity": "sha512-xeO57FpIu4p1Ri3Jq/EXq4ClRm86dVF2z/+kvFnyqVYRavTZmaFaUBbWCOuuTh0o/g7DSsk6kc2vrS4Vl5oPOQ==",
+    "node_modules/@humanwhocodes/object-schema": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
+      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
+      "deprecated": "Use @eslint/object-schema instead",
       "dev": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=18.18"
-      },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/nzakas"
-      }
+      "license": "BSD-3-Clause"
     },
     "node_modules/@jridgewell/gen-mapping": {
       "version": "0.3.8",
       "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
       "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@jridgewell/set-array": "^1.2.1",
@@ -1215,6 +931,7 @@
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
       "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=6.0.0"
@@ -1224,6 +941,7 @@
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
       "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=6.0.0"
@@ -1233,369 +951,71 @@
       "version": "1.5.0",
       "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
       "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/@jridgewell/trace-mapping": {
       "version": "0.3.25",
       "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
       "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@jridgewell/resolve-uri": "^3.1.0",
         "@jridgewell/sourcemap-codec": "^1.4.14"
       }
     },
-    "node_modules/@kurkle/color": {
-      "version": "0.3.4",
-      "resolved": "https://registry.npmjs.org/@kurkle/color/-/color-0.3.4.tgz",
-      "integrity": "sha512-M5UknZPHRu3DEDWoipU6sE8PdkZ6Z/S+v4dD+Ke8IaNlpdSQah50lz1KtcFBa2vsdOnwbbnxJwVM4wty6udA5w==",
-      "license": "MIT"
-    },
-    "node_modules/@mui/core-downloads-tracker": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/@mui/core-downloads-tracker/-/core-downloads-tracker-7.0.2.tgz",
-      "integrity": "sha512-TfeFU9TgN1N06hyb/pV/63FfO34nijZRMqgHk0TJ3gkl4Fbd+wZ73+ZtOd7jag6hMmzO9HSrBc6Vdn591nhkAg==",
+    "node_modules/@nodelib/fs.scandir": {
+      "version": "2.1.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
+      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
+      "dev": true,
       "license": "MIT",
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
+      "dependencies": {
+        "@nodelib/fs.stat": "2.0.5",
+        "run-parallel": "^1.1.9"
+      },
+      "engines": {
+        "node": ">= 8"
       }
     },
-    "node_modules/@mui/icons-material": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/@mui/icons-material/-/icons-material-7.0.2.tgz",
-      "integrity": "sha512-Bo57PFLOqXOqPNrXjd8AhzH5s6TCsNUQbvnQ0VKZ8D+lIlteqKnrk/O1luMJUc/BXONK7BfIdTdc7qOnXYbMdw==",
+    "node_modules/@nodelib/fs.stat": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
+      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
+      "dev": true,
       "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.27.0"
-      },
       "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "@mui/material": "^7.0.2",
-        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@types/react": {
-          "optional": true
-        }
+        "node": ">= 8"
       }
     },
-    "node_modules/@mui/material": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/@mui/material/-/material-7.0.2.tgz",
-      "integrity": "sha512-rjJlJ13+3LdLfobRplkXbjIFEIkn6LgpetgU/Cs3Xd8qINCCQK9qXQIjjQ6P0FXFTPFzEVMj0VgBR1mN+FhOcA==",
+    "node_modules/@nodelib/fs.walk": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
+      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@mui/core-downloads-tracker": "^7.0.2",
-        "@mui/system": "^7.0.2",
-        "@mui/types": "^7.4.1",
-        "@mui/utils": "^7.0.2",
-        "@popperjs/core": "^2.11.8",
-        "@types/react-transition-group": "^4.4.12",
-        "clsx": "^2.1.1",
-        "csstype": "^3.1.3",
-        "prop-types": "^15.8.1",
-        "react-is": "^19.1.0",
-        "react-transition-group": "^4.4.5"
+        "@nodelib/fs.scandir": "2.1.5",
+        "fastq": "^1.6.0"
       },
       "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "@emotion/react": "^11.5.0",
-        "@emotion/styled": "^11.3.0",
-        "@mui/material-pigment-css": "^7.0.2",
-        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@emotion/react": {
-          "optional": true
-        },
-        "@emotion/styled": {
-          "optional": true
-        },
-        "@mui/material-pigment-css": {
-          "optional": true
-        },
-        "@types/react": {
-          "optional": true
-        }
+        "node": ">= 8"
       }
     },
-    "node_modules/@mui/material/node_modules/react-is": {
-      "version": "19.1.0",
-      "resolved": "https://registry.npmjs.org/react-is/-/react-is-19.1.0.tgz",
-      "integrity": "sha512-Oe56aUPnkHyyDxxkvqtd7KkdQP5uIUfHxd5XTb3wE9d/kRnZLmKbDB0GWk919tdQ+mxxPtG6EAs6RMT6i1qtHg==",
-      "license": "MIT"
-    },
-    "node_modules/@mui/private-theming": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/@mui/private-theming/-/private-theming-7.0.2.tgz",
-      "integrity": "sha512-6lt8heDC9wN8YaRqEdhqnm0cFCv08AMf4IlttFvOVn7ZdKd81PNpD/rEtPGLLwQAFyyKSxBG4/2XCgpbcdNKiA==",
+    "node_modules/@remix-run/router": {
+      "version": "1.23.0",
+      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
+      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
       "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@mui/utils": "^7.0.2",
-        "prop-types": "^15.8.1"
-      },
       "engines": {
         "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@types/react": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@mui/styled-engine": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/@mui/styled-engine/-/styled-engine-7.0.2.tgz",
-      "integrity": "sha512-11Bt4YdHGlh7sB8P75S9mRCUxTlgv7HGbr0UKz6m6Z9KLeiw1Bm9y/t3iqLLVMvSHYB6zL8X8X+LmfTE++gyBw==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@emotion/cache": "^11.13.5",
-        "@emotion/serialize": "^1.3.3",
-        "@emotion/sheet": "^1.4.0",
-        "csstype": "^3.1.3",
-        "prop-types": "^15.8.1"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "@emotion/react": "^11.4.1",
-        "@emotion/styled": "^11.3.0",
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@emotion/react": {
-          "optional": true
-        },
-        "@emotion/styled": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@mui/system": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/@mui/system/-/system-7.0.2.tgz",
-      "integrity": "sha512-yFUraAWYWuKIISPPEVPSQ1NLeqmTT4qiQ+ktmyS8LO/KwHxB+NNVOacEZaIofh5x1NxY8rzphvU5X2heRZ/RDA==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@mui/private-theming": "^7.0.2",
-        "@mui/styled-engine": "^7.0.2",
-        "@mui/types": "^7.4.1",
-        "@mui/utils": "^7.0.2",
-        "clsx": "^2.1.1",
-        "csstype": "^3.1.3",
-        "prop-types": "^15.8.1"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "@emotion/react": "^11.5.0",
-        "@emotion/styled": "^11.3.0",
-        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@emotion/react": {
-          "optional": true
-        },
-        "@emotion/styled": {
-          "optional": true
-        },
-        "@types/react": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@mui/types": {
-      "version": "7.4.1",
-      "resolved": "https://registry.npmjs.org/@mui/types/-/types-7.4.1.tgz",
-      "integrity": "sha512-gUL8IIAI52CRXP/MixT1tJKt3SI6tVv4U/9soFsTtAsHzaJQptZ42ffdHZV3niX1ei0aUgMvOxBBN0KYqdG39g==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.27.0"
-      },
-      "peerDependencies": {
-        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@types/react": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@mui/utils": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/@mui/utils/-/utils-7.0.2.tgz",
-      "integrity": "sha512-72gcuQjPzhj/MLmPHLCgZjy2VjOH4KniR/4qRtXTTXIEwbkgcN+Y5W/rC90rWtMmZbjt9svZev/z+QHUI4j74w==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@mui/types": "^7.4.1",
-        "@types/prop-types": "^15.7.14",
-        "clsx": "^2.1.1",
-        "prop-types": "^15.8.1",
-        "react-is": "^19.1.0"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "@types/react": "^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@types/react": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@mui/utils/node_modules/react-is": {
-      "version": "19.1.0",
-      "resolved": "https://registry.npmjs.org/react-is/-/react-is-19.1.0.tgz",
-      "integrity": "sha512-Oe56aUPnkHyyDxxkvqtd7KkdQP5uIUfHxd5XTb3wE9d/kRnZLmKbDB0GWk919tdQ+mxxPtG6EAs6RMT6i1qtHg==",
-      "license": "MIT"
-    },
-    "node_modules/@mui/x-date-pickers": {
-      "version": "8.1.0",
-      "resolved": "https://registry.npmjs.org/@mui/x-date-pickers/-/x-date-pickers-8.1.0.tgz",
-      "integrity": "sha512-RySt7KKo7+VYbj4tj374GckC8BzFLRfIauJAbMlC3gh02azJr2AoBAkFoOLyiDyG9y9U1+ZX/9QGuOcUsknncw==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@mui/utils": "^7.0.2",
-        "@mui/x-internals": "8.0.0",
-        "@types/react-transition-group": "^4.4.12",
-        "clsx": "^2.1.1",
-        "prop-types": "^15.8.1",
-        "react-transition-group": "^4.4.5"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "@emotion/react": "^11.9.0",
-        "@emotion/styled": "^11.8.1",
-        "@mui/material": "^5.15.14 || ^6.0.0 || ^7.0.0",
-        "@mui/system": "^5.15.14 || ^6.0.0 || ^7.0.0",
-        "date-fns": "^2.25.0 || ^3.2.0 || ^4.0.0",
-        "date-fns-jalali": "^2.13.0-0 || ^3.2.0-0 || ^4.0.0-0",
-        "dayjs": "^1.10.7",
-        "luxon": "^3.0.2",
-        "moment": "^2.29.4",
-        "moment-hijri": "^2.1.2 || ^3.0.0",
-        "moment-jalaali": "^0.7.4 || ^0.8.0 || ^0.9.0 || ^0.10.0",
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react-dom": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@emotion/react": {
-          "optional": true
-        },
-        "@emotion/styled": {
-          "optional": true
-        },
-        "date-fns": {
-          "optional": true
-        },
-        "date-fns-jalali": {
-          "optional": true
-        },
-        "dayjs": {
-          "optional": true
-        },
-        "luxon": {
-          "optional": true
-        },
-        "moment": {
-          "optional": true
-        },
-        "moment-hijri": {
-          "optional": true
-        },
-        "moment-jalaali": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@mui/x-internals": {
-      "version": "8.0.0",
-      "resolved": "https://registry.npmjs.org/@mui/x-internals/-/x-internals-8.0.0.tgz",
-      "integrity": "sha512-yQOWABTEAIW0wiAwpjAJ6uM47rG1cxrfRtL2WsIdje8F9JdCXO6/jAu7ROAiezw4EqhGYYU7DMrK5svn5tdZpQ==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.27.0",
-        "@mui/utils": "^7.0.2"
-      },
-      "engines": {
-        "node": ">=14.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/mui-org"
-      },
-      "peerDependencies": {
-        "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
-      }
-    },
-    "node_modules/@popperjs/core": {
-      "version": "2.11.8",
-      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.8.tgz",
-      "integrity": "sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==",
-      "license": "MIT",
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/popperjs"
       }
     },
     "node_modules/@rollup/rollup-android-arm-eabi": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.35.0.tgz",
-      "integrity": "sha512-uYQ2WfPaqz5QtVgMxfN6NpLD+no0MYHDBywl7itPYd3K5TjjSghNKmX8ic9S8NU8w81NVhJv/XojcHptRly7qQ==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.36.0.tgz",
+      "integrity": "sha512-jgrXjjcEwN6XpZXL0HUeOVGfjXhPyxAbbhD0BlXUB+abTOpbPiN5Wb3kOT7yb+uEtATNYF5x5gIfwutmuBA26w==",
       "cpu": [
         "arm"
       ],
@@ -1607,9 +1027,9 @@
       ]
     },
     "node_modules/@rollup/rollup-android-arm64": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.35.0.tgz",
-      "integrity": "sha512-FtKddj9XZudurLhdJnBl9fl6BwCJ3ky8riCXjEw3/UIbjmIY58ppWwPEvU3fNu+W7FUsAsB1CdH+7EQE6CXAPA==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.36.0.tgz",
+      "integrity": "sha512-NyfuLvdPdNUfUNeYKUwPwKsE5SXa2J6bCt2LdB/N+AxShnkpiczi3tcLJrm5mA+eqpy0HmaIY9F6XCa32N5yzg==",
       "cpu": [
         "arm64"
       ],
@@ -1621,9 +1041,9 @@
       ]
     },
     "node_modules/@rollup/rollup-darwin-arm64": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.35.0.tgz",
-      "integrity": "sha512-Uk+GjOJR6CY844/q6r5DR/6lkPFOw0hjfOIzVx22THJXMxktXG6CbejseJFznU8vHcEBLpiXKY3/6xc+cBm65Q==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.36.0.tgz",
+      "integrity": "sha512-JQ1Jk5G4bGrD4pWJQzWsD8I1n1mgPXq33+/vP4sk8j/z/C2siRuxZtaUA7yMTf71TCZTZl/4e1bfzwUmFb3+rw==",
       "cpu": [
         "arm64"
       ],
@@ -1635,9 +1055,9 @@
       ]
     },
     "node_modules/@rollup/rollup-darwin-x64": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.35.0.tgz",
-      "integrity": "sha512-3IrHjfAS6Vkp+5bISNQnPogRAW5GAV1n+bNCrDwXmfMHbPl5EhTmWtfmwlJxFRUCBZ+tZ/OxDyU08aF6NI/N5Q==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.36.0.tgz",
+      "integrity": "sha512-6c6wMZa1lrtiRsbDziCmjE53YbTkxMYhhnWnSW8R/yqsM7a6mSJ3uAVT0t8Y/DGt7gxUWYuFM4bwWk9XCJrFKA==",
       "cpu": [
         "x64"
       ],
@@ -1649,9 +1069,9 @@
       ]
     },
     "node_modules/@rollup/rollup-freebsd-arm64": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.35.0.tgz",
-      "integrity": "sha512-sxjoD/6F9cDLSELuLNnY0fOrM9WA0KrM0vWm57XhrIMf5FGiN8D0l7fn+bpUeBSU7dCgPV2oX4zHAsAXyHFGcQ==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.36.0.tgz",
+      "integrity": "sha512-KXVsijKeJXOl8QzXTsA+sHVDsFOmMCdBRgFmBb+mfEb/7geR7+C8ypAml4fquUt14ZyVXaw2o1FWhqAfOvA4sg==",
       "cpu": [
         "arm64"
       ],
@@ -1663,9 +1083,9 @@
       ]
     },
     "node_modules/@rollup/rollup-freebsd-x64": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.35.0.tgz",
-      "integrity": "sha512-2mpHCeRuD1u/2kruUiHSsnjWtHjqVbzhBkNVQ1aVD63CcexKVcQGwJ2g5VphOd84GvxfSvnnlEyBtQCE5hxVVw==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.36.0.tgz",
+      "integrity": "sha512-dVeWq1ebbvByI+ndz4IJcD4a09RJgRYmLccwlQ8bPd4olz3Y213uf1iwvc7ZaxNn2ab7bjc08PrtBgMu6nb4pQ==",
       "cpu": [
         "x64"
       ],
@@ -1677,9 +1097,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.35.0.tgz",
-      "integrity": "sha512-mrA0v3QMy6ZSvEuLs0dMxcO2LnaCONs1Z73GUDBHWbY8tFFocM6yl7YyMu7rz4zS81NDSqhrUuolyZXGi8TEqg==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.36.0.tgz",
+      "integrity": "sha512-bvXVU42mOVcF4le6XSjscdXjqx8okv4n5vmwgzcmtvFdifQ5U4dXFYaCB87namDRKlUL9ybVtLQ9ztnawaSzvg==",
       "cpu": [
         "arm"
       ],
@@ -1691,9 +1111,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-arm-musleabihf": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.35.0.tgz",
-      "integrity": "sha512-DnYhhzcvTAKNexIql8pFajr0PiDGrIsBYPRvCKlA5ixSS3uwo/CWNZxB09jhIapEIg945KOzcYEAGGSmTSpk7A==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.36.0.tgz",
+      "integrity": "sha512-JFIQrDJYrxOnyDQGYkqnNBtjDwTgbasdbUiQvcU8JmGDfValfH1lNpng+4FWlhaVIR4KPkeddYjsVVbmJYvDcg==",
       "cpu": [
         "arm"
       ],
@@ -1705,9 +1125,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-arm64-gnu": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.35.0.tgz",
-      "integrity": "sha512-uagpnH2M2g2b5iLsCTZ35CL1FgyuzzJQ8L9VtlJ+FckBXroTwNOaD0z0/UF+k5K3aNQjbm8LIVpxykUOQt1m/A==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.36.0.tgz",
+      "integrity": "sha512-KqjYVh3oM1bj//5X7k79PSCZ6CvaVzb7Qs7VMWS+SlWB5M8p3FqufLP9VNp4CazJ0CsPDLwVD9r3vX7Ci4J56A==",
       "cpu": [
         "arm64"
       ],
@@ -1719,9 +1139,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-arm64-musl": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.35.0.tgz",
-      "integrity": "sha512-XQxVOCd6VJeHQA/7YcqyV0/88N6ysSVzRjJ9I9UA/xXpEsjvAgDTgH3wQYz5bmr7SPtVK2TsP2fQ2N9L4ukoUg==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.36.0.tgz",
+      "integrity": "sha512-QiGnhScND+mAAtfHqeT+cB1S9yFnNQ/EwCg5yE3MzoaZZnIV0RV9O5alJAoJKX/sBONVKeZdMfO8QSaWEygMhw==",
       "cpu": [
         "arm64"
       ],
@@ -1733,9 +1153,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.35.0.tgz",
-      "integrity": "sha512-5pMT5PzfgwcXEwOaSrqVsz/LvjDZt+vQ8RT/70yhPU06PTuq8WaHhfT1LW+cdD7mW6i/J5/XIkX/1tCAkh1W6g==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.36.0.tgz",
+      "integrity": "sha512-1ZPyEDWF8phd4FQtTzMh8FQwqzvIjLsl6/84gzUxnMNFBtExBtpL51H67mV9xipuxl1AEAerRBgBwFNpkw8+Lg==",
       "cpu": [
         "loong64"
       ],
@@ -1747,9 +1167,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.35.0.tgz",
-      "integrity": "sha512-c+zkcvbhbXF98f4CtEIP1EBA/lCic5xB0lToneZYvMeKu5Kamq3O8gqrxiYYLzlZH6E3Aq+TSW86E4ay8iD8EA==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.36.0.tgz",
+      "integrity": "sha512-VMPMEIUpPFKpPI9GZMhJrtu8rxnp6mJR3ZzQPykq4xc2GmdHj3Q4cA+7avMyegXy4n1v+Qynr9fR88BmyO74tg==",
       "cpu": [
         "ppc64"
       ],
@@ -1761,9 +1181,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-riscv64-gnu": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.35.0.tgz",
-      "integrity": "sha512-s91fuAHdOwH/Tad2tzTtPX7UZyytHIRR6V4+2IGlV0Cej5rkG0R61SX4l4y9sh0JBibMiploZx3oHKPnQBKe4g==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.36.0.tgz",
+      "integrity": "sha512-ttE6ayb/kHwNRJGYLpuAvB7SMtOeQnVXEIpMtAvx3kepFQeowVED0n1K9nAdraHUPJ5hydEMxBpIR7o4nrm8uA==",
       "cpu": [
         "riscv64"
       ],
@@ -1775,9 +1195,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-s390x-gnu": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.35.0.tgz",
-      "integrity": "sha512-hQRkPQPLYJZYGP+Hj4fR9dDBMIM7zrzJDWFEMPdTnTy95Ljnv0/4w/ixFw3pTBMEuuEuoqtBINYND4M7ujcuQw==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.36.0.tgz",
+      "integrity": "sha512-4a5gf2jpS0AIe7uBjxDeUMNcFmaRTbNv7NxI5xOCs4lhzsVyGR/0qBXduPnoWf6dGC365saTiwag8hP1imTgag==",
       "cpu": [
         "s390x"
       ],
@@ -1789,9 +1209,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-x64-gnu": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.35.0.tgz",
-      "integrity": "sha512-Pim1T8rXOri+0HmV4CdKSGrqcBWX0d1HoPnQ0uw0bdp1aP5SdQVNBy8LjYncvnLgu3fnnCt17xjWGd4cqh8/hA==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.36.0.tgz",
+      "integrity": "sha512-5KtoW8UWmwFKQ96aQL3LlRXX16IMwyzMq/jSSVIIyAANiE1doaQsx/KRyhAvpHlPjPiSU/AYX/8m+lQ9VToxFQ==",
       "cpu": [
         "x64"
       ],
@@ -1803,9 +1223,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-x64-musl": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.35.0.tgz",
-      "integrity": "sha512-QysqXzYiDvQWfUiTm8XmJNO2zm9yC9P/2Gkrwg2dH9cxotQzunBHYr6jk4SujCTqnfGxduOmQcI7c2ryuW8XVg==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.36.0.tgz",
+      "integrity": "sha512-sycrYZPrv2ag4OCvaN5js+f01eoZ2U+RmT5as8vhxiFz+kxwlHrsxOwKPSA8WyS+Wc6Epid9QeI/IkQ9NkgYyQ==",
       "cpu": [
         "x64"
       ],
@@ -1817,9 +1237,9 @@
       ]
     },
     "node_modules/@rollup/rollup-win32-arm64-msvc": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.35.0.tgz",
-      "integrity": "sha512-OUOlGqPkVJCdJETKOCEf1mw848ZyJ5w50/rZ/3IBQVdLfR5jk/6Sr5m3iO2tdPgwo0x7VcncYuOvMhBWZq8ayg==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.36.0.tgz",
+      "integrity": "sha512-qbqt4N7tokFwwSVlWDsjfoHgviS3n/vZ8LK0h1uLG9TYIRuUTJC88E1xb3LM2iqZ/WTqNQjYrtmtGmrmmawB6A==",
       "cpu": [
         "arm64"
       ],
@@ -1831,9 +1251,9 @@
       ]
     },
     "node_modules/@rollup/rollup-win32-ia32-msvc": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.35.0.tgz",
-      "integrity": "sha512-2/lsgejMrtwQe44glq7AFFHLfJBPafpsTa6JvP2NGef/ifOa4KBoglVf7AKN7EV9o32evBPRqfg96fEHzWo5kw==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.36.0.tgz",
+      "integrity": "sha512-t+RY0JuRamIocMuQcfwYSOkmdX9dtkr1PbhKW42AMvaDQa+jOdpUYysroTF/nuPpAaQMWp7ye+ndlmmthieJrQ==",
       "cpu": [
         "ia32"
       ],
@@ -1845,9 +1265,9 @@
       ]
     },
     "node_modules/@rollup/rollup-win32-x64-msvc": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.35.0.tgz",
-      "integrity": "sha512-PIQeY5XDkrOysbQblSW7v3l1MDZzkTEzAfTPkj5VAu3FW8fS4ynyLg2sINp0fp3SjZ8xkRYpLqoKcYqAkhU1dw==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.36.0.tgz",
+      "integrity": "sha512-aRXd7tRZkWLqGbChgcMMDEHjOKudo1kChb1Jt1IfR8cY/KIpgNviLeJy5FUb9IpSuQj8dU2fAYNMPW/hLKOSTw==",
       "cpu": [
         "x64"
       ],
@@ -1858,59 +1278,6 @@
         "win32"
       ]
     },
-    "node_modules/@shadcn/ui": {
-      "version": "0.0.4",
-      "resolved": "https://registry.npmjs.org/@shadcn/ui/-/ui-0.0.4.tgz",
-      "integrity": "sha512-0dtu/5ApsOZ24qgaZwtif8jVwqol7a4m1x5AxPuM1k5wxhqU7t/qEfBGtaSki1R8VlbTQfCj5PAlO45NKCa7Gg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "chalk": "5.2.0",
-        "commander": "^10.0.0",
-        "execa": "^7.0.0",
-        "fs-extra": "^11.1.0",
-        "node-fetch": "^3.3.0",
-        "ora": "^6.1.2",
-        "prompts": "^2.4.2",
-        "zod": "^3.20.2"
-      },
-      "bin": {
-        "ui": "dist/index.js"
-      }
-    },
-    "node_modules/@shadcn/ui/node_modules/chalk": {
-      "version": "5.2.0",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.2.0.tgz",
-      "integrity": "sha512-ree3Gqw/nazQAPuJJEy+avdl7QfZMcUvmHIKgEZkGL+xOBzRvup5Hxo6LHuMceSxOabuJLJm5Yp/92R9eMmMvA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": "^12.17.0 || ^14.13 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/@stripe/react-stripe-js": {
-      "version": "3.6.0",
-      "resolved": "https://registry.npmjs.org/@stripe/react-stripe-js/-/react-stripe-js-3.6.0.tgz",
-      "integrity": "sha512-zEnaUmTOsu7zhl3RWbZ0l1dRiad+QIbcAYzQfF+yYelURJowhAwesRHKWH+qGAIBEpkO6/VCLFHhVLH9DtPlnw==",
-      "license": "MIT",
-      "dependencies": {
-        "prop-types": "^15.7.2"
-      },
-      "peerDependencies": {
-        "@stripe/stripe-js": ">=1.44.1 <8.0.0",
-        "react": ">=16.8.0 <20.0.0",
-        "react-dom": ">=16.8.0 <20.0.0"
-      }
-    },
-    "node_modules/@stripe/stripe-js": {
-      "version": "2.4.0",
-      "resolved": "https://registry.npmjs.org/@stripe/stripe-js/-/stripe-js-2.4.0.tgz",
-      "integrity": "sha512-WFkQx1mbs2b5+7looI9IV1BLa3bIApuN3ehp9FP58xGg7KL9hCHDECgW3BwO9l9L+xBPVAD7Yjn1EhGe6EDTeA==",
-      "license": "MIT"
-    },
     "node_modules/@types/babel__core": {
       "version": "7.20.5",
       "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
@@ -1956,75 +1323,6 @@
         "@babel/types": "^7.20.7"
       }
     },
-    "node_modules/@types/cookie": {
-      "version": "0.6.0",
-      "resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.6.0.tgz",
-      "integrity": "sha512-4Kh9a6B2bQciAhf7FSuMRRkUWecJgJu9nPnx3yzpsfXX/c50REIqpHY4C82bXP90qrLtXtkDxTZosYO3UpOwlA==",
-      "license": "MIT"
-    },
-    "node_modules/@types/d3-array": {
-      "version": "3.2.1",
-      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
-      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
-      "license": "MIT"
-    },
-    "node_modules/@types/d3-color": {
-      "version": "3.1.3",
-      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
-      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
-      "license": "MIT"
-    },
-    "node_modules/@types/d3-ease": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
-      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
-      "license": "MIT"
-    },
-    "node_modules/@types/d3-interpolate": {
-      "version": "3.0.4",
-      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
-      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
-      "license": "MIT",
-      "dependencies": {
-        "@types/d3-color": "*"
-      }
-    },
-    "node_modules/@types/d3-path": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
-      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
-      "license": "MIT"
-    },
-    "node_modules/@types/d3-scale": {
-      "version": "4.0.9",
-      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
-      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
-      "license": "MIT",
-      "dependencies": {
-        "@types/d3-time": "*"
-      }
-    },
-    "node_modules/@types/d3-shape": {
-      "version": "3.1.7",
-      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
-      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
-      "license": "MIT",
-      "dependencies": {
-        "@types/d3-path": "*"
-      }
-    },
-    "node_modules/@types/d3-time": {
-      "version": "3.0.4",
-      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
-      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
-      "license": "MIT"
-    },
-    "node_modules/@types/d3-timer": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
-      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
-      "license": "MIT"
-    },
     "node_modules/@types/estree": {
       "version": "1.0.6",
       "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz",
@@ -2032,23 +1330,11 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/@types/json-schema": {
-      "version": "7.0.15",
-      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
-      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/@types/parse-json": {
-      "version": "4.0.2",
-      "resolved": "https://registry.npmjs.org/@types/parse-json/-/parse-json-4.0.2.tgz",
-      "integrity": "sha512-dISoDXWWQwUquiKsyZ4Ng+HX2KsPL7LyHKHQwgGFEA3IaKac4Obd+h2a/a6waisAoepJlBcx9paWqjA8/HVjCw==",
-      "license": "MIT"
-    },
     "node_modules/@types/prop-types": {
       "version": "15.7.14",
       "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.14.tgz",
       "integrity": "sha512-gNMvNH49DJ7OJYv+KAKn0Xp45p8PLl6zo2YnvDIbTd4J6MER2BmWN49TG7n9LvkyihINxeKW8+3bfS2yDC9dzQ==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/@types/raf": {
@@ -2059,113 +1345,309 @@
       "optional": true
     },
     "node_modules/@types/react": {
-      "version": "19.0.10",
-      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.0.10.tgz",
-      "integrity": "sha512-JuRQ9KXLEjaUNjTWpzuR231Z2WpIwczOkBEIvbHNCzQefFIT0L8IqE6NV6ULLyC1SI/i234JnDoMkfg+RjQj2g==",
+      "version": "18.3.18",
+      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.3.18.tgz",
+      "integrity": "sha512-t4yC+vtgnkYjNSKlFx1jkAhH8LgTo2N/7Qvi83kdEaUtMDiwpbLAktKDaAMlRcJ5eSxZkH74eEGt1ky31d7kfQ==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
+        "@types/prop-types": "*",
         "csstype": "^3.0.2"
       }
     },
     "node_modules/@types/react-dom": {
-      "version": "19.0.4",
-      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.0.4.tgz",
-      "integrity": "sha512-4fSQ8vWFkg+TGhePfUzVmat3eC14TXYSsiiDSLI0dVLsrm9gZFABjPy/Qu6TKgl1tq1Bu1yDsuQgY3A3DOjCcg==",
+      "version": "18.3.5",
+      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.3.5.tgz",
+      "integrity": "sha512-P4t6saawp+b/dFrUr2cvkVsfvPguwsxtH6dNIYRllMsefqFzkZk5UIjzyDOv5g1dXIPdG4Sp1yCR4Z6RCUsG/Q==",
       "dev": true,
       "license": "MIT",
       "peerDependencies": {
-        "@types/react": "^19.0.0"
+        "@types/react": "^18.0.0"
       }
     },
-    "node_modules/@types/react-transition-group": {
-      "version": "4.4.12",
-      "resolved": "https://registry.npmjs.org/@types/react-transition-group/-/react-transition-group-4.4.12.tgz",
-      "integrity": "sha512-8TV6R3h2j7a91c+1DXdJi3Syo69zzIZbz7Lg5tORM5LEJG7X/E6a1V3drRyBRZq7/utz7A+c4OgYLiLcYGHG6w==",
-      "license": "MIT",
-      "peerDependencies": {
-        "@types/react": "*"
-      }
-    },
-    "node_modules/@types/trusted-types": {
-      "version": "2.0.7",
-      "resolved": "https://registry.npmjs.org/@types/trusted-types/-/trusted-types-2.0.7.tgz",
-      "integrity": "sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw==",
-      "license": "MIT",
-      "optional": true
-    },
-    "node_modules/@vitejs/plugin-react": {
-      "version": "4.3.4",
-      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.3.4.tgz",
-      "integrity": "sha512-SCCPBJtYLdE8PX/7ZQAs1QAZ8Jqwih+0VBLum1EGqmCCQal+MIUqLCzj3ZUy8ufbC0cAM4LRlSTm7IQJwWT4ug==",
+    "node_modules/@typescript-eslint/eslint-plugin": {
+      "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-7.18.0.tgz",
+      "integrity": "sha512-94EQTWZ40mzBc42ATNIBimBEDltSJ9RQHCC8vc/PDbxi4k8dVwUAv4o98dk50M1zB+JGFxp43FP7f8+FP8R6Sw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/core": "^7.26.0",
-        "@babel/plugin-transform-react-jsx-self": "^7.25.9",
-        "@babel/plugin-transform-react-jsx-source": "^7.25.9",
-        "@types/babel__core": "^7.20.5",
-        "react-refresh": "^0.14.2"
+        "@eslint-community/regexpp": "^4.10.0",
+        "@typescript-eslint/scope-manager": "7.18.0",
+        "@typescript-eslint/type-utils": "7.18.0",
+        "@typescript-eslint/utils": "7.18.0",
+        "@typescript-eslint/visitor-keys": "7.18.0",
+        "graphemer": "^1.4.0",
+        "ignore": "^5.3.1",
+        "natural-compare": "^1.4.0",
+        "ts-api-utils": "^1.3.0"
       },
       "engines": {
-        "node": "^14.18.0 || >=16.0.0"
+        "node": "^18.18.0 || >=20.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
       },
       "peerDependencies": {
-        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0"
+        "@typescript-eslint/parser": "^7.0.0",
+        "eslint": "^8.56.0"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
       }
     },
-    "node_modules/acorn": {
-      "version": "8.14.1",
-      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
-      "integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
+    "node_modules/@typescript-eslint/parser": {
+      "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-7.18.0.tgz",
+      "integrity": "sha512-4Z+L8I2OqhZV8qA132M4wNL30ypZGYOQVBfMgxDH/K5UX0PNqTu1c6za9ST5r9+tavvHiTWmBnKzpCJ/GlVFtg==",
       "dev": true,
-      "license": "MIT",
-      "bin": {
-        "acorn": "bin/acorn"
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "@typescript-eslint/scope-manager": "7.18.0",
+        "@typescript-eslint/types": "7.18.0",
+        "@typescript-eslint/typescript-estree": "7.18.0",
+        "@typescript-eslint/visitor-keys": "7.18.0",
+        "debug": "^4.3.4"
       },
       "engines": {
-        "node": ">=0.4.0"
-      }
-    },
-    "node_modules/acorn-jsx": {
-      "version": "5.3.2",
-      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
-      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
-      "dev": true,
-      "license": "MIT",
+        "node": "^18.18.0 || >=20.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
       "peerDependencies": {
-        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
+        "eslint": "^8.56.0"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
       }
     },
-    "node_modules/ajv": {
-      "version": "6.12.6",
-      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
-      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
+    "node_modules/@typescript-eslint/scope-manager": {
+      "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-7.18.0.tgz",
+      "integrity": "sha512-jjhdIE/FPF2B7Z1uzc6i3oWKbGcHb87Qw7AWj6jmEqNOfDFbJWtjt/XfwCpvNkpGWlcJaog5vTR+VV8+w9JflA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "fast-deep-equal": "^3.1.1",
-        "fast-json-stable-stringify": "^2.0.0",
-        "json-schema-traverse": "^0.4.1",
-        "uri-js": "^4.2.2"
+        "@typescript-eslint/types": "7.18.0",
+        "@typescript-eslint/visitor-keys": "7.18.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || >=20.0.0"
       },
       "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/epoberezkin"
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
       }
     },
-    "node_modules/ansi-regex": {
-      "version": "6.1.0",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
-      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
+    "node_modules/@typescript-eslint/type-utils": {
+      "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-7.18.0.tgz",
+      "integrity": "sha512-XL0FJXuCLaDuX2sYqZUUSOJ2sG5/i1AAze+axqmLnSkNEVMVYLF+cbwlB2w8D1tinFuSikHmFta+P+HOofrLeA==",
       "dev": true,
       "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/typescript-estree": "7.18.0",
+        "@typescript-eslint/utils": "7.18.0",
+        "debug": "^4.3.4",
+        "ts-api-utils": "^1.3.0"
+      },
       "engines": {
-        "node": ">=12"
+        "node": "^18.18.0 || >=20.0.0"
       },
       "funding": {
-        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
-      }
-    },
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.56.0"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@typescript-eslint/types": {
+      "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-7.18.0.tgz",
+      "integrity": "sha512-iZqi+Ds1y4EDYUtlOOC+aUmxnE9xS/yCigkjA7XpTKV6nCBd3Hp/PRGGmdwnfkV2ThMyYldP1wRpm/id99spTQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^18.18.0 || >=20.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree": {
+      "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-7.18.0.tgz",
+      "integrity": "sha512-aP1v/BSPnnyhMHts8cf1qQ6Q1IFwwRvAQGRvBFkWlo3/lH29OXA3Pts+c10nxRxIBrDnoMqzhgdwVe5f2D6OzA==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "@typescript-eslint/types": "7.18.0",
+        "@typescript-eslint/visitor-keys": "7.18.0",
+        "debug": "^4.3.4",
+        "globby": "^11.1.0",
+        "is-glob": "^4.0.3",
+        "minimatch": "^9.0.4",
+        "semver": "^7.6.0",
+        "ts-api-utils": "^1.3.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || >=20.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
+      "version": "7.7.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
+      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/@typescript-eslint/utils": {
+      "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-7.18.0.tgz",
+      "integrity": "sha512-kK0/rNa2j74XuHVcoCZxdFBMF+aq/vH83CXAOHieC+2Gis4mF8jJXT5eAfyD3K0sAxtPuwxaIOIOvhwzVDt/kw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@eslint-community/eslint-utils": "^4.4.0",
+        "@typescript-eslint/scope-manager": "7.18.0",
+        "@typescript-eslint/types": "7.18.0",
+        "@typescript-eslint/typescript-estree": "7.18.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || >=20.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.56.0"
+      }
+    },
+    "node_modules/@typescript-eslint/visitor-keys": {
+      "version": "7.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-7.18.0.tgz",
+      "integrity": "sha512-cDF0/Gf81QpY3xYyJKDV14Zwdmid5+uuENhjH2EqFaF0ni+yAyq/LzMaIJdhNJXZI7uLzwIlA+V7oWoyn6Curg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/types": "7.18.0",
+        "eslint-visitor-keys": "^3.4.3"
+      },
+      "engines": {
+        "node": "^18.18.0 || >=20.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@ungap/structured-clone": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
+      "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/@vitejs/plugin-react": {
+      "version": "4.3.4",
+      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.3.4.tgz",
+      "integrity": "sha512-SCCPBJtYLdE8PX/7ZQAs1QAZ8Jqwih+0VBLum1EGqmCCQal+MIUqLCzj3ZUy8ufbC0cAM4LRlSTm7IQJwWT4ug==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/core": "^7.26.0",
+        "@babel/plugin-transform-react-jsx-self": "^7.25.9",
+        "@babel/plugin-transform-react-jsx-source": "^7.25.9",
+        "@types/babel__core": "^7.20.5",
+        "react-refresh": "^0.14.2"
+      },
+      "engines": {
+        "node": "^14.18.0 || >=16.0.0"
+      },
+      "peerDependencies": {
+        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0"
+      }
+    },
+    "node_modules/acorn": {
+      "version": "8.14.1",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
+      "integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "acorn": "bin/acorn"
+      },
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/acorn-jsx": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
+      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
+      }
+    },
+    "node_modules/ajv": {
+      "version": "6.12.6",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
+      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fast-deep-equal": "^3.1.1",
+        "fast-json-stable-stringify": "^2.0.0",
+        "json-schema-traverse": "^0.4.1",
+        "uri-js": "^4.2.2"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/epoberezkin"
+      }
+    },
+    "node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/ansi-styles": {
       "version": "4.3.0",
       "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
@@ -2189,6 +1671,16 @@
       "dev": true,
       "license": "Python-2.0"
     },
+    "node_modules/array-union": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
+      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/asynckit": {
       "version": "0.4.0",
       "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
@@ -2207,48 +1699,10 @@
         "node": ">= 4.5.0"
       }
     },
-    "node_modules/autoprefixer": {
-      "version": "10.4.21",
-      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
-      "integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "opencollective",
-          "url": "https://opencollective.com/postcss/"
-        },
-        {
-          "type": "tidelift",
-          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
-        },
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/ai"
-        }
-      ],
-      "license": "MIT",
-      "dependencies": {
-        "browserslist": "^4.24.4",
-        "caniuse-lite": "^1.0.30001702",
-        "fraction.js": "^4.3.7",
-        "normalize-range": "^0.1.2",
-        "picocolors": "^1.1.1",
-        "postcss-value-parser": "^4.2.0"
-      },
-      "bin": {
-        "autoprefixer": "bin/autoprefixer"
-      },
-      "engines": {
-        "node": "^10 || ^12 || >=14"
-      },
-      "peerDependencies": {
-        "postcss": "^8.1.0"
-      }
-    },
     "node_modules/axios": {
-      "version": "1.8.4",
-      "resolved": "https://registry.npmjs.org/axios/-/axios-1.8.4.tgz",
-      "integrity": "sha512-eBSYY4Y68NNlHbHBMdeDmKNtDgXWhQsJcGqzO3iLUM0GraQFSS9cVgPX5I9b3lbdFKyYoAEGAZF1DwhTaljNAw==",
+      "version": "1.9.0",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.9.0.tgz",
+      "integrity": "sha512-re4CqKTJaURpzbLHtIi6XpDv20/CnpXOtjRY5/CU32L8gU8ek9UIivcfvSWvmKEngmVbrUtPpdDwWDWL7DNHvg==",
       "license": "MIT",
       "dependencies": {
         "follow-redirects": "^1.15.6",
@@ -2256,21 +1710,6 @@
         "proxy-from-env": "^1.1.0"
       }
     },
-    "node_modules/babel-plugin-macros": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/babel-plugin-macros/-/babel-plugin-macros-3.1.0.tgz",
-      "integrity": "sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.12.5",
-        "cosmiconfig": "^7.0.0",
-        "resolve": "^1.19.0"
-      },
-      "engines": {
-        "node": ">=10",
-        "npm": ">=6"
-      }
-    },
     "node_modules/balanced-match": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
@@ -2288,48 +1727,27 @@
         "node": ">= 0.6.0"
       }
     },
-    "node_modules/base64-js": {
-      "version": "1.5.1",
-      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
-      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "MIT"
-    },
-    "node_modules/bl": {
-      "version": "5.1.0",
-      "resolved": "https://registry.npmjs.org/bl/-/bl-5.1.0.tgz",
-      "integrity": "sha512-tv1ZJHLfTDnXE6tMHv73YgSJaWR2AFuPwMntBe7XL/GBFHnT0CLnsHMogfk5+GzCDC5ZWarSCYaIGATZt9dNsQ==",
+    "node_modules/brace-expansion": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
+      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "buffer": "^6.0.3",
-        "inherits": "^2.0.4",
-        "readable-stream": "^3.4.0"
+        "balanced-match": "^1.0.0"
       }
     },
-    "node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+    "node_modules/braces": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
+      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
+        "fill-range": "^7.1.1"
+      },
+      "engines": {
+        "node": ">=8"
       }
     },
     "node_modules/browserslist": {
@@ -2377,31 +1795,6 @@
         "node": ">= 0.4.0"
       }
     },
-    "node_modules/buffer": {
-      "version": "6.0.3",
-      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
-      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "MIT",
-      "dependencies": {
-        "base64-js": "^1.3.1",
-        "ieee754": "^1.2.1"
-      }
-    },
     "node_modules/call-bind-apply-helpers": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
@@ -2419,15 +1812,16 @@
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
       "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=6"
       }
     },
     "node_modules/caniuse-lite": {
-      "version": "1.0.30001705",
-      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001705.tgz",
-      "integrity": "sha512-S0uyMMiYvA7CxNgomYBwwwPUnWzFD83f3B1ce5jHUfHTH//QL6hHsreI8RVC5606R4ssqravelYO5TU6t8sEyg==",
+      "version": "1.0.30001706",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001706.tgz",
+      "integrity": "sha512-3ZczoTApMAZwPKYWmwVbQMFpXBDds3/0VciVoUwPUbldlYyVLmRVuRs/PcUZtHpbLRpzzDvrvnFuREsGt6lUug==",
       "dev": true,
       "funding": [
         {
@@ -2465,13 +1859,6 @@
         "node": ">=10.0.0"
       }
     },
-    "node_modules/canvg/node_modules/regenerator-runtime": {
-      "version": "0.13.11",
-      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.11.tgz",
-      "integrity": "sha512-kY1AZVr2Ra+t+piVaJ4gxaFaReZVH40AKNo7UCX6W+dEwBo/2oZJzqfuN1qLq1oL45o56cPaTXELwrTh8Fpggg==",
-      "license": "MIT",
-      "optional": true
-    },
     "node_modules/chalk": {
       "version": "4.1.2",
       "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
@@ -2489,66 +1876,6 @@
         "url": "https://github.com/chalk/chalk?sponsor=1"
       }
     },
-    "node_modules/chart.js": {
-      "version": "4.4.9",
-      "resolved": "https://registry.npmjs.org/chart.js/-/chart.js-4.4.9.tgz",
-      "integrity": "sha512-EyZ9wWKgpAU0fLJ43YAEIF8sr5F2W3LqbS40ZJyHIner2lY14ufqv2VMp69MAiZ2rpwxEUxEhIH/0U3xyRynxg==",
-      "license": "MIT",
-      "dependencies": {
-        "@kurkle/color": "^0.3.0"
-      },
-      "engines": {
-        "pnpm": ">=8"
-      }
-    },
-    "node_modules/cli-cursor": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-4.0.0.tgz",
-      "integrity": "sha512-VGtlMu3x/4DOtIUwEkRezxUZ2lBacNJCHash0N0WeZDBS+7Ux1dm3XWAgWYxLJFMMdOeXMHXorshEFhbMSGelg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "restore-cursor": "^4.0.0"
-      },
-      "engines": {
-        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/cli-spinners": {
-      "version": "2.9.2",
-      "resolved": "https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.9.2.tgz",
-      "integrity": "sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/clone": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/clone/-/clone-1.0.4.tgz",
-      "integrity": "sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.8"
-      }
-    },
-    "node_modules/clsx": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
-      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
     "node_modules/color-convert": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
@@ -2581,16 +1908,6 @@
         "node": ">= 0.8"
       }
     },
-    "node_modules/commander": {
-      "version": "10.0.1",
-      "resolved": "https://registry.npmjs.org/commander/-/commander-10.0.1.tgz",
-      "integrity": "sha512-y4Mg2tXshplEbSGzx7amzPwKKOCGuoSRP/CjEdwwk0FOGlUbq6lKuoyDZTNZkmxHdJtp54hdfY/JUrdL7Xfdug==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=14"
-      }
-    },
     "node_modules/concat-map": {
       "version": "0.0.1",
       "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
@@ -2605,15 +1922,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/cookie": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/cookie/-/cookie-1.0.2.tgz",
-      "integrity": "sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=18"
-      }
-    },
     "node_modules/core-js": {
       "version": "3.42.0",
       "resolved": "https://registry.npmjs.org/core-js/-/core-js-3.42.0.tgz",
@@ -2626,31 +1934,6 @@
         "url": "https://opencollective.com/core-js"
       }
     },
-    "node_modules/cosmiconfig": {
-      "version": "7.1.0",
-      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-7.1.0.tgz",
-      "integrity": "sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==",
-      "license": "MIT",
-      "dependencies": {
-        "@types/parse-json": "^4.0.0",
-        "import-fresh": "^3.2.1",
-        "parse-json": "^5.0.0",
-        "path-type": "^4.0.0",
-        "yaml": "^1.10.0"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/cosmiconfig/node_modules/yaml": {
-      "version": "1.10.2",
-      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
-      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
-      "license": "ISC",
-      "engines": {
-        "node": ">= 6"
-      }
-    },
     "node_modules/cross-spawn": {
       "version": "7.0.6",
       "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
@@ -2680,153 +1963,14 @@
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
       "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
-      "license": "MIT"
-    },
-    "node_modules/d3-array": {
-      "version": "3.2.4",
-      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
-      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
-      "license": "ISC",
-      "dependencies": {
-        "internmap": "1 - 2"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-color": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
-      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
-      "license": "ISC",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-ease": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
-      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
-      "license": "BSD-3-Clause",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-format": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
-      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
-      "license": "ISC",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-interpolate": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
-      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
-      "license": "ISC",
-      "dependencies": {
-        "d3-color": "1 - 3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-path": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
-      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
-      "license": "ISC",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-scale": {
-      "version": "4.0.2",
-      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
-      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
-      "license": "ISC",
-      "dependencies": {
-        "d3-array": "2.10.0 - 3",
-        "d3-format": "1 - 3",
-        "d3-interpolate": "1.2.0 - 3",
-        "d3-time": "2.1.1 - 3",
-        "d3-time-format": "2 - 4"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-shape": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
-      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
-      "license": "ISC",
-      "dependencies": {
-        "d3-path": "^3.1.0"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-time": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
-      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
-      "license": "ISC",
-      "dependencies": {
-        "d3-array": "2 - 3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-time-format": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
-      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
-      "license": "ISC",
-      "dependencies": {
-        "d3-time": "1 - 3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-timer": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
-      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
-      "license": "ISC",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/data-uri-to-buffer": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-4.0.1.tgz",
-      "integrity": "sha512-0R9ikRb668HB7QDxT1vkpuUBtqc53YyAwMwGeUFKRojY/NWKvdZ+9UYtRfGmhqNbRkTSVpMbmyhXipFFv2cb/A==",
       "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">= 12"
-      }
-    },
-    "node_modules/date-fns": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
-      "integrity": "sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==",
-      "license": "MIT",
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/kossnocorp"
-      }
+      "license": "MIT"
     },
     "node_modules/debug": {
       "version": "4.4.0",
       "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
       "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "ms": "^2.1.3"
@@ -2840,12 +1984,6 @@
         }
       }
     },
-    "node_modules/decimal.js-light": {
-      "version": "2.5.1",
-      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
-      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
-      "license": "MIT"
-    },
     "node_modules/deep-is": {
       "version": "0.1.4",
       "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
@@ -2853,19 +1991,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/defaults": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/defaults/-/defaults-1.0.4.tgz",
-      "integrity": "sha512-eFuaLoy/Rxalv2kr+lqMlUnrDWV+3j4pljOIJgLIhI058IQfWJ7vXhyEIHu+HtC738klGALYxOKDO0bQP3tg8A==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "clone": "^1.0.2"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
     "node_modules/delayed-stream": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
@@ -2875,25 +2000,38 @@
         "node": ">=0.4.0"
       }
     },
-    "node_modules/dom-helpers": {
-      "version": "5.2.1",
-      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
-      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
+    "node_modules/dir-glob": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
+      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@babel/runtime": "^7.8.7",
-        "csstype": "^3.0.2"
+        "path-type": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/doctrine": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
+      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "esutils": "^2.0.2"
+      },
+      "engines": {
+        "node": ">=6.0.0"
       }
     },
     "node_modules/dompurify": {
-      "version": "3.2.5",
-      "resolved": "https://registry.npmjs.org/dompurify/-/dompurify-3.2.5.tgz",
-      "integrity": "sha512-mLPd29uoRe9HpvwP2TxClGQBzGXeEC/we/q+bFlmPPmj2p2Ugl3r6ATu/UU1v77DXNcehiBg9zsr1dREyA/dJQ==",
+      "version": "2.5.8",
+      "resolved": "https://registry.npmjs.org/dompurify/-/dompurify-2.5.8.tgz",
+      "integrity": "sha512-o1vSNgrmYMQObbSSvF/1brBYEQPHhV1+gsmrusO7/GXtp1T9rCS8cXFqVxK/9crT1jA6Ccv+5MTSjBNqr7Sovw==",
       "license": "(MPL-2.0 OR Apache-2.0)",
-      "optional": true,
-      "optionalDependencies": {
-        "@types/trusted-types": "^2.0.7"
-      }
+      "optional": true
     },
     "node_modules/dunder-proto": {
       "version": "1.0.1",
@@ -2910,21 +2048,12 @@
       }
     },
     "node_modules/electron-to-chromium": {
-      "version": "1.5.119",
-      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.119.tgz",
-      "integrity": "sha512-Ku4NMzUjz3e3Vweh7PhApPrZSS4fyiCIbcIrG9eKrriYVLmbMepETR/v6SU7xPm98QTqMSYiCwfO89QNjXLkbQ==",
+      "version": "1.5.120",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.120.tgz",
+      "integrity": "sha512-oTUp3gfX1gZI+xfD2djr2rzQdHCwHzPQrrK0CD7WpTdF0nPdQ/INcRVjWgLdCT4a9W3jFObR9DAfsuyFQnI8CQ==",
       "dev": true,
       "license": "ISC"
     },
-    "node_modules/error-ex": {
-      "version": "1.3.2",
-      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
-      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
-      "license": "MIT",
-      "dependencies": {
-        "is-arrayish": "^0.2.1"
-      }
-    },
     "node_modules/es-define-property": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
@@ -2971,9 +2100,9 @@
       }
     },
     "node_modules/esbuild": {
-      "version": "0.25.1",
-      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.1.tgz",
-      "integrity": "sha512-BGO5LtrGC7vxnqucAe/rmvKdJllfGaYWdyABvyMoXQlfYMb2bbRuReWR5tEGE//4LcNJj9XrkovTqNYRFZHAMQ==",
+      "version": "0.25.3",
+      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.3.tgz",
+      "integrity": "sha512-qKA6Pvai73+M2FtftpNKRxJ78GIjmFXFxd/1DVBqGo/qNhLSfv+G12n9pNoWdytJC8U00TrViOwpjT0zgqQS8Q==",
       "dev": true,
       "hasInstallScript": true,
       "license": "MIT",
@@ -2984,31 +2113,31 @@
         "node": ">=18"
       },
       "optionalDependencies": {
-        "@esbuild/aix-ppc64": "0.25.1",
-        "@esbuild/android-arm": "0.25.1",
-        "@esbuild/android-arm64": "0.25.1",
-        "@esbuild/android-x64": "0.25.1",
-        "@esbuild/darwin-arm64": "0.25.1",
-        "@esbuild/darwin-x64": "0.25.1",
-        "@esbuild/freebsd-arm64": "0.25.1",
-        "@esbuild/freebsd-x64": "0.25.1",
-        "@esbuild/linux-arm": "0.25.1",
-        "@esbuild/linux-arm64": "0.25.1",
-        "@esbuild/linux-ia32": "0.25.1",
-        "@esbuild/linux-loong64": "0.25.1",
-        "@esbuild/linux-mips64el": "0.25.1",
-        "@esbuild/linux-ppc64": "0.25.1",
-        "@esbuild/linux-riscv64": "0.25.1",
-        "@esbuild/linux-s390x": "0.25.1",
-        "@esbuild/linux-x64": "0.25.1",
-        "@esbuild/netbsd-arm64": "0.25.1",
-        "@esbuild/netbsd-x64": "0.25.1",
-        "@esbuild/openbsd-arm64": "0.25.1",
-        "@esbuild/openbsd-x64": "0.25.1",
-        "@esbuild/sunos-x64": "0.25.1",
-        "@esbuild/win32-arm64": "0.25.1",
-        "@esbuild/win32-ia32": "0.25.1",
-        "@esbuild/win32-x64": "0.25.1"
+        "@esbuild/aix-ppc64": "0.25.3",
+        "@esbuild/android-arm": "0.25.3",
+        "@esbuild/android-arm64": "0.25.3",
+        "@esbuild/android-x64": "0.25.3",
+        "@esbuild/darwin-arm64": "0.25.3",
+        "@esbuild/darwin-x64": "0.25.3",
+        "@esbuild/freebsd-arm64": "0.25.3",
+        "@esbuild/freebsd-x64": "0.25.3",
+        "@esbuild/linux-arm": "0.25.3",
+        "@esbuild/linux-arm64": "0.25.3",
+        "@esbuild/linux-ia32": "0.25.3",
+        "@esbuild/linux-loong64": "0.25.3",
+        "@esbuild/linux-mips64el": "0.25.3",
+        "@esbuild/linux-ppc64": "0.25.3",
+        "@esbuild/linux-riscv64": "0.25.3",
+        "@esbuild/linux-s390x": "0.25.3",
+        "@esbuild/linux-x64": "0.25.3",
+        "@esbuild/netbsd-arm64": "0.25.3",
+        "@esbuild/netbsd-x64": "0.25.3",
+        "@esbuild/openbsd-arm64": "0.25.3",
+        "@esbuild/openbsd-x64": "0.25.3",
+        "@esbuild/sunos-x64": "0.25.3",
+        "@esbuild/win32-arm64": "0.25.3",
+        "@esbuild/win32-ia32": "0.25.3",
+        "@esbuild/win32-x64": "0.25.3"
       }
     },
     "node_modules/escalade": {
@@ -3025,6 +2154,7 @@
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
       "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=10"
@@ -3034,83 +2164,79 @@
       }
     },
     "node_modules/eslint": {
-      "version": "9.22.0",
-      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.22.0.tgz",
-      "integrity": "sha512-9V/QURhsRN40xuHXWjV64yvrzMjcz7ZyNoF2jJFmy9j/SLk0u1OLSZgXi28MrXjymnjEGSR80WCdab3RGMDveQ==",
+      "version": "8.57.1",
+      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.1.tgz",
+      "integrity": "sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==",
+      "deprecated": "This version is no longer supported. Please see https://eslint.org/version-support for other options.",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "@eslint-community/eslint-utils": "^4.2.0",
-        "@eslint-community/regexpp": "^4.12.1",
-        "@eslint/config-array": "^0.19.2",
-        "@eslint/config-helpers": "^0.1.0",
-        "@eslint/core": "^0.12.0",
-        "@eslint/eslintrc": "^3.3.0",
-        "@eslint/js": "9.22.0",
-        "@eslint/plugin-kit": "^0.2.7",
-        "@humanfs/node": "^0.16.6",
+        "@eslint-community/regexpp": "^4.6.1",
+        "@eslint/eslintrc": "^2.1.4",
+        "@eslint/js": "8.57.1",
+        "@humanwhocodes/config-array": "^0.13.0",
         "@humanwhocodes/module-importer": "^1.0.1",
-        "@humanwhocodes/retry": "^0.4.2",
-        "@types/estree": "^1.0.6",
-        "@types/json-schema": "^7.0.15",
+        "@nodelib/fs.walk": "^1.2.8",
+        "@ungap/structured-clone": "^1.2.0",
         "ajv": "^6.12.4",
         "chalk": "^4.0.0",
-        "cross-spawn": "^7.0.6",
+        "cross-spawn": "^7.0.2",
         "debug": "^4.3.2",
+        "doctrine": "^3.0.0",
         "escape-string-regexp": "^4.0.0",
-        "eslint-scope": "^8.3.0",
-        "eslint-visitor-keys": "^4.2.0",
-        "espree": "^10.3.0",
-        "esquery": "^1.5.0",
+        "eslint-scope": "^7.2.2",
+        "eslint-visitor-keys": "^3.4.3",
+        "espree": "^9.6.1",
+        "esquery": "^1.4.2",
         "esutils": "^2.0.2",
         "fast-deep-equal": "^3.1.3",
-        "file-entry-cache": "^8.0.0",
+        "file-entry-cache": "^6.0.1",
         "find-up": "^5.0.0",
         "glob-parent": "^6.0.2",
+        "globals": "^13.19.0",
+        "graphemer": "^1.4.0",
         "ignore": "^5.2.0",
         "imurmurhash": "^0.1.4",
         "is-glob": "^4.0.0",
+        "is-path-inside": "^3.0.3",
+        "js-yaml": "^4.1.0",
         "json-stable-stringify-without-jsonify": "^1.0.1",
+        "levn": "^0.4.1",
         "lodash.merge": "^4.6.2",
         "minimatch": "^3.1.2",
         "natural-compare": "^1.4.0",
-        "optionator": "^0.9.3"
+        "optionator": "^0.9.3",
+        "strip-ansi": "^6.0.1",
+        "text-table": "^0.2.0"
       },
       "bin": {
         "eslint": "bin/eslint.js"
       },
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       },
       "funding": {
-        "url": "https://eslint.org/donate"
-      },
-      "peerDependencies": {
-        "jiti": "*"
-      },
-      "peerDependenciesMeta": {
-        "jiti": {
-          "optional": true
-        }
+        "url": "https://opencollective.com/eslint"
       }
     },
     "node_modules/eslint-plugin-react-hooks": {
-      "version": "5.2.0",
-      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
-      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
+      "version": "4.6.2",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-4.6.2.tgz",
+      "integrity": "sha512-QzliNJq4GinDBcD8gPB5v0wh6g8q3SUi6EFF0x8N/BL9PoVs0atuGc47ozMRyOWAKdwaZ5OnbOEa3WR+dSGKuQ==",
       "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=10"
       },
       "peerDependencies": {
-        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
+        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0"
       }
     },
     "node_modules/eslint-plugin-react-refresh": {
-      "version": "0.4.19",
-      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.19.tgz",
-      "integrity": "sha512-eyy8pcr/YxSYjBoqIFSrlbn9i/xvxUFa8CjzAYo9cFjgGXqq1hyjihcpZvxRLalpaWmueWR81xn7vuKmAFijDQ==",
+      "version": "0.4.20",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.20.tgz",
+      "integrity": "sha512-XpbHQ2q5gUF8BGOX4dHe+71qoirYMhApEPZ7sfhF/dNnOF1UXnCMGZf79SFTBO7Bz5YEIT4TMieSlJBWhP9WBA==",
       "dev": true,
       "license": "MIT",
       "peerDependencies": {
@@ -3118,9 +2244,9 @@
       }
     },
     "node_modules/eslint-scope": {
-      "version": "8.3.0",
-      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.3.0.tgz",
-      "integrity": "sha512-pUNxi75F8MJ/GdeKtVLSbYg4ZI34J6C0C7sbL4YOp2exGwen7ZsuBqKzUhXd0qMQ362yET3z+uPwKeg/0C2XCQ==",
+      "version": "7.2.2",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
+      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
       "dev": true,
       "license": "BSD-2-Clause",
       "dependencies": {
@@ -3128,38 +2254,78 @@
         "estraverse": "^5.2.0"
       },
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       },
       "funding": {
         "url": "https://opencollective.com/eslint"
       }
     },
     "node_modules/eslint-visitor-keys": {
-      "version": "4.2.0",
-      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz",
-      "integrity": "sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==",
+      "version": "3.4.3",
+      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
+      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
       "dev": true,
       "license": "Apache-2.0",
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       },
       "funding": {
         "url": "https://opencollective.com/eslint"
       }
     },
+    "node_modules/eslint/node_modules/brace-expansion": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/eslint/node_modules/globals": {
+      "version": "13.24.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
+      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "type-fest": "^0.20.2"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/eslint/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/espree": {
-      "version": "10.3.0",
-      "resolved": "https://registry.npmjs.org/espree/-/espree-10.3.0.tgz",
-      "integrity": "sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==",
+      "version": "9.6.1",
+      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
+      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
       "dev": true,
       "license": "BSD-2-Clause",
       "dependencies": {
-        "acorn": "^8.14.0",
+        "acorn": "^8.9.0",
         "acorn-jsx": "^5.3.2",
-        "eslint-visitor-keys": "^4.2.0"
+        "eslint-visitor-keys": "^3.4.1"
       },
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       },
       "funding": {
         "url": "https://opencollective.com/eslint"
@@ -3211,50 +2377,41 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/eventemitter3": {
-      "version": "4.0.7",
-      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
-      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
+    "node_modules/fast-deep-equal": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
+      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
+      "dev": true,
       "license": "MIT"
     },
-    "node_modules/execa": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/execa/-/execa-7.2.0.tgz",
-      "integrity": "sha512-UduyVP7TLB5IcAQl+OzLyLcS/l32W/GLg+AhHJ+ow40FOk2U3SAllPwR44v4vmdFwIWqpdwxxpQbF1n5ta9seA==",
+    "node_modules/fast-glob": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
+      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "cross-spawn": "^7.0.3",
-        "get-stream": "^6.0.1",
-        "human-signals": "^4.3.0",
-        "is-stream": "^3.0.0",
-        "merge-stream": "^2.0.0",
-        "npm-run-path": "^5.1.0",
-        "onetime": "^6.0.0",
-        "signal-exit": "^3.0.7",
-        "strip-final-newline": "^3.0.0"
+        "@nodelib/fs.stat": "^2.0.2",
+        "@nodelib/fs.walk": "^1.2.3",
+        "glob-parent": "^5.1.2",
+        "merge2": "^1.3.0",
+        "micromatch": "^4.0.8"
       },
       "engines": {
-        "node": "^14.18.0 || ^16.14.0 || >=18.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sindresorhus/execa?sponsor=1"
+        "node": ">=8.6.0"
       }
     },
-    "node_modules/fast-deep-equal": {
-      "version": "3.1.3",
-      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
-      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
+    "node_modules/fast-glob/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
       "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/fast-equals": {
-      "version": "5.2.2",
-      "resolved": "https://registry.npmjs.org/fast-equals/-/fast-equals-5.2.2.tgz",
-      "integrity": "sha512-V7/RktU11J3I36Nwq2JnZEM7tNm17eBJz+u25qdxBZeCKiX6BkVSZQjwWIr+IobgnZy+ag73tTZgZi7tr0LrBw==",
-      "license": "MIT",
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
       "engines": {
-        "node": ">=6.0.0"
+        "node": ">= 6"
       }
     },
     "node_modules/fast-json-stable-stringify": {
@@ -3271,28 +2428,14 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/fetch-blob": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.2.0.tgz",
-      "integrity": "sha512-7yAQpD2UMJzLi1Dqv7qFYnPbaPx7ZfFK6PiIxQ4PfkGPyNyl2Ugx+a/umUonmKqjhM4DnfbMvdX6otXq83soQQ==",
+    "node_modules/fastq": {
+      "version": "1.19.1",
+      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
+      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
       "dev": true,
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/jimmywarting"
-        },
-        {
-          "type": "paypal",
-          "url": "https://paypal.me/jimmywarting"
-        }
-      ],
-      "license": "MIT",
+      "license": "ISC",
       "dependencies": {
-        "node-domexception": "^1.0.0",
-        "web-streams-polyfill": "^3.0.3"
-      },
-      "engines": {
-        "node": "^12.20 || >= 14.13"
+        "reusify": "^1.0.4"
       }
     },
     "node_modules/fflate": {
@@ -3302,23 +2445,30 @@
       "license": "MIT"
     },
     "node_modules/file-entry-cache": {
-      "version": "8.0.0",
-      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
-      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
+      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "flat-cache": "^4.0.0"
+        "flat-cache": "^3.0.4"
       },
       "engines": {
-        "node": ">=16.0.0"
+        "node": "^10.12.0 || >=12.0.0"
       }
     },
-    "node_modules/find-root": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/find-root/-/find-root-1.1.0.tgz",
-      "integrity": "sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==",
-      "license": "MIT"
+    "node_modules/fill-range": {
+      "version": "7.1.1",
+      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
+      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "to-regex-range": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
     },
     "node_modules/find-up": {
       "version": "5.0.0",
@@ -3338,17 +2488,18 @@
       }
     },
     "node_modules/flat-cache": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
-      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
+      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "flatted": "^3.2.9",
-        "keyv": "^4.5.4"
+        "keyv": "^4.5.3",
+        "rimraf": "^3.0.2"
       },
       "engines": {
-        "node": ">=16"
+        "node": "^10.12.0 || >=12.0.0"
       }
     },
     "node_modules/flatted": {
@@ -3393,47 +2544,12 @@
         "node": ">= 6"
       }
     },
-    "node_modules/formdata-polyfill": {
-      "version": "4.0.10",
-      "resolved": "https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz",
-      "integrity": "sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "fetch-blob": "^3.1.2"
-      },
-      "engines": {
-        "node": ">=12.20.0"
-      }
-    },
-    "node_modules/fraction.js": {
-      "version": "4.3.7",
-      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
-      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": "*"
-      },
-      "funding": {
-        "type": "patreon",
-        "url": "https://github.com/sponsors/rawify"
-      }
-    },
-    "node_modules/fs-extra": {
-      "version": "11.3.0",
-      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.3.0.tgz",
-      "integrity": "sha512-Z4XaCL6dUDHfP/jT25jJKMmtxvuwbkrD1vNSMFlo9lNLY2c5FHYSQgHPRZUjAB26TpDEoW9HCOgplrdbaPV/ew==",
+    "node_modules/fs.realpath": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
+      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
       "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "graceful-fs": "^4.2.0",
-        "jsonfile": "^6.0.1",
-        "universalify": "^2.0.0"
-      },
-      "engines": {
-        "node": ">=14.14"
-      }
+      "license": "ISC"
     },
     "node_modules/fsevents": {
       "version": "2.3.3",
@@ -3506,17 +2622,26 @@
         "node": ">= 0.4"
       }
     },
-    "node_modules/get-stream": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
-      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
+    "node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
       "dev": true,
-      "license": "MIT",
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
       "engines": {
-        "node": ">=10"
+        "node": "*"
       },
       "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+        "url": "https://github.com/sponsors/isaacs"
       }
     },
     "node_modules/glob-parent": {
@@ -3532,14 +2657,56 @@
         "node": ">=10.13.0"
       }
     },
+    "node_modules/glob/node_modules/brace-expansion": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/glob/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/globals": {
-      "version": "15.15.0",
-      "resolved": "https://registry.npmjs.org/globals/-/globals-15.15.0.tgz",
-      "integrity": "sha512-7ACyT3wmyp3I61S4fG682L0VA2RGD9otkqGJIwNUMF1SWUombIIk+af1unuDYgMm082aHYwD+mzJvv9Iu8dsgg==",
+      "version": "11.12.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
+      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=18"
+        "node": ">=4"
+      }
+    },
+    "node_modules/globby": {
+      "version": "11.1.0",
+      "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
+      "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "array-union": "^2.1.0",
+        "dir-glob": "^3.0.1",
+        "fast-glob": "^3.2.9",
+        "ignore": "^5.2.0",
+        "merge2": "^1.4.1",
+        "slash": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=10"
       },
       "funding": {
         "url": "https://github.com/sponsors/sindresorhus"
@@ -3557,12 +2724,12 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/graceful-fs": {
-      "version": "4.2.11",
-      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
-      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
+    "node_modules/graphemer": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
+      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
       "dev": true,
-      "license": "ISC"
+      "license": "MIT"
     },
     "node_modules/has-flag": {
       "version": "4.0.0",
@@ -3613,15 +2780,6 @@
         "node": ">= 0.4"
       }
     },
-    "node_modules/hoist-non-react-statics": {
-      "version": "3.3.2",
-      "resolved": "https://registry.npmjs.org/hoist-non-react-statics/-/hoist-non-react-statics-3.3.2.tgz",
-      "integrity": "sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==",
-      "license": "BSD-3-Clause",
-      "dependencies": {
-        "react-is": "^16.7.0"
-      }
-    },
     "node_modules/html2canvas": {
       "version": "1.4.1",
       "resolved": "https://registry.npmjs.org/html2canvas/-/html2canvas-1.4.1.tgz",
@@ -3636,37 +2794,6 @@
         "node": ">=8.0.0"
       }
     },
-    "node_modules/human-signals": {
-      "version": "4.3.1",
-      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-4.3.1.tgz",
-      "integrity": "sha512-nZXjEF2nbo7lIw3mgYjItAfgQXog3OjJogSbKa2CQIIvSGWcKgeJnQlNXip6NglNzYH45nSRiEVimMvYL8DDqQ==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14.18.0"
-      }
-    },
-    "node_modules/ieee754": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
-      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "BSD-3-Clause"
-    },
     "node_modules/ignore": {
       "version": "5.3.2",
       "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
@@ -3681,6 +2808,7 @@
       "version": "3.3.1",
       "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
       "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "parent-module": "^1.0.0",
@@ -3703,6 +2831,18 @@
         "node": ">=0.8.19"
       }
     },
+    "node_modules/inflight": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
+      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
+      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "once": "^1.3.0",
+        "wrappy": "1"
+      }
+    },
     "node_modules/inherits": {
       "version": "2.0.4",
       "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
@@ -3710,36 +2850,6 @@
       "dev": true,
       "license": "ISC"
     },
-    "node_modules/internmap": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
-      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
-      "license": "ISC",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/is-arrayish": {
-      "version": "0.2.1",
-      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
-      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
-      "license": "MIT"
-    },
-    "node_modules/is-core-module": {
-      "version": "2.16.1",
-      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
-      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
-      "license": "MIT",
-      "dependencies": {
-        "hasown": "^2.0.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
     "node_modules/is-extglob": {
       "version": "2.1.1",
       "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
@@ -3763,43 +2873,24 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/is-interactive": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/is-interactive/-/is-interactive-2.0.0.tgz",
-      "integrity": "sha512-qP1vozQRI+BMOPcjFzrjXuQvdak2pHNUMZoeG2eRbiSqyvbEf/wQtEOTOX1guk6E3t36RkaqiSt8A/6YElNxLQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/is-stream": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-3.0.0.tgz",
-      "integrity": "sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==",
+    "node_modules/is-number": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
+      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+        "node": ">=0.12.0"
       }
     },
-    "node_modules/is-unicode-supported": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz",
-      "integrity": "sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==",
+    "node_modules/is-path-inside": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
+      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+        "node": ">=8"
       }
     },
     "node_modules/isexe": {
@@ -3832,6 +2923,7 @@
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
       "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
+      "dev": true,
       "license": "MIT",
       "bin": {
         "jsesc": "bin/jsesc"
@@ -3847,12 +2939,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/json-parse-even-better-errors": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
-      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
-      "license": "MIT"
-    },
     "node_modules/json-schema-traverse": {
       "version": "0.4.1",
       "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
@@ -3880,44 +2966,22 @@
         "node": ">=6"
       }
     },
-    "node_modules/jsonfile": {
-      "version": "6.1.0",
-      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
-      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "universalify": "^2.0.0"
-      },
-      "optionalDependencies": {
-        "graceful-fs": "^4.1.6"
-      }
-    },
     "node_modules/jspdf": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/jspdf/-/jspdf-3.0.1.tgz",
-      "integrity": "sha512-qaGIxqxetdoNnFQQXxTKUD9/Z7AloLaw94fFsOiJMxbfYdBbrBuhWmbzI8TVjrw7s3jBY1PFHofBKMV/wZPapg==",
+      "version": "2.5.2",
+      "resolved": "https://registry.npmjs.org/jspdf/-/jspdf-2.5.2.tgz",
+      "integrity": "sha512-myeX9c+p7znDWPk0eTrujCzNjT+CXdXyk7YmJq5nD5V7uLLKmSXnlQ/Jn/kuo3X09Op70Apm0rQSnFWyGK8uEQ==",
       "license": "MIT",
       "dependencies": {
-        "@babel/runtime": "^7.26.7",
+        "@babel/runtime": "^7.23.2",
         "atob": "^2.1.2",
         "btoa": "^1.2.1",
         "fflate": "^0.8.1"
       },
       "optionalDependencies": {
-        "canvg": "^3.0.11",
-        "core-js": "^3.6.0",
-        "dompurify": "^3.2.4",
-        "html2canvas": "^1.0.0-rc.5"
-      }
-    },
-    "node_modules/jspdf-autotable": {
-      "version": "5.0.2",
-      "resolved": "https://registry.npmjs.org/jspdf-autotable/-/jspdf-autotable-5.0.2.tgz",
-      "integrity": "sha512-YNKeB7qmx3pxOLcNeoqAv3qTS7KuvVwkFe5AduCawpop3NOkBUtqDToxNc225MlNecxT4kP2Zy3z/y/yvGdXUQ==",
-      "license": "MIT",
-      "peerDependencies": {
-        "jspdf": "^2 || ^3"
+        "canvg": "^3.0.6",
+        "core-js": "^3.6.0",
+        "dompurify": "^2.5.4",
+        "html2canvas": "^1.0.0-rc.5"
       }
     },
     "node_modules/keyv": {
@@ -3930,16 +2994,6 @@
         "json-buffer": "3.0.1"
       }
     },
-    "node_modules/kleur": {
-      "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
-      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
     "node_modules/levn": {
       "version": "0.4.1",
       "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
@@ -3954,12 +3008,6 @@
         "node": ">= 0.8.0"
       }
     },
-    "node_modules/lines-and-columns": {
-      "version": "1.2.4",
-      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
-      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
-      "license": "MIT"
-    },
     "node_modules/locate-path": {
       "version": "6.0.0",
       "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
@@ -3976,12 +3024,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/lodash": {
-      "version": "4.17.21",
-      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
-      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
-      "license": "MIT"
-    },
     "node_modules/lodash.merge": {
       "version": "4.6.2",
       "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
@@ -3989,36 +3031,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/log-symbols": {
-      "version": "5.1.0",
-      "resolved": "https://registry.npmjs.org/log-symbols/-/log-symbols-5.1.0.tgz",
-      "integrity": "sha512-l0x2DvrW294C9uDCoQe1VSU4gf529FkSZ6leBl4TiqZH/e+0R7hSfHQBNut2mNygDgHwvYHfFLn6Oxb3VWj2rA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "chalk": "^5.0.0",
-        "is-unicode-supported": "^1.1.0"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/log-symbols/node_modules/chalk": {
-      "version": "5.4.1",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.4.1.tgz",
-      "integrity": "sha512-zgVZuo2WcZgfUEmsn6eO3kINexW8RAE4maiQ8QNs8CtpPCSyMiYsULR3HQYkm3w8FIA3SberyMJMSldGsW+U3w==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": "^12.17.0 || ^14.13 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/loose-envify": {
       "version": "1.4.0",
       "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
@@ -4050,12 +3062,29 @@
         "node": ">= 0.4"
       }
     },
-    "node_modules/merge-stream": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
-      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
+    "node_modules/merge2": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
+      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
       "dev": true,
-      "license": "MIT"
+      "license": "MIT",
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/micromatch": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
+      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "braces": "^3.0.3",
+        "picomatch": "^2.3.1"
+      },
+      "engines": {
+        "node": ">=8.6"
+      }
     },
     "node_modules/mime-db": {
       "version": "1.52.0",
@@ -4078,42 +3107,33 @@
         "node": ">= 0.6"
       }
     },
-    "node_modules/mimic-fn": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-4.0.0.tgz",
-      "integrity": "sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
     "node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "version": "9.0.5",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
+      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
       "dev": true,
       "license": "ISC",
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
       }
     },
     "node_modules/ms": {
       "version": "2.1.3",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
       "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/nanoid": {
-      "version": "3.3.10",
-      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.10.tgz",
-      "integrity": "sha512-vSJJTG+t/dIKAUhUDw/dLdZ9s//5OxcHqLaDWWrW4Cdq7o6tdLIczUkMXt2MBNmk6sJRZBZRXVixs7URY1CmIg==",
+      "version": "3.3.11",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
+      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
       "dev": true,
       "funding": [
         {
@@ -4136,46 +3156,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/node-domexception": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
-      "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
-      "deprecated": "Use your platform's native DOMException instead",
-      "dev": true,
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/jimmywarting"
-        },
-        {
-          "type": "github",
-          "url": "https://paypal.me/jimmywarting"
-        }
-      ],
-      "license": "MIT",
-      "engines": {
-        "node": ">=10.5.0"
-      }
-    },
-    "node_modules/node-fetch": {
-      "version": "3.3.2",
-      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-3.3.2.tgz",
-      "integrity": "sha512-dRB78srN/l6gqWulah9SrxeYnxeddIG30+GOqK/9OlLVyLg3HPnr6SqOWTWOXKRwC2eGYCkZ59NNuSgvSrpgOA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "data-uri-to-buffer": "^4.0.0",
-        "fetch-blob": "^3.1.4",
-        "formdata-polyfill": "^4.0.10"
-      },
-      "engines": {
-        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/node-fetch"
-      }
-    },
     "node_modules/node-releases": {
       "version": "2.0.19",
       "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
@@ -4183,68 +3163,14 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/normalize-range": {
-      "version": "0.1.2",
-      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
-      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/npm-run-path": {
-      "version": "5.3.0",
-      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-5.3.0.tgz",
-      "integrity": "sha512-ppwTtiJZq0O/ai0z7yfudtBpWIoxM8yE6nHi1X47eFR2EWORqfbu6CnPlNsjeN683eT0qG6H/Pyf9fCcvjnnnQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "path-key": "^4.0.0"
-      },
-      "engines": {
-        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/npm-run-path/node_modules/path-key": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/path-key/-/path-key-4.0.0.tgz",
-      "integrity": "sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/object-assign": {
-      "version": "4.1.1",
-      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
-      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/onetime": {
-      "version": "6.0.0",
-      "resolved": "https://registry.npmjs.org/onetime/-/onetime-6.0.0.tgz",
-      "integrity": "sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==",
+    "node_modules/once": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
+      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
       "dev": true,
-      "license": "MIT",
+      "license": "ISC",
       "dependencies": {
-        "mimic-fn": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+        "wrappy": "1"
       }
     },
     "node_modules/optionator": {
@@ -4265,43 +3191,6 @@
         "node": ">= 0.8.0"
       }
     },
-    "node_modules/ora": {
-      "version": "6.3.1",
-      "resolved": "https://registry.npmjs.org/ora/-/ora-6.3.1.tgz",
-      "integrity": "sha512-ERAyNnZOfqM+Ao3RAvIXkYh5joP220yf59gVe2X/cI6SiCxIdi4c9HZKZD8R6q/RDXEje1THBju6iExiSsgJaQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "chalk": "^5.0.0",
-        "cli-cursor": "^4.0.0",
-        "cli-spinners": "^2.6.1",
-        "is-interactive": "^2.0.0",
-        "is-unicode-supported": "^1.1.0",
-        "log-symbols": "^5.1.0",
-        "stdin-discarder": "^0.1.0",
-        "strip-ansi": "^7.0.1",
-        "wcwidth": "^1.0.1"
-      },
-      "engines": {
-        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/ora/node_modules/chalk": {
-      "version": "5.4.1",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.4.1.tgz",
-      "integrity": "sha512-zgVZuo2WcZgfUEmsn6eO3kINexW8RAE4maiQ8QNs8CtpPCSyMiYsULR3HQYkm3w8FIA3SberyMJMSldGsW+U3w==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": "^12.17.0 || ^14.13 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/p-limit": {
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
@@ -4338,6 +3227,7 @@
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
       "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "callsites": "^3.0.0"
@@ -4346,24 +3236,6 @@
         "node": ">=6"
       }
     },
-    "node_modules/parse-json": {
-      "version": "5.2.0",
-      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
-      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
-      "license": "MIT",
-      "dependencies": {
-        "@babel/code-frame": "^7.0.0",
-        "error-ex": "^1.3.1",
-        "json-parse-even-better-errors": "^2.3.0",
-        "lines-and-columns": "^1.1.6"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
     "node_modules/path-exists": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
@@ -4374,6 +3246,16 @@
         "node": ">=8"
       }
     },
+    "node_modules/path-is-absolute": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
+      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/path-key": {
       "version": "3.1.1",
       "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
@@ -4384,16 +3266,11 @@
         "node": ">=8"
       }
     },
-    "node_modules/path-parse": {
-      "version": "1.0.7",
-      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
-      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
-      "license": "MIT"
-    },
     "node_modules/path-type": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
       "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
@@ -4410,8 +3287,22 @@
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
       "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
+      "dev": true,
       "license": "ISC"
     },
+    "node_modules/picomatch": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
     "node_modules/postcss": {
       "version": "8.5.3",
       "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.3.tgz",
@@ -4441,13 +3332,6 @@
         "node": "^10 || ^12 || >=14"
       }
     },
-    "node_modules/postcss-value-parser": {
-      "version": "4.2.0",
-      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
-      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
-      "dev": true,
-      "license": "MIT"
-    },
     "node_modules/prelude-ls": {
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
@@ -4458,31 +3342,6 @@
         "node": ">= 0.8.0"
       }
     },
-    "node_modules/prompts": {
-      "version": "2.4.2",
-      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
-      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "kleur": "^3.0.3",
-        "sisteransi": "^1.0.5"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
-    "node_modules/prop-types": {
-      "version": "15.8.1",
-      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
-      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
-      "license": "MIT",
-      "dependencies": {
-        "loose-envify": "^1.4.0",
-        "object-assign": "^4.1.1",
-        "react-is": "^16.13.1"
-      }
-    },
     "node_modules/proxy-from-env": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
@@ -4499,263 +3358,130 @@
         "node": ">=6"
       }
     },
-    "node_modules/raf": {
-      "version": "3.4.1",
-      "resolved": "https://registry.npmjs.org/raf/-/raf-3.4.1.tgz",
-      "integrity": "sha512-Sq4CW4QhwOHE8ucn6J34MqtZCeWFP2aQSmrlroYgqAV1PjStIhJXxYuTgUIfkEk7zTLjmIjLmU5q+fbD1NnOJA==",
-      "license": "MIT",
-      "optional": true,
-      "dependencies": {
-        "performance-now": "^2.1.0"
-      }
-    },
-    "node_modules/react": {
-      "version": "19.0.0",
-      "resolved": "https://registry.npmjs.org/react/-/react-19.0.0.tgz",
-      "integrity": "sha512-V8AVnmPIICiWpGfm6GLzCR/W5FXLchHop40W4nXBmdlEceh16rCN8O8LNWm5bh5XUX91fh7KpA+W0TgMKmgTpQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/react-chartjs-2": {
-      "version": "5.3.0",
-      "resolved": "https://registry.npmjs.org/react-chartjs-2/-/react-chartjs-2-5.3.0.tgz",
-      "integrity": "sha512-UfZZFnDsERI3c3CZGxzvNJd02SHjaSJ8kgW1djn65H1KK8rehwTjyrRKOG3VTMG8wtHZ5rgAO5oTHtHi9GCCmw==",
-      "license": "MIT",
-      "peerDependencies": {
-        "chart.js": "^4.1.1",
-        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
-      }
-    },
-    "node_modules/react-dom": {
-      "version": "19.0.0",
-      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.0.0.tgz",
-      "integrity": "sha512-4GV5sHFG0e/0AD4X+ySy6UJd3jVl1iNsNHdpad0qhABJ11twS3TTBnseqsKurKcsNqCEFeGL3uLpVChpIO3QfQ==",
-      "license": "MIT",
-      "dependencies": {
-        "scheduler": "^0.25.0"
-      },
-      "peerDependencies": {
-        "react": "^19.0.0"
-      }
-    },
-    "node_modules/react-is": {
-      "version": "16.13.1",
-      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
-      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
-      "license": "MIT"
-    },
-    "node_modules/react-refresh": {
-      "version": "0.14.2",
-      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.14.2.tgz",
-      "integrity": "sha512-jCvmsr+1IUSMUyzOkRcvnVbX3ZYC6g9TDrDbFuFmRDq7PD4yaGbLKNQL6k2jnArV8hjYxh7hVhAZB6s9HDGpZA==",
+    "node_modules/queue-microtask": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
+      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
       "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/react-router": {
-      "version": "7.4.0",
-      "resolved": "https://registry.npmjs.org/react-router/-/react-router-7.4.0.tgz",
-      "integrity": "sha512-Y2g5ObjkvX3VFeVt+0CIPuYd9PpgqCslG7ASSIdN73LwA1nNWzcMLaoMRJfP3prZFI92svxFwbn7XkLJ+UPQ6A==",
-      "license": "MIT",
-      "dependencies": {
-        "@types/cookie": "^0.6.0",
-        "cookie": "^1.0.1",
-        "set-cookie-parser": "^2.6.0",
-        "turbo-stream": "2.4.0"
-      },
-      "engines": {
-        "node": ">=20.0.0"
-      },
-      "peerDependencies": {
-        "react": ">=18",
-        "react-dom": ">=18"
-      },
-      "peerDependenciesMeta": {
-        "react-dom": {
-          "optional": true
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
         }
-      }
+      ],
+      "license": "MIT"
     },
-    "node_modules/react-router-dom": {
-      "version": "7.4.0",
-      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-7.4.0.tgz",
-      "integrity": "sha512-VlksBPf3n2bijPvnA7nkTsXxMAKOj+bWp4R9c3i+bnwlSOFAGOkJkKhzy/OsRkWaBMICqcAl1JDzh9ZSOze9CA==",
+    "node_modules/raf": {
+      "version": "3.4.1",
+      "resolved": "https://registry.npmjs.org/raf/-/raf-3.4.1.tgz",
+      "integrity": "sha512-Sq4CW4QhwOHE8ucn6J34MqtZCeWFP2aQSmrlroYgqAV1PjStIhJXxYuTgUIfkEk7zTLjmIjLmU5q+fbD1NnOJA==",
       "license": "MIT",
+      "optional": true,
       "dependencies": {
-        "react-router": "7.4.0"
-      },
-      "engines": {
-        "node": ">=20.0.0"
-      },
-      "peerDependencies": {
-        "react": ">=18",
-        "react-dom": ">=18"
+        "performance-now": "^2.1.0"
       }
     },
-    "node_modules/react-smooth": {
-      "version": "4.0.4",
-      "resolved": "https://registry.npmjs.org/react-smooth/-/react-smooth-4.0.4.tgz",
-      "integrity": "sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==",
+    "node_modules/react": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
+      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
       "license": "MIT",
       "dependencies": {
-        "fast-equals": "^5.0.1",
-        "prop-types": "^15.8.1",
-        "react-transition-group": "^4.4.5"
+        "loose-envify": "^1.1.0"
       },
-      "peerDependencies": {
-        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react-dom": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
+      "engines": {
+        "node": ">=0.10.0"
       }
     },
-    "node_modules/react-transition-group": {
-      "version": "4.4.5",
-      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
-      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
-      "license": "BSD-3-Clause",
+    "node_modules/react-dom": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
+      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
+      "license": "MIT",
       "dependencies": {
-        "@babel/runtime": "^7.5.5",
-        "dom-helpers": "^5.0.1",
-        "loose-envify": "^1.4.0",
-        "prop-types": "^15.6.2"
+        "loose-envify": "^1.1.0",
+        "scheduler": "^0.23.2"
       },
       "peerDependencies": {
-        "react": ">=16.6.0",
-        "react-dom": ">=16.6.0"
+        "react": "^18.3.1"
       }
     },
-    "node_modules/readable-stream": {
-      "version": "3.6.2",
-      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
-      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
+    "node_modules/react-refresh": {
+      "version": "0.14.2",
+      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.14.2.tgz",
+      "integrity": "sha512-jCvmsr+1IUSMUyzOkRcvnVbX3ZYC6g9TDrDbFuFmRDq7PD4yaGbLKNQL6k2jnArV8hjYxh7hVhAZB6s9HDGpZA==",
       "dev": true,
       "license": "MIT",
-      "dependencies": {
-        "inherits": "^2.0.3",
-        "string_decoder": "^1.1.1",
-        "util-deprecate": "^1.0.1"
-      },
       "engines": {
-        "node": ">= 6"
+        "node": ">=0.10.0"
       }
     },
-    "node_modules/recharts": {
-      "version": "2.15.3",
-      "resolved": "https://registry.npmjs.org/recharts/-/recharts-2.15.3.tgz",
-      "integrity": "sha512-EdOPzTwcFSuqtvkDoaM5ws/Km1+WTAO2eizL7rqiG0V2UVhTnz0m7J2i0CjVPUCdEkZImaWvXLbZDS2H5t6GFQ==",
+    "node_modules/react-router": {
+      "version": "6.30.0",
+      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.0.tgz",
+      "integrity": "sha512-D3X8FyH9nBcTSHGdEKurK7r8OYE1kKFn3d/CF+CoxbSHkxU7o37+Uh7eAHRXr6k2tSExXYO++07PeXJtA/dEhQ==",
       "license": "MIT",
       "dependencies": {
-        "clsx": "^2.0.0",
-        "eventemitter3": "^4.0.1",
-        "lodash": "^4.17.21",
-        "react-is": "^18.3.1",
-        "react-smooth": "^4.0.4",
-        "recharts-scale": "^0.4.4",
-        "tiny-invariant": "^1.3.1",
-        "victory-vendor": "^36.6.8"
+        "@remix-run/router": "1.23.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": ">=14.0.0"
       },
       "peerDependencies": {
-        "react": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
-        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
+        "react": ">=16.8"
       }
     },
-    "node_modules/recharts-scale": {
-      "version": "0.4.5",
-      "resolved": "https://registry.npmjs.org/recharts-scale/-/recharts-scale-0.4.5.tgz",
-      "integrity": "sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==",
-      "license": "MIT",
-      "dependencies": {
-        "decimal.js-light": "^2.4.1"
-      }
-    },
-    "node_modules/recharts/node_modules/react-is": {
-      "version": "18.3.1",
-      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
-      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
-      "license": "MIT"
-    },
-    "node_modules/regenerator-runtime": {
-      "version": "0.14.1",
-      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
-      "integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==",
-      "license": "MIT"
-    },
-    "node_modules/resolve": {
-      "version": "1.22.10",
-      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
-      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
+    "node_modules/react-router-dom": {
+      "version": "6.30.0",
+      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.0.tgz",
+      "integrity": "sha512-x30B78HV5tFk8ex0ITwzC9TTZMua4jGyA9IUlH1JLQYQTFyxr/ZxwOJq7evg1JX1qGVUcvhsmQSKdPncQrjTgA==",
       "license": "MIT",
       "dependencies": {
-        "is-core-module": "^2.16.0",
-        "path-parse": "^1.0.7",
-        "supports-preserve-symlinks-flag": "^1.0.0"
-      },
-      "bin": {
-        "resolve": "bin/resolve"
+        "@remix-run/router": "1.23.0",
+        "react-router": "6.30.0"
       },
       "engines": {
-        "node": ">= 0.4"
+        "node": ">=14.0.0"
       },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
+      "peerDependencies": {
+        "react": ">=16.8",
+        "react-dom": ">=16.8"
       }
     },
+    "node_modules/regenerator-runtime": {
+      "version": "0.13.11",
+      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.11.tgz",
+      "integrity": "sha512-kY1AZVr2Ra+t+piVaJ4gxaFaReZVH40AKNo7UCX6W+dEwBo/2oZJzqfuN1qLq1oL45o56cPaTXELwrTh8Fpggg==",
+      "license": "MIT",
+      "optional": true
+    },
     "node_modules/resolve-from": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
       "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/restore-cursor": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-4.0.0.tgz",
-      "integrity": "sha512-I9fPXU9geO9bHOt9pHHOhOkYerIMsmVaWB0rA2AI9ERh/+x/i7MV5HKBNrg+ljO5eoPVgCcnFuRjJ9uH6I/3eg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "onetime": "^5.1.0",
-        "signal-exit": "^3.0.2"
-      },
-      "engines": {
-        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/restore-cursor/node_modules/mimic-fn": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
-      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">=6"
+        "node": ">=4"
       }
     },
-    "node_modules/restore-cursor/node_modules/onetime": {
-      "version": "5.1.2",
-      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
-      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
+    "node_modules/reusify": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
+      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
       "dev": true,
       "license": "MIT",
-      "dependencies": {
-        "mimic-fn": "^2.1.0"
-      },
       "engines": {
-        "node": ">=6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+        "iojs": ">=1.0.0",
+        "node": ">=0.10.0"
       }
     },
     "node_modules/rgbcolor": {
@@ -4768,10 +3494,27 @@
         "node": ">= 0.8.15"
       }
     },
+    "node_modules/rimraf": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
+      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
+      "deprecated": "Rimraf versions prior to v4 are no longer supported",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "glob": "^7.1.3"
+      },
+      "bin": {
+        "rimraf": "bin.js"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
     "node_modules/rollup": {
-      "version": "4.35.0",
-      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.35.0.tgz",
-      "integrity": "sha512-kg6oI4g+vc41vePJyO6dHt/yl0Rz3Thv0kJeVQ3D1kS3E5XSuKbPc29G4IpT/Kv1KQwgHVcN+HtyS+HYLNSvQg==",
+      "version": "4.36.0",
+      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.36.0.tgz",
+      "integrity": "sha512-zwATAXNQxUcd40zgtQG0ZafcRK4g004WtEl7kbuhTWPvf07PsfohXl39jVUvPF7jvNAIkKPQ2XrsDlWuxBd++Q==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -4785,32 +3528,32 @@
         "npm": ">=8.0.0"
       },
       "optionalDependencies": {
-        "@rollup/rollup-android-arm-eabi": "4.35.0",
-        "@rollup/rollup-android-arm64": "4.35.0",
-        "@rollup/rollup-darwin-arm64": "4.35.0",
-        "@rollup/rollup-darwin-x64": "4.35.0",
-        "@rollup/rollup-freebsd-arm64": "4.35.0",
-        "@rollup/rollup-freebsd-x64": "4.35.0",
-        "@rollup/rollup-linux-arm-gnueabihf": "4.35.0",
-        "@rollup/rollup-linux-arm-musleabihf": "4.35.0",
-        "@rollup/rollup-linux-arm64-gnu": "4.35.0",
-        "@rollup/rollup-linux-arm64-musl": "4.35.0",
-        "@rollup/rollup-linux-loongarch64-gnu": "4.35.0",
-        "@rollup/rollup-linux-powerpc64le-gnu": "4.35.0",
-        "@rollup/rollup-linux-riscv64-gnu": "4.35.0",
-        "@rollup/rollup-linux-s390x-gnu": "4.35.0",
-        "@rollup/rollup-linux-x64-gnu": "4.35.0",
-        "@rollup/rollup-linux-x64-musl": "4.35.0",
-        "@rollup/rollup-win32-arm64-msvc": "4.35.0",
-        "@rollup/rollup-win32-ia32-msvc": "4.35.0",
-        "@rollup/rollup-win32-x64-msvc": "4.35.0",
+        "@rollup/rollup-android-arm-eabi": "4.36.0",
+        "@rollup/rollup-android-arm64": "4.36.0",
+        "@rollup/rollup-darwin-arm64": "4.36.0",
+        "@rollup/rollup-darwin-x64": "4.36.0",
+        "@rollup/rollup-freebsd-arm64": "4.36.0",
+        "@rollup/rollup-freebsd-x64": "4.36.0",
+        "@rollup/rollup-linux-arm-gnueabihf": "4.36.0",
+        "@rollup/rollup-linux-arm-musleabihf": "4.36.0",
+        "@rollup/rollup-linux-arm64-gnu": "4.36.0",
+        "@rollup/rollup-linux-arm64-musl": "4.36.0",
+        "@rollup/rollup-linux-loongarch64-gnu": "4.36.0",
+        "@rollup/rollup-linux-powerpc64le-gnu": "4.36.0",
+        "@rollup/rollup-linux-riscv64-gnu": "4.36.0",
+        "@rollup/rollup-linux-s390x-gnu": "4.36.0",
+        "@rollup/rollup-linux-x64-gnu": "4.36.0",
+        "@rollup/rollup-linux-x64-musl": "4.36.0",
+        "@rollup/rollup-win32-arm64-msvc": "4.36.0",
+        "@rollup/rollup-win32-ia32-msvc": "4.36.0",
+        "@rollup/rollup-win32-x64-msvc": "4.36.0",
         "fsevents": "~2.3.2"
       }
     },
-    "node_modules/safe-buffer": {
-      "version": "5.2.1",
-      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
-      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
+    "node_modules/run-parallel": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
+      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
       "dev": true,
       "funding": [
         {
@@ -4826,13 +3569,19 @@
           "url": "https://feross.org/support"
         }
       ],
-      "license": "MIT"
+      "license": "MIT",
+      "dependencies": {
+        "queue-microtask": "^1.2.2"
+      }
     },
     "node_modules/scheduler": {
-      "version": "0.25.0",
-      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.25.0.tgz",
-      "integrity": "sha512-xFVuu11jh+xcO7JOAGJNOXld8/TcEHK/4CituBUeUb5hqxJLj9YuemAEuvm9gQ/+pgXYfbQuqAkiYu+u7YEsNA==",
-      "license": "MIT"
+      "version": "0.23.2",
+      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
+      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
+      "license": "MIT",
+      "dependencies": {
+        "loose-envify": "^1.1.0"
+      }
     },
     "node_modules/semver": {
       "version": "6.3.1",
@@ -4844,12 +3593,6 @@
         "semver": "bin/semver.js"
       }
     },
-    "node_modules/set-cookie-parser": {
-      "version": "2.7.1",
-      "resolved": "https://registry.npmjs.org/set-cookie-parser/-/set-cookie-parser-2.7.1.tgz",
-      "integrity": "sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==",
-      "license": "MIT"
-    },
     "node_modules/shebang-command": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
@@ -4873,27 +3616,14 @@
         "node": ">=8"
       }
     },
-    "node_modules/signal-exit": {
-      "version": "3.0.7",
-      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
-      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
-      "dev": true,
-      "license": "ISC"
-    },
-    "node_modules/sisteransi": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
-      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
+    "node_modules/slash": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
+      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
       "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/source-map": {
-      "version": "0.5.7",
-      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz",
-      "integrity": "sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==",
-      "license": "BSD-3-Clause",
+      "license": "MIT",
       "engines": {
-        "node": ">=0.10.0"
+        "node": ">=8"
       }
     },
     "node_modules/source-map-js": {
@@ -4916,59 +3646,17 @@
         "node": ">=0.1.14"
       }
     },
-    "node_modules/stdin-discarder": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/stdin-discarder/-/stdin-discarder-0.1.0.tgz",
-      "integrity": "sha512-xhV7w8S+bUwlPTb4bAOUQhv8/cSS5offJuX8GQGq32ONF0ZtDWKfkdomM3HMRA+LhX6um/FZ0COqlwsjD53LeQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "bl": "^5.0.0"
-      },
-      "engines": {
-        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/string_decoder": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
-      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "safe-buffer": "~5.2.0"
-      }
-    },
     "node_modules/strip-ansi": {
-      "version": "7.1.0",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
-      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "ansi-regex": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=12"
+        "ansi-regex": "^5.0.1"
       },
-      "funding": {
-        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
-      }
-    },
-    "node_modules/strip-final-newline": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-3.0.0.tgz",
-      "integrity": "sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==",
-      "dev": true,
-      "license": "MIT",
       "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+        "node": ">=8"
       }
     },
     "node_modules/strip-json-comments": {
@@ -4984,12 +3672,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/stylis": {
-      "version": "4.2.0",
-      "resolved": "https://registry.npmjs.org/stylis/-/stylis-4.2.0.tgz",
-      "integrity": "sha512-Orov6g6BB1sDfYgzWfTHDOxamtX1bE/zo104Dh9e6fqJ3PooipYyfJ0pUmrZO2wAvO8YbEyeFrkV91XTsGMSrw==",
-      "license": "MIT"
-    },
     "node_modules/supports-color": {
       "version": "7.2.0",
       "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
@@ -5003,18 +3685,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/supports-preserve-symlinks-flag": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
-      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
     "node_modules/svg-pathdata": {
       "version": "6.0.3",
       "resolved": "https://registry.npmjs.org/svg-pathdata/-/svg-pathdata-6.0.3.tgz",
@@ -5025,13 +3695,6 @@
         "node": ">=12.0.0"
       }
     },
-    "node_modules/tailwindcss": {
-      "version": "4.1.5",
-      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-4.1.5.tgz",
-      "integrity": "sha512-nYtSPfWGDiWgCkwQG/m+aX83XCwf62sBgg3bIlNiiOcggnS1x3uVRDAuyelBFL+vJdOPPCGElxv9DjHJjRHiVA==",
-      "dev": true,
-      "license": "MIT"
-    },
     "node_modules/text-segmentation": {
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/text-segmentation/-/text-segmentation-1.0.3.tgz",
@@ -5042,17 +3705,83 @@
         "utrie": "^1.0.2"
       }
     },
-    "node_modules/tiny-invariant": {
-      "version": "1.3.3",
-      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
-      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
+    "node_modules/text-table": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
+      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
+      "dev": true,
       "license": "MIT"
     },
-    "node_modules/turbo-stream": {
-      "version": "2.4.0",
-      "resolved": "https://registry.npmjs.org/turbo-stream/-/turbo-stream-2.4.0.tgz",
-      "integrity": "sha512-FHncC10WpBd2eOmGwpmQsWLDoK4cqsA/UT/GqNoaKOQnT8uzhtCbg3EoUDMvqpOSAI0S26mr0rkjzbOO6S3v1g==",
-      "license": "ISC"
+    "node_modules/tinyglobby": {
+      "version": "0.2.13",
+      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.13.tgz",
+      "integrity": "sha512-mEwzpUgrLySlveBwEVDMKk5B57bhLPYovRfPAXD5gA/98Opn0rCDj3GtLwFvCvH5RK9uPCExUROW5NjDwvqkxw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fdir": "^6.4.4",
+        "picomatch": "^4.0.2"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/SuperchupuDev"
+      }
+    },
+    "node_modules/tinyglobby/node_modules/fdir": {
+      "version": "6.4.4",
+      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.4.tgz",
+      "integrity": "sha512-1NZP+GK4GfuAv3PqKvxQRDMjdSRZjnkq7KfhlNrCNNlZ0ygQFpebfrnfnq/W7fpUnAv9aGWmY1zKx7FYL3gwhg==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "picomatch": "^3 || ^4"
+      },
+      "peerDependenciesMeta": {
+        "picomatch": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/tinyglobby/node_modules/picomatch": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
+      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/to-regex-range": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
+      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-number": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=8.0"
+      }
+    },
+    "node_modules/ts-api-utils": {
+      "version": "1.4.3",
+      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-1.4.3.tgz",
+      "integrity": "sha512-i3eMG77UTMD0hZhgRS562pv83RC6ukSAC2GMNWc+9dieh/+jDM5u5YG+NHX6VNDRHQcHwmsTHctP9LhbC3WxVw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=16"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.2.0"
+      }
     },
     "node_modules/type-check": {
       "version": "0.4.0",
@@ -5067,14 +3796,31 @@
         "node": ">= 0.8.0"
       }
     },
-    "node_modules/universalify": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
-      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
+    "node_modules/type-fest": {
+      "version": "0.20.2",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
+      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
       "dev": true,
-      "license": "MIT",
+      "license": "(MIT OR CC0-1.0)",
       "engines": {
-        "node": ">= 10.0.0"
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/typescript": {
+      "version": "5.8.2",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.2.tgz",
+      "integrity": "sha512-aJn6wq13/afZp/jT9QZmwEjDqqvSGp1VT5GVg+f/t6/oVyrgXM6BY1h9BRh/O5p3PlUPAe+WuiEZOmb/49RqoQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "bin": {
+        "tsc": "bin/tsc",
+        "tsserver": "bin/tsserver"
+      },
+      "engines": {
+        "node": ">=14.17"
       }
     },
     "node_modules/update-browserslist-db": {
@@ -5118,13 +3864,6 @@
         "punycode": "^2.1.0"
       }
     },
-    "node_modules/util-deprecate": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
-      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
-      "dev": true,
-      "license": "MIT"
-    },
     "node_modules/utrie": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/utrie/-/utrie-1.0.2.tgz",
@@ -5135,38 +3874,19 @@
         "base64-arraybuffer": "^1.0.2"
       }
     },
-    "node_modules/victory-vendor": {
-      "version": "36.9.2",
-      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-36.9.2.tgz",
-      "integrity": "sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==",
-      "license": "MIT AND ISC",
-      "dependencies": {
-        "@types/d3-array": "^3.0.3",
-        "@types/d3-ease": "^3.0.0",
-        "@types/d3-interpolate": "^3.0.1",
-        "@types/d3-scale": "^4.0.2",
-        "@types/d3-shape": "^3.1.0",
-        "@types/d3-time": "^3.0.0",
-        "@types/d3-timer": "^3.0.0",
-        "d3-array": "^3.1.6",
-        "d3-ease": "^3.0.1",
-        "d3-interpolate": "^3.0.1",
-        "d3-scale": "^4.0.2",
-        "d3-shape": "^3.1.0",
-        "d3-time": "^3.0.0",
-        "d3-timer": "^3.0.1"
-      }
-    },
     "node_modules/vite": {
-      "version": "6.2.2",
-      "resolved": "https://registry.npmjs.org/vite/-/vite-6.2.2.tgz",
-      "integrity": "sha512-yW7PeMM+LkDzc7CgJuRLMW2Jz0FxMOsVJ8Lv3gpgW9WLcb9cTW+121UEr1hvmfR7w3SegR5ItvYyzVz1vxNJgQ==",
+      "version": "6.3.4",
+      "resolved": "https://registry.npmjs.org/vite/-/vite-6.3.4.tgz",
+      "integrity": "sha512-BiReIiMS2fyFqbqNT/Qqt4CVITDU9M9vE+DKcVAsB+ZV0wvTKd+3hMbkpxz1b+NmEDMegpVbisKiAZOnvO92Sw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
         "esbuild": "^0.25.0",
+        "fdir": "^6.4.4",
+        "picomatch": "^4.0.2",
         "postcss": "^8.5.3",
-        "rollup": "^4.30.1"
+        "rollup": "^4.34.9",
+        "tinyglobby": "^0.2.13"
       },
       "bin": {
         "vite": "bin/vite.js"
@@ -5229,24 +3949,32 @@
         }
       }
     },
-    "node_modules/wcwidth": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/wcwidth/-/wcwidth-1.0.1.tgz",
-      "integrity": "sha512-XHPEwS0q6TaxcvG85+8EYkbiCux2XtWG2mkc47Ng2A77BQu9+DqIOJldST4HgPkuea7dvKSj5VgX3P1d4rW8Tg==",
+    "node_modules/vite/node_modules/fdir": {
+      "version": "6.4.4",
+      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.4.tgz",
+      "integrity": "sha512-1NZP+GK4GfuAv3PqKvxQRDMjdSRZjnkq7KfhlNrCNNlZ0ygQFpebfrnfnq/W7fpUnAv9aGWmY1zKx7FYL3gwhg==",
       "dev": true,
       "license": "MIT",
-      "dependencies": {
-        "defaults": "^1.0.3"
+      "peerDependencies": {
+        "picomatch": "^3 || ^4"
+      },
+      "peerDependenciesMeta": {
+        "picomatch": {
+          "optional": true
+        }
       }
     },
-    "node_modules/web-streams-polyfill": {
-      "version": "3.3.3",
-      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.3.3.tgz",
-      "integrity": "sha512-d2JWLCivmZYTSIoge9MsgFCZrt571BikcWGYkjC1khllbTeDlGqZ2D8vD8E/lJa8WGWbb7Plm8/XJYV7IJHZZw==",
+    "node_modules/vite/node_modules/picomatch": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
+      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
       "dev": true,
       "license": "MIT",
       "engines": {
-        "node": ">= 8"
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
       }
     },
     "node_modules/which": {
@@ -5275,6 +4003,13 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/wrappy": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
+      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
+      "dev": true,
+      "license": "ISC"
+    },
     "node_modules/yallist": {
       "version": "3.1.1",
       "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
@@ -5282,21 +4017,6 @@
       "dev": true,
       "license": "ISC"
     },
-    "node_modules/yaml": {
-      "version": "2.7.1",
-      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.7.1.tgz",
-      "integrity": "sha512-10ULxpnOCQXxJvBgxsn9ptjq6uviG/htZKk9veJGhlqn3w/DxQ631zFF+nlQXLwmImeS5amR2dl2U8sg6U9jsQ==",
-      "dev": true,
-      "license": "ISC",
-      "optional": true,
-      "peer": true,
-      "bin": {
-        "yaml": "bin.mjs"
-      },
-      "engines": {
-        "node": ">= 14"
-      }
-    },
     "node_modules/yocto-queue": {
       "version": "0.1.0",
       "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
@@ -5309,16 +4029,6 @@
       "funding": {
         "url": "https://github.com/sponsors/sindresorhus"
       }
-    },
-    "node_modules/zod": {
-      "version": "3.24.3",
-      "resolved": "https://registry.npmjs.org/zod/-/zod-3.24.3.tgz",
-      "integrity": "sha512-HhY1oqzWCQWuUqvBFnsyrtZRhyPeR7SUGv+C4+MsisMuVfSPx8HpwWqH8tRahSlt6M3PiFAcoeFhZAqIXTxoSg==",
-      "dev": true,
-      "license": "MIT",
-      "funding": {
-        "url": "https://github.com/sponsors/colinhacks"
-      }
     }
   }
 }
diff --git a/frontend/package.json b/frontend/package.json
index edf1dbb..433eb59 100644
--- a/frontend/package.json
+++ b/frontend/package.json
@@ -5,47 +5,27 @@
   "type": "module",
   "scripts": {
     "dev": "vite",
-    "build": "vite build",
-    "lint": "eslint .",
+    "build": "tsc && vite build",
+    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
     "preview": "vite preview"
   },
   "dependencies": {
-    "@emotion/react": "^11.14.0",
-    "@emotion/styled": "^11.14.0",
-    "@fortawesome/fontawesome-svg-core": "^6.7.2",
-    "@fortawesome/free-brands-svg-icons": "^6.7.2",
-    "@fortawesome/free-solid-svg-icons": "^6.7.2",
-    "@fortawesome/react-fontawesome": "^0.2.2",
-    "@mui/icons-material": "^7.0.2",
-    "@mui/material": "^7.0.2",
-    "@mui/x-date-pickers": "^8.1.0",
-    "@stripe/react-stripe-js": "^3.6.0",
-    "@stripe/stripe-js": "^2.4.0",
-    "axios": "^1.8.4",
-    "chart.js": "^4.4.9",
-    "date-fns": "^4.1.0",
-    "jspdf": "^3.0.1",
-    "jspdf-autotable": "^5.0.2",
-    "react": "^19.0.0",
-    "react-chartjs-2": "^5.3.0",
-    "react-dom": "^19.0.0",
-    "react-router-dom": "^7.4.0",
-    "react-transition-group": "^4.4.5",
-    "recharts": "^2.15.3"
+    "axios": "^1.9.0",
+    "jspdf": "^2.5.1",
+    "react": "^18.2.0",
+    "react-dom": "^18.2.0",
+    "react-router-dom": "^6.26.2"
   },
   "devDependencies": {
-    "@eslint/js": "^9.21.0",
-    "@shadcn/ui": "^0.0.4",
-    "@types/react": "^19.0.10",
-    "@types/react-dom": "^19.0.4",
-    "@vitejs/plugin-react": "^4.3.4",
-    "autoprefixer": "^10.4.21",
-    "eslint": "^9.21.0",
-    "eslint-plugin-react-hooks": "^5.1.0",
-    "eslint-plugin-react-refresh": "^0.4.19",
-    "globals": "^15.15.0",
-    "postcss": "^8.5.3",
-    "tailwindcss": "^4.1.5",
-    "vite": "^6.2.0"
+    "@types/react": "^18.2.66",
+    "@types/react-dom": "^18.2.22",
+    "@typescript-eslint/eslint-plugin": "^7.2.0",
+    "@typescript-eslint/parser": "^7.2.0",
+    "@vitejs/plugin-react": "^4.2.1",
+    "eslint": "^8.57.0",
+    "eslint-plugin-react-hooks": "^4.6.0",
+    "eslint-plugin-react-refresh": "^0.4.6",
+    "typescript": "^5.2.2",
+    "vite": "^6.3.4"
   }
 }
diff --git a/frontend/src/App.css b/frontend/src/App.css
index 3d8acb8..73a44e3 100644
--- a/frontend/src/App.css
+++ b/frontend/src/App.css
@@ -1,20 +1,8 @@
-/* Global resets */
-* {
-  margin: 0;
-  padding: 0;
-  box-sizing: border-box;
-}
-
 #root {
-  margin: 0;
-  padding: 0;
+  max-width: 1280px;
+  margin: 0 auto;
+  padding: 2rem;
   text-align: center;
-  height: 100vh;
-  width: 100%;
-}
-
-body {
-  font-family: 'Poppins', sans-serif;
 }
 
 .logo {
@@ -49,82 +37,22 @@ body {
   padding: 2em;
 }
 
-/* Global Form Styles */
-.form-group {
-  margin-bottom: 20px; /* Consistent margin */
-}
-
-.form-group label {
-  display: block;
-  margin-bottom: 5px;
-  font-weight: 500;
-  color: #444; /* Default label color */
-}
-
-.form-group input,
-.form-group select,
-.form-group textarea {
-  width: 100%;
-  padding: 10px; /* Consistent padding */
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 14px;
-  background-color: #ffffff; /* Ensure light background */
-  color: #333; /* Ensure dark text */
-  box-sizing: border-box; /* Add for consistency */
-}
-
-.form-group input::placeholder,
-.form-group select::placeholder,
-.form-group textarea::placeholder {
-  color: #999; /* Consistent placeholder color */
-}
-
-.form-group input:focus,
-.form-group select:focus,
-.form-group textarea:focus {
-  outline: none;
-  border-color: #4ea14a; /* Consistent focus color */
-}
-
-.form-group textarea {
-  resize: vertical; /* Allow vertical resize */
-}
-
-.form-group small {
-  display: block;
-  margin-top: 5px;
-  color: #777;
-  font-size: 12px;
-}
-
-/* Read-only style */
-.read-only {
-  background-color: #f9f9f9 !important; /* Use important to override potential conflicts */
-  color: #666 !important;
-  cursor: not-allowed;
-}
-
-/* Form Error/Success Messages (Basic Structure) */
-.form-message {
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid transparent;
+.read-the-docs {
+  color: #888;
 }
 
-.form-error {
-  background-color: #f8d7da;
-  color: #721c24;
-  border-color: #f5c6cb;
+nav {
+  background-color: #2a2a2a;
+  padding: 10px;
+  text-align: center;
 }
 
-.form-success {
-  background-color: #d4edda;
-  color: #155724;
-  border-color: #c3e6cb;
+nav a {
+  color: #ffffff;
+  margin: 0 10px;
+  text-decoration: none;
 }
 
-.read-the-docs {
-  color: #888;
+nav a:hover {
+  color: #4caf50;
 }
diff --git a/frontend/src/App.jsx b/frontend/src/App.jsx
deleted file mode 100644
index dc87d22..0000000
--- a/frontend/src/App.jsx
+++ /dev/null
@@ -1,122 +0,0 @@
-// src/App.jsx
-import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';
-import { AuthProvider, useAuth } from './contexts/AuthContext';
-import { useState, useEffect, useRef } from 'react';
-import { ThemeProvider } from '@mui/material/styles';
-import CssBaseline from '@mui/material/CssBaseline';
-import muiTheme from './muiTheme';
-import LandingPage from './pages/LandingPage';
-import Login from './pages/auth/Login';
-import Register from './pages/auth/Register';
-import DashboardLayout from './components/layouts/DashboardLayout';
-import ProfilePage from './pages/profile/ProfilePage';
-import SubscriptionPlansPage from './pages/subscription/SubscriptionPlansPage';
-import PaymentDemonstrationPage from './components/financial/PaymentDemonstrationPage';
-import ShadcnExperimentPage from './pages/experimental/ShadcnExperimentPage';
-import AceternityExperimentPage from './pages/experimental/AceternityExperimentPage';
-import './App.css';
-
-// Loading Indicator component
-const LoadingSpinner = () => {
-  return <div className="loading-indicator"></div>;
-};
-
-// Protected route component with enhanced loading state
-const ProtectedRoute = ({ children }) => {
-  const { user, loading } = useAuth();
-  const [isLoading, setIsLoading] = useState(true);
-  
-  useEffect(() => {
-    // Simulate a minimum loading time for better UX
-    const timer = setTimeout(() => {
-      setIsLoading(false);
-    }, 600);
-    
-    return () => clearTimeout(timer);
-  }, []);
-
-  // Show enhanced loading state
-  if (loading || isLoading) return <LoadingSpinner />;
-
-  // Redirect to login if not authenticated
-  if (!user) return <Navigate to="/login" />;
-
-  return children;
-};
-
-// Custom hook for animating page transitions
-const usePageTransition = () => {
-  const [displayLocation, setDisplayLocation] = useState(null);
-  const [transitionStage, setTransitionStage] = useState("fadeIn");
-  const location = useLocation();
-
-  useEffect(() => {
-    if (location !== displayLocation) {
-      setTransitionStage("fadeOut");
-    }
-  }, [location, displayLocation]);
-
-  useEffect(() => {
-    if (transitionStage === "fadeOut") {
-      const timeout = setTimeout(() => {
-        setTransitionStage("fadeIn");
-        setDisplayLocation(location);
-      }, 50); // Reduced from 300ms to 50ms for snappier navigation
-      
-      return () => clearTimeout(timeout);
-    }
-  }, [transitionStage, location, displayLocation]);
-
-  return { transitionStage, displayLocation: displayLocation || location };
-};
-
-function AppContent() {
-  const { transitionStage, displayLocation } = usePageTransition();
-  
-  return (
-    <div className={`page-transition ${transitionStage}`}>
-      <Routes location={displayLocation}>
-        {/* Public routes */}
-        <Route path="/" element={<LandingPage />} />
-        <Route path="/login" element={<Login />} />
-        <Route path="/register" element={<Register />} />
-        
-        {/* Experimental UI pages - public for easy access */}
-        <Route path="/shadcn-experiment" element={<ShadcnExperimentPage />} />
-        <Route path="/aceternity-experiment" element={<AceternityExperimentPage />} />
-        
-        {/* Payment demonstration - made public for easy testing */}
-        <Route path="/payment-demo" element={<PaymentDemonstrationPage />} />
-        
-        {/* Subscription route */}
-        <Route path="/subscription-plans" element={
-          <ProtectedRoute>
-            <SubscriptionPlansPage />
-          </ProtectedRoute>
-        } />
-        
-        {/* Protected routes - all dashboard routes should be nested here */}
-        <Route path="/dashboard/*" element={
-          <ProtectedRoute>
-            <DashboardLayout />
-          </ProtectedRoute>
-        } />
-      </Routes>
-    </div>
-  );
-}
-
-function App() {
-  return (
-    <AuthProvider>
-      <ThemeProvider theme={muiTheme}>
-        <CssBaseline />
-        <Router>
-          <AppContent />
-        </Router>
-      </ThemeProvider>
-    </AuthProvider>
-  );
-}
-
-export default App;
diff --git a/frontend/src/App.tsx b/frontend/src/App.tsx
new file mode 100644
index 0000000..199957c
--- /dev/null
+++ b/frontend/src/App.tsx
@@ -0,0 +1,104 @@
+import React from 'react';
+import { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';
+import ToolManagement from './components/ToolManagement';
+import EquipmentManagement from './components/EquipmentManagement';
+import ResourceManagement from './components/ResourceManagement';
+import ResourcesDisplay from './components/ResourcesDisplay';
+import ScheduleManagement from './components/ScheduleManagement';
+import ScheduleDisplay from './components/ScheduleDisplay';
+import CustomerScheduleDisplay from './components/CustomerScheduleDisplay';
+import ErrorBoundary from './components/ErrorBoundary';
+import './styles/custom.css';
+
+const App: React.FC = () => {
+  return (
+    <Router>
+      <div>
+        {/* Navigation bar */}
+        <nav>
+          <Link to="/">Home</Link>
+          <Link to="/schedules">Schedule Management</Link>
+          <Link to="/trucks">Truck Management</Link>
+          <Link to="/equipment">Equipment Management</Link>
+          <Link to="/tools">Tool Management</Link>
+          <Link to="/schedule-display">Schedule Display</Link>
+          <Link to="/resources-display">Resources Display</Link>
+          <Link to="/customer-schedules">Customer Schedules</Link>
+        </nav>
+
+        {/* Routes */}
+        <ErrorBoundary>
+          <Routes>
+            <Route
+              path="/"
+              element={
+                <div>
+                  <h1>Schedules</h1>
+                  <div className="card-container">
+                    <div className="card">
+                      <h3>Home</h3>
+                      <Link to="/">
+                        <button className="card-button">View</button>
+                      </Link>
+                    </div>
+                    <div className="card">
+                      <h3>Schedule Management</h3>
+                      <Link to="/schedules">
+                        <button className="card-button">View</button>
+                      </Link>
+                    </div>
+                    <div className="card">
+                      <h3>Truck Management</h3>
+                      <Link to="/trucks">
+                        <button className="card-button">View</button>
+                      </Link>
+                    </div>
+                    <div className="card">
+                      <h3>Equipment Management</h3>
+                      <Link to="/equipment">
+                        <button className="card-button">View</button>
+                      </Link>
+                    </div>
+                    <div className="card">
+                      <h3>Tool Management</h3>
+                      <Link to="/tools">
+                        <button className="card-button">View</button>
+                      </Link>
+                    </div>
+                    <div className="card">
+                      <h3>Schedule Display</h3>
+                      <Link to="/schedule-display">
+                        <button className="card-button">View</button>
+                      </Link>
+                    </div>
+                    <div className="card">
+                      <h3>Resources Display</h3>
+                      <Link to="/resources-display">
+                        <button className="card-button">View</button>
+                      </Link>
+                    </div>
+                    <div className="card">
+                      <h3>Customer Schedules</h3>
+                      <Link to="/customer-schedules">
+                        <button className="card-button">View</button>
+                      </Link>
+                    </div>
+                  </div>
+                </div>
+              }
+            />
+            <Route path="/schedules" element={<ScheduleManagement />} />
+            <Route path="/trucks" element={<ResourceManagement />} />
+            <Route path="/equipment" element={<EquipmentManagement />} />
+            <Route path="/tools" element={<ToolManagement />} />
+            <Route path="/schedule-display" element={<ScheduleDisplay />} />
+            <Route path="/resources-display" element={<ResourcesDisplay />} />
+            <Route path="/customer-schedules" element={<CustomerScheduleDisplay />} />
+          </Routes>
+        </ErrorBoundary>
+      </div>
+    </Router>
+  );
+};
+
+export default App;
\ No newline at end of file
diff --git a/frontend/src/components/CustomerScheduleDisplay.tsx b/frontend/src/components/CustomerScheduleDisplay.tsx
new file mode 100644
index 0000000..428641f
--- /dev/null
+++ b/frontend/src/components/CustomerScheduleDisplay.tsx
@@ -0,0 +1,139 @@
+import React, { useState, useEffect } from 'react';
+import axios from 'axios';
+import { jsPDF } from 'jspdf';
+import '../styles/custom.css';
+
+const CustomerScheduleDisplay: React.FC = () => {
+  const [schedules, setSchedules] = useState<any[]>([]);
+  const [filteredSchedules, setFilteredSchedules] = useState<any[]>([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState<string | null>(null);
+  const [searchTerm, setSearchTerm] = useState('');
+  const [searchType, setSearchType] = useState('scheduleNo'); // Default search type
+
+  const fetchSchedules = async () => {
+    try {
+      const response = await axios.get('http://localhost:5000/api/customer-schedules');
+      setSchedules(response.data);
+      setFilteredSchedules(response.data);
+      setLoading(false);
+    } catch (err: any) {
+      setError('Failed to fetch schedules: ' + (err.response?.data?.error || err.message));
+      setLoading(false);
+    }
+  };
+
+  useEffect(() => {
+    fetchSchedules();
+    const interval = setInterval(fetchSchedules, 60000);
+    return () => clearInterval(interval);
+  }, []);
+
+  useEffect(() => {
+    if (searchTerm.trim() === '') {
+      setFilteredSchedules(schedules);
+    } else {
+      const filtered = schedules.filter(schedule => {
+        const value = schedule[searchType].toString().toLowerCase();
+        return value.includes(searchTerm.toLowerCase());
+      });
+      setFilteredSchedules(filtered);
+    }
+  }, [searchTerm, searchType, schedules]);
+
+  const downloadPDF = () => {
+    const doc = new jsPDF();
+    doc.setFontSize(16);
+    doc.text("Today's Waste Collection Schedules", 10, 10);
+    doc.setFontSize(12);
+
+    let y = 20;
+    filteredSchedules.forEach((s, index) => {
+      doc.text(`Schedule ${index + 1}`, 10, y);
+      doc.text(`Schedule No: ${s.scheduleNo}`, 10, y + 10);
+      doc.text(`Truck No: ${s.truckNo}`, 10, y + 20);
+      doc.text(`Date: ${s.date}`, 10, y + 30);
+      doc.text(`Time: ${s.time}`, 10, y + 40);
+      doc.text(`Route: ${s.route.join(', ')}`, 10, y + 50);
+      doc.text(`Status: ${s.status}`, 10, y + 60);
+      y += 80;
+    });
+
+    doc.save('todays-schedules.pdf');
+  };
+
+  if (loading) return <div>Loading...</div>;
+  if (error) return <div>{error}</div>;
+
+  return (
+    <div>
+      <h2>Today's Waste Collection Schedules</h2>
+      
+      {/* Search Bar */}
+      <div style={{ marginBottom: '20px', display: 'flex', gap: '10px', alignItems: 'center' }}>
+        <select 
+          value={searchType}
+          onChange={(e) => setSearchType(e.target.value)}
+          style={{ padding: '8px', borderRadius: '4px', backgroundColor: '#2a2a2a', color: 'white', border: '1px solid #ffffff' }}
+        >
+          <option value="scheduleNo">Schedule No</option>
+          <option value="truckNo">Truck No</option>
+          <option value="date">Date</option>
+          <option value="route">Route</option>
+          <option value="status">Status</option>
+        </select>
+        
+        <input
+          type="text"
+          placeholder={`Search by ${searchType}...`}
+          value={searchTerm}
+          onChange={(e) => setSearchTerm(e.target.value)}
+          style={{ 
+            padding: '8px', 
+            borderRadius: '4px', 
+            backgroundColor: '#2a2a2a', 
+            color: 'white', 
+            border: '1px solid #ffffff',
+            flex: 1
+          }}
+        />
+      </div>
+
+      {filteredSchedules.length > 0 ? (
+        <>
+          <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '20px' }}>
+            <thead>
+              <tr style={{ backgroundColor: '#3a3a3a' }}>
+                <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Schedule No</th>
+                <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Truck No</th>
+                <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Date</th>
+                <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Time</th>
+                <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Route</th>
+                <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Status</th>
+              </tr>
+            </thead>
+            <tbody>
+              {filteredSchedules.map((s) => (
+                <tr key={s._id} style={{ backgroundColor: '#2a2a2a' }}>
+                  <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.scheduleNo}</td>
+                  <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.truckNo}</td>
+                  <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.date}</td>
+                  <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.time}</td>
+                  <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.route.join(', ')}</td>
+                  <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.status}</td>
+                </tr>
+              ))}
+            </tbody>
+          </table>
+          <button onClick={downloadPDF} className="card-button" style={{ marginTop: '20px' }}>
+            Download as PDF
+          </button>
+        </>
+      ) : (
+        <div>No schedules found.</div>
+      )}
+    </div>
+  );
+};
+
+export default CustomerScheduleDisplay;
\ No newline at end of file
diff --git a/frontend/src/components/EquipmentManagement.tsx b/frontend/src/components/EquipmentManagement.tsx
new file mode 100644
index 0000000..7f154b0
--- /dev/null
+++ b/frontend/src/components/EquipmentManagement.tsx
@@ -0,0 +1,166 @@
+import React, { useState, useEffect } from 'react';
+import axios from 'axios';
+import '../styles/custom.css';
+
+interface Equipment {
+  _id?: string;
+  equipmentId: string;
+  type: string;
+  description: string;
+  location: {
+    lat: number;
+    lng: number;
+  };
+}
+
+const EquipmentManagement: React.FC = () => {
+  const [equipment, setEquipment] = useState<Equipment>({
+    equipmentId: '',
+    type: '',
+    description: '',
+    location: { lat: 6.9271, lng: 79.8612 },
+  });
+  const [equipments, setEquipments] = useState<Equipment[]>([]);
+  const [errors, setErrors] = useState<{ [key: string]: string }>({});
+  const [editingId, setEditingId] = useState<string | null>(null);
+
+  useEffect(() => {
+    fetchEquipments();
+  }, []);
+
+  const fetchEquipments = async () => {
+    try {
+      const response = await axios.get('http://localhost:5000/api/equipment');
+      setEquipments(response.data);
+    } catch (err) {
+      console.error('Failed to fetch equipments:', err);
+    }
+  };
+
+  const validateForm = () => {
+    const newErrors: { [key: string]: string } = {};
+    if (!equipment.equipmentId) newErrors.equipmentId = 'Equipment ID is required';
+    if (!equipment.type) newErrors.type = 'Type is required';
+    if (!equipment.description) newErrors.description = 'Description is required';
+    if (!equipment.location.lat || !equipment.location.lng) newErrors.location = 'Location is required';
+    setErrors(newErrors);
+    return Object.keys(newErrors).length === 0;
+  };
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    if (!validateForm()) return;
+    try {
+      if (editingId) {
+        await axios.put(`http://localhost:5000/api/equipment/${editingId}`, equipment);
+        alert('Equipment updated successfully!');
+        setEditingId(null);
+      } else {
+        await axios.post('http://localhost:5000/api/equipment', equipment);
+        alert('Equipment added successfully!');
+      }
+      setEquipment({ equipmentId: '', type: '', description: '', location: { lat: 6.9271, lng: 79.8612 } });
+      setErrors({});
+      fetchEquipments();
+    } catch (err) {
+      alert('Error: ' + (err.response?.data?.error || 'Failed to add equipment'));
+    }
+  };
+
+  const handleEdit = (e: Equipment) => {
+    setEquipment(e);
+    setEditingId(e._id!);
+  };
+
+  const handleDelete = async (id: string) => {
+    try {
+      await axios.delete(`http://localhost:5000/api/equipment/${id}`);
+      alert('Equipment deleted successfully!');
+      fetchEquipments();
+    } catch (err) {
+      alert('Error: ' + (err.response?.data?.error || 'Failed to delete equipment'));
+    }
+  };
+
+  return (
+    <div>
+      <h2>Equipment Management</h2>
+      <form onSubmit={handleSubmit}>
+  <div>
+    <label><span className="form-label">Equipment ID</span></label>
+    <input
+      type="text"
+      value={equipment.equipmentId}
+      onChange={(e) => setEquipment({ ...equipment, equipmentId: e.target.value })}
+    />
+    {errors.equipmentId && <span className="error">{errors.equipmentId}</span>}
+  </div>
+  <div>
+  <label><span className="form-label">Type</span></label>
+  <select
+    value={equipment.type}
+    onChange={(e) => setEquipment({ ...equipment, type: e.target.value })}
+  >
+    <option value="">Select Type</option>
+    <option value="Gloves">Gloves</option>
+    <option value="Boots">Boots</option>
+    <option value="Safety Dress">Safety Dress</option>
+  </select>
+  {errors.type && <span className="error">{errors.type}</span>}
+</div>
+  <div>
+    <label><span className="form-label">Description</span></label>
+    <input
+      type="text"
+      value={equipment.description}
+      onChange={(e) => setEquipment({ ...equipment, description: e.target.value })}
+    />
+    {errors.description && <span className="error">{errors.description}</span>}
+  </div>
+  <div>
+    <label><span className="form-label">Location</span></label>
+    <input
+      type="number"
+      value={equipment.location.lat}
+      onChange={(e) => setEquipment({ ...equipment, location: { ...equipment.location, lat: parseFloat(e.target.value) } })}
+    />
+    <input
+      type="number"
+      value={equipment.location.lng}
+      onChange={(e) => setEquipment({ ...equipment, location: { ...equipment.location, lng: parseFloat(e.target.value) } })}
+    />
+    {errors.location && <span className="error">{errors.location}</span>}
+  </div>
+  <button type="submit">{editingId ? 'Update Equipment' : 'Add Equipment'}</button>
+</form>
+      <h3>Added Equipments</h3>
+      <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '20px' }}>
+        <thead>
+          <tr style={{ backgroundColor: '#3a3a3a' }}>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Equipment ID</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Type</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Description</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Location</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Actions</th>
+          </tr>
+        </thead>
+        <tbody>
+          {equipments.map((e) => (
+            <tr key={e._id} style={{ backgroundColor: '#2a2a2a' }}>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{e.equipmentId}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{e.type}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{e.description}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{`Lat: ${e.location.lat}, Lng: ${e.location.lng}`}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>
+                <button onClick={() => handleEdit(e)} style={{ marginRight: '10px' }}>Edit</button>
+                <button onClick={() => handleDelete(e._id!)}>Delete</button>
+              </td>
+            </tr>
+          ))}
+        </tbody>
+      </table>
+    </div>
+  );
+};
+
+export default EquipmentManagement;
\ No newline at end of file
diff --git a/frontend/src/components/ErrorBoundary.tsx b/frontend/src/components/ErrorBoundary.tsx
new file mode 100644
index 0000000..7eeb659
--- /dev/null
+++ b/frontend/src/components/ErrorBoundary.tsx
@@ -0,0 +1,30 @@
+import React, { Component, ReactNode } from 'react';
+
+interface ErrorBoundaryProps {
+  children: ReactNode;
+}
+
+interface ErrorBoundaryState {
+  hasError: boolean;
+}
+
+class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
+  state: ErrorBoundaryState = { hasError: false };
+
+  static getDerivedStateFromError(_: Error): ErrorBoundaryState {
+    return { hasError: true };
+  }
+
+  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
+    console.error('Error caught in ErrorBoundary:', error, errorInfo);
+  }
+
+  render() {
+    if (this.state.hasError) {
+      return <h1>Something went wrong. Please try again later.</h1>;
+    }
+    return this.props.children;
+  }
+}
+
+export default ErrorBoundary;
\ No newline at end of file
diff --git a/frontend/src/components/ResourceManagement.tsx b/frontend/src/components/ResourceManagement.tsx
new file mode 100644
index 0000000..8f9186c
--- /dev/null
+++ b/frontend/src/components/ResourceManagement.tsx
@@ -0,0 +1,217 @@
+import React, { useState, useEffect } from 'react';
+import axios from 'axios';
+import { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';
+import '../styles/custom.css';
+
+const containerStyle = {
+  width: '100%',
+  height: '400px',
+};
+
+const ResourceManagement: React.FC = () => {
+  const [truck, setTruck] = useState({
+    truckId: '',
+    status: 'Active',
+    tankCapacity: 0,
+    availability: 'Available',
+    fuel: 0,
+    description: '',
+    location: { lat: 6.9271, lng: 79.8612 },
+  });
+  const [trucks, setTrucks] = useState<any[]>([]);
+  const [mapCenter, setMapCenter] = useState({ lat: 6.9271, lng: 79.8612 });
+  const [errors, setErrors] = useState<{ [key: string]: string }>({});
+  const [editingId, setEditingId] = useState<string | null>(null);
+
+  useEffect(() => {
+    fetchTrucks();
+  }, []);
+
+  const fetchTrucks = async () => {
+    try {
+      const response = await axios.get('http://localhost:5000/api/trucks');
+      setTrucks(response.data);
+    } catch (err) {
+      console.error('Failed to fetch trucks:', err);
+    }
+  };
+
+  const validateForm = () => {
+    const newErrors: { [key: string]: string } = {};
+    //truck id validation
+    if (!truck.truckId) {
+      newErrors.truckId = 'Truck ID is required';
+    } else if (truck.truckId.length !== 6) {
+      newErrors.truckId = 'Truck ID must be exactly 6 characters';
+    }
+    if (!truck.tankCapacity) newErrors.tankCapacity = 'Tank Capacity is required';
+    if (!truck.description) newErrors.description = 'Description is required';
+    if (!truck.location.lat || !truck.location.lng) newErrors.location = 'Location is required';
+    // Fuel validation 
+    if (truck.fuel > truck.tankCapacity) {
+      newErrors.fuel = 'Fuel cannot be greater than Tank Capacity';
+    }
+    setErrors(newErrors);
+    return Object.keys(newErrors).length === 0;
+  };
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    if (!validateForm()) return;
+    try {
+      console.log('Submitting truck:', truck);
+      if (editingId) {
+        const response = await axios.put(`http://localhost:5000/api/trucks/${editingId}`, truck);
+        console.log('Update response:', response.data);
+        alert('Truck updated successfully!');
+        setEditingId(null);
+      } else {
+        const response = await axios.post('http://localhost:5000/api/trucks', truck);
+        console.log('Add response:', response.data);
+        alert('Truck added successfully!');
+      }
+      setTruck({ truckId: '', status: 'Active', tankCapacity: 0, availability: 'Available', fuel: 0, description: '', location: { lat: 6.9271, lng: 79.8612 } });
+      setMapCenter({ lat: 6.9271, lng: 79.8612 });
+      setErrors({});
+      fetchTrucks();
+    } catch (err) {
+      console.error('Error submitting truck:', err);
+      console.error('Error response:', err.response);
+      alert('Error: ' + (err.response?.data?.error || 'Failed to add truck'));
+    }
+  };
+
+  const handleEdit = (t: any) => {
+    setTruck({
+      truckId: t.truckId,
+      status: t.status,
+      tankCapacity: t.tankCapacity,
+      availability: t.availability,
+      fuel: t.fuel,
+      description: t.description,
+      location: t.location,
+    });
+    setMapCenter(t.location);
+    setEditingId(t._id);
+  };
+
+  const handleDelete = async (id: string) => {
+    try {
+      await axios.delete(`http://localhost:5000/api/trucks/${id}`);
+      alert('Truck deleted successfully!');
+      fetchTrucks();
+    } catch (err) {
+      alert('Error: ' + (err as any).response.data.error);
+    }
+  };
+
+  return (
+    <div>
+      <h2>Truck Management</h2>
+      <form onSubmit={handleSubmit}>
+        <div>
+          <label><span className="form-label">Truck ID</span></label>
+          <input
+            type="text"
+            value={truck.truckId}
+            onChange={(e) => setTruck({ ...truck, truckId: e.target.value })}
+          />
+          {errors.truckId && <span className="error">{errors.truckId}</span>}
+        </div>
+        <div>
+          <label><span className="form-label">Tank Capacity</span></label>
+          <input
+            type="number"
+            value={truck.tankCapacity}
+            onChange={(e) => setTruck({ ...truck, tankCapacity: parseInt(e.target.value) })}
+          />
+          {errors.tankCapacity && <span className="error">{errors.tankCapacity}</span>}
+        </div>
+        <div>
+          <label><span className="form-label">Availability</span></label>
+          <select
+            value={truck.availability}
+            onChange={(e) => setTruck({ ...truck, availability: e.target.value })}
+          >
+            <option value="Available">Available</option>
+            <option value="Unavailable">Unavailable</option>
+          </select>
+        </div>
+        <div>
+          <label><span className="form-label">Fuel</span></label>
+          <input
+            type="number"
+            value={truck.fuel}
+            onChange={(e) => setTruck({ ...truck, fuel: parseInt(e.target.value) })}
+          />
+          {errors.fuel && <span className="error">{errors.fuel}</span>} {/* Fuel error message display කරන්න් */}
+        </div>
+        <div>
+          <label><span className="form-label">Description</span></label>
+          <input
+            type="text"
+            value={truck.description}
+            onChange={(e) => setTruck({ ...truck, description: e.target.value })}
+          />
+          {errors.description && <span className="error">{errors.description}</span>}
+        </div>
+        <div>
+          <label><span className="form-label">Location</span></label>
+          <input
+            type="number"
+            value={truck.location.lat}
+            onChange={(e) => setTruck({ ...truck, location: { ...truck.location, lat: parseFloat(e.target.value) } })}
+          />
+          <input
+            type="number"
+            value={truck.location.lng}
+            onChange={(e) => setTruck({ ...truck, location: { ...truck.location, lng: parseFloat(e.target.value) } })}
+          />
+          {errors.location && <span className="error">{errors.location}</span>}
+        </div>
+        <button type="submit">{editingId ? 'Update Truck' : 'Add Truck'}</button>
+      </form>
+      <div className="map-container">
+        <LoadScript googleMapsApiKey={import.meta.env.VITE_GOOGLE_MAPS_API_KEY}>
+          <GoogleMap mapContainerStyle={containerStyle} center={mapCenter} zoom={10}>
+            <Marker position={mapCenter} />
+          </GoogleMap>
+        </LoadScript>
+      </div>
+      <h3>Added Trucks</h3>
+      <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '20px' }}>
+        <thead>
+          <tr style={{ backgroundColor: '#3a3a3a' }}>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Truck ID</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Status</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Tank Capacity</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Availability</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Fuel</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Description</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Location</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Actions</th>
+          </tr>
+        </thead>
+        <tbody>
+          {trucks.map((t) => (
+            <tr key={t._id} style={{ backgroundColor: '#2a2a2a' }}>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.truckId}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.status}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.tankCapacity}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.availability}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.fuel}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.description}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{`Lat: ${t.location.lat}, Lng: ${t.location.lng}`}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>
+                <button onClick={() => handleEdit(t)} style={{ marginRight: '10px' }}>Edit</button>
+                <button onClick={() => handleDelete(t._id)}>Delete</button>
+              </td>
+            </tr>
+          ))}
+        </tbody>
+      </table>
+    </div>
+  );
+};
+
+export default ResourceManagement;
\ No newline at end of file
diff --git a/frontend/src/components/ResourcesDisplay.tsx b/frontend/src/components/ResourcesDisplay.tsx
new file mode 100644
index 0000000..61f9678
--- /dev/null
+++ b/frontend/src/components/ResourcesDisplay.tsx
@@ -0,0 +1,286 @@
+import React, { useState, useEffect } from 'react';
+import axios from 'axios';
+import { jsPDF } from 'jspdf';
+import '../styles/custom.css';
+
+const ResourcesDisplay: React.FC = () => {
+  const [trucks, setTrucks] = useState<any[]>([]);
+  const [filteredTrucks, setFilteredTrucks] = useState<any[]>([]); // Filtered trucks state එක add කළා
+  const [equipments, setEquipments] = useState<any[]>([]);
+  const [filteredEquipments, setFilteredEquipments] = useState<any[]>([]); // Filtered equipments state එක add කළා
+  const [tools, setTools] = useState<any[]>([]);
+  const [filteredTools, setFilteredTools] = useState<any[]>([]); // Filtered tools state එක add කළා
+  const [truckSearchTerm, setTruckSearchTerm] = useState(''); // Truck search term state එක add කළා
+  const [equipmentSearchTerm, setEquipmentSearchTerm] = useState(''); // Equipment search term state එක add කළා
+  const [toolSearchTerm, setToolSearchTerm] = useState(''); // Tool search term state එක add කළා
+
+  useEffect(() => {
+    fetchTrucks();
+    fetchEquipments();
+    fetchTools();
+  }, []);
+
+  const fetchTrucks = async () => {
+    try {
+      const response = await axios.get('http://localhost:5000/api/trucks');
+      console.log('Trucks response:', response.data);
+      setTrucks(response.data);
+      setFilteredTrucks(response.data); // Initial load වෙද්දි filteredTrucks එකත් set කරන්න්
+    } catch (err) {
+      console.error('Failed to fetch trucks:', err);
+    }
+  };
+
+  const fetchEquipments = async () => {
+    try {
+      const response = await axios.get('http://localhost:5000/api/equipment');
+      console.log('Equipments response:', response.data);
+      setEquipments(response.data);
+      setFilteredEquipments(response.data); // Initial load වෙද්දි filteredEquipments එකත් set කරන්න්
+    } catch (err) {
+      console.error('Failed to fetch equipment:', err);
+    }
+  };
+
+  const fetchTools = async () => {
+    try {
+      const response = await axios.get('http://localhost:5000/api/tools');
+      console.log('Tool response:', response.data);
+      setTools(response.data);
+      setFilteredTools(response.data); // Initial load වෙද්දි filteredTools එකත් set කරන්න්
+    } catch (err) {
+      console.error('Failed to fetch tools:', err);
+    }
+  };
+
+  // Search functionality for trucks
+  const handleTruckSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const term = e.target.value.toLowerCase();
+    setTruckSearchTerm(term);
+
+    const filtered = trucks.filter(
+      (truck) =>
+        truck.truckId.toLowerCase().includes(term) ||
+        truck.description.toLowerCase().includes(term)
+    );
+    setFilteredTrucks(filtered);
+  };
+
+  // Search functionality for equipments
+  const handleEquipmentSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const term = e.target.value.toLowerCase();
+    setEquipmentSearchTerm(term);
+
+    const filtered = equipments.filter(
+      (equipment) =>
+        equipment.equipmentId.toLowerCase().includes(term) ||
+        equipment.description.toLowerCase().includes(term)
+    );
+    setFilteredEquipments(filtered);
+  };
+
+  // Search functionality for tools
+  const handleToolSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const term = e.target.value.toLowerCase();
+    setToolSearchTerm(term);
+
+    const filtered = tools.filter(
+      (tool) =>
+        tool.toolId.toLowerCase().includes(term) ||
+        tool.description.toLowerCase().includes(term)
+    );
+    setFilteredTools(filtered);
+  };
+
+  const downloadResourcesReport = () => {
+    const doc = new jsPDF();
+    let y = 10;
+
+    // Add title
+    doc.setFontSize(16);
+    doc.text('Resources Report', 10, y);
+    y += 20;
+
+    // Trucks Section
+    doc.setFontSize(14);
+    doc.text('Trucks', 10, y);
+    y += 10;
+    doc.setFontSize(10);
+    filteredTrucks.forEach((truck, index) => {
+      if (y > 250) {
+        doc.addPage();
+        y = 10;
+      }
+      doc.text(`Truck ${index + 1}:`, 10, y);
+      doc.text(`ID: ${truck.truckId}`, 20, y + 5);
+      doc.text(`Status: ${truck.status}`, 20, y + 10);
+      doc.text(`Tank Capacity: ${truck.tankCapacity}`, 20, y + 15);
+      doc.text(`Availability: ${truck.availability}`, 20, y + 20);
+      doc.text(`Fuel: ${truck.fuel}`, 20, y + 25);
+      doc.text(`Condition: ${truck.condition}`, 20, y + 30);
+      doc.text(`Description: ${truck.description}`, 20, y + 35);
+      doc.text(`Location: Lat ${truck.location.lat}, Lng ${truck.location.lng}`, 20, y + 40);
+      y += 50;
+    });
+
+    // Equipment Section
+    y += 10;
+    doc.setFontSize(14);
+    doc.text('Equipment', 10, y);
+    y += 10;
+    doc.setFontSize(10);
+    filteredEquipments.forEach((equipment, index) => {
+      if (y > 250) {
+        doc.addPage();
+        y = 10;
+      }
+      doc.text(`Equipment ${index + 1}:`, 10, y);
+      doc.text(`ID: ${equipment.equipmentId}`, 20, y + 5);
+      doc.text(`Type: ${equipment.type}`, 20, y + 10);
+      doc.text(`Status: ${equipment.status}`, 20, y + 15);
+      doc.text(`Description: ${equipment.description}`, 20, y + 20);
+      doc.text(`Location: Lat ${equipment.location.lat}, Lng ${equipment.location.lng}`, 20, y + 25);
+      y += 35;
+    });
+
+    // Tools Section
+    y += 10;
+    doc.setFontSize(14);
+    doc.text('Tools', 10, y);
+    y += 10;
+    doc.setFontSize(10);
+    filteredTools.forEach((tool, index) => {
+      if (y > 250) {
+        doc.addPage();
+        y = 10;
+      }
+      doc.text(`Tool ${index + 1}:`, 10, y);
+      doc.text(`ID: ${tool.toolId}`, 20, y + 5);
+      doc.text(`Name: ${tool.name}`, 20, y + 10);
+      doc.text(`Status: ${tool.status}`, 20, y + 15);
+      doc.text(`Description: ${tool.description}`, 20, y + 20);
+      y += 30;
+    });
+
+    doc.save('resources-report.pdf');
+  };
+
+  return (
+    <div>
+      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
+        <h2>Resources Display</h2>
+        <button onClick={downloadResourcesReport} className="card-button">
+          Download Resources Report
+        </button>
+      </div>
+
+      {/* Trucks Section */}
+      <h3>Trucks</h3>
+      <div className="search-container">
+        <input
+          type="text"
+          placeholder="Search by Truck ID or Description..."
+          value={truckSearchTerm}
+          onChange={handleTruckSearch}
+          className="search-bar"
+        />
+      </div>
+      <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '20px' }}>
+        <thead>
+          <tr style={{ backgroundColor: '#3a3a3a' }}>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Truck ID</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Status</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Tank Capacity</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Availability</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Fuel</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Condition</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Description</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Location</th>
+          </tr>
+        </thead>
+        <tbody>
+          {filteredTrucks.map((t) => (
+            <tr key={t._id} style={{ backgroundColor: '#2a2a2a' }}>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.truckId}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.status}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.tankCapacity}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.availability}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.fuel}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.condition}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.description}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{`Lat: ${t.location.lat}, Lng: ${t.location.lng}`}</td>
+            </tr>
+          ))}
+        </tbody>
+      </table>
+
+      {/* Equipment Section */}
+      <h3>Equipment</h3>
+      <div className="search-container">
+        <input
+          type="text"
+          placeholder="Search by Equipment ID or Description..."
+          value={equipmentSearchTerm}
+          onChange={handleEquipmentSearch}
+          className="search-bar"
+        />
+      </div>
+      <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '20px' }}>
+        <thead>
+          <tr style={{ backgroundColor: '#3a3a3a' }}>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Equipment ID</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Type</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Status</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Description</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Location</th>
+          </tr>
+        </thead>
+        <tbody>
+          {filteredEquipments.map((eq) => (
+            <tr key={eq._id} style={{ backgroundColor: '#2a2a2a' }}>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{eq.equipmentId}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{eq.type}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{eq.status}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{eq.description}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{`Lat: ${eq.location.lat}, Lng: ${eq.location.lng}`}</td>
+            </tr>
+          ))}
+        </tbody>
+      </table>
+
+      {/* Tools Section */}
+      <h3>Tools</h3>
+      <div className="search-container">
+        <input
+          type="text"
+          placeholder="Search by Tool ID or Description..."
+          value={toolSearchTerm}
+          onChange={handleToolSearch}
+          className="search-bar"
+        />
+      </div>
+      <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '20px' }}>
+        <thead>
+          <tr style={{ backgroundColor: '#3a3a3a' }}>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Tool ID</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Name</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Status</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Description</th>
+          </tr>
+        </thead>
+        <tbody>
+          {filteredTools.map((t) => (
+            <tr key={t._id} style={{ backgroundColor: '#2a2a2a' }}>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.toolId}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.name}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.status}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{t.description}</td>
+            </tr>
+          ))}
+        </tbody>
+      </table>
+    </div>
+  );
+};
+
+export default ResourcesDisplay;
\ No newline at end of file
diff --git a/frontend/src/components/ScheduleDisplay.tsx b/frontend/src/components/ScheduleDisplay.tsx
new file mode 100644
index 0000000..14df634
--- /dev/null
+++ b/frontend/src/components/ScheduleDisplay.tsx
@@ -0,0 +1,79 @@
+import React, { useState, useEffect } from 'react';
+import axios from 'axios';
+import '../styles/custom.css';
+
+const ScheduleDisplay: React.FC = () => {
+  const [schedules, setSchedules] = useState<any[]>([]);
+  const [filteredSchedules, setFilteredSchedules] = useState<any[]>([]); // Filtered schedules state එක add කළා
+  const [searchTerm, setSearchTerm] = useState(''); // Search term state එක add කළා
+
+  useEffect(() => {
+    fetchSchedules();
+  }, []);
+
+  const fetchSchedules = async () => {
+    try {
+      const response = await axios.get('http://localhost:5000/api/schedules');
+      setSchedules(response.data);
+      setFilteredSchedules(response.data); // Initial load වෙද්දි filteredSchedules එකත් set කරන්න්
+    } catch (err) {
+      console.error('Failed to fetch schedules:', err);
+    }
+  };
+
+  // Search functionality implement කළා
+  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
+    const term = e.target.value.toLowerCase();
+    setSearchTerm(term);
+
+    const filtered = schedules.filter(
+      (schedule) =>
+        schedule.scheduleNo.toLowerCase().includes(term) ||
+        schedule.truckNo.toLowerCase().includes(term) ||
+        schedule.route.some((r: string) => r.toLowerCase().includes(term))
+    );
+    setFilteredSchedules(filtered);
+  };
+
+  return (
+    <div>
+      <h2>Schedule Display</h2>
+      {/* Search bar add කළා */}
+      <div className="search-container">
+        <input
+          type="text"
+          placeholder="Search by Schedule No, Truck No, or Route..."
+          value={searchTerm}
+          onChange={handleSearch}
+          className="search-bar"
+        />
+      </div>
+      <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '20px' }}>
+        <thead>
+          <tr style={{ backgroundColor: '#3a3a3a' }}>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Schedule No</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Truck No</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Date</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Time</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Route</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Status</th>
+          </tr>
+        </thead>
+        <tbody>
+          {filteredSchedules.map((s) => (
+            <tr key={s._id} style={{ backgroundColor: '#2a2a2a' }}>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.scheduleNo}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.truckNo}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.date}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.time}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.route.join(', ')}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.status}</td>
+            </tr>
+          ))}
+        </tbody>
+      </table>
+    </div>
+  );
+};
+
+export default ScheduleDisplay;
\ No newline at end of file
diff --git a/frontend/src/components/ScheduleManagement.tsx b/frontend/src/components/ScheduleManagement.tsx
new file mode 100644
index 0000000..4fa4307
--- /dev/null
+++ b/frontend/src/components/ScheduleManagement.tsx
@@ -0,0 +1,221 @@
+import React, { useState, useEffect } from 'react';
+import axios from 'axios';
+import '../styles/custom.css';
+
+
+
+
+const ScheduleManagement: React.FC = () => {
+  const [schedule, setSchedules] = useState({
+    scheduleNo: '',
+    truckNo: '',
+    date: '',
+    time: '',
+    route: [] as string[],
+    status: 'Pending',
+  });
+  const [schedules, setScheduleList] = useState<any[]>([]);
+  const [routeInput, setRouteInput] = useState('');
+  const [errors, setErrors] = useState<{ [key: string]: string }>({});
+  const [editingId, setEditingId] = useState<string | null>(null);
+  const [availableTrucks, setAvailableTrucks] = useState<string[]>([]); // Available trucks store 
+
+  useEffect(() => {
+    fetchSchedules();
+    fetchAvailableTrucks(); // Available trucks fetch 
+  }, []);
+
+  const fetchSchedules = async () => {
+    try {
+      const response = await axios.get('http://localhost:5000/api/schedules');
+      setScheduleList(response.data);
+    } catch (err) {
+      console.error('Failed to fetch schedules:', err);
+    }
+  };
+
+  // Available trucks fetch 
+  const fetchAvailableTrucks = async () => {
+    try {
+      const response = await axios.get('http://localhost:5000/api/trucks');
+      const trucks = response.data;
+      // Filter trucks where availability is "Available"
+      const available = trucks
+        .filter((truck: any) => truck.availability === 'Available')
+        .map((truck: any) => truck.truckId);
+      setAvailableTrucks(available);
+    } catch (err) {
+      console.error('Failed to fetch trucks:', err);
+    }
+  };
+
+  const validateForm = () => {
+    const newErrors: { [key: string]: string } = {};
+    if (!schedule.scheduleNo) newErrors.scheduleNo = 'Schedule No is required';
+    if (!schedule.truckNo) newErrors.truckNo = 'Truck No is required';
+    if (!schedule.date) newErrors.date = 'Date is required';
+    if (!schedule.time) newErrors.time = 'Time is required';
+    if (schedule.route.length === 0) newErrors.route = 'At least one route is required';
+    setErrors(newErrors);
+    return Object.keys(newErrors).length === 0;
+  };
+
+  const handleAddRoute = () => {
+    if (routeInput.trim()) {
+      setSchedules({ ...schedule, route: [...schedule.route, routeInput.trim()] });
+      setRouteInput('');
+    }
+  };
+
+  const handleRemoveRoute = (index: number) => {
+    const newRoute = schedule.route.filter((_, i) => i !== index);
+    setSchedules({ ...schedule, route: newRoute });
+  };
+
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    if (!validateForm()) return;
+    try {
+      if (editingId) {
+        await axios.put(`http://localhost:5000/api/schedules/${editingId}`, schedule);
+        alert('Schedule updated successfully!');
+        setEditingId(null);
+      } else {
+        await axios.post('http://localhost:5000/api/schedules', schedule);
+        alert('Schedule added successfully!');
+      }
+      setSchedules({ scheduleNo: '', truckNo: '', date: '', time: '', route: [], status: 'Pending' });
+      setErrors({});
+      fetchSchedules();
+    } catch (err) {
+      alert('Error: ' + (err as any).response.data.error);
+    }
+  };
+
+  const handleEdit = (s: any) => {
+    setSchedules(s);
+    setEditingId(s._id);
+  };
+
+  const handleDelete = async (id: string) => {
+    try {
+      await axios.delete(`http://localhost:5000/api/schedules/${id}`);
+      alert('Schedule deleted successfully!');
+      fetchSchedules();
+    } catch (err) {
+      alert('Error: ' + (err as any).response.data.error);
+    }
+  };
+
+  return (
+    <div>
+      <h2>Schedule Management</h2>
+      <form onSubmit={handleSubmit}>
+        <div>
+          <label><span className="form-label">Schedule No</span></label>
+          <input
+            type="text"
+            value={schedule.scheduleNo}
+            onChange={(e) => setSchedules({ ...schedule, scheduleNo: e.target.value })}
+          />
+          {errors.scheduleNo && <span className="error">{errors.scheduleNo}</span>}
+        </div>
+        <div>
+          <label><span className="form-label">Truck No</span></label>
+          {/* Truck field  dropdown  update */}
+          <select
+            value={schedule.truckNo}
+            onChange={(e) => setSchedules({ ...schedule, truckNo: e.target.value })}
+          >
+            <option value="">Select a Truck</option>
+            {availableTrucks.map((truckId) => (
+              <option key={truckId} value={truckId}>
+                {truckId}
+              </option>
+            ))}
+          </select>
+          {errors.truckNo && <span className="error">{errors.truckNo}</span>}
+        </div>
+        <div>
+          <label><span className="form-label">Date</span></label>
+          <input
+            type="date"
+            value={schedule.date}
+            onChange={(e) => setSchedules({ ...schedule, date: e.target.value })}
+          />
+          {errors.date && <span className="error">{errors.date}</span>}
+        </div>
+        <div>
+          <label><span className="form-label">Time</span></label>
+          <input
+            type="time"
+            value={schedule.time}
+            onChange={(e) => setSchedules({ ...schedule, time: e.target.value })}
+          />
+          {errors.time && <span className="error">{errors.time}</span>}
+        </div>
+        <div>
+          <label><span className="form-label">Route</span></label>
+          <input
+            type="text"
+            value={routeInput}
+            onChange={(e) => setRouteInput(e.target.value)}
+          />
+          <button type="button" onClick={handleAddRoute}>Add Route</button>
+          {errors.route && <span className="error">{errors.route}</span>}
+          <ul>
+            {schedule.route.map((r, index) => (
+              <li key={index}>
+                {r} <button type="button" onClick={() => handleRemoveRoute(index)}>Remove</button>
+              </li>
+            ))}
+          </ul>
+        </div>
+        <div>
+          <label><span className="form-label">Status</span></label>
+          <select
+            value={schedule.status}
+            onChange={(e) => setSchedules({ ...schedule, status: e.target.value })}
+          >
+            <option value="Pending">Pending</option>
+            <option value="Completed">Completed</option>
+            <option value="Cancelled">Cancelled</option>
+          </select>
+        </div>
+        <button type="submit">{editingId ? 'Update Schedule' : 'Add Schedule'}</button>
+      </form>
+      <h3>Added Schedules</h3>
+      <table style={{ width: '100%', borderCollapse: 'collapse', marginTop: '20px' }}>
+        <thead>
+          <tr style={{ backgroundColor: '#3a3a3a' }}>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Schedule No</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Truck No</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Date</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Time</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Route</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Status</th>
+            <th style={{ padding: '10px', border: '1px solid #ffffff' }}>Actions</th>
+          </tr>
+        </thead>
+        <tbody>
+          {schedules.map((s) => (
+            <tr key={s._id} style={{ backgroundColor: '#2a2a2a' }}>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.scheduleNo}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.truckNo}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.date}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.time}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.route.join(', ')}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>{s.status}</td>
+              <td style={{ padding: '10px', border: '1px solid #ffffff' }}>
+                <button onClick={() => handleEdit(s)} style={{ marginRight: '10px' }}>Edit</button>
+                <button onClick={() => handleDelete(s._id)}>Delete</button>
+              </td>
+            </tr>
+          ))}
+        </tbody>
+      </table>
+    </div>
+  );
+};
+
+export default ScheduleManagement;
\ No newline at end of file
diff --git a/frontend/src/components/ToolManagement.tsx b/frontend/src/components/ToolManagement.tsx
new file mode 100644
index 0000000..9d0cb72
--- /dev/null
+++ b/frontend/src/components/ToolManagement.tsx
@@ -0,0 +1,168 @@
+import React, { useState, useEffect } from 'react';
+import axios from 'axios';
+import '../styles/custom.css';
+
+// Tool Management component define කරන්න්
+const ToolManagement: React.FC = () => {
+  // tools state එක empty array එකක් විදිහට initialize කරන්න්
+  const [tools, setTools] = useState<any[]>([]); // any[] use කරනවා මොකද tools එකේ type define කරලා නැහැ
+  const [toolId, setToolId] = useState('');
+  const [type, setType] = useState('');
+  const [description, setDescription] = useState('');
+  // Edit mode handle කරන්න states add කළා
+  const [isEditing, setIsEditing] = useState(false);
+  const [editToolId, setEditToolId] = useState<string | null>(null);
+
+  // Component mount වෙද්දි tools fetch කරන්න්
+  useEffect(() => {
+    const fetchTools = async () => {
+      try {
+        const response = await axios.get('http://localhost:5000/api/tools');
+        setTools(response.data); // Fetched data tools state එකට set කරන්න්
+      } catch (error) {
+        console.error('Error fetching tools:', error);
+        setTools([]); // Error එකක් ආවොත් tools එක empty array එකක් විදිහට set කරන්න්
+      }
+    };
+    fetchTools();
+  }, []);
+
+  // Form submit කරද්දි new tool එක add කරන්න හෝ existing tool එක update කරන්න්
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    try {
+      if (isEditing && editToolId) {
+        // Edit mode එකේදී tool එක update කරන්න්
+        const response = await axios.put(`http://localhost:5000/api/tools/${editToolId}`, {
+          toolId,
+          type,
+          description,
+        });
+        setTools(tools.map((tool) => (tool._id === editToolId ? response.data : tool))); // State එක update කරන්න්
+        setIsEditing(false); // Edit mode එක off කරන්න්
+        setEditToolId(null); // Edit tool ID reset කරන්න්
+      } else {
+        // Add mode එකේදී new tool එක add කරන්න්
+        const response = await axios.post('http://localhost:5000/api/tools', {
+          toolId,
+          type,
+          description,
+        });
+        setTools([...tools, response.data]); // New tool එක state එකට add කරන්න්
+      }
+      // Form reset කරන්න්
+      setToolId('');
+      setType('');
+      setDescription('');
+    } catch (error) {
+      console.error('Error saving tool:', error);
+      alert('Failed to save tool');
+    }
+  };
+
+  // Tool delete කරන්න්
+  const handleDelete = async (id: string) => {
+    try {
+      await axios.delete(`http://localhost:5000/api/tools/${id}`);
+      setTools(tools.filter((tool) => tool._id !== id)); // State එක update කරන්න්
+    } catch (error) {
+      console.error('Error deleting tool:', error);
+      alert('Failed to delete tool');
+    }
+  };
+
+  // Edit button click කරද්දි form එක populate කරන්න්
+  const handleEdit = (tool: any) => {
+    setIsEditing(true);
+    setEditToolId(tool._id);
+    setToolId(tool.toolId);
+    setType(tool.type);
+    setDescription(tool.description);
+  };
+
+  // Cancel edit mode එක
+  const handleCancel = () => {
+    setIsEditing(false);
+    setEditToolId(null);
+    setToolId('');
+    setType('');
+    setDescription('');
+  };
+
+  return (
+    <div>
+      <h1>Tool Management</h1>
+      {/* Tool add/edit කරන්න form එක */}
+      <form onSubmit={handleSubmit}>
+        <div>
+          <label>Tool ID</label>
+          <input
+            type="text"
+            value={toolId}
+            onChange={(e) => setToolId(e.target.value)}
+            required
+          />
+        </div>
+        <div>
+          <label>Type</label>
+          <select value={type} onChange={(e) => setType(e.target.value)} required>
+            <option value="">Select Type</option>
+            <option value="Shovel">Shovel</option>
+            <option value="Broom">Broom</option>
+            <option value="Rake">Rake</option>
+          </select>
+        </div>
+        <div>
+          <label>Description</label>
+          <input
+            type="text"
+            value={description}
+            onChange={(e) => setDescription(e.target.value)}
+            required
+          />
+        </div>
+        <button type="submit">{isEditing ? 'Update Tool' : 'Add Tool'}</button>
+        {isEditing && (
+          <button type="button" onClick={handleCancel} style={{ marginLeft: '10px' }}>
+            Cancel
+          </button>
+        )}
+      </form>
+
+      <h2>Added Tools</h2>
+     
+      <table>
+        <thead>
+          <tr>
+            <th>Tool ID</th>
+            <th>Type</th>
+            <th>Description</th>
+            <th>Actions</th>
+          </tr>
+        </thead>
+        <tbody>
+          
+          {Array.isArray(tools) && tools.length > 0 ? (
+            tools.map((tool) => (
+              <tr key={tool._id}>
+                <td>{tool.toolId}</td>
+                <td>{tool.type}</td>
+                <td>{tool.description}</td>
+                <td>
+                  <button onClick={() => handleEdit(tool)}>Edit</button>
+                  <button onClick={() => handleDelete(tool._id)}>Delete</button>
+                </td>
+              </tr>
+            ))
+          ) : (
+            <tr>
+              <td colSpan={4}>No tools available</td>
+            </tr>
+          )}
+        </tbody>
+      </table>
+    </div>
+  );
+};
+
+export default ToolManagement;
\ No newline at end of file
diff --git a/frontend/src/components/admin/UserForm.jsx b/frontend/src/components/admin/UserForm.jsx
deleted file mode 100644
index 7fa824a..0000000
--- a/frontend/src/components/admin/UserForm.jsx
+++ /dev/null
@@ -1,290 +0,0 @@
-// frontend/src/components/admin/UserForm.jsx
-import React, { useState, useEffect } from 'react';
-import {
-  Box,
-  TextField,
-  Button,
-  Select,
-  MenuItem,
-  FormControl,
-  InputLabel,
-  Typography,
-  Grid,
-  CircularProgress,
-  Dialog,
-  DialogActions,
-  DialogContent,
-  DialogTitle,
-  Alert,
-} from '@mui/material';
-
-// Define allowed roles - fetch from config or define here
-const roles = ['customer', 'staff', 'financial_manager', 'admin'];
-
-const UserForm = ({ initialData, onSubmit, onCancel, loading, open, onClose, serverError }) => {
-  const [formData, setFormData] = useState({
-    name: '',
-    email: '',
-    phone: '',
-    role: 'customer', // Default role
-    password: '',
-    confirmPassword: '',
-    street: '',
-    city: '',
-    postalCode: '',
-  });
-  const [errors, setErrors] = useState({});
-  const isEditMode = Boolean(initialData);
-
-  useEffect(() => {
-    if (open) {
-      if (initialData) {
-        setFormData({
-          name: initialData.name || '',
-          email: initialData.email || '',
-          phone: initialData.phone || '',
-          role: initialData.role || 'customer',
-          password: '', // Clear password fields on edit
-          confirmPassword: '',
-          street: initialData.address?.street || '',
-          city: initialData.address?.city || '',
-          postalCode: initialData.address?.postalCode || '',
-        });
-      } else {
-        // Reset form for create mode
-        setFormData({
-          name: '',
-          email: '',
-          phone: '',
-          role: 'customer',
-          password: '',
-          confirmPassword: '',
-          street: '',
-          city: '',
-          postalCode: '',
-        });
-      }
-      setErrors({});
-    }
-  }, [initialData, open]);
-
-  const validate = () => {
-    const newErrors = {};
-    if (!formData.name.trim()) newErrors.name = 'Name is required';
-    if (!formData.email.trim()) {
-      newErrors.email = 'Email is required';
-    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
-      newErrors.email = 'Email is invalid';
-    }
-    if (!isEditMode && !formData.password) {
-      newErrors.password = 'Password is required for new users';
-    } else if (formData.password && formData.password.length < 8) {
-      newErrors.password = 'Password must be at least 8 characters';
-    }
-    if (formData.password && formData.password !== formData.confirmPassword) {
-      newErrors.confirmPassword = 'Passwords do not match';
-    }
-    if (!formData.role) newErrors.role = 'Role is required';
-
-    // Basic phone validation (optional) - adjust regex as needed
-    if (formData.phone && !/^\+?[1-9]\d{1,14}$/.test(formData.phone)) {
-      newErrors.phone = 'Invalid phone number format';
-    }
-
-    setErrors(newErrors);
-    return Object.keys(newErrors).length === 0;
-  };
-
-  const handleChange = (e) => {
-    const { name, value } = e.target;
-    setFormData((prev) => ({ ...prev, [name]: value }));
-    // Clear specific error when user starts typing
-    if (errors[name]) {
-      setErrors((prev) => ({ ...prev, [name]: null }));
-    }
-    if (name === 'password' && errors.confirmPassword) {
-      setErrors((prev) => ({ ...prev, confirmPassword: null }));
-    }
-  };
-
-  const handleSubmit = (e) => {
-    e.preventDefault();
-    if (validate()) {
-      const { confirmPassword: _confirmPassword, ...submitData } = formData;
-      const dataToSend = {
-        ...submitData,
-        address: {
-          street: submitData.street,
-          city: submitData.city,
-          postalCode: submitData.postalCode,
-        },
-      };
-      if (!dataToSend.password) {
-        delete dataToSend.password;
-      }
-      delete dataToSend.street;
-      delete dataToSend.city;
-      delete dataToSend.postalCode;
-
-      onSubmit(dataToSend);
-    }
-  };
-
-  return (
-    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
-      <DialogTitle>{isEditMode ? 'Edit User' : 'Add New User'}</DialogTitle>
-      <DialogContent>
-        {serverError && (
-          <Alert severity="error" sx={{ mb: 2 }}>
-            {serverError.message || 'An unexpected error occurred.'}
-          </Alert>
-        )}
-        <Box component="form" onSubmit={handleSubmit} sx={{ mt: 1 }}>
-          <Grid container spacing={2}>
-            <Grid item xs={12} sm={6}>
-              <TextField
-                required
-                fullWidth
-                id="name"
-                label="Full Name"
-                name="name"
-                value={formData.name}
-                onChange={handleChange}
-                error={Boolean(errors.name)}
-                helperText={errors.name}
-                disabled={loading}
-                autoFocus
-              />
-            </Grid>
-            <Grid item xs={12} sm={6}>
-              <TextField
-                required
-                fullWidth
-                id="email"
-                label="Email Address"
-                name="email"
-                type="email"
-                value={formData.email}
-                onChange={handleChange}
-                error={Boolean(errors.email)}
-                helperText={errors.email}
-                disabled={loading}
-              />
-            </Grid>
-            <Grid item xs={12} sm={6}>
-              <TextField
-                fullWidth
-                id="phone"
-                label="Phone Number"
-                name="phone"
-                value={formData.phone}
-                onChange={handleChange}
-                error={Boolean(errors.phone)}
-                helperText={errors.phone}
-                disabled={loading}
-              />
-            </Grid>
-            <Grid item xs={12} sm={6}>
-              <FormControl fullWidth required error={Boolean(errors.role)} disabled={loading}>
-                <InputLabel id="role-label">Role</InputLabel>
-                <Select
-                  labelId="role-label"
-                  id="role"
-                  name="role"
-                  value={formData.role}
-                  label="Role"
-                  onChange={handleChange}
-                >
-                  {roles.map((role) => (
-                    <MenuItem key={role} value={role}>
-                      {role.split('_').map((w) => w.charAt(0).toUpperCase() + w.slice(1)).join(' ')}
-                    </MenuItem>
-                  ))}
-                </Select>
-                {errors.role && <Typography color="error" variant="caption">{errors.role}</Typography>}
-              </FormControl>
-            </Grid>
-            <Grid item xs={12} sm={6}>
-              <TextField
-                fullWidth
-                id="password"
-                label={isEditMode ? 'New Password (optional)' : 'Password'}
-                name="password"
-                type="password"
-                value={formData.password}
-                onChange={handleChange}
-                error={Boolean(errors.password)}
-                helperText={errors.password || (isEditMode ? 'Leave blank to keep current password' : 'Min 8 characters')}
-                required={!isEditMode}
-                disabled={loading}
-              />
-            </Grid>
-            <Grid item xs={12} sm={6}>
-              <TextField
-                fullWidth
-                id="confirmPassword"
-                label="Confirm Password"
-                name="confirmPassword"
-                type="password"
-                value={formData.confirmPassword}
-                onChange={handleChange}
-                error={Boolean(errors.confirmPassword)}
-                helperText={errors.confirmPassword}
-                required={Boolean(formData.password)}
-                disabled={loading || !formData.password}
-              />
-            </Grid>
-            <Grid item xs={12}>
-              <Typography variant="subtitle1" gutterBottom sx={{ mt: 1 }}>
-                Address
-              </Typography>
-            </Grid>
-            <Grid item xs={12} sm={8}>
-              <TextField
-                fullWidth
-                id="street"
-                label="Street Address"
-                name="street"
-                value={formData.street}
-                onChange={handleChange}
-                disabled={loading}
-              />
-            </Grid>
-            <Grid item xs={12} sm={4}>
-              <TextField
-                fullWidth
-                id="city"
-                label="City"
-                name="city"
-                value={formData.city}
-                onChange={handleChange}
-                disabled={loading}
-              />
-            </Grid>
-            <Grid item xs={12} sm={4}>
-              <TextField
-                fullWidth
-                id="postalCode"
-                label="Postal Code"
-                name="postalCode"
-                value={formData.postalCode}
-                onChange={handleChange}
-                disabled={loading}
-              />
-            </Grid>
-          </Grid>
-        </Box>
-      </DialogContent>
-      <DialogActions sx={{ pb: 2, pr: 2 }}>
-        <Button onClick={onCancel} disabled={loading}>
-          Cancel
-        </Button>
-        <Button onClick={handleSubmit} variant="contained" disabled={loading}>
-          {loading ? <CircularProgress size={24} /> : isEditMode ? 'Save Changes' : 'Create User'}
-        </Button>
-      </DialogActions>
-    </Dialog>
-  );
-};
-
-export default UserForm;
diff --git a/frontend/src/components/admin/UserList.jsx b/frontend/src/components/admin/UserList.jsx
deleted file mode 100644
index 6260ae6..0000000
--- a/frontend/src/components/admin/UserList.jsx
+++ /dev/null
@@ -1,71 +0,0 @@
-// frontend/src/components/admin/UserList.jsx
-import React from 'react';
-import {
-  Table, TableBody, TableCell, TableContainer, TableHead, TableRow,
-  Paper, IconButton, Typography, Box, Chip
-} from '@mui/material';
-import EditIcon from '@mui/icons-material/Edit';
-import DeleteIcon from '@mui/icons-material/Delete';
-import { format } from 'date-fns';
-
-// Helper to format role display
-const formatRole = (role) => {
-  return role.split('_').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ');
-};
-
-const UserList = ({ users, onEdit, onDelete, loading }) => {
-  if (loading) {
-    return <Typography>Loading users...</Typography>; // Or a Skeleton loader
-  }
-
-  if (!users || users.length === 0) {
-    return <Typography>No users found.</Typography>;
-  }
-
-  return (
-    <TableContainer component={Paper} sx={{ mt: 2 }}>
-      <Table sx={{ minWidth: 650 }} aria-label="user list table">
-        <TableHead>
-          <TableRow sx={{ '& th': { fontWeight: 'bold' } }}>
-            <TableCell>Name</TableCell>
-            <TableCell>Email</TableCell>
-            <TableCell>Role</TableCell>
-            <TableCell>Phone</TableCell>
-            <TableCell>Created At</TableCell>
-            <TableCell align="right">Actions</TableCell>
-          </TableRow>
-        </TableHead>
-        <TableBody>
-          {users.map((user) => (
-            <TableRow
-              key={user._id}
-              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
-            >
-              <TableCell component="th" scope="row">
-                {user.name}
-              </TableCell>
-              <TableCell>{user.email}</TableCell>
-              <TableCell>
-                <Chip label={formatRole(user.role)} size="small" />
-              </TableCell>
-              <TableCell>{user.phone || 'N/A'}</TableCell>
-              <TableCell>
-                {format(new Date(user.createdAt), 'PPpp')} {/* Format date */}
-              </TableCell>
-              <TableCell align="right">
-                <IconButton onClick={() => onEdit(user)} color="primary" aria-label="edit user">
-                  <EditIcon />
-                </IconButton>
-                <IconButton onClick={() => onDelete(user._id)} color="error" aria-label="delete user">
-                  <DeleteIcon />
-                </IconButton>
-              </TableCell>
-            </TableRow>
-          ))}
-        </TableBody>
-      </Table>
-    </TableContainer>
-  );
-};
-
-export default UserList;
diff --git a/frontend/src/components/budget/BudgetForm.jsx b/frontend/src/components/budget/BudgetForm.jsx
deleted file mode 100644
index 1ba9f2a..0000000
--- a/frontend/src/components/budget/BudgetForm.jsx
+++ /dev/null
@@ -1,221 +0,0 @@
-// frontend/src/components/budget/BudgetForm.jsx
-import React, { useState, useEffect } from 'react';
-import { 
-    TextField, 
-    Button, 
-    Grid, 
-    MenuItem, 
-    Select, 
-    InputLabel, 
-    FormControl, 
-    FormHelperText, 
-    Box 
-} from '@mui/material';
-import { DatePicker } from '@mui/x-date-pickers/DatePicker';
-import { parseISO, format } from 'date-fns';
-
-const budgetCategories = ['fuel', 'maintenance', 'salaries', 'utilities', 'equipment', 'office', 'rent', 'marketing', 'insurance', 'taxes', 'other'];
-const periodTypes = ['Monthly', 'Quarterly', 'Yearly'];
-
-const BudgetForm = ({ onSubmit, initialData, onCancel }) => {
-    const [formData, setFormData] = useState({
-        category: '',
-        periodType: '',
-        periodStartDate: null,
-        periodEndDate: null,
-        allocatedAmount: '',
-        notes: ''
-    });
-    const [errors, setErrors] = useState({});
-
-    useEffect(() => {
-        if (initialData) {
-            setFormData({
-                category: initialData.category || '',
-                periodType: initialData.periodType || '',
-                // Ensure dates are Date objects for DatePicker
-                periodStartDate: initialData.periodStartDate ? parseISO(initialData.periodStartDate) : null,
-                periodEndDate: initialData.periodEndDate ? parseISO(initialData.periodEndDate) : null,
-                allocatedAmount: initialData.allocatedAmount !== undefined ? String(initialData.allocatedAmount) : '',
-                notes: initialData.notes || ''
-            });
-            setErrors({}); // Clear errors when loading initial data
-        } else {
-            // Reset form if initialData is null (e.g., switching from edit to add)
-            setFormData({
-                category: '',
-                periodType: '',
-                periodStartDate: null,
-                periodEndDate: null,
-                allocatedAmount: '',
-                notes: ''
-            });
-            setErrors({});
-        }
-    }, [initialData]);
-
-    const validate = () => {
-        let tempErrors = {};
-        if (!formData.category) tempErrors.category = 'Category is required';
-        if (!formData.periodType) tempErrors.periodType = 'Period type is required';
-        if (!formData.periodStartDate) tempErrors.periodStartDate = 'Start date is required';
-        if (!formData.periodEndDate) {
-            tempErrors.periodEndDate = 'End date is required';
-        } else if (formData.periodStartDate && formData.periodEndDate <= formData.periodStartDate) {
-            tempErrors.periodEndDate = 'End date must be after start date';
-        }
-        if (!formData.allocatedAmount) {
-            tempErrors.allocatedAmount = 'Allocated amount is required';
-        } else if (isNaN(formData.allocatedAmount) || Number(formData.allocatedAmount) < 0) {
-            tempErrors.allocatedAmount = 'Allocated amount must be a non-negative number';
-        }
-        
-        setErrors(tempErrors);
-        return Object.keys(tempErrors).length === 0;
-    };
-
-    const handleChange = (e) => {
-        const { name, value } = e.target;
-        setFormData(prev => ({ ...prev, [name]: value }));
-        // Clear specific error when user starts typing
-        if (errors[name]) {
-            setErrors(prev => ({ ...prev, [name]: '' }));
-        }
-    };
-
-    const handleDateChange = (name, newValue) => {
-        setFormData(prev => ({ ...prev, [name]: newValue }));
-         // Clear specific error when user changes date
-         if (errors[name]) {
-            setErrors(prev => ({ ...prev, [name]: '' }));
-        }
-        // Also clear end date error if start date changes and might fix the issue
-        if (name === 'periodStartDate' && errors.periodEndDate === 'End date must be after start date') {
-             setErrors(prev => ({ ...prev, periodEndDate: '' }));
-        }
-    };
-
-    const handleSubmit = (e) => {
-        e.preventDefault();
-        if (validate()) {
-            // Format dates to ISO string before submitting
-            const dataToSubmit = {
-                ...formData,
-                periodStartDate: format(formData.periodStartDate, 'yyyy-MM-dd'),
-                periodEndDate: format(formData.periodEndDate, 'yyyy-MM-dd'),
-                allocatedAmount: Number(formData.allocatedAmount) // Ensure amount is a number
-            };
-            onSubmit(dataToSubmit);
-        }
-    };
-
-    return (
-        <form onSubmit={handleSubmit}>
-            <Grid container spacing={3} columns={{ xs: 12, sm: 12 }}>
-                <Grid xs={12} sm={6}>
-                    <FormControl fullWidth error={!!errors.category}>
-                        <InputLabel id="category-label">Category</InputLabel>
-                        <Select
-                            labelId="category-label"
-                            label="Category"
-                            name="category"
-                            value={formData.category}
-                            onChange={handleChange}
-                        >
-                            <MenuItem value=""><em>Select Category</em></MenuItem>
-                            {budgetCategories.map(cat => (
-                                <MenuItem key={cat} value={cat}>{cat.charAt(0).toUpperCase() + cat.slice(1)}</MenuItem>
-                            ))}
-                        </Select>
-                        {errors.category && <FormHelperText>{errors.category}</FormHelperText>}
-                    </FormControl>
-                </Grid>
-                <Grid xs={12} sm={6}>
-                    <FormControl fullWidth error={!!errors.periodType}>
-                        <InputLabel id="periodType-label">Period Type</InputLabel>
-                        <Select
-                            labelId="periodType-label"
-                            label="Period Type"
-                            name="periodType"
-                            value={formData.periodType}
-                            onChange={handleChange}
-                        >
-                             <MenuItem value=""><em>Select Period Type</em></MenuItem>
-                            {periodTypes.map(type => (
-                                <MenuItem key={type} value={type}>{type}</MenuItem>
-                            ))}
-                        </Select>
-                        {errors.periodType && <FormHelperText>{errors.periodType}</FormHelperText>}
-                    </FormControl>
-                </Grid>
-                <Grid xs={12} sm={6}>
-                    <DatePicker
-                        label="Period Start Date"
-                        value={formData.periodStartDate}
-                        onChange={(newValue) => handleDateChange('periodStartDate', newValue)}
-                        slotProps={{
-                            textField: {
-                                fullWidth: true,
-                                error: !!errors.periodStartDate,
-                                helperText: errors.periodStartDate
-                            }
-                        }}
-                    />
-                </Grid>
-                <Grid xs={12} sm={6}>
-                    <DatePicker
-                        label="Period End Date"
-                        value={formData.periodEndDate}
-                        onChange={(newValue) => handleDateChange('periodEndDate', newValue)}
-                        minDate={formData.periodStartDate} // Basic validation
-                        slotProps={{
-                            textField: {
-                                fullWidth: true,
-                                error: !!errors.periodEndDate,
-                                helperText: errors.periodEndDate
-                            }
-                        }}
-                    />
-                </Grid>
-                <Grid xs={12} sm={6}>
-                    <TextField
-                        label="Allocated Amount"
-                        name="allocatedAmount"
-                        type="number"
-                        value={formData.allocatedAmount}
-                        onChange={handleChange}
-                        fullWidth
-                        error={!!errors.allocatedAmount}
-                        helperText={errors.allocatedAmount}
-                        InputProps={{ inputProps: { min: 0, step: "0.01" } }}
-                    />
-                </Grid>
-                <Grid xs={12}>
-                    <TextField
-                        label="Notes (Optional)"
-                        name="notes"
-                        value={formData.notes}
-                        onChange={handleChange}
-                        fullWidth
-                        multiline
-                        rows={3}
-                    />
-                </Grid>
-                <Grid xs={12}>
-                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
-                        {onCancel && (
-                            <Button type="button" variant="outlined" onClick={onCancel}>
-                                Cancel
-                            </Button>
-                        )}
-                        <Button type="submit" variant="contained" color="primary">
-                            {initialData ? 'Update Budget' : 'Create Budget'}
-                        </Button>
-                    </Box>
-                </Grid>
-            </Grid>
-        </form>
-    );
-};
-
-export default BudgetForm;
diff --git a/frontend/src/components/budget/BudgetList.jsx b/frontend/src/components/budget/BudgetList.jsx
deleted file mode 100644
index 34e7e5d..0000000
--- a/frontend/src/components/budget/BudgetList.jsx
+++ /dev/null
@@ -1,107 +0,0 @@
-// frontend/src/components/budget/BudgetList.jsx
-import React from 'react';
-import {
-    Table,
-    TableBody,
-    TableCell,
-    TableContainer,
-    TableHead,
-    TableRow,
-    Paper,
-    IconButton,
-    Typography,
-    Box,
-    Tooltip
-} from '@mui/material';
-import EditIcon from '@mui/icons-material/Edit';
-import DeleteIcon from '@mui/icons-material/Delete';
-import { format, parseISO } from 'date-fns';
-
-// Helper function to format currency
-const formatCurrency = (amount) => {
-    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);
-};
-
-// Helper function to format date strings
-const formatDate = (dateString) => {
-    if (!dateString) return 'N/A';
-    try {
-        return format(parseISO(dateString), 'MMM dd, yyyy');
-    } catch (error) {
-        console.error("Error formatting date:", dateString, error);
-        return 'Invalid Date';
-    }
-};
-
-const BudgetList = ({ budgets, onEdit, onDelete }) => {
-    if (!budgets || budgets.length === 0) {
-        return <Typography>No budgets found.</Typography>;
-    }
-
-    return (
-        <TableContainer component={Paper} elevation={2}>
-            <Table sx={{ minWidth: 650 }} aria-label="budget list table">
-                <TableHead sx={{ backgroundColor: 'primary.main' }}>
-                    <TableRow>
-                        <TableCell sx={{ color: 'common.white', fontWeight: 'bold' }}>Category</TableCell>
-                        <TableCell sx={{ color: 'common.white', fontWeight: 'bold' }}>Period Type</TableCell>
-                        <TableCell sx={{ color: 'common.white', fontWeight: 'bold' }}>Start Date</TableCell>
-                        <TableCell sx={{ color: 'common.white', fontWeight: 'bold' }}>End Date</TableCell>
-                        <TableCell align="right" sx={{ color: 'common.white', fontWeight: 'bold' }}>Allocated Amount</TableCell>
-                        <TableCell sx={{ color: 'common.white', fontWeight: 'bold' }}>Notes</TableCell>
-                        <TableCell align="center" sx={{ color: 'common.white', fontWeight: 'bold' }}>Actions</TableCell>
-                    </TableRow>
-                </TableHead>
-                <TableBody>
-                    {budgets.map((budget) => (
-                        <TableRow 
-                            key={budget._id} 
-                            sx={{ '&:last-child td, &:last-child th': { border: 0 }, '&:hover': { backgroundColor: 'action.hover' } }}
-                        >
-                            <TableCell component="th" scope="row">
-                                {budget.category ? budget.category.charAt(0).toUpperCase() + budget.category.slice(1) : 'N/A'}
-                            </TableCell>
-                            <TableCell>{budget.periodType || 'N/A'}</TableCell>
-                            <TableCell>{formatDate(budget.periodStartDate)}</TableCell>
-                            <TableCell>{formatDate(budget.periodEndDate)}</TableCell>
-                            <TableCell align="right">{formatCurrency(budget.allocatedAmount)}</TableCell>
-                            <TableCell>
-                                <Tooltip title={budget.notes || 'No notes'} arrow>
-                                    <Typography noWrap sx={{ maxWidth: 150, overflow: 'hidden', textOverflow: 'ellipsis' }} component="span">
-                                        {budget.notes || '-'}
-                                    </Typography>
-                                </Tooltip>
-                            </TableCell>
-                            <TableCell align="center">
-                                <Box sx={{ display: 'flex', justifyContent: 'center' }}>
-                                    <Tooltip title="Edit Budget">
-                                        <IconButton 
-                                            size="small" 
-                                            color="primary" 
-                                            onClick={() => onEdit(budget)} 
-                                            aria-label={`edit budget for ${budget.category}`}
-                                        >
-                                            <EditIcon />
-                                        </IconButton>
-                                    </Tooltip>
-                                    <Tooltip title="Delete Budget">
-                                        <IconButton 
-                                            size="small" 
-                                            color="error" 
-                                            onClick={() => onDelete(budget._id)} 
-                                            aria-label={`delete budget for ${budget.category}`}
-                                        >
-                                            <DeleteIcon />
-                                        </IconButton>
-                                    </Tooltip>
-                                </Box>
-                            </TableCell>
-                        </TableRow>
-                    ))}
-                </TableBody>
-            </Table>
-        </TableContainer>
-    );
-};
-
-export default BudgetList;
diff --git a/frontend/src/components/budget/BudgetSummaryView.jsx b/frontend/src/components/budget/BudgetSummaryView.jsx
deleted file mode 100644
index b4439b4..0000000
--- a/frontend/src/components/budget/BudgetSummaryView.jsx
+++ /dev/null
@@ -1,87 +0,0 @@
-// frontend/src/components/budget/BudgetSummaryView.jsx
-import React from 'react';
-import {
-    Table,
-    TableBody,
-    TableCell,
-    TableContainer,
-    TableHead,
-    TableRow,
-    Paper,
-    Typography,
-    Box,
-    LinearProgress
-} from '@mui/material';
-
-// Helper function to format currency
-const formatCurrency = (amount) => {
-    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amount);
-};
-
-// Helper to determine color based on percentage used
-const getPercentageColor = (percentage) => {
-    if (percentage < 70) return 'success.main';
-    if (percentage < 90) return 'warning.main';
-    return 'error.main';
-};
-
-const BudgetSummaryView = ({ summaryData }) => {
-    if (!summaryData || summaryData.length === 0) {
-        return <Typography>No budget summary data available for the selected period.</Typography>;
-    }
-
-    return (
-        <TableContainer component={Paper} elevation={1}>
-            <Table sx={{ minWidth: 650 }} aria-label="budget summary table">
-                <TableHead sx={{ backgroundColor: 'primary.light' }}>
-                    <TableRow>
-                        <TableCell sx={{ fontWeight: 'bold' }}>Category</TableCell>
-                        <TableCell align="right" sx={{ fontWeight: 'bold' }}>Allocated</TableCell>
-                        <TableCell align="right" sx={{ fontWeight: 'bold' }}>Actual</TableCell>
-                        <TableCell align="right" sx={{ fontWeight: 'bold' }}>Remaining</TableCell>
-                        <TableCell align="center" sx={{ fontWeight: 'bold' }}>Usage</TableCell>
-                    </TableRow>
-                </TableHead>
-                <TableBody>
-                    {summaryData.map((item) => (
-                        <TableRow key={item.category} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
-                            <TableCell component="th" scope="row">
-                                {item.category ? item.category.charAt(0).toUpperCase() + item.category.slice(1) : 'N/A'}
-                            </TableCell>
-                            <TableCell align="right">{formatCurrency(item.allocated)}</TableCell>
-                            <TableCell align="right">{formatCurrency(item.actual)}</TableCell>
-                            <TableCell align="right">{formatCurrency(item.difference)}</TableCell>
-                            <TableCell>
-                                <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>
-                                    <Box sx={{ width: '100%', mr: 1 }}>
-                                        <LinearProgress 
-                                            variant="determinate" 
-                                            value={Math.min(item.percentageUsed, 100)} 
-                                            sx={{ 
-                                                height: 8, 
-                                                borderRadius: 5,
-                                                bgcolor: 'grey.200',
-                                                '& .MuiLinearProgress-bar': {
-                                                    bgcolor: getPercentageColor(item.percentageUsed)
-                                                }
-                                            }}
-                                        />
-                                    </Box>
-                                    <Box sx={{ minWidth: 35 }}>
-                                        <Typography variant="body2" color="text.secondary">
-                                            {item.percentageUsed === Infinity ? 
-                                                'Over budget' : 
-                                                `${Math.round(item.percentageUsed)}%`}
-                                        </Typography>
-                                    </Box>
-                                </Box>
-                            </TableCell>
-                        </TableRow>
-                    ))}
-                </TableBody>
-            </Table>
-        </TableContainer>
-    );
-};
-
-export default BudgetSummaryView;
\ No newline at end of file
diff --git a/frontend/src/components/complaints/ComplaintComponents.css b/frontend/src/components/complaints/ComplaintComponents.css
deleted file mode 100644
index 7f7fc95..0000000
--- a/frontend/src/components/complaints/ComplaintComponents.css
+++ /dev/null
@@ -1,359 +0,0 @@
-/* Styling for Complaint Components */
-
-/* General complaint section styles */
-.complaint-section {
-  background-color: white;
-  border-radius: 8px;
-  padding: 20px;
-  margin-bottom: 20px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-.form-error {
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  background-color: #f8d7da;
-  color: #721c24;
-  border: 1px solid #f5c6cb;
-}
-
-/* Complaint form styles */
-.complaint-form {
-  display: flex;
-  flex-direction: column;
-  gap: 15px;
-}
-
-.form-row {
-  display: flex;
-  flex-direction: column;
-}
-
-.form-row label {
-  font-weight: 500;
-  margin-bottom: 5px;
-  color: #333;
-}
-
-.form-row input, 
-.form-row select, 
-.form-row textarea {
-  padding: 10px;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 14px;
-  width: 100%;
-}
-
-.form-row textarea {
-  resize: vertical;
-  min-height: 120px;
-}
-
-.submit-button {
-  padding: 10px 20px;
-  background-color: #4a90e2;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  font-weight: 500;
-  cursor: pointer;
-  align-self: flex-start;
-  transition: background-color 0.2s;
-}
-
-.submit-button:hover {
-  background-color: #3a80d2;
-}
-
-/* Complaints list styles */
-.complaints-list {
-  list-style: none;
-  padding: 0;
-  margin: 0;
-}
-
-.complaint-item {
-  padding: 15px;
-  border: 1px solid #eee;
-  border-radius: 4px;
-  margin-bottom: 10px;
-  cursor: pointer;
-  transition: box-shadow 0.2s;
-}
-
-.complaint-item:hover {
-  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
-}
-
-.complaint-header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  margin-bottom: 8px;
-}
-
-.complaint-title {
-  margin: 0;
-  font-size: 16px;
-  color: #333;
-}
-
-.complaint-meta {
-  display: flex;
-  justify-content: space-between;
-  font-size: 12px;
-  color: #666;
-}
-
-.complaint-status {
-  padding: 3px 8px;
-  border-radius: 12px;
-  font-size: 12px;
-  font-weight: 500;
-  text-transform: capitalize;
-}
-
-.status-new {
-  background-color: #cce5ff;
-  color: #004085;
-}
-
-.status-in-progress {
-  background-color: #fff3cd;
-  color: #856404;
-}
-
-.status-resolved {
-  background-color: #d1e7dd;
-  color: #0f5132;
-}
-
-.status-closed {
-  background-color: #e2e3e5;
-  color: #41464b;
-}
-
-/* Complaint detail view */
-.complaint-detail {
-  background-color: white;
-  border-radius: 8px;
-  padding: 20px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-.complaint-detail-header {
-  display: flex;
-  justify-content: space-between;
-  align-items: flex-start;
-  margin-bottom: 20px;
-  padding-bottom: 15px;
-  border-bottom: 1px solid #eee;
-}
-
-.complaint-detail-title {
-  margin: 0 0 10px 0;
-  font-size: 20px;
-  color: #333;
-}
-
-.complaint-detail-meta {
-  display: flex;
-  flex-wrap: wrap;
-  gap: 15px;
-}
-
-.meta-item {
-  display: flex;
-  align-items: center;
-  gap: 5px;
-}
-
-.meta-label {
-  font-weight: 500;
-  color: #666;
-}
-
-.complaint-description {
-  background-color: #f9f9f9;
-  padding: 15px;
-  border-radius: 4px;
-  margin-bottom: 20px;
-  white-space: pre-wrap;
-}
-
-/* Response section styles */
-.responses-history {
-  margin-bottom: 20px;
-}
-
-.response-item {
-  padding: 15px;
-  border: 1px solid #eee;
-  border-radius: 4px;
-  margin-bottom: 12px;
-}
-
-.response-header {
-  display: flex;
-  justify-content: space-between;
-  margin-bottom: 10px;
-  font-size: 13px;
-}
-
-.response-author {
-  font-weight: 500;
-}
-
-.response-date {
-  color: #666;
-}
-
-.response-content {
-  white-space: pre-wrap;
-  color: #333;
-}
-
-.response-section {
-  margin-top: 30px;
-}
-
-.response-section textarea {
-  width: 100%;
-  padding: 10px;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  resize: vertical;
-  min-height: 100px;
-  margin-bottom: 10px;
-}
-
-/* Action buttons */
-.action-btn {
-  padding: 8px 16px;
-  border-radius: 4px;
-  border: none;
-  font-weight: 500;
-  cursor: pointer;
-  font-size: 14px;
-  transition: all 0.2s;
-}
-
-.action-back {
-  background-color: #f0f0f0;
-  color: #333;
-}
-
-.action-back:hover {
-  background-color: #e0e0e0;
-}
-
-.action-update {
-  background-color: #4a90e2;
-  color: white;
-}
-
-.action-update:hover {
-  background-color: #3a80d2;
-}
-
-.action-resolve {
-  background-color: #28a745;
-  color: white;
-}
-
-.action-resolve:hover {
-  background-color: #218838;
-}
-
-.action-close {
-  background-color: #6c757d;
-  color: white;
-}
-
-.action-close:hover {
-  background-color: #5a6268;
-}
-
-.admin-actions {
-  display: flex;
-  gap: 10px;
-  margin-top: 20px;
-}
-
-/* Filter controls */
-.filter-controls {
-  display: flex;
-  flex-wrap: wrap;
-  gap: 15px;
-  margin-bottom: 20px;
-  padding-bottom: 15px;
-  border-bottom: 1px solid #eee;
-}
-
-.filter-group {
-  display: flex;
-  align-items: center;
-  gap: 8px;
-}
-
-.filter-label {
-  font-weight: 500;
-  color: #333;
-  white-space: nowrap;
-}
-
-.filter-select {
-  padding: 8px;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 14px;
-}
-
-.search-input {
-  padding: 8px 12px;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 14px;
-  width: 300px;
-  transition: border-color 0.2s;
-}
-
-.search-input:focus {
-  border-color: #4a90e2;
-  outline: none;
-}
-
-/* Responsive adjustments */
-@media (max-width: 768px) {
-  .filter-controls {
-    flex-direction: column;
-    align-items: stretch;
-  }
-  
-  .filter-group {
-    flex-direction: column;
-    align-items: flex-start;
-  }
-  
-  .search-input {
-    width: 100%;
-  }
-  
-  .filter-select {
-    width: 100%;
-  }
-  
-  .complaint-detail-header {
-    flex-direction: column;
-  }
-  
-  .action-btn {
-    margin-top: 15px;
-  }
-  
-  .admin-actions {
-    flex-direction: column;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/components/complaints/ComplaintDetail.jsx b/frontend/src/components/complaints/ComplaintDetail.jsx
deleted file mode 100644
index 2e15e5a..0000000
--- a/frontend/src/components/complaints/ComplaintDetail.jsx
+++ /dev/null
@@ -1,150 +0,0 @@
-import React, { useState } from 'react';
-import complaintApi from '../../services/complaintApi';
-import '../complaints/ComplaintComponents.css';
-
-const formatDate = (dateString) => dateString ? new Date(dateString).toLocaleDateString() + ' ' + new Date(dateString).toLocaleTimeString() : 'N/A';
-
-const ComplaintDetail = ({ complaint, isAdmin = false, onUpdate, onClose }) => {
-  const [loading, setLoading] = useState(false);
-  const [error, setError] = useState('');
-  const [resolutionNotes, setResolutionNotes] = useState('');
-  const [isResolving, setIsResolving] = useState(false);
-
-  if (!complaint) {
-    return null;
-  }
-
-  const handleStatusChange = async (newStatus) => {
-    setLoading(true);
-    setError('');
-    try {
-      await complaintApi.updateStatus(complaint._id, newStatus);
-      if (onUpdate) onUpdate(); // Refresh data in parent
-    } catch (err) {
-      setError(err.response?.data?.message || 'Failed to update status');
-      console.error('Status update error:', err);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  const handleResolveSubmit = async (e) => {
-    e.preventDefault();
-    if (!resolutionNotes.trim()) {
-      setError('Resolution notes are required');
-      return;
-    }
-    
-    setLoading(true);
-    setError('');
-    try {
-      await complaintApi.addResolution(complaint._id, resolutionNotes);
-      await complaintApi.updateStatus(complaint._id, 'Resolved');
-      setIsResolving(false);
-      if (onUpdate) onUpdate(); // Refresh data in parent
-    } catch (err) {
-      setError(err.response?.data?.message || 'Failed to resolve complaint');
-      console.error('Resolution error:', err);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  return (
-    <div className="complaint-detail">
-      <div className="complaint-header">
-        <h3 className="complaint-title">{complaint.subject}</h3>
-        <button className="btn secondary" onClick={onClose}>Close</button>
-      </div>
-
-      <div className="complaint-meta">
-        <div>Status: <span className={`status ${complaint.status.toLowerCase().replace(' ', '-')}`}>{complaint.status}</span></div>
-        <div>Submitted: {formatDate(complaint.createdAt)}</div>
-        {isAdmin && complaint.user && <div>By: {complaint.user.name}</div>}
-      </div>
-
-      {error && <div className="form-error">{error}</div>}
-
-      <div>
-        <strong>Description:</strong>
-        <div className="complaint-description">{complaint.description}</div>
-      </div>
-
-      {complaint.resolutionNotes && (
-        <div className="resolution-notes">
-          <div className="resolution-header">Resolution:</div>
-          {complaint.resolutionNotes}
-        </div>
-      )}
-
-      {isAdmin && !isResolving && complaint.status !== 'Resolved' && complaint.status !== 'Closed' && (
-        <div className="complaint-actions">
-          {complaint.status === 'New' && (
-            <button 
-              className="btn primary" 
-              onClick={() => handleStatusChange('In Progress')}
-              disabled={loading}
-            >
-              Mark In Progress
-            </button>
-          )}
-          
-          <button 
-            className="btn primary" 
-            onClick={() => setIsResolving(true)}
-            disabled={loading}
-          >
-            Resolve Complaint
-          </button>
-        </div>
-      )}
-
-      {isAdmin && complaint.status === 'Resolved' && (
-        <div className="complaint-actions">
-          <button 
-            className="btn primary" 
-            onClick={() => handleStatusChange('Closed')}
-            disabled={loading}
-          >
-            Close Complaint
-          </button>
-        </div>
-      )}
-
-      {isResolving && (
-        <form className="resolution-form" onSubmit={handleResolveSubmit}>
-          <div className="form-group">
-            <label htmlFor="resolutionNotes">Resolution Notes</label>
-            <textarea
-              id="resolutionNotes"
-              value={resolutionNotes}
-              onChange={(e) => setResolutionNotes(e.target.value)}
-              disabled={loading}
-              required
-              placeholder="Describe how the complaint was resolved..."
-            ></textarea>
-          </div>
-          <div className="complaint-actions">
-            <button 
-              type="submit" 
-              className="btn primary"
-              disabled={loading}
-            >
-              {loading ? 'Saving...' : 'Submit Resolution'}
-            </button>
-            <button 
-              type="button" 
-              className="btn secondary"
-              onClick={() => setIsResolving(false)}
-              disabled={loading}
-            >
-              Cancel
-            </button>
-          </div>
-        </form>
-      )}
-    </div>
-  );
-};
-
-export default ComplaintDetail;
\ No newline at end of file
diff --git a/frontend/src/components/complaints/ComplaintForm.jsx b/frontend/src/components/complaints/ComplaintForm.jsx
deleted file mode 100644
index 4cca35c..0000000
--- a/frontend/src/components/complaints/ComplaintForm.jsx
+++ /dev/null
@@ -1,242 +0,0 @@
-import React, { useState, useEffect } from 'react';
-import complaintApi from '../../services/complaintApi';
-import { 
-  Box, 
-  TextField, 
-  Button, 
-  Typography, 
-  Alert, 
-  Paper, 
-  FormControl,
-  CircularProgress,
-  Snackbar,
-  Fade
-} from '@mui/material';
-import { useTheme } from '@mui/material/styles';
-
-/**
- * Component for submitting new complaints
- * Uses Material UI components for styling consistency with improved feedback
- */
-const ComplaintForm = ({ onSubmitSuccess }) => {
-  const theme = useTheme();
-  const [formData, setFormData] = useState({ subject: '', description: '' });
-  const [error, setError] = useState('');
-  const [successMessage, setSuccessMessage] = useState('');
-  const [loading, setLoading] = useState(false);
-  const [showSnackbar, setShowSnackbar] = useState(false);
-
-  // Clear success message after 5 seconds
-  useEffect(() => {
-    if (successMessage) {
-      setShowSnackbar(true);
-      const timer = setTimeout(() => {
-        setSuccessMessage('');
-      }, 5000);
-      return () => clearTimeout(timer);
-    }
-  }, [successMessage]);
-
-  const handleChange = (e) => {
-    setFormData({ ...formData, [e.target.name]: e.target.value });
-    setError(''); // Clear error on change
-  };
-
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    setError('');
-    setSuccessMessage('');
-    
-    // Form validation with more descriptive messages
-    if (!formData.subject.trim() || !formData.description.trim()) {
-      setError('Subject and description are required fields.');
-      return;
-    }
-    
-    if (formData.subject.trim().length < 5) {
-      setError('Subject must be at least 5 characters long for clarity.');
-      return;
-    }
-    
-    if (formData.description.trim().length < 20) {
-      setError('Description must be at least 20 characters long to provide enough detail for our team to address your concern.');
-      return;
-    }
-    
-    setLoading(true);
-    try {
-      await complaintApi.submitComplaint(formData);
-      setFormData({ subject: '', description: '' }); // Clear form
-      setSuccessMessage('Complaint submitted successfully! Our team will review it shortly.'); // More informative success message
-      if (onSubmitSuccess) onSubmitSuccess(); // Notify parent component
-    } catch (err) {
-      setError(err.response?.data?.message || 'Failed to submit complaint. Please try again later.');
-      console.error('Complaint submission error:', err);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  // Handle snackbar close
-  const handleSnackbarClose = (event, reason) => {
-    if (reason === 'clickaway') {
-      return;
-    }
-    setShowSnackbar(false);
-  };
-
-  return (
-    <Paper 
-      elevation={1} 
-      sx={{ 
-        mt: 2, 
-        p: 3, 
-        borderRadius: theme.shape.borderRadius,
-        boxShadow: theme.shadows[1],
-        transition: 'box-shadow 0.3s ease, transform 0.2s ease',
-        '&:hover': {
-          boxShadow: theme.shadows[3],
-          transform: 'translateY(-2px)'
-        }
-      }}
-      className="complaint-form"
-    >
-      <Typography 
-        variant="h5" 
-        component="h3" 
-        sx={{ 
-          mb: 2,
-          color: theme.palette.primary.main,
-          borderBottom: `1px solid ${theme.palette.divider}`,
-          paddingBottom: 1
-        }}
-      >
-        Submit a New Complaint
-      </Typography>
-      
-      {error && (
-        <Alert 
-          severity="error" 
-          sx={{ 
-            mb: 2,
-            animation: 'fadeIn 0.3s ease'
-          }}
-          onClose={() => setError('')}
-          variant="outlined"
-        >
-          {error}
-        </Alert>
-      )}
-      
-      <Box 
-        component="form" 
-        onSubmit={handleSubmit}
-        sx={{
-          '& .MuiTextField-root': { mb: 2 },
-          position: 'relative'
-        }}
-      >
-        <FormControl fullWidth margin="normal">
-          <TextField
-            id="subject"
-            name="subject"
-            label="Subject"
-            value={formData.subject}
-            onChange={handleChange}
-            inputProps={{ maxLength: 150 }}
-            required
-            disabled={loading}
-            placeholder="Brief title of your complaint"
-            helperText={`${formData.subject.length}/150 characters`}
-            FormHelperTextProps={{ sx: { textAlign: 'right' } }}
-            fullWidth
-            margin="normal"
-            variant="outlined"
-            error={!!error && error.includes('Subject')}
-            sx={{
-              '& .MuiOutlinedInput-root': {
-                '&:hover fieldset': {
-                  borderColor: theme.palette.primary.main,
-                },
-                '&.Mui-focused fieldset': {
-                  borderColor: theme.palette.primary.main,
-                }
-              },
-            }}
-          />
-        </FormControl>
-        
-        <FormControl fullWidth margin="normal">
-          <TextField
-            id="description"
-            name="description"
-            label="Description"
-            value={formData.description}
-            onChange={handleChange}
-            multiline
-            rows={5}
-            inputProps={{ maxLength: 2000 }}
-            required
-            disabled={loading}
-            placeholder="Please provide details about your complaint"
-            helperText={`${formData.description.length}/2000 characters`}
-            FormHelperTextProps={{ sx: { textAlign: 'right' } }}
-            fullWidth
-            margin="normal"
-            variant="outlined"
-            error={!!error && error.includes('Description')}
-            sx={{
-              '& .MuiOutlinedInput-root': {
-                '&:hover fieldset': {
-                  borderColor: theme.palette.primary.main,
-                },
-                '&.Mui-focused fieldset': {
-                  borderColor: theme.palette.primary.main,
-                }
-              },
-            }}
-          />
-        </FormControl>
-        
-        <Button 
-          type="submit" 
-          variant="contained" 
-          color="primary" 
-          disabled={loading}
-          sx={{ 
-            mt: 2,
-            position: 'relative',
-            minWidth: '150px',
-            fontWeight: theme.typography.fontWeightMedium,
-            transition: 'all 0.2s ease',
-            '&:not(:disabled):hover': {
-              transform: 'translateY(-2px)',
-              boxShadow: theme.shadows[4]
-            }
-          }}
-          startIcon={loading && <CircularProgress size={20} color="inherit" />}
-        >
-          {loading ? 'Submitting...' : 'Submit Complaint'}
-        </Button>
-      </Box>
-
-      {/* Success message as a snackbar for non-intrusive feedback */}
-      <Snackbar
-        open={showSnackbar && !!successMessage}
-        autoHideDuration={6000}
-        onClose={handleSnackbarClose}
-        TransitionComponent={Fade}
-        message={successMessage}
-        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
-        sx={{
-          '& .MuiSnackbarContent-root': {
-            backgroundColor: theme.palette.success.main,
-            color: '#fff'
-          }
-        }}
-      />
-    </Paper>
-  );
-};
-
-export default ComplaintForm;
\ No newline at end of file
diff --git a/frontend/src/components/complaints/ComplaintList.jsx b/frontend/src/components/complaints/ComplaintList.jsx
deleted file mode 100644
index 0bdb323..0000000
--- a/frontend/src/components/complaints/ComplaintList.jsx
+++ /dev/null
@@ -1,52 +0,0 @@
-import React from 'react';
-import '../complaints/ComplaintComponents.css';
-
-const formatDate = (dateString) => dateString ? new Date(dateString).toLocaleString() : 'N/A';
-
-const ComplaintList = ({ complaints = [], onSelectComplaint, isAdminView = false }) => {
-  if (complaints.length === 0) {
-    return <p className="no-data-message">No complaints found.</p>;
-  }
-
-  return (
-    <div className="complaints-list-container">
-      <table className="data-table">
-        <thead>
-          <tr>
-            <th>Subject</th>
-            <th>Status</th>
-            {isAdminView && <th>Submitted By</th>}
-            <th>Date Submitted</th>
-            <th>Last Updated</th>
-            <th>Action</th>
-          </tr>
-        </thead>
-        <tbody>
-          {complaints.map((complaint) => (
-            <tr key={complaint._id}>
-              <td>{complaint.subject}</td>
-              <td>
-                <span className={`status ${complaint.status.toLowerCase().replace(' ', '-')}`}>
-                  {complaint.status}
-                </span>
-              </td>
-              {isAdminView && <td>{complaint.user?.name || 'Unknown User'}</td>}
-              <td>{formatDate(complaint.createdAt)}</td>
-              <td>{formatDate(complaint.updatedAt)}</td>
-              <td>
-                <button 
-                  className="view-btn"
-                  onClick={() => onSelectComplaint(complaint._id)}
-                >
-                  View Details
-                </button>
-              </td>
-            </tr>
-          ))}
-        </tbody>
-      </table>
-    </div>
-  );
-};
-
-export default ComplaintList;
\ No newline at end of file
diff --git a/frontend/src/components/dashboard/Header.css b/frontend/src/components/dashboard/Header.css
deleted file mode 100644
index 56d161f..0000000
--- a/frontend/src/components/dashboard/Header.css
+++ /dev/null
@@ -1,264 +0,0 @@
-/* frontend/src/components/dashboard/Header.css */
-.dashboard-header {
-  display: flex;
-  justify-content: flex-end; /* Changed from space-between to flex-end to align everything to the right */
-  align-items: center;
-  width: 100%;
-  height: var(--header-height, 70px);
-  background-color: var(--bg-paper, white);
-  border-bottom: 1px solid var(--border-light, #e0e0e0);
-  padding: 0 var(--space-xl, 24px);
-  box-sizing: border-box;
-  position: sticky;
-  top: 0;
-  z-index: var(--z-index-sticky, 100);
-  box-shadow: var(--shadow-sm, 0 2px 4px rgba(0, 0, 0, 0.05));
-  animation: fadeIn var(--transition-speed-normal, 0.3s) var(--transition-ease, ease-in-out) forwards;
-}
-
-/* Left side with title */
-.header-left {
-  display: flex;
-  align-items: center;
-  margin-right: auto; /* Pushes the title to the left while allowing other content to be right aligned */
-  animation: slideRight var(--transition-speed-normal, 0.3s) var(--transition-ease, ease-in-out) forwards;
-  animation-delay: 0.1s;
-  opacity: 0;
-}
-
-.header-left h2 {
-  margin: 0;
-  font-size: var(--font-size-lg, 1.25rem);
-  font-weight: var(--font-weight-bold, 700);
-  color: var(--primary-color, #3E4B2E);
-  letter-spacing: -0.5px;
-  position: relative;
-}
-
-.header-left h2::after {
-  content: '';
-  position: absolute;
-  bottom: -4px;
-  left: 0;
-  width: 0;
-  height: 2px;
-  background-color: var(--primary-color, #3E4B2E);
-  transition: width var(--transition-speed-normal, 0.3s) var(--transition-ease, ease-in-out);
-}
-
-.header-left h2:hover::after {
-  width: 100%;
-}
-
-/* User actions container */
-.user-actions {
-  display: flex;
-  align-items: center;
-  justify-content: flex-end; /* Align items inside user-actions to the right */
-  background: var(--bg-paper, white);
-  border-radius: var(--border-radius-pill, 50px);
-  box-shadow: var(--shadow-sm, 0 2px 4px rgba(0, 0, 0, 0.05));
-  padding: var(--space-sm, 8px) var(--space-md, 16px);
-  gap: var(--space-md, 16px);
-  margin-left: var(--space-md, 16px);
-  transition: all var(--transition-speed-fast, 0.2s) var(--transition-ease, ease-in-out);
-}
-
-.user-actions:hover {
-  box-shadow: var(--shadow-md, 0 4px 8px rgba(0, 0, 0, 0.1));
-  transform: translateY(-2px);
-}
-
-/* User information styling */
-.user-info-modern {
-  display: flex;
-  flex-direction: column;
-  align-items: flex-end;
-  margin-right: 0;
-  line-height: 1.2;
-}
-
-.user-name {
-  font-weight: var(--font-weight-bold, 700);
-  color: var(--text-primary, #333);
-  font-size: var(--font-size-md, 1rem);
-  letter-spacing: -0.5px;
-}
-
-.user-role-modern {
-  font-size: var(--font-size-xs, 0.75rem);
-  color: var(--primary-light, #6a7b51);
-  font-weight: var(--font-weight-medium, 500);
-  text-transform: capitalize;
-}
-
-/* Divider between header elements */
-.header-divider {
-  width: 1px;
-  height: 32px;
-  background: var(--border-color, #e0e0e0);
-  margin: 0;
-  border-radius: 2px;
-  opacity: 0.7;
-}
-
-/* Header icon links (Help, Notifications) */
-.header-icon-link {
-  position: relative;
-  display: flex;
-  align-items: center;
-  justify-content: center;
-  color: var(--text-secondary, #666);
-  width: 36px;
-  height: 36px;
-  border-radius: 50%;
-  transition: all var(--transition-speed-fast, 0.2s) var(--transition-ease, ease-in-out);
-  text-decoration: none;
-}
-
-.header-icon-link:hover {
-  color: var(--primary-color, #3E4B2E);
-  background-color: rgba(62, 75, 46, 0.08);
-  transform: translateY(-2px);
-}
-
-/* Specific styling for notification container to ensure proper badge positioning */
-.notification-container {
-  position: relative;
-}
-
-.notification-container .notification-badge {
-  position: absolute;
-  top: -5px;
-  right: -5px;
-  z-index: 5;
-}
-
-/* Logout button */
-.logout-button-modern {
-  display: flex;
-  align-items: center;
-  gap: 8px;
-  padding: 8px var(--space-md, 16px);
-  background: #fff0f0;
-  color: var(--error-color, #dc3545);
-  border: none;
-  border-radius: var(--border-radius-md, 8px);
-  font-size: var(--font-size-sm, 0.875rem);
-  font-weight: var(--font-weight-bold, 700);
-  cursor: pointer;
-  box-shadow: 0 1px 4px rgba(220, 53, 69, 0.1);
-  transition: all var(--transition-speed-fast, 0.2s) var(--transition-ease, ease-in-out);
-}
-
-.logout-button-modern:hover {
-  background: #ffeaea;
-  color: #b71c1c;
-  box-shadow: 0 2px 8px rgba(220, 53, 69, 0.2);
-  transform: translateY(-2px);
-}
-
-.logout-icon {
-  font-size: 0.9rem;
-}
-
-/* Add responsive styles for small screens */
-@media screen and (max-width: 768px) {
-  .dashboard-header {
-    padding: 0 var(--space-md, 16px);
-  }
-  
-  .header-left h2 {
-    font-size: var(--font-size-md, 1rem);
-  }
-  
-  .user-actions {
-    padding: 6px var(--space-sm, 8px);
-    gap: var(--space-sm, 8px);
-    border-radius: var(--border-radius-lg, 12px);
-  }
-  
-  .user-info-modern {
-    display: none;
-  }
-  
-  .header-divider:first-of-type {
-    display: none;
-  }
-  
-  .header-divider {
-    height: 24px;
-    margin: 0 var(--space-xs, 4px);
-  }
-  
-  .logout-button-modern span {
-    display: none;
-  }
-  
-  .logout-button-modern {
-    padding: var(--space-xs, 4px);
-    width: 36px;
-    height: 36px;
-    display: flex;
-    align-items: center;
-    justify-content: center;
-    border-radius: 50%;
-  }
-  
-  .logout-icon {
-    margin: 0;
-  }
-}
-
-/* Even smaller screens */
-@media screen and (max-width: 480px) {
-  .dashboard-header {
-    padding: 0 var(--space-sm, 8px);
-  }
-  
-  .header-left h2 {
-    font-size: var(--font-size-sm, 0.875rem);
-  }
-  
-  .user-actions {
-    gap: var(--space-xs, 4px);
-  }
-  
-  .header-icon-link {
-    width: 32px;
-    height: 32px;
-  }
-}
-
-/* Header animations */
-@keyframes fadeIn {
-  from { opacity: 0; transform: translateY(-10px); }
-  to { opacity: 1; transform: translateY(0); }
-}
-
-@keyframes slideRight {
-  from { opacity: 0; transform: translateX(-20px); }
-  to { opacity: 1; transform: translateX(0); }
-}
-
-@keyframes slideLeft {
-  from { opacity: 0; transform: translateX(20px); }
-  to { opacity: 1; transform: translateX(0); }
-}
-
-@keyframes pulse {
-  0% {
-    transform: scale(1);
-    box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.4);
-  }
-  
-  70% {
-    transform: scale(1.1);
-    box-shadow: 0 0 0 10px rgba(220, 53, 69, 0);
-  }
-  
-  100% {
-    transform: scale(1);
-    box-shadow: 0 0 0 0 rgba(220, 53, 69, 0);
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/components/dashboard/Header.jsx b/frontend/src/components/dashboard/Header.jsx
deleted file mode 100644
index 4639878..0000000
--- a/frontend/src/components/dashboard/Header.jsx
+++ /dev/null
@@ -1,84 +0,0 @@
-// frontend/src/components/dashboard/Header.jsx
-import React from 'react';
-import { useAuth } from '../../contexts/AuthContext';
-import { useLocation, Link } from 'react-router-dom';
-import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
-import { faBell, faQuestionCircle } from "@fortawesome/free-solid-svg-icons";
-import { NotificationBadge } from '../ui/AnimatedComponents';
-import './Header.css';
-
-function Header() {
-  const { user, logout } = useAuth();
-  const location = useLocation();
-  
-  // Notification count (should come from backend in production)
-  const notificationCount = 3; // Updated to match the image
-  
-  // Format role name for display (e.g., "financial_manager" -> "Financial Manager")
-  const formatRoleName = (role) => {
-    if (!role) return 'Guest';
-    return role
-      .split('_')
-      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
-      .join(' ');
-  };
-  
-  // Get page title based on current path
-  const getPageTitle = () => {
-    // Remove leading and trailing slashes, then split path into segments
-    const pathSegments = location.pathname.replace(/^\/|\/$/g, '').split('/');
-    
-    // If we're at the dashboard root
-    if (pathSegments.length <= 1 || (pathSegments.length === 2 && pathSegments[1] === '')) {
-      return 'Dashboard';
-    }
-    
-    // Get the last segment of the path and format it
-    const lastSegment = pathSegments[pathSegments.length - 1];
-    // Convert kebab-case to Title Case (e.g., "financial-reports" -> "Financial Reports")
-    return lastSegment
-      .split('-')
-      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
-      .join(' ');
-  };
-
-  const handleLogout = () => {
-    if (logout) {
-      logout();
-    }
-  };
-
-  return (
-    <header className="dashboard-header">
-      <div className="header-left">
-        <h2>{getPageTitle()}</h2>
-      </div>
-      <div className="user-actions">
-        <div className="user-info-modern">
-          <span className="user-name">{user?.name || 'User'}</span>
-          <span className="user-role-modern">{formatRoleName(user?.role)}</span>
-        </div>
-        <div className="header-divider" />
-        {/* Help icon */}
-        <Link to="/dashboard/help" className="header-icon-link" title="Help & Support">
-          <FontAwesomeIcon icon={faQuestionCircle} size="lg" />
-        </Link>
-        {/* Notification icon with fixed positioning */}
-        <Link to="/dashboard/notifications" className="header-icon-link notification-container" title="Notifications">
-          <FontAwesomeIcon icon={faBell} size="lg" />
-          <NotificationBadge count={notificationCount} />
-        </Link>
-        <div className="header-divider" />
-        <button 
-          onClick={handleLogout} 
-          className="logout-button-modern"
-          aria-label="Logout from SmartBin"
-        >
-          Logout
-        </button>
-      </div>
-    </header>
-  );
-}
-
-export default Header;
\ No newline at end of file
diff --git a/frontend/src/components/dashboard/Sidebar.css b/frontend/src/components/dashboard/Sidebar.css
deleted file mode 100644
index f772b8a..0000000
--- a/frontend/src/components/dashboard/Sidebar.css
+++ /dev/null
@@ -1,303 +0,0 @@
-/* Google Fonts - Poppins */
-@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap");
-
-* {
-    margin: 0;
-    padding: 0;
-    box-sizing: border-box;
-    font-family: "Poppins", sans-serif;
-}
-
-body {
-    min-height: 100%;
-    background: #f8f9fa;
-}
-
-/* Clean, minimalist sidebar inspired by modern UI/UX research */
-.sidebar {
-  position: fixed;
-  left: 0;
-  top: 0;
-  height: 100vh;
-  width: 260px;
-  background-color: #ffffff;
-  box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
-  display: flex;
-  flex-direction: column;
-  transition: width 0.3s ease;
-  z-index: 1000;
-  font-family: "Poppins", sans-serif;
-  overflow-y: auto;
-}
-
-.sidebar.collapsed {
-  width: 72px;
-}
-
-.sidebar::-webkit-scrollbar {
-  width: 4px;
-}
-
-.sidebar::-webkit-scrollbar-track {
-  background: transparent;
-}
-
-.sidebar::-webkit-scrollbar-thumb {
-  background: #e0e0e0;
-  border-radius: 10px;
-}
-
-/* HEADER */
-.sidebar-header {
-  display: flex;
-  align-items: center;
-  justify-content: space-between;
-  height: 70px;
-  padding: 0 20px;
-  border-bottom: 1px solid #f0f0f0;
-}
-
-.brand {
-  display: flex;
-  align-items: center;
-  gap: 10px;
-}
-
-.brand-icon {
-  color: #4CAF50;
-  font-size: 24px;
-}
-
-.brand-name {
-  font-size: 20px;
-  font-weight: 600;
-  color: #4CAF50;
-}
-
-.toggle-button {
-  background: transparent;
-  border: none;
-  color: #888;
-  font-size: 16px;
-  cursor: pointer;
-  width: 32px;
-  height: 32px;
-  border-radius: 4px;
-  display: flex;
-  align-items: center;
-  justify-content: center;
-}
-
-.toggle-button:hover {
-  color: #4CAF50;
-  background: rgba(76, 175, 80, 0.08);
-}
-
-/* USER PROFILE */
-.user-profile {
-  display: flex;
-  align-items: center;
-  padding: 20px;
-  gap: 12px;
-  border-bottom: 1px solid #f0f0f0;
-}
-
-.avatar {
-  width: 40px;
-  height: 40px;
-  border-radius: 50%;
-  background: #e8f5e9;
-  display: flex;
-  align-items: center;
-  justify-content: center;
-  font-size: 18px;
-  font-weight: 500;
-  color: #4CAF50;
-}
-
-.user-info {
-  display: flex;
-  flex-direction: column;
-}
-
-.user-info .name {
-  font-size: 14px;
-  font-weight: 600;
-  margin: 0;
-  color: #333;
-}
-
-.user-info .role {
-  font-size: 12px;
-  color: #888;
-  margin: 0;
-  text-transform: capitalize;
-}
-
-/* NOTIFICATIONS */
-.notifications-link {
-  display: flex;
-  align-items: center;
-  gap: 12px;
-  padding: 10px 20px;
-  text-decoration: none;
-  color: #888;
-  position: relative;
-  border-bottom: 1px solid #f0f0f0;
-}
-
-.notifications-link:hover {
-  background-color: rgba(76, 175, 80, 0.08);
-  color: #4CAF50;
-}
-
-.badge {
-  position: absolute;
-  top: 8px;
-  left: 30px;
-  background: #FF5722;
-  color: white;
-  font-size: 10px;
-  font-weight: 600;
-  height: 16px;
-  width: 16px;
-  border-radius: 50%;
-  display: flex;
-  align-items: center;
-  justify-content: center;
-}
-
-.sidebar.collapsed .badge {
-  left: 40px;
-}
-
-.notification-label {
-  font-size: 13px;
-  color: #333;
-}
-
-/* NAVIGATION */
-.navigation {
-  flex: 1;
-  padding: 20px 0;
-  overflow-y: auto;
-}
-
-.navigation::-webkit-scrollbar {
-  width: 4px;
-}
-
-.navigation::-webkit-scrollbar-track {
-  background: transparent;
-}
-
-.navigation::-webkit-scrollbar-thumb {
-  background: #e0e0e0;
-  border-radius: 10px;
-}
-
-.nav-section {
-  margin-bottom: 20px;
-}
-
-.section-title {
-  font-size: 11px;
-  font-weight: 600;
-  color: #888;
-  padding: 0 20px;
-  margin: 0 0 8px;
-  letter-spacing: 0.5px;
-}
-
-.nav-items {
-  list-style: none;
-  padding: 0;
-  margin: 0;
-}
-
-.nav-item {
-  margin: 2px 0;
-}
-
-.nav-item a {
-  display: flex;
-  align-items: center;
-  gap: 12px;
-  padding: 10px 20px;
-  color: #555;
-  text-decoration: none;
-  transition: all 0.2s ease;
-  border-left: 3px solid transparent;
-}
-
-.sidebar.collapsed .nav-item a {
-  padding: 10px 0;
-  justify-content: center;
-}
-
-.nav-item a:hover {
-  background-color: rgba(76, 175, 80, 0.08);
-  color: #4CAF50;
-}
-
-.nav-item a.active {
-  background-color: #e8f5e9;
-  color: #4CAF50;
-  border-left: 3px solid #4CAF50;
-}
-
-.sidebar.collapsed .nav-item a.active {
-  border-left: none;
-  border-right: 3px solid #4CAF50;
-}
-
-.nav-item svg {
-  font-size: 18px;
-  width: 18px;
-}
-
-/* FOOTER */
-.sidebar-footer {
-  padding: 15px 20px;
-  border-top: 1px solid #f0f0f0;
-}
-
-.logout-button {
-  display: flex;
-  align-items: center;
-  justify-content: center;
-  gap: 10px;
-  width: 100%;
-  padding: 10px 0;
-  background-color: #ffebee;
-  color: #f44336;
-  border: none;
-  border-radius: 6px;
-  font-size: 14px;
-  font-weight: 500;
-  cursor: pointer;
-  transition: all 0.2s ease;
-  margin-bottom: 15px;
-}
-
-.logout-button:hover {
-  background-color: #ffcdd2;
-}
-
-.social-links {
-  display: flex;
-  justify-content: center;
-  gap: 15px;
-  margin-top: 15px;
-}
-
-.social-links a {
-  color: #888;
-  font-size: 16px;
-  transition: all 0.2s ease;
-}
-
-social-links a:hover {
-  color: #4CAF50;
-  transform: translateY(-2px);
-}
diff --git a/frontend/src/components/dashboard/Sidebar.jsx b/frontend/src/components/dashboard/Sidebar.jsx
deleted file mode 100644
index f030662..0000000
--- a/frontend/src/components/dashboard/Sidebar.jsx
+++ /dev/null
@@ -1,259 +0,0 @@
-// frontend/src/components/dashboard/Sidebar.jsx
-import React, { useState, useCallback } from 'react';
-import { Link, useLocation } from 'react-router-dom';
-import { useAuth } from '../../contexts/AuthContext';
-import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
-import { library } from '@fortawesome/fontawesome-svg-core';
-import { 
-  faFacebook, 
-  faInstagram, 
-  faTwitter
-} from "@fortawesome/free-brands-svg-icons";
-
-import {
-  faGaugeHigh,
-  faUser,
-  faFileLines,
-  faMoneyBillTransfer,
-  faCreditCard,
-  faMoneyBill,
-  faTruck,
-  faRecycle,
-  faCalendarDays,
-  faScroll,
-  faFileSignature,
-  faUsers,
-  faChartLine,
-  faCog,
-  faClipboardList,
-  faListCheck,
-  faTrophy,
-  faBars,
-  faBell,
-  faSignOutAlt,
-  faBuilding,
-  faServer // Add an icon for system logs
-} from "@fortawesome/free-solid-svg-icons";
-import { NotificationBadge } from '../ui/AnimatedComponents';
-
-library.add(
-  faFacebook, 
-  faInstagram, 
-  faTwitter,
-  faGaugeHigh,
-  faUser,
-  faFileLines,
-  faMoneyBillTransfer,
-  faCreditCard,
-  faMoneyBill,
-  faTruck,
-  faRecycle,
-  faCalendarDays,
-  faScroll,
-  faFileSignature,
-  faUsers,
-  faChartLine,
-  faCog,
-  faClipboardList,
-  faListCheck,
-  faTrophy,
-  faBars,
-  faBell,
-  faSignOutAlt,
-  faBuilding,
-  faServer
-);
-
-import './Sidebar.css';
-
-function Sidebar() {
-  const { user, logout } = useAuth();
-  const location = useLocation();
-  const [collapsed, setCollapsed] = useState(false);
-  
-  // Get first letter of name for avatar
-  const getInitials = (name) => {
-    return name ? name.charAt(0).toUpperCase() : 'U';
-  };
-  
-  // Format role name for display (e.g., "financial_manager" -> "Financial Manager")
-  const formatRoleName = (role) => {
-    if (!role) return 'User';
-    return role
-      .split('_')
-      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
-      .join(' ');
-  };
-
-  // Improved active path checking to handle nested routes
-  const isActivePath = useCallback((path) => {
-    // Exact match
-    if (location.pathname === path) return true;
-    
-    // Special case for dashboard home
-    if (path === '/dashboard' && location.pathname !== '/dashboard') {
-      return false;
-    }
-    
-    // Check if current path starts with the navigation item path (for nested routes)
-    return path !== '/dashboard' && location.pathname.startsWith(path);
-  }, [location.pathname]);
-  
-  // Define navigation items by role
-  const getNavItems = () => {
-    const roleSpecificItems = {
-      financial_manager: [
-        { section: 'MAIN', items: [
-          { path: '/dashboard', label: 'Dashboard', icon: faGaugeHigh },
-          { path: '/dashboard/profile', label: 'My Profile', icon: faUser },
-        ]},
-        { section: 'FINANCE', items: [
-          { path: '/dashboard/financial-overview', label: 'Financial Dashboard', icon: faChartLine },
-          { path: '/dashboard/subscription-plans', label: 'Subscription Plans', icon: faFileLines },
-          { path: '/dashboard/budget-allocation', label: 'Budget Allocation', icon: faMoneyBillTransfer },
-          { path: '/dashboard/payments', label: 'Payments', icon: faCreditCard },
-          { path: '/dashboard/financial-reports', label: 'Financial Reports', icon: faScroll },
-        ]},
-        { section: 'STAFF', items: [
-          { path: '/dashboard/payroll', label: 'Payroll Management', icon: faMoneyBill },
-        ]},
-      ],
-      customer: [
-        { section: 'MAIN', items: [
-          { path: '/dashboard', label: 'Dashboard', icon: faGaugeHigh },
-          { path: '/dashboard/profile', label: 'My Profile', icon: faUser },
-        ]},
-        { section: 'SERVICES', items: [
-          { path: '/dashboard/pickup-requests', label: 'Pickup Requests', icon: faTruck },
-          { path: '/dashboard/available-garbage', label: 'Available Garbage', icon: faRecycle },
-        ]},
-        { section: 'HISTORY', items: [
-          { path: '/dashboard/collection-history', label: 'Collection History', icon: faCalendarDays },
-          { path: '/dashboard/financial-history', label: 'Financial History', icon: faMoneyBill },
-          { path: '/dashboard/purchase-history', label: 'Purchase History', icon: faScroll },
-        ]},
-        { section: 'SUPPORT', items: [
-          { path: '/dashboard/complaints', label: 'Complaints', icon: faFileSignature },
-        ]},
-      ],
-      admin: [
-        { section: 'MAIN', items: [
-          { path: '/dashboard', label: 'Dashboard', icon: faGaugeHigh },
-          { path: '/dashboard/profile', label: 'My Profile', icon: faUser },
-        ]},
-        { section: 'ADMINISTRATION', items: [
-          { path: '/dashboard/users', label: 'User Management', icon: faUsers },
-          { path: '/dashboard/statistics', label: 'Statistics', icon: faChartLine },
-          { path: '/dashboard/complaints', label: 'Manage Complaints', icon: faFileSignature },
-          { path: '/dashboard/attendance-reports', label: 'Attendance Reports', icon: faClipboardList },
-          { path: '/dashboard/performance-reports', label: 'Performance Reports', icon: faTrophy },
-          { path: '/dashboard/settings', label: 'System Settings', icon: faCog },
-        ]},
-      ],
-      staff: [
-        { section: 'MAIN', items: [
-          { path: '/dashboard', label: 'Dashboard', icon: faGaugeHigh },
-          { path: '/dashboard/profile', label: 'My Profile', icon: faUser },
-        ]},
-        { section: 'MY WORK', items: [
-          { path: '/dashboard/attendance', label: 'Attendance', icon: faClipboardList },
-          { path: '/dashboard/tasks', label: 'Tasks', icon: faListCheck },
-          { path: '/dashboard/my-payslips', label: 'My Payslips', icon: faMoneyBill },
-          { path: '/dashboard/performance', label: 'Performance', icon: faTrophy },
-        ]},
-        { section: 'SUPPORT', items: [
-          { path: '/dashboard/complaints', label: 'Complaints', icon: faFileSignature },
-        ]},
-      ]
-    };
-
-    // Default to financial_manager if role not found or undefined
-    return roleSpecificItems[user?.role || 'financial_manager'] || roleSpecificItems.financial_manager;
-  };
-
-  const handleLogout = () => {
-    if (logout) {
-      logout();
-    }
-  };
-
-  const navItems = getNavItems();
-
-  return (
-    <aside className={`sidebar ${collapsed ? 'collapsed' : ''}`}>
-      <div className="sidebar-header">
-        {!collapsed && (
-          <Link to="/" className="brand-link"> {/* Changed Link destination to / */}
-            <div className="brand">
-              <FontAwesomeIcon icon={faRecycle} className="brand-icon" />
-              <span className="brand-name">SmartBin</span>
-            </div>
-          </Link>
-        )}
-        <button 
-          className="toggle-button" 
-          onClick={() => setCollapsed(!collapsed)}
-          aria-label={collapsed ? "Expand sidebar" : "Collapse sidebar"}
-          title={collapsed ? "Expand sidebar" : "Collapse sidebar"}
-        >
-          <FontAwesomeIcon icon={faBars} />
-        </button>
-      </div>
-      
-      {user && (
-        <div className="user-profile">
-          <div className="avatar" title={user?.name || 'User'}>
-            {getInitials(user?.name)}
-          </div>
-          {!collapsed && (
-            <div className="user-info">
-              <h3 className="name">{user?.name || 'User'}</h3>
-              <p className="role">{formatRoleName(user?.role)}</p>
-            </div>
-          )}
-        </div>
-      )}
-
-      <nav className="navigation">
-        {navItems.map((section, idx) => (
-          <div key={idx} className="nav-section">
-            {!collapsed && <h3 className="section-title">{section.section}</h3>}
-            <ul className="nav-items">
-              {section.items.map((item) => (
-                <li key={item.path} className="nav-item">
-                  <Link 
-                    to={item.path}
-                    className={isActivePath(item.path) ? 'active' : ''}
-                    title={collapsed ? item.label : undefined}
-                  >
-                    <FontAwesomeIcon icon={item.icon} />
-                    {!collapsed && <span>{item.label}</span>}
-                  </Link>
-                </li>
-              ))}
-            </ul>
-          </div>
-        ))}
-      </nav>
-      
-      <div className="sidebar-footer">
-        <button className="logout-button" onClick={handleLogout} title="Logout">
-          <FontAwesomeIcon icon={faSignOutAlt} />
-          {!collapsed && <span>Logout</span>}
-        </button>
-        
-        {!collapsed && (
-          <div className="social-links">
-            <a href="#" aria-label="Facebook" title="Facebook"><FontAwesomeIcon icon={faFacebook} /></a>
-            <a href="#" aria-label="Instagram" title="Instagram"><FontAwesomeIcon icon={faInstagram} /></a>
-            <a href="#" aria-label="Twitter" title="Twitter"><FontAwesomeIcon icon={faTwitter} /></a>
-          </div>
-        )}
-      </div>
-    </aside>
-  );
-}
-
-export default Sidebar;
-
-
diff --git a/frontend/src/components/financial/ComplaintFormMUI.jsx b/frontend/src/components/financial/ComplaintFormMUI.jsx
deleted file mode 100644
index c7b6471..0000000
--- a/frontend/src/components/financial/ComplaintFormMUI.jsx
+++ /dev/null
@@ -1,141 +0,0 @@
-import React, { useState } from 'react';
-import complaintApi from '../../services/complaintApi';
-// Import MUI components
-import TextField from '@mui/material/TextField';
-import Button from '@mui/material/Button';
-import Box from '@mui/material/Box';
-import Typography from '@mui/material/Typography';
-import Alert from '@mui/material/Alert';
-import CircularProgress from '@mui/material/CircularProgress';
-import Paper from '@mui/material/Paper';
-import { createTheme, ThemeProvider } from '@mui/material/styles';
-
-// Custom theme that matches SmartBin's color scheme
-const smartBinTheme = createTheme({
-  palette: {
-    primary: {
-      main: '#3e4b2e', // SmartBin primary green
-      contrastText: '#fff',
-    },
-    secondary: {
-      main: '#5e6472', // SmartBin secondary color
-    },
-    error: {
-      main: '#dc3545', // Bootstrap danger red for consistency
-    },
-  },
-  typography: {
-    fontFamily: [
-      'Roboto',
-      'Arial',
-      'sans-serif'
-    ].join(','),
-    h6: {
-      fontWeight: 500,
-    }
-  },
-  components: {
-    MuiButton: {
-      styleOverrides: {
-        root: {
-          textTransform: 'none', // Avoid ALL CAPS buttons
-          borderRadius: 4,
-        },
-      },
-    },
-  },
-});
-
-/**
- * Complaint Form Component using Material UI
- * This serves as an example of converting existing components to MUI
- */
-const ComplaintFormMUI = ({ onSubmitSuccess }) => {
-  const [formData, setFormData] = useState({ subject: '', description: '' });
-  const [error, setError] = useState('');
-  const [loading, setLoading] = useState(false);
-
-  const handleChange = (e) => {
-    setFormData({ ...formData, [e.target.name]: e.target.value });
-    setError('');
-  };
-
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    setError('');
-    if (!formData.subject.trim() || !formData.description.trim()) {
-      setError('Subject and description are required.');
-      return;
-    }
-    setLoading(true);
-    try {
-      await complaintApi.submitComplaint(formData);
-      setFormData({ subject: '', description: '' });
-      if (onSubmitSuccess) onSubmitSuccess();
-    } catch (err) {
-      setError(err.response?.data?.message || 'Failed to submit complaint.');
-      console.error('Complaint submission error:', err);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  return (
-    <ThemeProvider theme={smartBinTheme}>
-      <Paper elevation={2} sx={{ p: 3, borderRadius: 2 }}>
-        <Typography variant="h6" gutterBottom>
-          Submit a New Complaint
-        </Typography>
-        
-        {error && (
-          <Alert severity="error" sx={{ mb: 2 }}>
-            {error}
-          </Alert>
-        )}
-        
-        <Box component="form" onSubmit={handleSubmit} sx={{ mt: 1 }}>
-          <TextField
-            margin="normal"
-            required
-            fullWidth
-            id="subject"
-            label="Subject"
-            name="subject"
-            value={formData.subject}
-            onChange={handleChange}
-            disabled={loading}
-            inputProps={{ maxLength: 150 }}
-          />
-          
-          <TextField
-            margin="normal"
-            required
-            fullWidth
-            id="description"
-            label="Description"
-            name="description"
-            multiline
-            rows={4}
-            value={formData.description}
-            onChange={handleChange}
-            disabled={loading}
-            inputProps={{ maxLength: 2000 }}
-            sx={{ mb: 2 }}
-          />
-          
-          <Button
-            type="submit"
-            fullWidth
-            variant="contained"
-            disabled={loading}
-            sx={{ mt: 1, py: 1 }}
-          >
-            {loading ? <CircularProgress size={24} /> : 'Submit Complaint'}
-          </Button>
-        </Box>
-      </Paper>
-    </ThemeProvider>
-  );
-};
-
-export default ComplaintFormMUI;
\ No newline at end of file
diff --git a/frontend/src/components/financial/CustomerSubscriptionPlans.css b/frontend/src/components/financial/CustomerSubscriptionPlans.css
deleted file mode 100644
index 266f6f6..0000000
--- a/frontend/src/components/financial/CustomerSubscriptionPlans.css
+++ /dev/null
@@ -1,202 +0,0 @@
-.customer-subscription-container {
-  padding: 20px;
-  font-family: Arial, sans-serif;
-}
-
-.customer-subscription-container h2 {
-  color: #2c3e50;
-  font-size: 28px;
-  margin-bottom: 24px;
-  text-align: center;
-}
-
-.customer-subscription-container h3 {
-  color: #34495e;
-  font-size: 22px;
-  margin: 20px 0;
-  padding-bottom: 10px;
-  border-bottom: 1px solid #ecf0f1;
-}
-
-.error-message {
-  background-color: #fadbd8;
-  color: #c0392b;
-  padding: 15px;
-  border-radius: 4px;
-  margin-bottom: 20px;
-  border-left: 5px solid #e74c3c;
-}
-
-.loading {
-  text-align: center;
-  padding: 40px;
-  color: #7f8c8d;
-  font-size: 18px;
-}
-
-.current-subscription {
-  margin-bottom: 40px;
-}
-
-.subscription-card {
-  background-color: #ffffff;
-  border-radius: 8px;
-  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
-  padding: 24px;
-  display: flex;
-  flex-direction: column;
-}
-
-.subscription-card.active {
-  border-left: 5px solid #27ae60;
-}
-
-.subscription-details {
-  margin: 20px 0;
-}
-
-.subscription-details p {
-  margin: 8px 0;
-  color: #34495e;
-  line-height: 1.5;
-}
-
-.subscription-actions {
-  margin-top: 16px;
-}
-
-.manage-btn {
-  background-color: #3498db;
-  color: white;
-  border: none;
-  padding: 10px 16px;
-  border-radius: 4px;
-  cursor: pointer;
-  font-size: 16px;
-  transition: background-color 0.3s;
-}
-
-.manage-btn:hover {
-  background-color: #2980b9;
-}
-
-.available-plans {
-  margin-top: 40px;
-}
-
-.no-plans {
-  text-align: center;
-  color: #7f8c8d;
-  padding: 30px;
-  font-style: italic;
-  background-color: #f9f9f9;
-  border-radius: 8px;
-  margin: 20px 0;
-}
-
-.plans-grid {
-  display: grid;
-  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
-  gap: 25px;
-  margin: 30px 0;
-}
-
-.plan-card {
-  background-color: #ffffff;
-  border-radius: 8px;
-  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
-  padding: 24px;
-  display: flex;
-  flex-direction: column;
-  transition: transform 0.3s, box-shadow 0.3s;
-  min-height: 350px;
-}
-
-.plan-card:hover {
-  transform: translateY(-10px);
-  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
-}
-
-.plan-header {
-  margin-bottom: 20px;
-  border-bottom: 1px solid #ecf0f1;
-  padding-bottom: 15px;
-}
-
-.plan-name {
-  font-size: 22px;
-  font-weight: 600;
-  color: #2c3e50;
-  margin: 0 0 10px 0;
-}
-
-.plan-price {
-  font-size: 24px;
-  color: #27ae60;
-  margin: 12px 0;
-  font-weight: 700;
-}
-
-.plan-price .amount {
-  font-size: 26px;
-}
-
-.plan-price .period {
-  font-size: 16px;
-  color: #7f8c8d;
-  font-weight: normal;
-}
-
-.plan-description {
-  color: #7f8c8d;
-  margin-bottom: 20px;
-  line-height: 1.5;
-  flex-grow: 1;
-}
-
-.plan-features {
-  list-style-type: none;
-  padding: 0;
-  margin-bottom: 24px;
-}
-
-.plan-features li {
-  padding: 8px 0;
-  color: #34495e;
-}
-
-.plan-features li:before {
-  content: "✓ ";
-  color: #27ae60;
-  font-weight: bold;
-  margin-right: 8px;
-}
-
-.subscribe-btn {
-  width: 100%;
-  padding: 12px;
-  background-color: #27ae60;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  font-size: 16px;
-  font-weight: 500;
-  cursor: pointer;
-  transition: background-color 0.3s ease;
-  margin-top: auto;
-}
-
-.subscribe-btn:hover {
-  background-color: #219653;
-}
-
-.subscribe-btn:disabled {
-  background-color: #95a5a6;
-  cursor: not-allowed;
-}
-
-@media (max-width: 768px) {
-  .plans-grid {
-    grid-template-columns: 1fr;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/components/financial/CustomerSubscriptionPlans.jsx b/frontend/src/components/financial/CustomerSubscriptionPlans.jsx
deleted file mode 100644
index 9da6b20..0000000
--- a/frontend/src/components/financial/CustomerSubscriptionPlans.jsx
+++ /dev/null
@@ -1,223 +0,0 @@
-import React, { useState, useEffect, useCallback } from 'react';
-import { useAuth } from '../../contexts/AuthContext';
-import './SubscriptionPlans.css';
-import SubscribeModal from './SubscribeModal';
-import api from '../../services/api';
-
-/**
- * CustomerSubscriptionPlans component
- * Displays available subscription plans and allows customers to subscribe
- */
-const CustomerSubscriptionPlans = () => {
-  const [plans, setPlans] = useState([]);
-  const [userSubscription, setUserSubscription] = useState(null);
-  const [selectedPlan, setSelectedPlan] = useState(null);
-  const [showSubscribeModal, setShowSubscribeModal] = useState(false);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState('');
-  const [success, setSuccess] = useState('');
-  const { user } = useAuth();
-
-  // Fetch subscription plans and user's current subscription
-  const fetchData = useCallback(async () => {
-    setLoading(true);
-    setError('');
-    
-    try {
-      // Get all active plans
-      const plansResponse = await api.get('/subscription-plans?status=active');
-      setPlans(plansResponse.data || []);
-      
-      // Get user's current subscription if logged in
-      if (user?._id) {
-        const userSubscriptionResponse = await api.get(`/user-subscriptions/my-subscription`);
-        setUserSubscription(userSubscriptionResponse.data || null);
-      }
-    } catch (err) {
-      console.error('Error fetching subscription data:', err);
-      setError(err.response?.data?.message || 'Failed to load subscription data. Please try again later.');
-    } finally {
-      setLoading(false);
-    }
-  }, [user?._id]);
-
-  useEffect(() => {
-    fetchData();
-  }, [fetchData]);
-
-  // Open subscription modal with the selected plan
-  const handleSubscribe = (plan) => {
-    setSelectedPlan(plan);
-    setShowSubscribeModal(true);
-  };
-
-  // Handle subscription success
-  const handleSubscriptionSuccess = (subscription) => {
-    setShowSubscribeModal(false);
-    setSuccess(`Successfully subscribed to ${subscription.plan?.name || 'the plan'}!`);
-    
-    // Refresh data to show updated subscription
-    fetchData();
-    
-    // Clear success message after 5 seconds
-    setTimeout(() => {
-      setSuccess('');
-    }, 5000);
-  };
-
-  // Format price with currency symbol
-  const formatPrice = (price) => {
-    if (price === undefined || price === null) return 'N/A';
-    
-    return new Intl.NumberFormat('en-US', {
-      style: 'currency',
-      currency: 'USD',
-    }).format(price);
-  };
-
-  // Check if a plan is the user's current plan
-  const isCurrentPlan = (planId) => {
-    return userSubscription?.plan?._id === planId || userSubscription?.subscriptionPlan?._id === planId;
-  };
-
-  // Format date to a user-friendly string
-  const formatDate = (dateString) => {
-    if (!dateString) return 'N/A';
-    
-    return new Date(dateString).toLocaleDateString('en-US', {
-      year: 'numeric',
-      month: 'long',
-      day: 'numeric'
-    });
-  };
-
-  // Get time remaining on current subscription
-  const getTimeRemaining = () => {
-    if (!userSubscription?.endDate) return null;
-    
-    const endDate = new Date(userSubscription.endDate);
-    const now = new Date();
-    
-    if (endDate <= now) return 'Expired';
-    
-    const daysRemaining = Math.ceil((endDate - now) / (1000 * 60 * 60 * 24));
-    return `${daysRemaining} day${daysRemaining !== 1 ? 's' : ''}`;
-  };
-
-  return (
-    <div className="customer-subscription-container">
-      <h2>Subscription Plans</h2>
-      
-      {/* Error Message */}
-      {error && (
-        <div className="error-message">
-          <p>{error}</p>
-          <button onClick={() => fetchData()}>Try Again</button>
-        </div>
-      )}
-      
-      {/* Success Message */}
-      {success && (
-        <div className="success-message">
-          <p>{success}</p>
-          <button className="message-close" onClick={() => setSuccess('')} aria-label="Close">
-            &times;
-          </button>
-        </div>
-      )}
-      
-      {/* Current Subscription */}
-      {userSubscription && (
-        <div className="current-subscription">
-          <h3>Your Current Subscription</h3>
-          <div className="subscription-details">
-            <div className="subscription-item">
-              <span className="label">Plan:</span>
-              <span className="value">{userSubscription.plan?.name || userSubscription.subscriptionPlan?.name || 'Unknown Plan'}</span>
-            </div>
-            <div className="subscription-item">
-              <span className="label">Price:</span>
-              <span className="value">
-                {formatPrice(userSubscription.plan?.price || userSubscription.subscriptionPlan?.price)} / {userSubscription.plan?.duration?.toLowerCase() || userSubscription.subscriptionPlan?.duration?.toLowerCase() || 'month'}
-              </span>
-            </div>
-            <div className="subscription-item">
-              <span className="label">Start Date:</span>
-              <span className="value">{formatDate(userSubscription.startDate)}</span>
-            </div>
-            <div className="subscription-item">
-              <span className="label">End Date:</span>
-              <span className="value">{formatDate(userSubscription.endDate)}</span>
-            </div>
-            <div className="subscription-item highlight">
-              <span className="label">Time Remaining:</span>
-              <span className="value">{getTimeRemaining()}</span>
-            </div>
-            <div className="subscription-item">
-              <span className="label">Status:</span>
-              <span className={`value status-${userSubscription.status?.toLowerCase() || 'inactive'}`}>
-                {userSubscription.status ? (userSubscription.status.charAt(0).toUpperCase() + userSubscription.status.slice(1)) : 'Inactive'}
-              </span>
-            </div>
-          </div>
-        </div>
-      )}
-      
-      {/* Available Plans */}
-      <div className="available-plans">
-        <h3>Available Plans</h3>
-        {loading ? (
-          <div className="loading-indicator">Loading subscription plans...</div>
-        ) : plans.length === 0 ? (
-          <div className="no-plans-message">No subscription plans are currently available.</div>
-        ) : (
-          <div className="plans-grid">
-            {plans.map((plan) => (
-              <div 
-                key={plan._id} 
-                className={`plan-card ${isCurrentPlan(plan._id) ? 'current-plan' : ''}`}
-              >
-                <div className="plan-header">
-                  <h4>{plan.name}</h4>
-                  {isCurrentPlan(plan._id) && <span className="current-badge">Current Plan</span>}
-                </div>
-                <div className="plan-price">
-                  <span className="amount">{formatPrice(plan.price)}</span>
-                  <span className="period">/ {plan.duration.toLowerCase()}</span>
-                </div>
-                <div className="plan-description">
-                  {plan.description || 'No description available.'}
-                </div>
-                {plan.features && plan.features.length > 0 && (
-                  <ul className="plan-features">
-                    {plan.features.map((feature, index) => (
-                      <li key={index}>✓ {feature}</li>
-                    ))}
-                  </ul>
-                )}
-                <button 
-                  className="btn subscribe-btn" 
-                  onClick={() => handleSubscribe(plan)}
-                  disabled={isCurrentPlan(plan._id)}
-                >
-                  {isCurrentPlan(plan._id) ? 'Current Plan' : 'Select Plan'}
-                </button>
-              </div>
-            ))}
-          </div>
-        )}
-      </div>
-      
-      {/* Subscribe Modal */}
-      {showSubscribeModal && selectedPlan && (
-        <SubscribeModal 
-          plan={selectedPlan} 
-          onClose={() => setShowSubscribeModal(false)} 
-          onSuccess={handleSubscriptionSuccess}
-        />
-      )}
-    </div>
-  );
-};
-
-export default CustomerSubscriptionPlans;
\ No newline at end of file
diff --git a/frontend/src/components/financial/FinancialDashboard.css b/frontend/src/components/financial/FinancialDashboard.css
deleted file mode 100644
index 7a5b7b6..0000000
--- a/frontend/src/components/financial/FinancialDashboard.css
+++ /dev/null
@@ -1,395 +0,0 @@
-.financial-dashboard {
-    padding: 20px;
-    background-color: #f5f7fa;
-    border-radius: 8px;
-    color: #333;
-}
-
-.dashboard-header {
-    display: flex;
-    justify-content: space-between;
-    align-items: center;
-    margin-bottom: 20px;
-}
-
-.dashboard-header h2 {
-    margin: 0;
-    font-size: 1.8rem;
-    color: #2c3e50;
-}
-
-.dashboard-controls {
-    display: flex;
-    gap: 15px;
-    align-items: center;
-}
-
-.date-range-selector {
-    display: flex;
-    align-items: center;
-    gap: 10px;
-    position: relative;
-}
-
-.date-range-selector label {
-    font-weight: 500;
-}
-
-/* Custom dropdown styles */
-.custom-dropdown {
-    position: relative;
-    min-width: 160px;
-}
-
-.dropdown-toggle {
-    display: flex;
-    justify-content: space-between;
-    align-items: center;
-    width: 100%;
-    padding: 8px 12px;
-    background-color: #fff;
-    border: 1px solid #ddd;
-    border-radius: 4px;
-    font-size: 0.9rem;
-    cursor: pointer;
-    transition: all 0.2s;
-    text-align: left;
-    color: #222;
-}
-
-.dropdown-toggle:hover {
-    border-color: #3e4b2e;
-}
-
-.dropdown-toggle svg {
-    margin-left: 8px;
-    font-size: 0.8rem;
-}
-
-.dropdown-menu {
-    position: absolute;
-    top: calc(100% + 5px);
-    left: 0;
-    width: 100%;
-    background-color: white;
-    border: 1px solid #ddd;
-    border-radius: 4px;
-    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
-    z-index: 1050;
-    overflow: hidden;
-}
-
-.dropdown-item {
-    padding: 8px 12px;
-    cursor: pointer;
-    transition: background-color 0.2s;
-    color: #222;
-    background-color: #fff;
-}
-
-.dropdown-item:hover {
-    background-color: #f5f7fa;
-}
-
-.dropdown-item.active {
-    background-color: #3e4b2e;
-    color: #fff;
-    font-weight: 500;
-}
-
-.dashboard-tabs {
-    display: flex;
-    margin-bottom: 20px;
-    background: #fff;
-    border-radius: 8px;
-    padding: 5px;
-    gap: 5px;
-    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
-    overflow-x: auto;
-}
-
-.dashboard-tabs button {
-    flex: 1;
-    padding: 10px 15px;
-    background: none;
-    border: none;
-    border-radius: 6px;
-    font-size: 0.95rem;
-    cursor: pointer;
-    transition: all 0.2s;
-    color: #777;
-    display: flex;
-    align-items: center;
-    justify-content: center;
-    gap: 8px;
-    white-space: nowrap;
-}
-
-.dashboard-tabs button svg {
-    font-size: 1.1rem;
-}
-
-.dashboard-tabs button:hover {
-    color: #3e4b2e;
-    background-color: #f5f7fa;
-}
-
-.dashboard-tabs button.active {
-    color: #fff;
-    background-color: #3e4b2e;
-    font-weight: 500;
-}
-
-.dashboard-grid {
-    display: grid;
-    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
-    gap: 20px;
-    margin-bottom: 30px;
-}
-
-.dashboard-card {
-    background-color: white;
-    padding: 20px;
-    border-radius: 8px;
-    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-    text-align: center;
-    transition: transform 0.2s, box-shadow 0.2s;
-}
-
-.dashboard-card:hover {
-    transform: translateY(-5px);
-    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
-}
-
-.dashboard-card h3 {
-    margin-top: 0;
-    margin-bottom: 10px;
-    font-size: 1rem;
-    color: #555;
-}
-
-.dashboard-card p {
-    font-size: 1.8rem;
-    font-weight: bold;
-    color: #3e4b2e;
-    margin: 0;
-    margin-bottom: 5px;
-}
-
-.dashboard-card.highlight p {
-    color: #3498db;
-}
-
-.card-subtitle {
-    font-size: 0.8rem;
-    color: #777;
-}
-
-.dashboard-charts {
-    margin-bottom: 30px;
-}
-
-.chart-container {
-    background-color: white;
-    border-radius: 8px;
-    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-    padding: 20px;
-}
-
-.chart-container h3 {
-    margin-top: 0;
-    margin-bottom: 15px;
-    font-size: 1.1rem;
-    color: #2c3e50;
-}
-
-.chart-wrapper {
-    height: 300px;
-    position: relative;
-}
-
-.chart-title {
-    text-align: center;
-    font-size: 0.9rem;
-    color: #666;
-    margin-top: 10px;
-}
-
-.recent-transactions, .subscription-plans {
-    background-color: white;
-    border-radius: 8px;
-    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-    padding: 20px;
-    margin-bottom: 30px;
-}
-
-.recent-transactions h3, .subscription-plans h3 {
-    margin-top: 0;
-    margin-bottom: 15px;
-    font-size: 1.1rem;
-    color: #2c3e50;
-}
-
-.table-container {
-    overflow-x: auto;
-}
-
-.data-table {
-    width: 100%;
-    border-collapse: collapse;
-    font-size: 0.9rem;
-}
-
-.data-table th, .data-table td {
-    padding: 12px 15px;
-    text-align: left;
-    border-bottom: 1px solid #eee;
-}
-
-.data-table th {
-    background-color: #f8f9fa;
-    color: #555;
-    font-weight: 500;
-}
-
-.data-table tbody tr:hover {
-    background-color: #f5f5f5;
-}
-
-.status {
-    display: inline-block;
-    padding: 3px 8px;
-    border-radius: 12px;
-    font-size: 0.8rem;
-    text-transform: capitalize;
-}
-
-.status.completed {
-    background-color: #d4edda;
-    color: #155724;
-}
-
-.status.pending {
-    background-color: #fff3cd;
-    color: #856404;
-}
-
-.status.failed {
-    background-color: #f8d7da;
-    color: #721c24;
-}
-
-.view-all {
-    margin-top: 15px;
-    text-align: center;
-}
-
-.view-all-btn {
-    padding: 8px 16px;
-    background-color: transparent;
-    color: #3e4b2e;
-    border: 1px solid #3e4b2e;
-    border-radius: 4px;
-    cursor: pointer;
-    font-size: 0.9rem;
-    transition: all 0.2s;
-}
-
-.view-all-btn:hover {
-    background-color: #3e4b2e;
-    color: white;
-}
-
-.loading, .error {
-    padding: 20px;
-    text-align: center;
-    font-size: 1.1rem;
-    background-color: white;
-    border-radius: 8px;
-    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-.error {
-    color: #dc3545;
-}
-
-/* Add this after the .error style */
-.no-data-message {
-    height: 300px;
-    display: flex;
-    align-items: center;
-    justify-content: center;
-    background-color: #f9f9f9;
-    border-radius: 6px;
-    border: 1px dashed #ccc;
-}
-
-.no-data-message p {
-    font-size: 1.1rem;
-    color: #777;
-    text-align: center;
-    padding: 20px;
-}
-
-/* Recharts customizations */
-.recharts-default-tooltip {
-    background-color: rgba(255, 255, 255, 0.9) !important;
-    border: none !important;
-    border-radius: 8px !important;
-    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;
-    padding: 10px 14px !important;
-}
-
-.recharts-tooltip-label {
-    font-weight: 600 !important;
-    margin-bottom: 5px !important;
-}
-
-.recharts-tooltip-item {
-    padding: 2px 0 !important;
-}
-
-.recharts-cartesian-axis-tick-value {
-    font-size: 12px;
-}
-
-.recharts-legend-item-text {
-    font-size: 13px;
-}
-
-/* Responsive adjustments */
-@media (max-width: 768px) {
-    .dashboard-header {
-        flex-direction: column;
-        align-items: flex-start;
-        gap: 15px;
-    }
-    
-    .dashboard-grid {
-        grid-template-columns: 1fr;
-    }
-    
-    .dashboard-controls {
-        width: 100%;
-        flex-direction: column;
-        align-items: flex-start;
-    }
-    
-    .date-range-selector, .date-range-selector select {
-        width: 100%;
-    }
-    
-    .export-btn {
-        width: 100%;
-    }
-    
-    .dashboard-tabs {
-        padding: 3px;
-        gap: 3px;
-    }
-    
-    .dashboard-tabs button {
-        padding: 8px 12px;
-        font-size: 0.9rem;
-    }
-}
diff --git a/frontend/src/components/financial/FinancialDashboard.jsx b/frontend/src/components/financial/FinancialDashboard.jsx
deleted file mode 100644
index 31f472e..0000000
--- a/frontend/src/components/financial/FinancialDashboard.jsx
+++ /dev/null
@@ -1,875 +0,0 @@
-import React, { useState, useEffect, useContext, useRef, useMemo, useCallback } from 'react';
-import { Link } from 'react-router-dom';
-import AuthContext from '../../contexts/AuthContext';
-import financialApi from '../../services/financialApi';
-// Replace Chart.js imports with Recharts
-import {
-  ResponsiveContainer,
-  LineChart,
-  Line,
-  BarChart,
-  Bar,
-  PieChart,
-  Pie,
-  Cell,
-  XAxis,
-  YAxis,
-  CartesianGrid,
-  Tooltip,
-  Legend,
-  Label,
-  Sector
-} from 'recharts';
-import { 
-  faChartPie, 
-  faMoneyBillTrendUp, 
-  faArrowTrendDown, 
-  faUsers,
-  faChevronDown
-} from '@fortawesome/free-solid-svg-icons';
-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
-import { LinearProgress } from '@mui/material'; // Add LinearProgress import
-import './FinancialDashboard.css';
-
-// Keep your currency formatter
-const formatCurrency = (amount) => {
-  const numericAmount = Number(amount);
-  if (isNaN(numericAmount)) {
-    return '$0.00';
-  }
-  return new Intl.NumberFormat('en-US', {
-    style: 'currency',
-    currency: 'USD'
-  }).format(numericAmount);
-};
-
-// Keep your date formatter
-const formatDate = (dateString) => {
-  if (!dateString) return 'N/A';
-  try {
-    return new Date(dateString).toLocaleDateString('en-US', {
-      year: 'numeric',
-      month: 'short',
-      day: 'numeric'
-    });
-  } catch (error) {
-    console.error("Error formatting date:", error);
-    return 'Invalid Date';
-  }
-};
-
-const FinancialDashboard = () => {
-  const [dashboardData, setDashboardData] = useState(null);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState(null);
-  const [dateRange, setDateRange] = useState('month');
-  const [activeTab, setActiveTab] = useState('overview');
-  const [activePieIndex, setActivePieIndex] = useState(0);
-  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
-  const [exportLoading, setExportLoading] = useState(false);
-  const dropdownRef = useRef(null);
-  const { user } = useContext(AuthContext);
-
-  // Close dropdown when clicking outside
-  useEffect(() => {
-    const handleClickOutside = (event) => {
-      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
-        setIsDropdownOpen(false);
-      }
-    };
-
-    document.addEventListener('mousedown', handleClickOutside);
-    return () => {
-      document.removeEventListener('mousedown', handleClickOutside);
-    };
-  }, []);
-
-  // Memoize fetchDashboardData to avoid unnecessary recreations
-  const fetchDashboardData = useCallback(async () => {
-    if (!user) {
-      setError('Authentication required: Please log in to view this dashboard');
-      setLoading(false);
-      return;
-    }
-      
-    // Check if user has required permissions
-    if (user.role !== 'financial_manager' && user.role !== 'admin') {
-      setError('Access Denied: You need financial manager or admin privileges to view this dashboard');
-      setLoading(false);
-      return;
-    }
-      
-    try {
-      setLoading(true);
-      setError(null);
-        
-      // Use financialApi consistently
-      const response = await financialApi.getDashboardData(dateRange);
-        
-      // Enhanced validation with more specific errors
-      if (!response || !response.data) {
-        throw new Error('No data received from server');
-      }
-        
-      // Ensure all data structures exist with defaults to prevent rendering errors
-      const data = {
-        summary: response.data.summary || { 
-          totalRevenue: 0, 
-          totalExpenses: 0, 
-          netProfit: 0, 
-          activeSubscriptions: 0,
-          newSubscriptions: 0 
-        },
-        revenueByPlan: response.data.revenueByPlan || [],
-        expensesByCategory: response.data.expensesByCategory || [],
-        trends: response.data.trends || { revenue: [], expenses: [] },
-        subscriptionPlans: response.data.subscriptionPlans || [],
-        recentTransactions: response.data.recentTransactions || { 
-          payments: [], 
-          expenses: [] 
-        }
-      };
-        
-      setDashboardData(data);
-    } catch (err) {
-      console.error("Error fetching financial dashboard data:", err);
-      setError(err.response?.data?.message || 'Failed to fetch dashboard data. Please try again later.');
-    } finally {
-      setLoading(false);
-    }
-  }, [user, dateRange]); // Keep dependencies
-
-  useEffect(() => {
-    fetchDashboardData();
-  }, [fetchDashboardData]); // Update to use memoized function
-
-  // Memoize the chart data preparation to avoid recalculations on each render
-  const prepareChartData = useMemo(() => {
-    if (!dashboardData || !dashboardData.summary) {
-      return {
-        revenueExpenseData: [],
-        planRevenueData: [],
-        expenseCategoryData: [],
-        planSubscriptionData: [],
-        hasData: false
-      };
-    }
-
-    // Generate complete set of labels based on date range
-    let completeLabelsData = []; // Changed to store objects { fullDate, label }
-    let revenueTrendMap = new Map();
-    let expenseTrendMap = new Map();
-
-    // Convert existing data to maps for easy lookup - Use the correct key based on range
-    const trendKey = dateRange === 'month' ? 'day' : 'month'; // Backend uses 'day' for daily, 'month' for monthly
-    (dashboardData.trends?.revenue || []).forEach(item => revenueTrendMap.set(item[trendKey], item.total || item.amount || 0));
-    (dashboardData.trends?.expenses || []).forEach(item => expenseTrendMap.set(item[trendKey], item.total || item.amount || 0));
-
-    const today = new Date();
-    const currentYear = today.getFullYear();
-    const currentMonth = today.getMonth();
-
-    // Generate complete set of labels based on dateRange
-    if (dateRange === 'month') {
-      const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
-      // Use the actual end date from the response if available, otherwise today's date within the month
-      const responseEndDate = dashboardData.dateRange?.endDate ? new Date(dashboardData.dateRange.endDate + 'T00:00:00') : today;
-      const endDayOfMonth = (responseEndDate.getFullYear() === currentYear && responseEndDate.getMonth() === currentMonth) 
-                            ? responseEndDate.getDate() 
-                            : (currentMonth === today.getMonth() ? today.getDate() : daysInMonth);
-
-      for (let i = 1; i <= endDayOfMonth; i++) {
-        const date = new Date(currentYear, currentMonth, i);
-        // Format date as YYYY-MM-DD to match backend key for 'month' range
-        const yearStr = date.getFullYear();
-        const monthStr = (date.getMonth() + 1).toString().padStart(2, '0');
-        const dayStr = date.getDate().toString().padStart(2, '0');
-        const fullDateKey = `${yearStr}-${monthStr}-${dayStr}`;
-        
-        completeLabelsData.push({ fullDate: fullDateKey, label: i.toString() }); // Store full date and day number label
-        
-        // Use fullDateKey for map operations
-        if (!revenueTrendMap.has(fullDateKey)) revenueTrendMap.set(fullDateKey, 0);
-        if (!expenseTrendMap.has(fullDateKey)) expenseTrendMap.set(fullDateKey, 0);
-      }
-    } 
-    else if (dateRange === 'last3months') {
-      const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
-      for (let i = 2; i >= 0; i--) { // Iterate backwards from current month
-        let monthIndex = currentMonth - i;
-        let year = currentYear;
-        if (monthIndex < 0) {
-          monthIndex += 12;
-          year -= 1;
-        }
-        const monthLabel = `${monthNames[monthIndex]}-${year}`;
-        const monthKey = `${year}-${(monthIndex + 1).toString().padStart(2, '0')}`; // YYYY-MM format for map key
-        
-        completeLabelsData.push({ fullDate: monthKey, label: monthLabel }); // Store YYYY-MM and display label
-        
-        if (!revenueTrendMap.has(monthKey)) revenueTrendMap.set(monthKey, 0);
-        if (!expenseTrendMap.has(monthKey)) expenseTrendMap.set(monthKey, 0);
-      }
-    } 
-    else { // year
-      const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
-      const responseEndDate = dashboardData.dateRange?.endDate ? new Date(dashboardData.dateRange.endDate + 'T00:00:00') : today;
-      const endMonthOfYear = (responseEndDate.getFullYear() === currentYear) ? responseEndDate.getMonth() : (currentYear === today.getFullYear() ? today.getMonth() : 11);
-
-      for (let i = 0; i <= endMonthOfYear; i++) {
-        const monthLabel = `${monthNames[i]}-${currentYear}`;
-        const monthKey = `${currentYear}-${(i + 1).toString().padStart(2, '0')}`; // YYYY-MM format for map key
-        
-        completeLabelsData.push({ fullDate: monthKey, label: monthLabel }); // Store YYYY-MM and display label
-        
-        if (!revenueTrendMap.has(monthKey)) revenueTrendMap.set(monthKey, 0);
-        if (!expenseTrendMap.has(monthKey)) expenseTrendMap.set(monthKey, 0);
-      }
-    }
-
-    // Prepare data for Recharts Line chart using the correct keys
-    const revenueExpenseData = completeLabelsData.map(item => ({
-      name: item.label, // Use the display label (day number or Month-Year)
-      revenue: revenueTrendMap.get(item.fullDate) || 0, // Use the full date key (YYYY-MM-DD or YYYY-MM)
-      expenses: expenseTrendMap.get(item.fullDate) || 0 // Use the full date key (YYYY-MM-DD or YYYY-MM)
-    }));
-
-    // hasData should now be calculated correctly based on actual data
-    const hasData = revenueExpenseData.some(item => item.revenue > 0 || item.expenses > 0);
-
-    // Prepare data for Revenue by Plan Pie chart - ensure proper access to planName, revenue and count
-    const planRevenueData = (dashboardData.revenueByPlan || []).map(item => ({
-      name: item.planName || item.name || 'Unknown Plan',
-      value: Number(item.revenue || item.value || item.amount || 0) || 0
-    })).filter(item => item.value > 0); // Filter out zero values for cleaner charts
-
-    // Prepare data for Expenses by Category Bar chart
-    const expenseCategoryData = (dashboardData.expensesByCategory || []).map(item => ({
-      name: item.category ? (item.category.charAt(0).toUpperCase() + item.category.slice(1)) : 'Miscellaneous',
-      value: Number(item.total || item.value || item.amount || 0) || 0
-    })).filter(item => item.value > 0); // Filter out zero values for cleaner charts
-
-    // Prepare data for Subscriptions by Plan Pie chart - Use subscriptionPlans data
-    const planSubscriptionData = (dashboardData.subscriptionPlans || []).map(item => ({ // Changed source to subscriptionPlans
-      name: item.name || 'Unknown Plan', // Use plan name
-      value: Number(item.subscriberCount || 0) || 0 // Use subscriberCount
-    })).filter(item => item.value > 0); // Filter out plans with zero subscribers
-
-    return {
-      revenueExpenseData,
-      planRevenueData,
-      expenseCategoryData,
-      planSubscriptionData, // Corrected data source
-      hasData
-    };
-  }, [dashboardData, dateRange]);
-
-  // Destructure the memoized chart data
-  const { revenueExpenseData, planRevenueData, expenseCategoryData, planSubscriptionData, hasData } = prepareChartData;
-
-  // Custom colors for charts
-  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658'];
-  
-  // Active Pie Chart animation
-  const onPieEnter = (_, index) => {
-    setActivePieIndex(index);
-  };
-  
-  const renderActiveShape = (props) => {
-    const { cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle,
-      fill, payload, percent, value } = props;
-    const sin = Math.sin(-midAngle * Math.PI / 180);
-    const cos = Math.cos(-midAngle * Math.PI / 180);
-    const sx = cx + (outerRadius + 10) * cos;
-    const sy = cy + (outerRadius + 10) * sin;
-    const mx = cx + (outerRadius + 30) * cos;
-    const my = cy + (outerRadius + 30) * sin;
-    const ex = mx + (cos >= 0 ? 1 : -1) * 22;
-    const ey = my;
-    const textAnchor = cos >= 0 ? 'start' : 'end';
-
-    return (
-      <g>
-        <text x={cx} y={cy} dy={8} textAnchor="middle" fill={fill} fontSize={14}>
-          {payload.name}
-        </text>
-        <Sector
-          cx={cx}
-          cy={cy}
-          innerRadius={innerRadius}
-          outerRadius={outerRadius}
-          startAngle={startAngle}
-          endAngle={endAngle}
-          fill={fill}
-        />
-        <Sector
-          cx={cx}
-          cy={cy}
-          startAngle={startAngle}
-          endAngle={endAngle}
-          innerRadius={outerRadius + 6}
-          outerRadius={outerRadius + 10}
-          fill={fill}
-        />
-        <path d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`} stroke={fill} fill="none" />
-        <circle cx={ex} cy={ey} r={2} fill={fill} stroke="none" />
-        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} textAnchor={textAnchor} fill="#333" fontSize={12}>
-          {`${formatCurrency(value)}`}
-        </text>
-        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} dy={18} textAnchor={textAnchor} fill="#999" fontSize={12}>
-          {`(${(percent * 100).toFixed(2)}%)`}
-        </text>
-      </g>
-    );
-  };
-
-  // Get the appropriate chart title based on the selected date range
-  const getChartTitle = () => {
-    switch(dateRange) {
-      case 'month':
-        return 'Revenue vs Expenses Trend (This Month)';
-      case 'last3months':
-        return 'Revenue vs Expenses Trend (Last 3 Months)';
-      case 'year':
-        return 'Revenue vs Expenses Trend (Year to Date)';
-      default:
-        return 'Revenue vs Expenses Trend';
-    }
-  };
-
-  // Function to handle date range selection with enhanced feedback
-  const handleDateRangeChange = (value) => {
-    if (value === dateRange) return; // No change needed
-    
-    setDateRange(value);
-    setIsDropdownOpen(false);
-    // Reset active pie index when changing date range
-    setActivePieIndex(0);
-  };
-
-  // Get label for selected date range
-  const getDateRangeLabel = () => {
-    switch(dateRange) {
-      case 'month': return 'This Month';
-      case 'last3months': return 'Last 3 Months';
-      case 'year': return 'This Year';
-      default: return 'This Month';
-    }
-  };
-
-  // Function to handle report export with improved error handling
-  const handleExportReport = async () => {
-    try {
-      setExportLoading(true);
-      const response = await financialApi.exportReport(dateRange);
-      
-      // Ensure we have data in the response
-      if (!response || !response.data) {
-        throw new Error('No data received for report export');
-      }
-      
-      // Create a blob from the response data
-      const blob = new Blob([response.data], { type: 'application/pdf' });
-      
-      // Create a link element and click it to trigger download
-      const url = window.URL.createObjectURL(blob);
-      const a = document.createElement('a');
-      a.href = url;
-      a.download = `financial-report-${dateRange}-${new Date().toISOString().split('T')[0]}.pdf`;
-      document.body.appendChild(a);
-      a.click();
-      window.URL.revokeObjectURL(url);
-      
-      document.body.removeChild(a);
-    } catch (err) {
-      console.error("Error exporting report:", err);
-      const errorMsg = err.response?.data?.message || 'Failed to export report. Please try again later.';
-      alert(`Export failed: ${errorMsg}`);
-    } finally {
-      setExportLoading(false);
-    }
-  };
-
-  // Refresh dashboard data
-  const handleRefreshData = () => {
-    fetchDashboardData();
-  };
-
-  // Check loading/error/nodata states
-  if (loading) {
-    return <div className="loading">Loading Financial Dashboard...</div>;
-  }
-
-  if (error) {
-    return (
-      <div className="error-container">
-        <div className="error-message">
-          <h3>Error Loading Dashboard</h3>
-          <p>{error}</p>
-          <button 
-            className="retry-button"
-            onClick={handleRefreshData}
-          >
-            Retry
-          </button>
-        </div>
-      </div>
-    );
-  }
-
-  // Check if essential summary data is missing
-  if (!dashboardData || !dashboardData.summary) {
-    return <div className="loading">No data available. Please check API connection.</div>;
-  }
-
-  // Check for genuinely empty data based on summary and arrays
-  const isEmptyData =
-    (dashboardData.summary.activeSubscriptions || 0) === 0 &&
-    (dashboardData.summary.totalRevenue || 0) === 0 &&
-    (dashboardData.summary.totalExpenses || 0) === 0 &&
-    Array.isArray(dashboardData.revenueByPlan) && dashboardData.revenueByPlan.length === 0 &&
-    Array.isArray(dashboardData.expensesByCategory) && dashboardData.expensesByCategory.length === 0;
-
-  const renderPeriodSubtitle = () => (
-    <span className="card-subtitle">
-      {dateRange === 'month' ? 'This Month' :
-        dateRange === 'last3months' ? 'Last 3 Months' :
-          'This Year'}
-    </span>
-  );
-
-  return (
-    <div className="financial-dashboard">
-      <div className="dashboard-header">
-        <h2>Financial Dashboard</h2>
-        <div className="dashboard-controls">
-          <div className="date-range-selector" ref={dropdownRef}>
-            <label>Time Period:</label>
-            <div className="custom-dropdown">
-              <button 
-                className="dropdown-toggle" 
-                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
-                aria-label="Select time period"
-                aria-expanded={isDropdownOpen}
-                disabled={loading}
-              >
-                {getDateRangeLabel()}
-                <FontAwesomeIcon icon={faChevronDown} />
-              </button>
-              {isDropdownOpen && (
-                <div className="dropdown-menu" role="menu">
-                  <div 
-                    className={`dropdown-item ${dateRange === 'month' ? 'active' : ''}`}
-                    onClick={() => handleDateRangeChange('month')}
-                    role="menuitem"
-                  >
-                    This Month
-                  </div>
-                  <div 
-                    className={`dropdown-item ${dateRange === 'last3months' ? 'active' : ''}`}
-                    onClick={() => handleDateRangeChange('last3months')}
-                    role="menuitem"
-                  >
-                    Last 3 Months
-                  </div>
-                  <div 
-                    className={`dropdown-item ${dateRange === 'year' ? 'active' : ''}`}
-                    onClick={() => handleDateRangeChange('year')}
-                    role="menuitem"
-                  >
-                    This Year
-                  </div>
-                </div>
-              )}
-            </div>
-          </div>
-          <button
-            className="btn refresh-btn"
-            onClick={handleRefreshData}
-            title="Refresh dashboard data"
-            disabled={loading}
-          >
-            ↻ Refresh
-          </button>
-          <div className="export-section"> {/* Wrap button and progress bar */}
-            <button
-              className={`export-btn ${exportLoading ? 'loading' : ''}`}
-              onClick={handleExportReport}
-              aria-label="Export financial report"
-              disabled={exportLoading || loading || isEmptyData}
-            >
-              {exportLoading ? 'Exporting...' : 'Export Report'}
-            </button>
-            {exportLoading && <LinearProgress style={{ marginTop: '8px' }} />} {/* Add progress bar */}
-          </div>
-        </div>
-      </div>
-
-      <div className="dashboard-tabs" role="tablist">
-        <button
-          role="tab"
-          aria-selected={activeTab === 'overview'}
-          className={activeTab === 'overview' ? 'active' : ''}
-          onClick={() => setActiveTab('overview')}
-        >
-          <FontAwesomeIcon icon={faChartPie} /> Overview
-        </button>
-        <button
-          role="tab"
-          aria-selected={activeTab === 'revenue'}
-          className={activeTab === 'revenue' ? 'active' : ''}
-          onClick={() => setActiveTab('revenue')}
-        >
-          <FontAwesomeIcon icon={faMoneyBillTrendUp} /> Revenue
-        </button>
-        <button
-          role="tab"
-          aria-selected={activeTab === 'expenses'}
-          className={activeTab === 'expenses' ? 'active' : ''}
-          onClick={() => setActiveTab('expenses')}
-        >
-          <FontAwesomeIcon icon={faArrowTrendDown} /> Expenses
-        </button>
-        <button
-          role="tab"
-          aria-selected={activeTab === 'subscriptions'}
-          className={activeTab === 'subscriptions' ? 'active' : ''}
-          onClick={() => setActiveTab('subscriptions')}
-        >
-          <FontAwesomeIcon icon={faUsers} /> Subscriptions
-        </button>
-      </div>
-
-      <div role="tabpanel" aria-labelledby="tab-overview" hidden={activeTab !== 'overview'}>
-        {activeTab === 'overview' && (
-          <>
-            <div className="dashboard-grid">
-              <div className="dashboard-card highlight">
-                <h3>Total Revenue</h3>
-                <p>{formatCurrency(dashboardData.summary.totalRevenue || 0)}</p>
-                {renderPeriodSubtitle()}
-              </div>
-              <div className="dashboard-card highlight">
-                <h3>Total Expenses</h3>
-                <p>{formatCurrency(dashboardData.summary.totalExpenses || 0)}</p>
-                {renderPeriodSubtitle()}
-              </div>
-              <div className="dashboard-card highlight">
-                <h3>Net Profit</h3>
-                <p>{formatCurrency(dashboardData.summary.netProfit || 0)}</p>
-                {renderPeriodSubtitle()}
-              </div>
-              <div className="dashboard-card">
-                <h3>Active Subscriptions</h3>
-                <p>{dashboardData.summary.activeSubscriptions || 0}</p>
-                <span className="card-subtitle">Total Active</span>
-              </div>
-            </div>
-
-            <div className="dashboard-charts">
-              <div className="chart-container">
-                {!hasData ? (
-                  <div className="no-data-message">
-                    <p>No revenue or expense data available for {dateRange === 'month' ? 'this month' : dateRange === 'last3months' ? 'last 3 months' : 'this year'}.</p>
-                  </div>
-                ) : (
-                  <div className="chart-wrapper">
-                    <ResponsiveContainer width="100%" height={300}>
-                      <LineChart
-                        data={revenueExpenseData}
-                        margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
-                      >
-                        <CartesianGrid strokeDasharray="3 3" />
-                        <XAxis dataKey="name" />
-                        <YAxis />
-                        <Tooltip formatter={(value) => formatCurrency(value)} />
-                        <Legend />
-                        <Line
-                          type="monotone"
-                          dataKey="revenue"
-                          name="Revenue"
-                          stroke="#4caf50"
-                          strokeWidth={2}
-                          activeDot={{ r: 8 }}
-                          dot={{ strokeWidth: 2 }}
-                        />
-                        <Line
-                          type="monotone"
-                          dataKey="expenses"
-                          name="Expenses"
-                          stroke="#f44336"
-                          strokeWidth={2}
-                          dot={{ strokeWidth: 2 }}
-                        />
-                      </LineChart>
-                    </ResponsiveContainer>
-                    <div className="chart-title">{getChartTitle()}</div>
-                  </div>
-                )}
-              </div>
-            </div>
-          </>
-        )}
-      </div>
-
-      <div role="tabpanel" aria-labelledby="tab-revenue" hidden={activeTab !== 'revenue'}>
-        {activeTab === 'revenue' && (
-          <>
-            <div className="dashboard-grid">
-              <div className="dashboard-card highlight">
-                <h3>Total Revenue</h3>
-                <p>{formatCurrency(dashboardData.summary.totalRevenue || 0)}</p>
-                {renderPeriodSubtitle()}
-              </div>
-            </div>
-
-            <div className="dashboard-charts">
-              <div className="chart-container">
-                <h3>Revenue by Subscription Plan</h3>
-                {planRevenueData.length === 0 ? (
-                  <div className="no-data-message">
-                    <p>No revenue data available by subscription plan.</p>
-                  </div>
-                ) : (
-                  <div className="chart-wrapper">
-                    <ResponsiveContainer width="100%" height={300}>
-                      <PieChart>
-                        <Pie
-                          activeIndex={activePieIndex}
-                          activeShape={renderActiveShape}
-                          data={planRevenueData}
-                          cx="50%"
-                          cy="50%"
-                          innerRadius={70}
-                          outerRadius={90}
-                          paddingAngle={5}
-                          dataKey="value"
-                          onMouseEnter={onPieEnter}
-                        >
-                          {planRevenueData.map((entry, index) => (
-                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
-                          ))}
-                        </Pie>
-                        <Tooltip formatter={(value) => formatCurrency(value)} />
-                      </PieChart>
-                    </ResponsiveContainer>
-                  </div>
-                )}
-              </div>
-            </div>
-
-            <div className="recent-transactions">
-              <h3>Recent Transactions</h3>
-              <div className="table-container">
-                <table className="data-table">
-                  <thead>
-                    <tr>
-                      <th>Date</th>
-                      <th>Customer</th>
-                      <th>Description</th>
-                      <th>Amount</th>
-                      <th>Status</th>
-                    </tr>
-                  </thead>
-                  <tbody>
-                    {(dashboardData.recentTransactions?.payments?.length > 0) ? (
-                      dashboardData.recentTransactions.payments.map((payment) => (
-                        <tr key={payment.id || payment._id}>
-                          <td>{formatDate(payment.date)}</td>
-                          <td>{payment.customer || 'N/A'}</td>
-                          <td>{payment.description || 'N/A'}</td>
-                          <td>{formatCurrency(payment.amount)}</td>
-                          <td><span className={`status ${payment.status?.toLowerCase() || ''}`}>{payment.status || 'N/A'}</span></td>
-                        </tr>
-                      ))
-                    ) : (
-                      <tr><td colSpan="5">No recent payments found for this period.</td></tr>
-                    )}
-                  </tbody>
-                </table>
-              </div>
-            </div>
-          </>
-        )}
-      </div>
-
-      <div role="tabpanel" aria-labelledby="tab-expenses" hidden={activeTab !== 'expenses'}>
-        {activeTab === 'expenses' && (
-          <>
-            <div className="dashboard-grid">
-              <div className="dashboard-card highlight">
-                <h3>Total Expenses</h3>
-                <p>{formatCurrency(dashboardData.summary.totalExpenses || 0)}</p>
-                {renderPeriodSubtitle()}
-              </div>
-              <div className="dashboard-card">
-                <h3>Largest Category</h3>
-                <p>{dashboardData.expensesByCategory?.[0]?.category ? 
-                  (dashboardData.expensesByCategory[0].category.charAt(0).toUpperCase() + 
-                   dashboardData.expensesByCategory[0].category.slice(1)) : 
-                  'N/A'}</p>
-                <span className="card-subtitle">{formatCurrency(dashboardData.expensesByCategory?.[0]?.total || 0)}</span>
-              </div>
-            </div>
-
-            <div className="dashboard-charts">
-              <div className="chart-container">
-                <h3>Expenses by Category</h3>
-                {expenseCategoryData.length === 0 ? (
-                  <div className="no-data-message">
-                    <p>No expense data available by category.</p>
-                  </div>
-                ) : (
-                  <div className="chart-wrapper">
-                    <ResponsiveContainer width="100%" height={300}>
-                      <BarChart
-                        data={expenseCategoryData}
-                        margin={{ top: 20, right: 30, left: 20, bottom: 70 }}
-                      >
-                        <CartesianGrid strokeDasharray="3 3" />
-                        <XAxis
-                          dataKey="name"
-                          angle={-45}
-                          textAnchor="end"
-                          height={70}
-                          interval={0}
-                        />
-                        <YAxis />
-                        <Tooltip formatter={(value) => formatCurrency(value)} />
-                        <Bar dataKey="value" name="Amount" radius={[5, 5, 0, 0]}>
-                          {expenseCategoryData.map((entry, index) => (
-                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
-                          ))}
-                        </Bar>
-                      </BarChart>
-                    </ResponsiveContainer>
-                  </div>
-                )}
-              </div>
-            </div>
-
-            <div className="recent-transactions">
-              <h3>Recent Expenses</h3>
-              <div className="table-container">
-                <table className="data-table">
-                  <thead>
-                    <tr>
-                      <th>Date</th>
-                      <th>Category</th>
-                      <th>Description</th>
-                      <th>Amount</th>
-                      <th>Status</th>
-                    </tr>
-                  </thead>
-                  <tbody>
-                    {(dashboardData.recentTransactions?.expenses?.length > 0) ? (
-                      dashboardData.recentTransactions.expenses.map((expense) => (
-                        <tr key={expense.id || expense._id}>
-                          <td>{formatDate(expense.date)}</td>
-                          <td>{expense.category ? (expense.category.charAt(0).toUpperCase() + expense.category.slice(1)) : 'N/A'}</td>
-                          <td>{expense.description || 'N/A'}</td>
-                          <td>{formatCurrency(expense.amount)}</td>
-                          <td><span className={`status ${expense.status?.toLowerCase() || ''}`}>{expense.status || 'N/A'}</span></td>
-                        </tr>
-                      ))
-                    ) : (
-                      <tr><td colSpan="5">No recent expenses found for this period.</td></tr>
-                    )}
-                  </tbody>
-                </table>
-              </div>
-            </div>
-          </>
-        )}
-      </div>
-
-      <div role="tabpanel" aria-labelledby="tab-subscriptions" hidden={activeTab !== 'subscriptions'}>
-        {activeTab === 'subscriptions' && (
-          <>
-            <div className="dashboard-grid">
-              <div className="dashboard-card highlight">
-                <h3>Active Subscriptions</h3>
-                <p>{dashboardData.summary.activeSubscriptions || 0}</p>
-                <span className="card-subtitle">Total</span>
-              </div>
-              <div className="dashboard-card">
-                <h3>New Subscriptions</h3>
-                <p>{dashboardData.summary.newSubscriptions || 0}</p>
-                {renderPeriodSubtitle()}
-              </div>
-            </div>
-
-            <div className="dashboard-charts">
-              <div className="chart-container">
-                <h3>Subscriptions by Plan (Count)</h3>
-                {planSubscriptionData.length === 0 ? (
-                  <div className="no-data-message">
-                    <p>No subscription data available by plan.</p>
-                  </div>
-                ) : (
-                  <div className="chart-wrapper">
-                    <ResponsiveContainer width="100%" height={300}>
-                      <PieChart>
-                        <Pie
-                          data={planSubscriptionData}
-                          cx="50%"
-                          cy="50%"
-                          labelLine={false}
-                          outerRadius={100}
-                          fill="#8884d8"
-                          dataKey="value"
-                          label={({ name, percent, value }) => `${name}: ${value} (${(percent * 100).toFixed(0)}%)`}
-                        >
-                          {planSubscriptionData.map((entry, index) => (
-                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
-                          ))}
-                        </Pie>
-                        <Tooltip formatter={(value) => `${value} subscribers`} />
-                        <Legend layout="vertical" verticalAlign="middle" align="right" />
-                      </PieChart>
-                    </ResponsiveContainer>
-                  </div>
-                )}
-              </div>
-            </div>
-
-            <div className="subscription-plans">
-              <h3>Subscription Plans Overview</h3>
-              <div className="table-container">
-                <table className="data-table">
-                  <thead>
-                    <tr>
-                      <th>Plan Name</th>
-                      <th>Price</th>
-                      <th>Billing</th>
-                      <th>Active Users</th>
-                    </tr>
-                  </thead>
-                  <tbody>
-                    {(dashboardData.subscriptionPlans?.length > 0) ? (
-                      dashboardData.subscriptionPlans.map((plan) => (
-                        <tr key={plan._id || plan.id || plan.name}>
-                          <td>{plan.name}</td>
-                          <td>{formatCurrency(plan.price)}</td>
-                          <td>{plan.duration}</td>
-                          <td>{plan.subscriberCount || 0}</td>
-                        </tr>
-                      ))
-                    ) : (
-                      <tr><td colSpan="4">No subscription plans found.</td></tr>
-                    )}
-                  </tbody>
-                </table>
-              </div>
-              <div className="view-all">
-                <Link to="/dashboard/subscription-plans" className="view-all-btn">Manage Subscription Plans</Link>
-              </div>
-            </div>
-          </>
-        )}
-      </div>
-    </div>
-  );
-};
-
-export default FinancialDashboard;
diff --git a/frontend/src/components/financial/FinancialDashboard.test.jsx b/frontend/src/components/financial/FinancialDashboard.test.jsx
deleted file mode 100644
index a5b713d..0000000
--- a/frontend/src/components/financial/FinancialDashboard.test.jsx
+++ /dev/null
@@ -1,225 +0,0 @@
-import { render, screen, waitFor } from '@testing-library/react';
-import userEvent from '@testing-library/user-event';
-import { BrowserRouter } from 'react-router-dom';
-import { AuthContext } from '../../contexts/AuthContext';
-import FinancialDashboard from './FinancialDashboard';
-import financialApi from '../../services/financialApi';
-
-// Mock the financialApi module
-jest.mock('../../services/financialApi');
-
-// Mock the context
-const mockAuthContext = {
-  user: {
-    _id: 'user123',
-    name: 'Test User',
-    email: 'test@example.com',
-    role: 'financial_manager'
-  },
-  loading: false,
-  error: null
-};
-
-// Sample dashboard data for testing
-const mockDashboardData = {
-  summary: {
-    totalRevenue: 5000,
-    totalExpenses: 3000,
-    netProfit: 2000,
-    activeSubscriptions: 25,
-    newSubscriptions: 5
-  },
-  revenueByPlan: [
-    { planName: 'Basic Plan', revenue: 1000, count: 10 },
-    { planName: 'Premium Plan', revenue: 4000, count: 15 }
-  ],
-  expensesByCategory: [
-    { category: 'Utilities', total: 1500 },
-    { category: 'Rent', total: 1000 },
-    { category: 'Supplies', total: 500 }
-  ],
-  recentTransactions: {
-    payments: [
-      { id: 'p1', date: '2025-04-01T00:00:00.000Z', customer: 'John Doe', description: 'Monthly subscription', amount: 99, status: 'completed' },
-      { id: 'p2', date: '2025-04-02T00:00:00.000Z', customer: 'Jane Smith', description: 'Annual subscription', amount: 999, status: 'completed' }
-    ],
-    expenses: [
-      { id: 'e1', date: '2025-04-03T00:00:00.000Z', category: 'Utilities', description: 'Electricity bill', amount: 200, status: 'paid' },
-      { id: 'e2', date: '2025-04-04T00:00:00.000Z', category: 'Rent', description: 'Office rent', amount: 1000, status: 'paid' }
-    ]
-  },
-  trends: {
-    revenue: [
-      { month: '1', total: 1200 },
-      { month: '2', total: 1500 },
-      { month: '3', total: 1800 },
-      { month: '4', total: 500 }
-    ],
-    expenses: [
-      { month: '1', total: 800 },
-      { month: '2', total: 900 },
-      { month: '3', total: 1000 },
-      { month: '4', total: 300 }
-    ]
-  },
-  subscriptionPlans: [
-    { _id: 'plan1', name: 'Basic Plan', price: 9.99, duration: 'Monthly', subscriberCount: 10 },
-    { _id: 'plan2', name: 'Premium Plan', price: 99.99, duration: 'Annual', subscriberCount: 15 }
-  ]
-};
-
-// Helper function to wrap component with context for testing
-const renderWithProviders = (ui, { providerProps = {}, ...renderOptions } = {}) => {
-  return render(
-    <AuthContext.Provider value={{ ...mockAuthContext, ...providerProps }}>
-      <BrowserRouter>
-        {ui}
-      </BrowserRouter>
-    </AuthContext.Provider>,
-    renderOptions
-  );
-};
-
-describe('FinancialDashboard Component', () => {
-  beforeEach(() => {
-    // Reset all mocks
-    jest.clearAllMocks();
-    
-    // Mock the API response
-    financialApi.getDashboardData = jest.fn().mockResolvedValue({ 
-      data: mockDashboardData 
-    });
-  });
-
-  test('renders loading state initially', () => {
-    renderWithProviders(<FinancialDashboard />);
-    expect(screen.getByText(/Loading Financial Dashboard/i)).toBeInTheDocument();
-  });
-
-  test('renders dashboard data after loading', async () => {
-    renderWithProviders(<FinancialDashboard />);
-    
-    // Wait for loading to complete
-    await waitFor(() => {
-      expect(screen.queryByText(/Loading Financial Dashboard/i)).not.toBeInTheDocument();
-    });
-    
-    // Check that key elements are rendered
-    expect(screen.getByText(/Total Revenue/i)).toBeInTheDocument();
-    expect(screen.getByText(/\$5,000\.00/i)).toBeInTheDocument(); // Revenue formatted with currency
-    expect(screen.getByText(/Total Expenses/i)).toBeInTheDocument();
-    expect(screen.getByText(/\$3,000\.00/i)).toBeInTheDocument(); // Expenses formatted with currency
-    expect(screen.getByText(/Net Profit/i)).toBeInTheDocument();
-    expect(screen.getByText(/\$2,000\.00/i)).toBeInTheDocument(); // Profit formatted with currency
-  });
-
-  test('changes date range when selecting different period', async () => {
-    renderWithProviders(<FinancialDashboard />);
-    
-    // Wait for loading to complete
-    await waitFor(() => {
-      expect(screen.queryByText(/Loading Financial Dashboard/i)).not.toBeInTheDocument();
-    });
-    
-    // Find and click the date range dropdown
-    const dateRangeButton = screen.getByText(/This Month/i);
-    userEvent.click(dateRangeButton);
-    
-    // Select "This Year" option
-    const yearOption = await screen.findByText(/This Year/i);
-    userEvent.click(yearOption);
-    
-    // Verify API was called with new date range
-    expect(financialApi.getDashboardData).toHaveBeenCalledWith('year');
-  });
-
-  test('switches to different tabs', async () => {
-    renderWithProviders(<FinancialDashboard />);
-    
-    // Wait for loading to complete
-    await waitFor(() => {
-      expect(screen.queryByText(/Loading Financial Dashboard/i)).not.toBeInTheDocument();
-    });
-    
-    // Click on the Revenue tab
-    const revenueTab = screen.getByRole('tab', { name: /Revenue/i });
-    userEvent.click(revenueTab);
-    
-    // Verify Revenue-specific content is shown
-    expect(screen.getByText(/Revenue by Subscription Plan/i)).toBeInTheDocument();
-    
-    // Click on the Expenses tab
-    const expensesTab = screen.getByRole('tab', { name: /Expenses/i });
-    userEvent.click(expensesTab);
-    
-    // Verify Expenses-specific content is shown
-    expect(screen.getByText(/Expenses by Category/i)).toBeInTheDocument();
-  });
-
-  test('handles API errors correctly', async () => {
-    // Mock API error response
-    financialApi.getDashboardData.mockRejectedValue({
-      response: { data: { message: 'Failed to fetch dashboard data' }}
-    });
-    
-    renderWithProviders(<FinancialDashboard />);
-    
-    // Wait for error message to show
-    await waitFor(() => {
-      expect(screen.getByText(/Error Loading Dashboard/i)).toBeInTheDocument();
-      expect(screen.getByText(/Failed to fetch dashboard data/i)).toBeInTheDocument();
-    });
-    
-    // Check for retry button
-    const retryButton = screen.getByText(/Retry/i);
-    expect(retryButton).toBeInTheDocument();
-    
-    // Click retry and verify API called again
-    userEvent.click(retryButton);
-    expect(financialApi.getDashboardData).toHaveBeenCalledTimes(2);
-  });
-
-  test('handles empty data sets gracefully', async () => {
-    // Mock empty dashboard data
-    financialApi.getDashboardData.mockResolvedValue({ 
-      data: {
-        summary: {
-          totalRevenue: 0,
-          totalExpenses: 0,
-          netProfit: 0,
-          activeSubscriptions: 0,
-          newSubscriptions: 0
-        },
-        revenueByPlan: [],
-        expensesByCategory: [],
-        recentTransactions: { payments: [], expenses: [] },
-        trends: { revenue: [], expenses: [] },
-        subscriptionPlans: []
-      }
-    });
-    
-    renderWithProviders(<FinancialDashboard />);
-    
-    // Wait for loading to complete
-    await waitFor(() => {
-      expect(screen.queryByText(/Loading Financial Dashboard/i)).not.toBeInTheDocument();
-    });
-    
-    // Check if "no data" messages are displayed for charts
-    expect(screen.getByText(/No revenue or expense data available/i)).toBeInTheDocument();
-  });
-
-  test('renders correct data format in financial summary', async () => {
-    renderWithProviders(<FinancialDashboard />);
-    
-    // Wait for loading to complete
-    await waitFor(() => {
-      expect(screen.queryByText(/Loading Financial Dashboard/i)).not.toBeInTheDocument();
-    });
-    
-    // Check currency formatting in financial summary
-    expect(screen.getByText(/\$5,000\.00/i)).toBeInTheDocument(); // Revenue with currency
-    expect(screen.getByText(/\$3,000\.00/i)).toBeInTheDocument(); // Expenses with currency
-    expect(screen.getByText(/\$2,000\.00/i)).toBeInTheDocument(); // Net Profit with currency
-  });
-});
\ No newline at end of file
diff --git a/frontend/src/components/financial/PaymentDemonstrationPage.jsx b/frontend/src/components/financial/PaymentDemonstrationPage.jsx
deleted file mode 100644
index ceabfaf..0000000
--- a/frontend/src/components/financial/PaymentDemonstrationPage.jsx
+++ /dev/null
@@ -1,286 +0,0 @@
-import React, { useState, useEffect } from 'react';
-import { Box, Typography, Card, CardContent, Button, Paper, Step, Stepper, StepLabel, Alert, Divider, Grid, CircularProgress } from '@mui/material';
-import StripeContainer from './StripeContainer';
-
-/**
- * A demonstration page that showcases the full payment flow
- * using Stripe integration in the SmartBin application
- */
-const PaymentDemonstrationPage = () => {
-  // User and plan data (in a real app, this would come from authentication and API)
-  const [currentUser] = useState({
-    _id: "demo-user-123",
-    name: "Demo User",
-    email: "demo@example.com"
-  });
-
-  // Sample subscription plan
-  const [selectedPlan] = useState({
-    _id: "plan-standard-123",
-    name: "Standard Plan",
-    price: "79.99",
-    description: "Standard waste collection service with weekly pickup and app access.",
-    duration: "Monthly",
-    features: [
-      "Weekly Waste Collection",
-      "Recycling Services",
-      "Standard Support",
-      "Online Account Management"
-    ]
-  });
-
-  // Payment flow states
-  const [activeStep, setActiveStep] = useState(0);
-  const [paymentStatus, setPaymentStatus] = useState(null);
-  const [isLoading, setIsLoading] = useState(false);
-  const [logs, setLogs] = useState([]);
-
-  // Steps in the payment process
-  const steps = [
-    'Select Plan',
-    'Enter Payment Details',
-    'Confirm Payment',
-    'Payment Complete'
-  ];
-
-  // Add log entries to track the payment flow
-  const addLog = (message, type = 'info') => {
-    const timestamp = new Date().toLocaleTimeString();
-    setLogs(prev => [...prev, { message, timestamp, type }]);
-  };
-
-  // Handle plan selection
-  const handlePlanSelect = () => {
-    addLog(`Selected plan: ${selectedPlan.name} (${selectedPlan.price})`);
-    setActiveStep(1);
-  };
-
-  // Handle payment success
-  const handlePaymentSuccess = (paymentResult) => {
-    addLog('✓ Payment completed successfully!', 'success');
-    addLog(`Payment ID: ${paymentResult.id || 'N/A'}`, 'success');
-    addLog('Subscription activated', 'success');
-    
-    setPaymentStatus('success');
-    setIsLoading(false);
-    setActiveStep(3);
-  };
-
-  // Handle payment error
-  const handlePaymentError = (error) => {
-    addLog(`✗ Payment failed: ${error.message || 'Unknown error'}`, 'error');
-    setPaymentStatus('error');
-    setIsLoading(false);
-  };
-
-  // Simulate backend webhook processing
-  const simulateWebhook = () => {
-    addLog('⟳ Stripe webhook received on backend', 'info');
-    addLog('⟳ Updating payment status in database...', 'info');
-    addLog('⟳ Creating subscription record...', 'info');
-    
-    setTimeout(() => {
-      addLog('✓ Webhook processing complete', 'success');
-    }, 1500);
-  };
-
-  // When a successful payment occurs, simulate the webhook after a delay
-  useEffect(() => {
-    if (paymentStatus === 'success') {
-      const timer = setTimeout(() => {
-        simulateWebhook();
-      }, 2000);
-      
-      return () => clearTimeout(timer);
-    }
-  }, [paymentStatus]);
-
-  return (
-    <Box sx={{ maxWidth: 1000, margin: '0 auto', padding: 3 }}>
-      <Typography variant="h4" gutterBottom align="center">
-        SmartBin Payment System Demonstration
-      </Typography>
-      
-      <Typography variant="subtitle1" paragraph align="center" color="text.secondary">
-        This demonstration shows how the payment system works using Stripe integration
-      </Typography>
-      
-      <Box sx={{ mb: 4 }}>
-        <Stepper activeStep={activeStep} alternativeLabel>
-          {steps.map((label) => (
-            <Step key={label}>
-              <StepLabel>{label}</StepLabel>
-            </Step>
-          ))}
-        </Stepper>
-      </Box>
-      
-      <Grid container spacing={3}>
-        <Grid item xs={12} md={8}>
-          {activeStep === 0 && (
-            <Card sx={{ mb: 3 }}>
-              <CardContent>
-                <Typography variant="h5" gutterBottom>
-                  {selectedPlan.name}
-                </Typography>
-                <Typography variant="h4" color="primary" gutterBottom>
-                  ${selectedPlan.price}/month
-                </Typography>
-                <Typography variant="body2" color="text.secondary" paragraph>
-                  {selectedPlan.description}
-                </Typography>
-                
-                <Divider sx={{ my: 2 }} />
-                
-                <Typography variant="subtitle1" gutterBottom>
-                  Features:
-                </Typography>
-                <ul>
-                  {selectedPlan.features.map((feature, index) => (
-                    <li key={index}>
-                      <Typography variant="body2">{feature}</Typography>
-                    </li>
-                  ))}
-                </ul>
-                
-                <Button 
-                  variant="contained" 
-                  color="primary" 
-                  fullWidth 
-                  size="large"
-                  onClick={handlePlanSelect}
-                  sx={{ mt: 2 }}
-                >
-                  Select Plan & Continue to Payment
-                </Button>
-              </CardContent>
-            </Card>
-          )}
-          
-          {activeStep === 1 && (
-            <Card>
-              <CardContent>
-                <Typography variant="h5" gutterBottom>
-                  Enter Payment Details
-                </Typography>
-                <Typography variant="body2" color="text.secondary" paragraph>
-                  You will be charged ${selectedPlan.price} for your {selectedPlan.name.toLowerCase()} subscription.
-                </Typography>
-                
-                <Box sx={{ mt: 3 }}>
-                  <StripeContainer
-                    plan={selectedPlan}
-                    userId={currentUser._id}
-                    onPaymentSuccess={handlePaymentSuccess}
-                    onPaymentError={handlePaymentError}
-                  />
-                </Box>
-                
-                <Alert severity="info" sx={{ mt: 2 }}>
-                  <strong>Test Card:</strong> Use card number 4242 4242 4242 4242 with any future expiration date,
-                  any 3-digit CVC, and any postal code.
-                </Alert>
-              </CardContent>
-            </Card>
-          )}
-          
-          {activeStep === 3 && paymentStatus === 'success' && (
-            <Card>
-              <CardContent sx={{ textAlign: 'center' }}>
-                <Typography variant="h5" gutterBottom color="primary">
-                  Payment Successful!
-                </Typography>
-                <Typography variant="body1" paragraph>
-                  Your subscription to the {selectedPlan.name} has been activated.
-                </Typography>
-                <Button 
-                  variant="contained" 
-                  onClick={() => {
-                    setActiveStep(0);
-                    setPaymentStatus(null);
-                    setLogs([]);
-                  }}
-                >
-                  Start New Demo
-                </Button>
-              </CardContent>
-            </Card>
-          )}
-        </Grid>
-        
-        <Grid item xs={12} md={4}>
-          <Paper sx={{ p: 2, height: '100%', backgroundColor: '#f8f9fa' }}>
-            <Typography variant="h6" gutterBottom>
-              Payment Process Logs
-            </Typography>
-            <Divider sx={{ mb: 2 }} />
-            
-            {logs.length === 0 ? (
-              <Typography variant="body2" color="text.secondary">
-                No activity yet. Start the payment process to see logs here.
-              </Typography>
-            ) : (
-              <Box sx={{ maxHeight: 400, overflow: 'auto' }}>
-                {logs.map((log, index) => (
-                  <Box 
-                    key={index} 
-                    sx={{ 
-                      mb: 1, 
-                      p: 1, 
-                      borderRadius: 1,
-                      backgroundColor: log.type === 'success' ? 'rgba(76, 175, 80, 0.1)' : 
-                                      log.type === 'error' ? 'rgba(244, 67, 54, 0.1)' : 
-                                      'rgba(33, 150, 243, 0.1)'
-                    }}
-                  >
-                    <Typography variant="caption" color="text.secondary" display="block">
-                      {log.timestamp}
-                    </Typography>
-                    <Typography variant="body2">
-                      {log.message}
-                    </Typography>
-                  </Box>
-                ))}
-              </Box>
-            )}
-          </Paper>
-        </Grid>
-      </Grid>
-      
-      <Box sx={{ mt: 4, p: 2, backgroundColor: '#f5f5f5', borderRadius: 1 }}>
-        <Typography variant="h6" gutterBottom>
-          How the SmartBin Payment System Works
-        </Typography>
-        <ol>
-          <li>
-            <Typography variant="body2" paragraph>
-              <strong>Frontend Payment Initiation:</strong> User selects a subscription plan and enters their payment details through the Stripe Elements interface.
-            </Typography>
-          </li>
-          <li>
-            <Typography variant="body2" paragraph>
-              <strong>Backend Payment Intent Creation:</strong> When the user submits their card details, the frontend calls the <code>/financials/payments/initiate</code> API endpoint, which creates a Stripe Payment Intent using your Stripe secret key.
-            </Typography>
-          </li>
-          <li>
-            <Typography variant="body2" paragraph>
-              <strong>Client-side Payment Confirmation:</strong> The frontend receives a client secret and uses it to confirm the payment with Stripe directly from the browser (keeping card details secure).
-            </Typography>
-          </li>
-          <li>
-            <Typography variant="body2" paragraph>
-              <strong>Webhook Processing:</strong> After payment is processed, Stripe sends a webhook to your backend <code>/financials/payments/webhook</code> endpoint, which validates the signature and updates the payment status.
-            </Typography>
-          </li>
-          <li>
-            <Typography variant="body2">
-              <strong>Subscription Activation:</strong> If payment is successful, the backend automatically activates the user's subscription and records are updated in the database.
-            </Typography>
-          </li>
-        </ol>
-      </Box>
-    </Box>
-  );
-};
-
-export default PaymentDemonstrationPage;
\ No newline at end of file
diff --git a/frontend/src/components/financial/PaymentForm.css b/frontend/src/components/financial/PaymentForm.css
deleted file mode 100644
index 67e2421..0000000
--- a/frontend/src/components/financial/PaymentForm.css
+++ /dev/null
@@ -1,150 +0,0 @@
-.payment-form-container {
-  background-color: #ffffff;
-  border-radius: 8px;
-  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
-  padding: 24px;
-  margin: 20px 0;
-  max-width: 500px;
-  width: 100%;
-}
-
-.payment-form-container h3 {
-  color: #2c3e50;
-  margin-bottom: 16px;
-  font-size: 20px;
-  font-weight: 600;
-}
-
-.plan-description {
-  color: #7f8c8d;
-  margin-bottom: 16px;
-  line-height: 1.5;
-}
-
-.plan-price {
-  font-size: 24px;
-  font-weight: 700;
-  color: #27ae60;
-  margin: 12px 0;
-}
-
-.plan-features {
-  list-style-type: none;
-  padding: 0;
-  margin-bottom: 24px;
-}
-
-.plan-features li {
-  padding: 8px 0;
-  border-bottom: 1px solid #ecf0f1;
-  color: #34495e;
-}
-
-.plan-features li:last-child {
-  border-bottom: none;
-}
-
-.plan-features li:before {
-  content: "✓ ";
-  color: #27ae60;
-  font-weight: bold;
-  margin-right: 8px;
-}
-
-.form-group {
-  margin-bottom: 20px;
-}
-
-.form-group label {
-  display: block;
-  margin-bottom: 8px;
-  color: #34495e;
-  font-weight: 500;
-}
-
-.card-element-container {
-  border: 1px solid #dcdfe6;
-  border-radius: 4px;
-  padding: 12px;
-  background-color: #f9f9f9;
-  transition: all 0.3s ease;
-}
-
-.card-element-container:hover {
-  border-color: #95a5a6;
-}
-
-.card-element-container:focus-within {
-  border-color: #3498db;
-  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
-}
-
-.payment-btn {
-  width: 100%;
-  padding: 12px;
-  background-color: #3498db;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  font-size: 16px;
-  font-weight: 500;
-  cursor: pointer;
-  transition: background-color 0.3s ease;
-  margin-top: 16px;
-}
-
-.payment-btn:hover {
-  background-color: #2980b9;
-}
-
-.payment-btn:disabled {
-  background-color: #95a5a6;
-  cursor: not-allowed;
-}
-
-.payment-error {
-  color: #e74c3c;
-  margin: 16px 0;
-  padding: 12px;
-  background-color: #fadbd8;
-  border-radius: 4px;
-  border-left: 4px solid #e74c3c;
-}
-
-.payment-success {
-  text-align: center;
-  padding: 24px;
-}
-
-.payment-success h4 {
-  color: #27ae60;
-  margin-bottom: 16px;
-}
-
-.primary-btn {
-  padding: 10px 16px;
-  background-color: #27ae60;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  font-size: 16px;
-  cursor: pointer;
-  transition: background-color 0.3s ease;
-  margin-top: 16px;
-}
-
-.primary-btn:hover {
-  background-color: #219653;
-}
-
-.payment-security-note {
-  margin-top: 16px;
-  text-align: center;
-  color: #7f8c8d;
-  font-size: 14px;
-}
-
-.payment-security-note i {
-  margin-right: 4px;
-  color: #27ae60;
-}
\ No newline at end of file
diff --git a/frontend/src/components/financial/PaymentForm.jsx b/frontend/src/components/financial/PaymentForm.jsx
deleted file mode 100644
index c10fa50..0000000
--- a/frontend/src/components/financial/PaymentForm.jsx
+++ /dev/null
@@ -1,159 +0,0 @@
-import React, { useState, useEffect } from 'react';
-import { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';
-import { useNavigate } from 'react-router-dom';
-import paymentApi from '../../services/paymentApi';
-import './PaymentForm.css';
-
-/**
- * Payment form component that integrates with Stripe Elements
- * Allows users to enter credit card information securely
- * Uses Stripe.js to tokenize card details without exposing sensitive data
- */
-const PaymentForm = ({ plan, userId, onPaymentSuccess, onPaymentError }) => {
-  // Stripe hooks
-  const stripe = useStripe();
-  const elements = useElements();
-  const navigate = useNavigate();
-  
-  // Component state
-  const [isProcessing, setIsProcessing] = useState(false);
-  const [paymentError, setPaymentError] = useState(null);
-  const [paymentSuccess, setPaymentSuccess] = useState(false);
-  
-  // Derived state
-  const amount = parseFloat(plan.price);
-  const formattedAmount = new Intl.NumberFormat('en-US', {
-    style: 'currency',
-    currency: 'USD',
-  }).format(amount);
-
-  // Handle the form submission
-  const handleSubmit = async (event) => {
-    event.preventDefault();
-    
-    // Reset states
-    setPaymentError(null);
-    
-    if (!stripe || !elements) {
-      // Stripe.js has not yet loaded
-      return;
-    }
-    
-    setIsProcessing(true);
-    
-    try {
-      // 1. Initiate payment on our server
-      const paymentIntent = await paymentApi.initiatePayment({
-        userId,
-        planId: plan._id,
-        amount,
-        currency: 'usd' // Default to USD for now
-      });
-      
-      // 2. Confirm card payment with Stripe
-      const { error, paymentIntent: confirmedPaymentIntent } = await stripe.confirmCardPayment(
-        paymentIntent.clientSecret, 
-        {
-          payment_method: {
-            card: elements.getElement(CardElement),
-            billing_details: {
-              name: 'SmartBin Customer', // Could be dynamically provided
-            },
-          },
-        }
-      );
-      
-      if (error) {
-        // Payment failed
-        setPaymentError(error.message);
-        if (onPaymentError) onPaymentError(error);
-      } else if (confirmedPaymentIntent.status === 'succeeded') {
-        // Payment succeeded
-        setPaymentSuccess(true);
-        if (onPaymentSuccess) onPaymentSuccess(confirmedPaymentIntent);
-        
-        // Reset the form
-        elements.getElement(CardElement).clear();
-      }
-    } catch (error) {
-      console.error('Payment error:', error);
-      setPaymentError(error.message || 'An error occurred while processing your payment.');
-      if (onPaymentError) onPaymentError(error);
-    } finally {
-      setIsProcessing(false);
-    }
-  };
-  
-  // Card element styling options
-  const cardElementOptions = {
-    style: {
-      base: {
-        fontSize: '16px',
-        color: '#424770',
-        fontFamily: 'Arial, sans-serif',
-        '::placeholder': {
-          color: '#aab7c4',
-        },
-      },
-      invalid: {
-        color: '#9e2146',
-      },
-    },
-  };
-  
-  return (
-    <div className="payment-form-container">
-      <h3>Subscribe to {plan.name}</h3>
-      <p className="plan-description">{plan.description}</p>
-      <div className="plan-price">{formattedAmount} / {plan.duration.toLowerCase()}</div>
-      
-      {plan.features && plan.features.length > 0 && (
-        <ul className="plan-features">
-          {plan.features.map((feature, index) => (
-            <li key={index}>{feature}</li>
-          ))}
-        </ul>
-      )}
-      
-      {paymentSuccess ? (
-        <div className="payment-success">
-          <h4>Payment Successful!</h4>
-          <p>Your subscription has been activated.</p>
-          <button 
-            className="btn primary-btn" 
-            onClick={() => navigate('/dashboard')}
-          >
-            Go to Dashboard
-          </button>
-        </div>
-      ) : (
-        <form onSubmit={handleSubmit}>
-          <div className="form-group">
-            <label htmlFor="card-element">Credit or Debit Card</label>
-            <div className="card-element-container">
-              <CardElement id="card-element" options={cardElementOptions} />
-            </div>
-          </div>
-          
-          {paymentError && (
-            <div className="payment-error">{paymentError}</div>
-          )}
-          
-          <button 
-            className="btn payment-btn" 
-            type="submit" 
-            disabled={!stripe || isProcessing}
-          >
-            {isProcessing ? 'Processing...' : `Pay ${formattedAmount}`}
-          </button>
-          
-          <div className="payment-security-note">
-            <i className="fas fa-lock"></i> Payments are secure and encrypted.
-          </div>
-        </form>
-      )}
-    </div>
-  );
-};
-
-export default PaymentForm;
\ No newline at end of file
diff --git a/frontend/src/components/financial/StripeContainer.jsx b/frontend/src/components/financial/StripeContainer.jsx
deleted file mode 100644
index b5c102a..0000000
--- a/frontend/src/components/financial/StripeContainer.jsx
+++ /dev/null
@@ -1,47 +0,0 @@
-import React from 'react';
-import { Elements } from '@stripe/react-stripe-js';
-import { loadStripe } from '@stripe/stripe-js';
-import PaymentForm from './PaymentForm';
-
-// Load the Stripe.js library with your publishable key
-// In production, this should be loaded from environment variables
-const stripePromise = loadStripe(import.meta.env.VITE_STRIPE_TEST_PUBLISHABLE_KEY || import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY);
-
-/**
- * Wrapper component that provides Stripe context to the payment form
- * @param {Object} props - Component props
- * @param {Object} props.plan - Subscription plan details
- * @param {string} props.userId - ID of the user making the payment
- * @param {Function} props.onPaymentSuccess - Callback for successful payment
- * @param {Function} props.onPaymentError - Callback for payment errors
- */
-const StripeContainer = ({ plan, userId, onPaymentSuccess, onPaymentError }) => {
-  const options = {
-    // Passing appearance options to customize Stripe Elements
-    appearance: {
-      theme: 'stripe',
-      variables: {
-        colorPrimary: '#3498db',
-        colorBackground: '#ffffff',
-        colorText: '#30313d',
-        colorDanger: '#e74c3c',
-        fontFamily: 'Arial, sans-serif',
-        spacingUnit: '4px',
-        borderRadius: '4px',
-      },
-    },
-  };
-
-  return (
-    <Elements stripe={stripePromise} options={options}>
-      <PaymentForm 
-        plan={plan}
-        userId={userId}
-        onPaymentSuccess={onPaymentSuccess}
-        onPaymentError={onPaymentError}
-      />
-    </Elements>
-  );
-};
-
-export default StripeContainer;
\ No newline at end of file
diff --git a/frontend/src/components/financial/SubscribeModal.css b/frontend/src/components/financial/SubscribeModal.css
deleted file mode 100644
index d79a4be..0000000
--- a/frontend/src/components/financial/SubscribeModal.css
+++ /dev/null
@@ -1,158 +0,0 @@
-.modal-overlay {
-  position: fixed;
-  top: 0;
-  left: 0;
-  right: 0;
-  bottom: 0;
-  background-color: rgba(0, 0, 0, 0.6);
-  display: flex;
-  align-items: center;
-  justify-content: center;
-  z-index: 1000;
-  animation: fadeIn 0.3s ease-out;
-}
-
-.subscribe-modal {
-  background-color: #fff;
-  border-radius: 8px;
-  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
-  width: 90%;
-  max-width: 600px;
-  display: flex;
-  flex-direction: column;
-  animation: slideIn 0.3s ease-out;
-  max-height: 90vh;
-  overflow-y: auto;
-}
-
-.modal-header {
-  padding: 20px;
-  border-bottom: 1px solid #e0e0e0;
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-}
-
-.modal-header h2 {
-  margin: 0;
-  color: #2c3e50;
-  font-size: 22px;
-  font-weight: 600;
-}
-
-.close-button {
-  background: none;
-  border: none;
-  font-size: 24px;
-  cursor: pointer;
-  color: #7f8c8d;
-  transition: color 0.2s;
-}
-
-.close-button:hover {
-  color: #34495e;
-}
-
-.modal-body {
-  padding: 20px;
-  display: flex;
-  flex-direction: column;
-  align-items: center;
-}
-
-.modal-footer {
-  padding: 16px 20px;
-  border-top: 1px solid #e0e0e0;
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-}
-
-.security-note {
-  color: #7f8c8d;
-  font-size: 14px;
-  margin: 0;
-}
-
-.security-note i {
-  color: #27ae60;
-  margin-right: 5px;
-}
-
-.cancel-btn {
-  background-color: #ecf0f1;
-  color: #34495e;
-  border: none;
-  padding: 8px 16px;
-  border-radius: 4px;
-  cursor: pointer;
-  transition: background-color 0.2s;
-}
-
-.cancel-btn:hover {
-  background-color: #bdc3c7;
-}
-
-.success-message {
-  text-align: center;
-  padding: 30px 15px;
-}
-
-.success-icon {
-  display: flex;
-  align-items: center;
-  justify-content: center;
-  width: 60px;
-  height: 60px;
-  background-color: #27ae60;
-  color: white;
-  font-size: 30px;
-  border-radius: 50%;
-  margin: 0 auto 20px;
-}
-
-.success-message h3 {
-  color: #27ae60;
-  margin-bottom: 12px;
-  font-size: 20px;
-}
-
-.success-message p {
-  color: #7f8c8d;
-  margin-bottom: 24px;
-}
-
-.primary-btn {
-  background-color: #3498db;
-  color: white;
-  border: none;
-  padding: 10px 20px;
-  border-radius: 4px;
-  cursor: pointer;
-  font-size: 16px;
-  transition: background-color 0.3s;
-}
-
-.primary-btn:hover {
-  background-color: #2980b9;
-}
-
-@keyframes fadeIn {
-  from {
-    opacity: 0;
-  }
-  to {
-    opacity: 1;
-  }
-}
-
-@keyframes slideIn {
-  from {
-    transform: translateY(-50px);
-    opacity: 0;
-  }
-  to {
-    transform: translateY(0);
-    opacity: 1;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/components/financial/SubscribeModal.jsx b/frontend/src/components/financial/SubscribeModal.jsx
deleted file mode 100644
index 6ea56c2..0000000
--- a/frontend/src/components/financial/SubscribeModal.jsx
+++ /dev/null
@@ -1,208 +0,0 @@
-import React, { useState } from 'react';
-import { loadStripe } from '@stripe/stripe-js';
-import { CardElement, Elements, useStripe, useElements } from '@stripe/react-stripe-js';
-import api from '../../services/api';
-import './SubscribeModal.css';
-
-const stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY);
-
-const PaymentForm = ({ plan, userId, onSuccess, onClose }) => {
-  const stripe = useStripe();
-  const elements = useElements();
-  const [isProcessing, setIsProcessing] = useState(false);
-  const [paymentError, setPaymentError] = useState(null);
-  const [paymentSuccess, setPaymentSuccess] = useState(false);
-
-  // Format price with currency
-  const formatPrice = (price) => {
-    return new Intl.NumberFormat('en-US', {
-      style: 'currency',
-      currency: 'USD'
-    }).format(price);
-  };
-
-  const amount = parseFloat(plan.price);
-  const formattedAmount = formatPrice(amount);
-
-  // Card element styling options
-  const cardElementOptions = {
-    style: {
-      base: {
-        fontSize: '16px',
-        color: '#424770',
-        '::placeholder': {
-          color: '#aab7c4',
-        },
-      },
-      invalid: {
-        color: '#9e2146',
-      },
-    },
-  };
-
-  // Handle form submission
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    
-    if (!stripe || !elements) {
-      // Stripe.js has not yet loaded
-      return;
-    }
-    
-    setIsProcessing(true);
-    setPaymentError(null);
-    
-    try {
-      // Create payment method
-      const { error, paymentMethod } = await stripe.createPaymentMethod({
-        type: 'card',
-        card: elements.getElement(CardElement),
-      });
-
-      if (error) {
-        throw new Error(error.message);
-      }
-
-      // Create subscription with payment method
-      const response = await api.post('/user-subscriptions', {
-        planId: plan._id,
-        paymentMethodId: paymentMethod.id
-      });
-
-      setPaymentSuccess(true);
-      
-      // Call onSuccess callback with the subscription data
-      if (onSuccess) {
-        setTimeout(() => {
-          onSuccess(response.data);
-        }, 1500); // Show success message briefly before closing
-      }
-    } catch (err) {
-      console.error('Payment error:', err);
-      setPaymentError(
-        err.response?.data?.message || 
-        'There was a problem processing your payment. Please try again.'
-      );
-    } finally {
-      setIsProcessing(false);
-    }
-  };
-
-  return (
-    <div className="payment-form">
-      <h3>Subscribe to {plan.name}</h3>
-      <p className="plan-description">{plan.description}</p>
-      <div className="plan-price">{formattedAmount} / {plan.duration.toLowerCase()}</div>
-      
-      {plan.features && plan.features.length > 0 && (
-        <ul className="plan-features">
-          {plan.features.map((feature, index) => (
-            <li key={index}>{feature}</li>
-          ))}
-        </ul>
-      )}
-      
-      {paymentSuccess ? (
-        <div className="payment-success">
-          <h4>Payment Successful!</h4>
-          <p>Your subscription has been activated.</p>
-          <button 
-            className="btn primary-btn" 
-            onClick={onClose}
-          >
-            Close
-          </button>
-        </div>
-      ) : (
-        <form onSubmit={handleSubmit}>
-          <div className="form-group">
-            <label htmlFor="card-element">Credit or Debit Card</label>
-            <div className="card-element-container">
-              <CardElement id="card-element" options={cardElementOptions} />
-            </div>
-          </div>
-          
-          {paymentError && (
-            <div className="payment-error">
-              <p>{paymentError}</p>
-            </div>
-          )}
-          
-          <div className="form-actions">
-            <button 
-              type="button" 
-              className="btn cancel-btn" 
-              onClick={onClose}
-              disabled={isProcessing}
-            >
-              Cancel
-            </button>
-            <button 
-              type="submit" 
-              className="btn primary-btn" 
-              disabled={isProcessing || !stripe}
-            >
-              {isProcessing ? 'Processing...' : `Pay ${formattedAmount}`}
-            </button>
-          </div>
-        </form>
-      )}
-    </div>
-  );
-};
-
-const SubscribeModal = ({ plan, onClose, onSuccess, userId }) => {
-  return (
-    <div className="modal-overlay" onClick={onClose}>
-      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
-        <div className="modal-header">
-          <h3>Subscribe to {plan.name}</h3>
-          <button className="modal-close" onClick={onClose}>&times;</button>
-        </div>
-        
-        <div className="plan-summary">
-          <div className="plan-info">
-            <h4>Plan Details</h4>
-            <div className="plan-detail-item">
-              <span className="label">Price:</span>
-              <span className="value">{new Intl.NumberFormat('en-US', {
-                style: 'currency',
-                currency: 'USD'
-              }).format(plan.price)} / {plan.duration.toLowerCase()}</span>
-            </div>
-            <div className="plan-detail-item">
-              <span className="label">Duration:</span>
-              <span className="value">{plan.duration}</span>
-            </div>
-            {plan.description && (
-              <div className="plan-description">
-                {plan.description}
-              </div>
-            )}
-          </div>
-        </div>
-        
-        <div className="payment-section">
-          <h4>Payment Information</h4>
-          <Elements stripe={stripePromise}>
-            <PaymentForm 
-              plan={plan} 
-              userId={userId} 
-              onSuccess={onSuccess}
-              onClose={onClose}
-            />
-          </Elements>
-        </div>
-        
-        <div className="modal-footer">
-          <p className="security-note">
-            <i className="fa fa-lock"></i> 
-            Your payment is secure and encrypted
-          </p>
-        </div>
-      </div>
-    </div>
-  );
-};
-
-export default SubscribeModal;
\ No newline at end of file
diff --git a/frontend/src/components/financial/SubscriptionPlans.css b/frontend/src/components/financial/SubscriptionPlans.css
deleted file mode 100644
index c70472e..0000000
--- a/frontend/src/components/financial/SubscriptionPlans.css
+++ /dev/null
@@ -1,269 +0,0 @@
-.subscription-container {
-    background-color: white;
-    border-radius: 8px;
-    padding: 20px;
-    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-    margin-bottom: 20px;
-    color: #333; /* Dark text color for the entire container */
-  }
-  
-  .subscription-container h2 {
-    text-align: left;
-    margin-bottom: 20px;
-    color: #333;
-  }
-  
-  .top-bar {
-    display: flex;
-    justify-content: space-between;
-    align-items: center;
-    margin-bottom: 20px;
-  }
-  
-  .search-box {
-    padding: 10px;
-    width: 60%;
-    border: 1px solid #d2ddc4;
-    border-radius: 5px;
-    font-size: 14px;
-  }
-  
-  .btn {
-    padding: 10px 20px;
-    margin-left: 10px;
-    border: none;
-    cursor: pointer;
-    border-radius: 4px;
-    font-size: 16px;
-    font-weight: 500;
-    transition: background-color 0.3s ease;
-  }
-  
-  .add-btn {
-    background: #4ea14a;
-    color: white;
-    font-weight: bold;
-  }
-  
-  .view-btn {
-    background: #88afa1;
-    color: white;
-  }
-  
-  .update-btn {
-    background: #88afa1;
-    color: white;
-  }
-  
-  .delete-btn {
-    background: #88afa1;
-    color: white;
-  }
-  
-  .add-btn:hover {
-    background: #3c8a38;
-  }
-  
-  .view-btn:hover, .update-btn:hover {
-    background: #6b9b8d;
-  }
-  
-  .delete-btn:hover {
-    background: #d9534f;
-    color: white;
-  }
-  
-  .btn:disabled {
-    background-color: #cccccc;
-    color: #666666;
-    cursor: not-allowed;
-  }
-  
-  .submit-btn:disabled {
-    background-color: #a0d09c;
-    color: white;
-  }
-  
-  .cancel-btn:disabled {
-    background-color: #adb5bd;
-    color: white;
-  }
-  
-  table {
-    width: 100%;
-    border-collapse: collapse;
-    margin-top: 10px;
-  }
-  
-  th, td {
-    border: 1px solid #ddd;
-    padding: 12px;
-    text-align: left;
-  }
-  
-  th {
-    background-color: #b4c3a2;
-    color: #141a17;
-    font-weight: 500;
-  }
-  
-  tr:nth-child(even) {
-    background-color: #f9f9f9;
-  }
-  
-  tr:hover {
-    background-color: #f1f7eb;
-  }
-  
-  .subscription-container table td {
-    color: #333; /* Explicit dark color for table cells */
-  }
-  
-  /* Plan Details Styles */
-  .plan-details {
-    background-color: #f9f9f9;
-    border-radius: 8px;
-    padding: 20px;
-    margin: 20px 0;
-    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
-  }
-  
-  .plan-details h3 {
-    margin-bottom: 20px;
-    color: #333;
-    border-bottom: 2px solid #4ea14a;
-    padding-bottom: 10px;
-  }
-  
-  .detail-row {
-    display: flex;
-    margin-bottom: 15px;
-  }
-  
-  .detail-label {
-    font-weight: bold;
-    width: 120px;
-    color: #555;
-  }
-  
-  .detail-value {
-    flex: 1;
-    color: #333;
-  }
-  
-  .close-btn {
-    background-color: #6c757d;
-    color: white;
-    margin-top: 15px;
-  }
-  
-  .close-btn:hover {
-    background-color: #5a6268;
-  }
-  
-  /* Form Styles */
-  .subscription-form {
-    background-color: #f9f9f9;
-    border-radius: 8px;
-    padding: 20px;
-    margin: 20px 0;
-    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
-  }
-  
-  .subscription-form h3 {
-    margin-bottom: 20px;
-    color: #333;
-    border-bottom: 2px solid #4ea14a;
-    padding-bottom: 10px;
-  }
-  
-  .form-group {
-    margin-bottom: 20px;
-  }
-  
-  .form-group label {
-    display: block;
-    margin-bottom: 5px;
-    font-weight: 500;
-    color: #444;
-  }
-  
-  .form-group input, 
-  .form-group select,
-  .form-group textarea {
-    width: 100%;
-    padding: 10px;
-    border: 1px solid #ddd;
-    border-radius: 4px;
-    font-size: 14px;
-    background-color: #ffffff;
-    color: #333;
-  }
-  
-  .form-group input:focus,
-  .form-group select:focus,
-  .form-group textarea:focus {
-    outline: none;
-    border-color: #4ea14a;
-  }
-  
-  .form-group textarea {
-    resize: vertical;
-  }
-  
-  .form-actions {
-    display: flex;
-    justify-content: flex-end;
-    margin-top: 20px;
-  }
-  
-  .submit-btn {
-    background-color: #4ea14a;
-    color: white;
-  }
-  
-  .submit-btn:hover {
-    background-color: #3c8a38;
-  }
-  
-  .cancel-btn {
-    background-color: #6c757d;
-    color: white;
-  }
-  
-  .cancel-btn:hover {
-    background-color: #5a6268;
-  }
-
-  /* Add to the end of your SubscriptionPlans.css file */
-.loading {
-  padding: 20px;
-  text-align: center;
-  color: #555;
-  font-size: 16px;
-}
-
-.error-message {
-  background-color: #f8d7da;
-  color: #721c24;
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid #f5c6cb;
-}
-
-.form-error {
-  background-color: #f8d7da;
-  color: #721c24;
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid #f5c6cb;
-}
-
-.no-plans {
-  text-align: center;
-  padding: 30px 0;
-  color: #666;
-  font-style: italic;
-}
\ No newline at end of file
diff --git a/frontend/src/components/financial/SubscriptionPlans.jsx b/frontend/src/components/financial/SubscriptionPlans.jsx
deleted file mode 100644
index c8f059f..0000000
--- a/frontend/src/components/financial/SubscriptionPlans.jsx
+++ /dev/null
@@ -1,837 +0,0 @@
-import React, { useState, useEffect, useCallback } from 'react';
-import subscriptionPlansApi from '../../services/subscriptionPlansApi'; // Corrected import
-import './SubscriptionPlans.css';
-
-const SubscriptionPlans = () => {
-  const [searchTerm, setSearchTerm] = useState('');
-  const [plans, setPlans] = useState([]);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState(null);
-  const [successMessage, setSuccessMessage] = useState(''); // State for success messages
-  const [showAddForm, setShowAddForm] = useState(false);
-  const [showViewDetails, setShowViewDetails] = useState(false);
-  const [showUpdateForm, setShowUpdateForm] = useState(false);
-  const [currentPlan, setCurrentPlan] = useState(null);
-  const [statusFilter, setStatusFilter] = useState('all');
-  const [refreshTrigger, setRefreshTrigger] = useState(0); // Added to trigger refreshes
-
-  // Function to clear messages after a delay
-  const clearMessages = useCallback(() => {
-    setError(null);
-    setSuccessMessage('');
-  }, []);
-
-  // Auto-clear messages after 5 seconds
-  useEffect(() => {
-    let timeoutId;
-    if (error || successMessage) {
-      timeoutId = setTimeout(clearMessages, 5000);
-    }
-    
-    return () => {
-      if (timeoutId) clearTimeout(timeoutId);
-    };
-  }, [error, successMessage, clearMessages]);
-
-  // Fetch subscription plans
-  useEffect(() => {
-    fetchPlans();
-  }, [refreshTrigger]); // Added refresh trigger dependency
-
-  // Memoize fetchPlans to prevent unnecessary recreation
-  const fetchPlans = useCallback(async () => {
-    try {
-      setLoading(true);
-      setError(null);
-      const response = await subscriptionPlansApi.getAll();
-      
-      if (!response || !response.data) {
-        throw new Error('No data received from server');
-      }
-      
-      // Make sure we always have an array, even if empty
-      if (!Array.isArray(response.data)) {
-        console.error('Invalid data format received:', response.data);
-        setPlans([]);
-        throw new Error('Invalid data format received from server');
-      }
-      
-      setPlans(response.data);
-    } catch (err) {
-      const errorMessage = err.response?.data?.message || 'Failed to fetch subscription plans. Please try again later.';
-      setError(errorMessage);
-      console.error('Error fetching plans:', err);
-      setPlans([]);
-    } finally {
-      setLoading(false);
-    }
-  }, []);
-
-  // Format price with currency symbol
-  const formatPrice = (price) => {
-    if (price === undefined || price === null) return 'N/A';
-    
-    return new Intl.NumberFormat('en-US', {
-      style: 'currency',
-      currency: 'USD',
-    }).format(price);
-  };
-
-  // Filter plans based on search term and status
-  const filteredPlans = plans.filter((plan) => {
-    const matchesSearchTerm = plan.name.toLowerCase().includes(searchTerm.toLowerCase());
-    const matchesStatus = statusFilter === 'all' || plan.status === statusFilter;
-    return matchesSearchTerm && matchesStatus;
-  });
-
-  const handleSearch = (e) => {
-    setSearchTerm(e.target.value);
-  };
-
-  const handleStatusFilterChange = (e) => {
-    setStatusFilter(e.target.value);
-  };
-
-  const handleAddNew = () => {
-    setShowAddForm(true);
-    setShowViewDetails(false);
-    setShowUpdateForm(false);
-    clearMessages();
-  };
-
-  const handleViewDetails = (plan) => {
-    setCurrentPlan(plan);
-    setShowViewDetails(true);
-    setShowAddForm(false);
-    setShowUpdateForm(false);
-    clearMessages();
-  };
-
-  const handleUpdate = (plan) => {
-    setCurrentPlan(plan);
-    setShowUpdateForm(true);
-    setShowAddForm(false);
-    setShowViewDetails(false);
-    clearMessages();
-  };
-
-  const handleDelete = async (id) => {
-    if (window.confirm('Are you sure you want to delete this subscription plan? This action cannot be undone.')) {
-      clearMessages(); // Clear previous messages
-      try {
-        await subscriptionPlansApi.delete(id);
-        setPlans(plans.filter(plan => plan._id !== id));
-        setSuccessMessage('Subscription plan deleted successfully.'); // Set success message
-      } catch (err) {
-        const errorMsg = err.response?.data?.message || 
-                       (err.response?.data?.errors ? Object.values(err.response.data.errors).join(', ') : 
-                       'Failed to delete the plan. Please try again.');
-        setError(errorMsg);
-        console.error('Error deleting plan:', err);
-      }
-    }
-  };
-
-  const handleChangeStatus = async (id, currentStatus) => {
-    clearMessages(); // Clear previous messages
-    try {
-      const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
-      const response = await subscriptionPlansApi.update(id, { status: newStatus });
-      
-      if (response && response.data) {
-        // Update the plans list with the updated plan
-        setPlans(plans.map(plan => plan._id === id ? response.data : plan));
-        setSuccessMessage(`Plan status changed to ${newStatus} successfully.`);
-      }
-    } catch (err) {
-      const errorMsg = err.response?.data?.message || 
-                     (err.response?.data?.errors ? Object.values(err.response.data.errors).join(', ') : 
-                     'Failed to change plan status. Please try again.');
-      setError(errorMsg);
-      console.error('Error changing plan status:', err);
-    }
-  };
-
-  const handleAddPlan = async (planData) => {
-    clearMessages(); // Clear previous messages
-    try {
-      const response = await subscriptionPlansApi.create(planData);
-      
-      if (response && response.data) {
-        // Add new plan to list or trigger a refresh to get updated data from server
-        setRefreshTrigger(prev => prev + 1); // Trigger a refresh
-        setShowAddForm(false);
-        setSuccessMessage('Subscription plan added successfully.');
-        return true;
-      }
-      return false;
-    } catch (err) {
-      // Enhanced error handling - extract specific validation errors if available
-      let errMsg = 'Failed to add new plan. Please check your inputs and try again.';
-      
-      if (err.response?.data?.message) {
-        errMsg = err.response.data.message;
-      } else if (err.response?.data?.errors) {
-        // If we have specific field validation errors, format them nicely
-        if (typeof err.response.data.errors === 'object') {
-          const errorMessages = Object.entries(err.response.data.errors)
-            .map(([field, message]) => `${field}: ${message}`)
-            .join('; ');
-          errMsg = `Validation errors: ${errorMessages}`;
-        } else {
-          errMsg = err.response.data.errors;
-        }
-      }
-      
-      setError(errMsg);
-      console.error('Error adding plan:', err);
-      return false;
-    }
-  };
-
-  const handleUpdatePlan = async (planData) => {
-    clearMessages(); // Clear previous messages
-    try {
-      const response = await subscriptionPlansApi.update(planData._id, planData);
-      
-      if (response && response.data) {
-        // Update the plans list or trigger a refresh
-        setRefreshTrigger(prev => prev + 1); // Trigger a refresh
-        setShowUpdateForm(false);
-        setSuccessMessage('Subscription plan updated successfully.');
-        return true;
-      }
-      return false;
-    } catch (err) {
-      // Enhanced error handling - extract specific validation errors if available
-      let errMsg = 'Failed to update the plan. Please check your inputs and try again.';
-      
-      if (err.response?.data?.message) {
-        errMsg = err.response.data.message;
-      } else if (err.response?.data?.errors) {
-        // If we have specific field validation errors, format them nicely
-        if (typeof err.response.data.errors === 'object') {
-          const errorMessages = Object.entries(err.response.data.errors)
-            .map(([field, message]) => `${field}: ${message}`)
-            .join('; ');
-          errMsg = `Validation errors: ${errorMessages}`;
-        } else {
-          errMsg = err.response.data.errors;
-        }
-      }
-      
-      setError(errMsg);
-      console.error('Error updating plan:', err);
-      return false;
-    }
-  };
-
-  const handleRefresh = () => {
-    setRefreshTrigger(prev => prev + 1); // Increment to trigger useEffect
-  };
-
-  if (loading && plans.length === 0) {
-    return (
-      <div className="loading-container">
-        <div className="loading-spinner" aria-live="polite"></div>
-        <p>Loading subscription plans...</p>
-      </div>
-    );
-  }
-
-  return (
-    <div className="subscription-container">
-      <div className="subscription-header">
-        <h2>Subscription Plans</h2>
-        <button 
-          className="btn refresh-btn" 
-          onClick={handleRefresh} 
-          title="Refresh plans list"
-          disabled={loading}
-        >
-          {loading ? 'Loading...' : '↻ Refresh'}
-        </button>
-      </div>
-      
-      {/* Display error or success messages */} 
-      {error && (
-        <div className="error-message" role="alert">
-          <p>{error}</p>
-          <button className="message-close" onClick={clearMessages} aria-label="Close error message">
-            &times;
-          </button>
-        </div>
-      )}
-      
-      {successMessage && (
-        <div className="success-message" role="alert">
-          <p>{successMessage}</p>
-          <button className="message-close" onClick={clearMessages} aria-label="Close success message">
-            &times;
-          </button>
-        </div>
-      )}
-      
-      {/* Add form, view details, or update form */}
-      {showAddForm && (
-        <SubscriptionForm 
-          onClose={() => setShowAddForm(false)} 
-          onSubmit={handleAddPlan}
-        />
-      )}
-      
-      {showViewDetails && currentPlan && (
-        <PlanDetails 
-          plan={currentPlan} 
-          onClose={() => setShowViewDetails(false)} 
-          onEdit={() => {
-            setShowViewDetails(false);
-            setShowUpdateForm(true);
-          }}
-        />
-      )}
-      
-      {showUpdateForm && currentPlan && (
-        <SubscriptionForm 
-          plan={currentPlan} 
-          onClose={() => setShowUpdateForm(false)} 
-          onSubmit={handleUpdatePlan}
-        />
-      )}
-      
-      {/* Main content */}
-      {!showAddForm && !showViewDetails && !showUpdateForm && (
-        <>
-          <div className="top-bar">
-            <div className="search-filter-container">
-              <input 
-                type="text" 
-                className="search-box" 
-                placeholder="Search Subscription..." 
-                value={searchTerm}
-                onChange={handleSearch}
-                aria-label="Search subscription plans"
-              />
-              <select 
-                className="status-filter" 
-                value={statusFilter} 
-                onChange={handleStatusFilterChange}
-                aria-label="Filter plans by status"
-              >
-                <option value="all">All Status</option>
-                <option value="active">Active</option>
-                <option value="inactive">Inactive</option>
-              </select>
-            </div>
-            <button 
-              className="btn add-btn" 
-              onClick={handleAddNew}
-              aria-label="Add new subscription plan"
-            >
-              + Add New Subscription
-            </button>
-          </div>
-
-          {filteredPlans.length === 0 ? (
-            <div className="no-plans">
-              {plans.length === 0 ? (
-                <p>No subscription plans found. Add a new plan to get started.</p>
-              ) : (
-                <p>No plans match the current search criteria. Try adjusting your search or filters.</p>
-              )}
-            </div>
-          ) : (
-            <div className="table-responsive">
-              <table className="subscription-table">
-                <thead>
-                  <tr>
-                    <th>Name</th>
-                    <th>Price</th>
-                    <th>Duration</th>
-                    <th>Status</th>
-                    <th>Subscribers</th>
-                    <th>Actions</th>
-                  </tr>
-                </thead>
-                <tbody>
-                  {filteredPlans.map((plan) => (
-                    <tr key={plan._id}>
-                      <td>{plan.name || 'Unnamed Plan'}</td>
-                      <td>{formatPrice(plan.price)}</td>
-                      <td>{plan.duration || 'Monthly'}</td>
-                      <td>
-                        <span className={`status-badge ${plan.status || 'inactive'}`}>
-                          {plan.status ? plan.status.charAt(0).toUpperCase() + plan.status.slice(1) : 'Inactive'}
-                        </span>
-                      </td>
-                      <td>{plan.subscriberCount || 0}</td>
-                      <td className="action-buttons">
-                        <button 
-                          className="btn view-btn" 
-                          onClick={() => handleViewDetails(plan)}
-                          aria-label={`View details for ${plan.name}`}
-                        >
-                          View
-                        </button>
-                        <button 
-                          className="btn update-btn" 
-                          onClick={() => handleUpdate(plan)}
-                          aria-label={`Update ${plan.name}`}
-                        >
-                          Edit
-                        </button>
-                        <button 
-                          className="btn status-btn" 
-                          onClick={() => handleChangeStatus(plan._id, plan.status)}
-                          aria-label={`Change status of ${plan.name}`}
-                          disabled={loading}
-                        >
-                          {plan.status === 'active' ? 'Deactivate' : 'Activate'}
-                        </button>
-                        <button 
-                          className="btn delete-btn" 
-                          onClick={() => handleDelete(plan._id)}
-                          aria-label={`Delete ${plan.name}`}
-                          disabled={loading || (plan.subscriberCount > 0)}
-                          title={plan.subscriberCount > 0 ? "Cannot delete plan with active subscribers" : "Delete plan"}
-                        >
-                          Delete
-                        </button>
-                      </td>
-                    </tr>
-                  ))}
-                </tbody>
-              </table>
-            </div>
-          )}
-        </>
-      )}
-    </div>
-  );
-};
-
-// Component for viewing plan details
-const PlanDetails = ({ plan, onClose, onEdit }) => {
-  // Format price with currency symbol
-  const formatPrice = (price) => {
-    if (price === undefined || price === null) return 'N/A';
-    
-    return new Intl.NumberFormat('en-US', {
-      style: 'currency',
-      currency: 'USD',
-    }).format(price);
-  };
-
-  // Format date in a user-friendly way
-  const formatDate = (dateString) => {
-    if (!dateString) return 'N/A';
-    try {
-      return new Date(dateString).toLocaleDateString('en-US', {
-        year: 'numeric',
-        month: 'long',
-        day: 'numeric'
-      });
-    } catch (error) {
-      return 'Invalid Date';
-    }
-  };
-  
-  return (
-    <div className="plan-details">
-      <h3>Plan Details</h3>
-      <div className="detail-row">
-        <span className="detail-label">Name:</span>
-        <span className="detail-value">{plan.name || 'Unnamed Plan'}</span>
-      </div>
-      <div className="detail-row">
-        <span className="detail-label">Price:</span>
-        <span className="detail-value">{formatPrice(plan.price)}</span>
-      </div>
-      <div className="detail-row">
-        <span className="detail-label">Status:</span>
-        <span className={`detail-value status-${plan.status || 'inactive'}`}>
-          {plan.status ? plan.status.charAt(0).toUpperCase() + plan.status.slice(1) : 'Inactive'}
-        </span>
-      </div>
-      <div className="detail-row">
-        <span className="detail-label">Duration:</span>
-        <span className="detail-value">{plan.duration || 'Monthly'}</span>
-      </div>
-      <div className="detail-row">
-        <span className="detail-label">Subscribers:</span>
-        <span className="detail-value">{plan.subscriberCount || 0} active users</span>
-      </div>
-      <div className="detail-row">
-        <span className="detail-label">Description:</span>
-        <span className="detail-value description">
-          {plan.description || 'No description provided.'}
-        </span>
-      </div>
-      {Array.isArray(plan.features) && plan.features.length > 0 && (
-        <div className="detail-row">
-          <span className="detail-label">Features:</span>
-          <ul className="detail-features">
-            {plan.features.map((feature, index) => (
-              <li key={index}>{feature}</li>
-            ))}
-          </ul>
-        </div>
-      )}
-      <div className="detail-row">
-        <span className="detail-label">Created:</span>
-        <span className="detail-value">{formatDate(plan.createdAt)}</span>
-      </div>
-      <div className="detail-row">
-        <span className="detail-label">Last Updated:</span>
-        <span className="detail-value">{formatDate(plan.updatedAt)}</span>
-      </div>
-      <div className="plan-details-actions">
-        {onEdit && (
-          <button className="btn edit-btn" onClick={onEdit}>Edit</button>
-        )}
-        <button className="btn close-btn" onClick={onClose}>Close</button>
-      </div>
-    </div>
-  );
-};
-
-// Component for adding/updating subscription plan
-const SubscriptionForm = ({ plan, onClose, onSubmit }) => {
-  const [formData, setFormData] = useState({
-    _id: plan?._id || '',
-    name: plan?.name || '',
-    price: plan?.price || '',
-    subscriberCount: plan?.subscriberCount || 0,
-    description: plan?.description || '',
-    duration: plan?.duration || 'Monthly',
-    status: plan?.status || 'active',
-    features: plan?.features || []
-  });
-  const [submitting, setSubmitting] = useState(false);
-  const [formError, setFormError] = useState('');
-  const [fieldErrors, setFieldErrors] = useState({});
-  const [newFeature, setNewFeature] = useState('');
-
-  const handleChange = (e) => {
-    const { name, value } = e.target;
-    
-    // Clear field error when user starts typing
-    setFieldErrors({
-      ...fieldErrors,
-      [name]: ''
-    });
-    
-    if (name === 'price') {
-      // Allow only numbers and decimal point in price field
-      if (value === '' || /^\d*\.?\d*$/.test(value)) {
-        setFormData({ ...formData, [name]: value });
-      }
-    } else if (name === 'subscriberCount') {
-      // Allow only non-negative integers
-      if (value === '' || /^\d+$/.test(value)) {
-        setFormData({ ...formData, [name]: value });
-      }
-    } else {
-      setFormData({ ...formData, [name]: value });
-    }
-  };
-
-  const handleAddFeature = () => {
-    if (newFeature.trim()) {
-      // Check for duplicate features
-      if (formData.features.includes(newFeature.trim())) {
-        setFieldErrors({
-          ...fieldErrors,
-          features: 'This feature already exists'
-        });
-        return;
-      }
-      
-      setFormData({
-        ...formData,
-        features: [...formData.features, newFeature.trim()]
-      });
-      setNewFeature('');
-      // Clear feature error if any
-      setFieldErrors({
-        ...fieldErrors,
-        features: ''
-      });
-    }
-  };
-
-  const handleRemoveFeature = (index) => {
-    const updatedFeatures = [...formData.features];
-    updatedFeatures.splice(index, 1);
-    setFormData({ ...formData, features: updatedFeatures });
-  };
-
-  const handleKeyPress = (e) => {
-    if (e.key === 'Enter') {
-      e.preventDefault();
-      handleAddFeature();
-    }
-  };
-
-  const validateForm = () => {
-    const errors = {};
-    let isValid = true;
-    
-    if (!formData.name.trim()) {
-      errors.name = 'Plan name is required';
-      isValid = false;
-    } else if (formData.name.trim().length < 2) {
-      errors.name = 'Plan name must be at least 2 characters';
-      isValid = false;
-    }
-    
-    if (!formData.price) {
-      errors.price = 'Price is required';
-      isValid = false;
-    } else {
-      const priceValue = parseFloat(formData.price);
-      if (isNaN(priceValue)) {
-        errors.price = 'Price must be a valid number';
-        isValid = false;
-      } else if (priceValue < 0) {
-        errors.price = 'Price cannot be negative';
-        isValid = false;
-      } else if (priceValue > 9999) {
-        errors.price = 'Price cannot exceed $9,999';
-        isValid = false;
-      }
-    }
-    
-    if (!formData.duration) {
-      errors.duration = 'Duration is required';
-      isValid = false;
-    }
-    
-    if (formData.description && formData.description.length > 500) {
-      errors.description = 'Description cannot exceed 500 characters';
-      isValid = false;
-    }
-    
-    // Update field errors
-    setFieldErrors(errors);
-    
-    if (!isValid) {
-      setFormError('Please correct the errors in the form');
-    }
-    
-    return isValid;
-  };
-
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    setFormError(''); // Clear previous errors
-    setFieldErrors({});
-
-    // Frontend Validation
-    if (!validateForm()) {
-      return;
-    }
-
-    setSubmitting(true);
-    
-    try {
-      const dataToSubmit = {
-        ...formData,
-        price: parseFloat(formData.price),
-        subscriberCount: parseInt(formData.subscriberCount, 10) || 0
-      };
-      
-      const success = await onSubmit(dataToSubmit);
-      if (success) {
-        onClose();
-      }
-    } catch (err) {
-      setFormError(err.message || 'An error occurred. Please try again.');
-      console.error("Submission Error:", err);
-    } finally {
-      setSubmitting(false);
-    }
-  };
-
-  return (
-    <div className="subscription-form">
-      <h3>{plan ? 'Update Subscription Plan' : 'Add New Subscription Plan'}</h3>
-      
-      {formError && (
-        <div className="form-error" role="alert">
-          <p>{formError}</p>
-          <button className="close-button" onClick={() => setFormError('')} aria-label="Close error message">
-            &times;
-          </button>
-        </div>
-      )}
-      
-      <form onSubmit={handleSubmit}>
-        <div className="form-grid">
-          <div className={`form-group ${fieldErrors.name ? 'has-error' : ''}`}>
-            <label htmlFor="name">Plan Name <span className="required">*</span></label>
-            <input 
-              type="text" 
-              id="name" 
-              name="name" 
-              value={formData.name} 
-              onChange={handleChange}
-              maxLength="100"
-              required
-              disabled={submitting}
-              placeholder="e.g. Basic Plan"
-              aria-invalid={Boolean(fieldErrors.name)}
-              aria-describedby={fieldErrors.name ? 'name-error' : undefined}
-            />
-            {fieldErrors.name && (
-              <div className="field-error" id="name-error">{fieldErrors.name}</div>
-            )}
-          </div>
-          
-          <div className={`form-group ${fieldErrors.price ? 'has-error' : ''}`}>
-            <label htmlFor="price">Price <span className="required">*</span></label>
-            <input 
-              type="text" 
-              id="price" 
-              name="price" 
-              value={formData.price} 
-              onChange={handleChange}
-              required
-              disabled={submitting}
-              placeholder="e.g. 9.99"
-              aria-invalid={Boolean(fieldErrors.price)}
-              aria-describedby={fieldErrors.price ? 'price-error' : undefined}
-            />
-            {fieldErrors.price && (
-              <div className="field-error" id="price-error">{fieldErrors.price}</div>
-            )}
-          </div>
-          
-          <div className={`form-group ${fieldErrors.duration ? 'has-error' : ''}`}>
-            <label htmlFor="duration">Duration <span className="required">*</span></label>
-            <select 
-              id="duration" 
-              name="duration" 
-              value={formData.duration} 
-              onChange={handleChange}
-              required
-              disabled={submitting}
-              aria-invalid={Boolean(fieldErrors.duration)}
-              aria-describedby={fieldErrors.duration ? 'duration-error' : undefined}
-            >
-              <option value="Monthly">Monthly</option>
-              <option value="Quarterly">Quarterly</option>
-              <option value="Semi-Annual">Semi-Annual</option>
-              <option value="Annual">Annual</option>
-            </select>
-            {fieldErrors.duration && (
-              <div className="field-error" id="duration-error">{fieldErrors.duration}</div>
-            )}
-          </div>
-          
-          <div className="form-group">
-            <label htmlFor="status">Status</label>
-            <select 
-              id="status" 
-              name="status" 
-              value={formData.status} 
-              onChange={handleChange}
-              disabled={submitting}
-            >
-              <option value="active">Active</option>
-              <option value="inactive">Inactive</option>
-            </select>
-          </div>
-          
-          <div className={`form-group ${fieldErrors.description ? 'has-error' : ''}`}>
-            <label htmlFor="description">Description</label>
-            <textarea 
-              id="description" 
-              name="description" 
-              value={formData.description} 
-              onChange={handleChange}
-              rows="4"
-              disabled={submitting}
-              placeholder="A detailed description of the subscription plan benefits"
-              maxLength="500"
-              aria-invalid={Boolean(fieldErrors.description)}
-              aria-describedby={fieldErrors.description ? 'description-error' : undefined}
-            />
-            {fieldErrors.description && (
-              <div className="field-error" id="description-error">{fieldErrors.description}</div>
-            )}
-            <div className="char-count">
-              {formData.description.length}/500 characters
-            </div>
-          </div>
-          
-          <div className={`form-group ${fieldErrors.features ? 'has-error' : ''}`}>
-            <label htmlFor="features">Features</label>
-            <div className="feature-input-group">
-              <input 
-                type="text" 
-                id="features" 
-                value={newFeature} 
-                onChange={(e) => setNewFeature(e.target.value)} 
-                onKeyPress={handleKeyPress}
-                disabled={submitting}
-                placeholder="Add a feature and press Enter or Add"
-                aria-invalid={Boolean(fieldErrors.features)}
-                aria-describedby={fieldErrors.features ? 'features-error' : undefined}
-              />
-              <button 
-                type="button" 
-                className="btn add-feature-btn" 
-                onClick={handleAddFeature}
-                disabled={!newFeature.trim() || submitting}
-              >
-                Add
-              </button>
-            </div>
-            {fieldErrors.features && (
-              <div className="field-error" id="features-error">{fieldErrors.features}</div>
-            )}
-            {formData.features.length > 0 && (
-              <ul className="feature-list">
-                {formData.features.map((feature, index) => (
-                  <li key={index}>
-                    {feature}
-                    <button 
-                      type="button" 
-                      className="remove-feature-btn"
-                      onClick={() => handleRemoveFeature(index)}
-                      disabled={submitting}
-                      aria-label={`Remove feature: ${feature}`}
-                    >
-                      &times;
-                    </button>
-                  </li>
-                ))}
-              </ul>
-            )}
-          </div>
-        </div>
-      
-        <div className="form-actions">
-          <button 
-            type="submit" 
-            className="btn submit-btn"
-            disabled={submitting}
-          >
-            {submitting ? 'Processing...' : (plan ? 'Update Plan' : 'Add Plan')}
-          </button>
-          <button 
-            type="button" 
-            className="btn cancel-btn" 
-            onClick={onClose}
-            disabled={submitting}
-          >
-            Cancel
-          </button>
-        </div>
-      </form>
-    </div>
-  );
-};
-
-export default SubscriptionPlans;
\ No newline at end of file
diff --git a/frontend/src/components/financial/manager/ActionRequiredWidget.jsx b/frontend/src/components/financial/manager/ActionRequiredWidget.jsx
deleted file mode 100644
index db41789..0000000
--- a/frontend/src/components/financial/manager/ActionRequiredWidget.jsx
+++ /dev/null
@@ -1,140 +0,0 @@
-import React from 'react';
-import { Box, Card, CardContent, Typography, List, ListItem, ListItemText, Chip } from '@mui/material';
-import WarningAmberIcon from '@mui/icons-material/WarningAmber';
-import './ManagerDashboardWidgets.css';
-
-/**
- * Action Required Widget for Financial Manager Dashboard
- * Shows urgent items requiring attention such as pending approvals, expiring subscriptions, etc.
- */
-const ActionRequiredWidget = ({ data }) => {
-  // Extract data with fallbacks, using names matching the backend API response
-  const { 
-    pendingExpenses = [],       // Changed from pendingApprovals
-    subscriptionsEndingSoon = [], // Changed from expiringSubscriptions
-    pendingPayments = []
-  } = data || {};
-  
-  // Count total actions needed using the correct variable names
-  const totalActions = pendingExpenses.length + subscriptionsEndingSoon.length + pendingPayments.length;
-  
-  return (
-    <Card className="dashboard-widget action-required-widget">
-      <CardContent>
-        <Box className="widget-header">
-          <Typography variant="h6" component="h3" className="widget-title">
-            <WarningAmberIcon fontSize="small" sx={{ mr: 1 }} />
-            Action Required
-            <Chip 
-              label={totalActions} 
-              color={totalActions > 0 ? "error" : "default"}
-              size="small"
-              className="action-count-chip"
-            />
-          </Typography>
-        </Box>
-        
-        {totalActions === 0 ? (
-          <Box className="no-actions-message">
-            <Typography variant="body1" color="textSecondary" align="center">
-              No pending actions require your attention
-            </Typography>
-          </Box>
-        ) : (
-          <Box className="action-lists-container">
-            {/* Pending Expenses (formerly Approvals) */}
-            {pendingExpenses.length > 0 && (
-              <Box className="action-list">
-                <Box className="action-list-header">
-                  <Typography variant="subtitle2">
-                    Pending Expenses
-                  </Typography>
-                  <Chip 
-                    label={pendingExpenses.length}
-                    size="small"
-                    color="primary"
-                  />
-                </Box>
-                <List dense disablePadding>
-                  {pendingExpenses.slice(0, 3).map((item, index) => (
-                    <ListItem key={`expense-${index}`}> {/* Changed key prefix */}
-                      <ListItemText 
-                        primary={item.description || 'Expense requires review'} // Updated text
-                        secondary={`Amount: ${new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(item.amount || 0)}`}
-                      />
-                    </ListItem>
-                  ))}
-                </List>
-              </Box>
-            )}
-            
-            {/* Subscriptions Ending Soon (formerly Expiring) */}
-            {subscriptionsEndingSoon.length > 0 && (
-              <Box className="action-list">
-                <Box className="action-list-header">
-                  <Typography variant="subtitle2">
-                    Subscriptions Ending Soon
-                  </Typography>
-                  <Chip 
-                    label={subscriptionsEndingSoon.length}
-                    size="small"
-                    color="warning"
-                  />
-                </Box>
-                <List dense disablePadding>
-                  {subscriptionsEndingSoon.slice(0, 3).map((item, index) => (
-                    <ListItem key={`subscription-${index}`}>
-                      <ListItemText 
-                        primary={`${item.user?.name || 'Customer'}'s ${item.subscriptionPlan?.name || 'subscription'}`}
-                        secondary={`Ends: ${new Date(item.endDate).toLocaleDateString()}`}
-                      />
-                    </ListItem>
-                  ))}
-                </List>
-              </Box>
-            )}
-            
-            {/* Pending Payments (remains the same) */}
-            {pendingPayments.length > 0 && (
-              <Box className="action-list">
-                <Box className="action-list-header">
-                  <Typography variant="subtitle2">
-                    Pending Payments
-                  </Typography>
-                  <Chip 
-                    label={pendingPayments.length}
-                    size="small"
-                    color="error"
-                  />
-                </Box>
-                <List dense disablePadding>
-                  {pendingPayments.slice(0, 3).map((item, index) => (
-                    <ListItem key={`payment-${index}`}>
-                      <ListItemText 
-                        primary={`${item.description || 'Payment'} - ${new Intl.NumberFormat('en-US', {
-                          style: 'currency',
-                          currency: 'USD'
-                        }).format(item.amount || 0)}`}
-                        secondary={`Due: ${new Date(item.dueDate).toLocaleDateString()}`}
-                      />
-                    </ListItem>
-                  ))}
-                </List>
-              </Box>
-            )}
-            
-            {totalActions > 9 && (
-              <Box className="view-all-actions">
-                <Typography variant="button" color="primary">
-                  View All ({totalActions})
-                </Typography>
-              </Box>
-            )}
-          </Box>
-        )}
-      </CardContent>
-    </Card>
-  );
-};
-
-export default ActionRequiredWidget;
\ No newline at end of file
diff --git a/frontend/src/components/financial/manager/DailyActivityWidget.jsx b/frontend/src/components/financial/manager/DailyActivityWidget.jsx
deleted file mode 100644
index 63cfbb5..0000000
--- a/frontend/src/components/financial/manager/DailyActivityWidget.jsx
+++ /dev/null
@@ -1,85 +0,0 @@
-import React from 'react';
-import { Box, Card, CardContent, Typography, List, ListItem, Avatar, ListItemText, ListItemAvatar } from '@mui/material';
-import PaymentsIcon from '@mui/icons-material/Payments';
-import './ManagerDashboardWidgets.css';
-
-// Helper function to format currency
-const formatCurrency = (amount) => {
-  return new Intl.NumberFormat('en-US', {
-    style: 'currency',
-    currency: 'USD',
-    minimumFractionDigits: 2
-  }).format(amount || 0);
-};
-
-// Helper function to format time
-const formatTime = (dateString) => {
-  if (!dateString) return 'N/A';
-  
-  const date = new Date(dateString);
-  if (isNaN(date.getTime())) return 'Invalid time';
-  
-  return date.toLocaleTimeString('en-US', {
-    hour: '2-digit',
-    minute: '2-digit'
-  });
-};
-
-/**
- * Daily Activity Widget for Financial Manager Dashboard
- * Shows a feed of recent financial activities (payments received today)
- */
-const DailyActivityWidget = ({ data }) => {
-  // Extract data with fallbacks
-  const { recentPayments = [] } = data || {};
-  
-  return (
-    <Card className="dashboard-widget daily-activity-widget">
-      <CardContent>
-        <Typography variant="h6" component="h3" className="widget-title">
-          Today's Activity
-        </Typography>
-        
-        {recentPayments.length === 0 ? (
-          <Box className="no-activity-message">
-            <Typography variant="body1" color="textSecondary" align="center">
-              No financial activity recorded today
-            </Typography>
-          </Box>
-        ) : (
-          <List className="activity-list" disablePadding>
-            {recentPayments.map((payment) => (
-              <ListItem 
-                key={payment._id || payment.id} 
-                divider 
-                className="activity-item"
-              >
-                <ListItemAvatar>
-                  <Avatar className="activity-avatar">
-                    <PaymentsIcon />
-                  </Avatar>
-                </ListItemAvatar>
-                <ListItemText
-                  primary={
-                    <Box className="activity-primary">
-                      <span className="activity-type">Payment Received</span>
-                      <span className="activity-amount">{formatCurrency(payment.amount)}</span>
-                    </Box>
-                  }
-                  secondary={
-                    <Box component="span" className="activity-secondary">
-                      <span className="activity-customer">{payment.user?.name || 'Unknown customer'}</span>
-                      <span className="activity-time">{formatTime(payment.paymentDate)}</span>
-                    </Box>
-                  }
-                />
-              </ListItem>
-            ))}
-          </List>
-        )}
-      </CardContent>
-    </Card>
-  );
-};
-
-export default DailyActivityWidget;
\ No newline at end of file
diff --git a/frontend/src/components/financial/manager/DailySnapshotWidget.jsx b/frontend/src/components/financial/manager/DailySnapshotWidget.jsx
deleted file mode 100644
index c214a95..0000000
--- a/frontend/src/components/financial/manager/DailySnapshotWidget.jsx
+++ /dev/null
@@ -1,114 +0,0 @@
-import React from 'react';
-import { Box, Card, CardContent, Typography, Grid, Divider } from '@mui/material';
-import TrendingUpIcon from '@mui/icons-material/TrendingUp';
-import TrendingDownIcon from '@mui/icons-material/TrendingDown';
-import PeopleIcon from '@mui/icons-material/People';
-import AssignmentTurnedInIcon from '@mui/icons-material/AssignmentTurnedIn';
-import './ManagerDashboardWidgets.css';
-
-// Helper function to format currency
-const formatCurrency = (amount) => {
-  return new Intl.NumberFormat('en-US', {
-    style: 'currency',
-    currency: 'USD',
-    minimumFractionDigits: 2
-  }).format(amount || 0);
-};
-
-/**
- * Daily Snapshot Widget for Financial Manager Dashboard
- * Displays key daily metrics: revenue, expenses, new customers, and staff attendance
- */
-const DailySnapshotWidget = ({ data }) => {
-  // Extract data with fallbacks
-  const { revenue = 0, expenses = 0, newCustomers = 0, staffAttendance = {} } = data || {};
-  const { present = 0, absent = 0, late = 0, leave = 0 } = staffAttendance;
-  const totalStaff = present + absent + late + leave;
-  
-  return (
-    <Card className="dashboard-widget daily-snapshot-widget">
-      <CardContent>
-        <Typography variant="h6" component="h3" className="widget-title">
-          Today's Snapshot
-        </Typography>
-        
-        <Grid container spacing={2} columns={{ xs: 12, sm: 12, md: 12, lg: 12 }} className="snapshot-grid">
-          <Grid xs={12} sm={6} md={3}>
-            <Box className="snapshot-item">
-              <Box className="snapshot-icon revenue">
-                <TrendingUpIcon />
-              </Box>
-              <Box className="snapshot-content">
-                <Typography variant="body2" color="textSecondary" component="span">
-                  Today's Revenue
-                </Typography>
-                <Typography variant="h6" component="p">
-                  {formatCurrency(revenue)}
-                </Typography>
-              </Box>
-            </Box>
-          </Grid>
-          <Grid xs={12} sm={6} md={3}>
-            <Box className="snapshot-item">
-              <Box className="snapshot-icon expenses">
-                <TrendingDownIcon />
-              </Box>
-              <Box className="snapshot-content">
-                <Typography variant="body2" color="textSecondary" component="span">
-                  Today's Expenses
-                </Typography>
-                <Typography variant="h6" component="p">
-                  {formatCurrency(expenses)}
-                </Typography>
-              </Box>
-            </Box>
-          </Grid>
-          <Grid xs={12} sm={6} md={3}>
-            <Box className="snapshot-item">
-              <Box className="snapshot-icon customers">
-                <PeopleIcon />
-              </Box>
-              <Box className="snapshot-content">
-                <Typography variant="body2" color="textSecondary" component="span">
-                  New Customers
-                </Typography>
-                <Typography variant="h6" component="p">
-                  {newCustomers}
-                </Typography>
-              </Box>
-            </Box>
-          </Grid>
-          <Grid xs={12} sm={6} md={3}>
-            <Box className="snapshot-item">
-              <Box className="snapshot-icon attendance">
-                <AssignmentTurnedInIcon />
-              </Box>
-              <Box className="snapshot-content">
-                <Typography variant="body2" color="textSecondary" component="span">
-                  Staff Attendance
-                </Typography>
-                <Typography variant="h6" component="p">
-                  {present}/{totalStaff}
-                </Typography>
-              </Box>
-            </Box>
-          </Grid>
-        </Grid>
-        <Divider sx={{ my: 1.5 }} />
-        <Box className="attendance-breakdown">
-          <Typography variant="caption" color="textSecondary" component="span">
-            Attendance Breakdown: 
-          </Typography>
-          <Box className="attendance-stats">
-            <span className="attendance-stat present">{present} Present</span>
-            <span className="attendance-stat absent">{absent} Absent</span>
-            <span className="attendance-stat late">{late} Late</span>
-            <span className="attendance-stat leave">{leave} Leave</span>
-          </Box>
-        </Box>
-      </CardContent>
-    </Card>
-  );
-};
-
-export default DailySnapshotWidget;
\ No newline at end of file
diff --git a/frontend/src/components/financial/manager/FinancialManagerDashboard.jsx b/frontend/src/components/financial/manager/FinancialManagerDashboard.jsx
deleted file mode 100644
index c9ad004..0000000
--- a/frontend/src/components/financial/manager/FinancialManagerDashboard.jsx
+++ /dev/null
@@ -1,141 +0,0 @@
-import React, { useState, useEffect } from 'react';
-import { Container, Grid, Typography, Box, Button, CircularProgress, Alert } from '@mui/material';
-import RefreshIcon from '@mui/icons-material/Refresh';
-import dashboardService from '../../../services/dashboardService';
-
-// Import all widget components
-import DailySnapshotWidget from './DailySnapshotWidget';
-import ActionRequiredWidget from './ActionRequiredWidget';
-import DailyActivityWidget from './DailyActivityWidget';
-import RecentMessagesWidget from './RecentMessagesWidget';
-import UpcomingEventsWidget from './UpcomingEventsWidget';
-
-import './ManagerDashboardWidgets.css';
-
-/**
- * Financial Manager Dashboard Component
- * Serves as the main dashboard for financial managers showing key financial metrics and widgets
- */
-const FinancialManagerDashboard = () => {
-  const [dashboardData, setDashboardData] = useState(null);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState(null);
-
-  const fetchDashboardData = async () => {
-    try {
-      setLoading(true);
-      setError(null);
-      
-      const data = await dashboardService.getFinancialManagerDashboard();
-      setDashboardData(data);
-    } catch (err) {
-      console.error('Error fetching dashboard data:', err);
-      setError(err.response?.data?.message || 'Failed to load dashboard data. Please try again.');
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  // Fetch dashboard data on component mount
-  useEffect(() => {
-    fetchDashboardData();
-  }, []);
-
-  // Handle manual refresh
-  const handleRefresh = () => {
-    fetchDashboardData();
-  };
-
-  // Show loading state
-  if (loading && !dashboardData) {
-    return (
-      <Box
-        display="flex"
-        justifyContent="center"
-        alignItems="center"
-        minHeight="400px"
-      >
-        <CircularProgress />
-      </Box>
-    );
-  }
-
-  // Show error state
-  if (error && !dashboardData) {
-    return (
-      <Box p={3}>
-        <Alert 
-          severity="error" 
-          action={
-            <Button color="inherit" size="small" onClick={handleRefresh}>
-              Retry
-            </Button>
-          }
-        >
-          {error}
-        </Alert>
-      </Box>
-    );
-  }
-
-  return (
-    <Container maxWidth="xl" className="financial-manager-dashboard">
-      <Box className="dashboard-header" mb={3}>
-        <Typography variant="h4" component="h1">
-          Financial Manager Dashboard
-        </Typography>
-        <Button 
-          variant="outlined" 
-          startIcon={<RefreshIcon />}
-          onClick={handleRefresh}
-          disabled={loading}
-        >
-          {loading ? 'Refreshing...' : 'Refresh'}
-        </Button>
-      </Box>
-
-      {loading && (
-        <Box display="flex" justifyContent="center" mb={2}>
-          <CircularProgress size={24} />
-        </Box>
-      )}
-
-      {error && (
-        <Alert severity="error" sx={{ mb: 3 }}>
-          {error}
-        </Alert>
-      )}
-
-      <Grid container spacing={3} columns={{ xs: 12, md: 12, lg: 12 }}>
-        <Grid item xs={12} lg={8}>
-          <DailySnapshotWidget data={dashboardData?.dailySnapshot} />
-        </Grid>
-        <Grid item xs={12} lg={4}>
-          <ActionRequiredWidget data={dashboardData?.actionRequired} />
-        </Grid>
-        <Grid item xs={12} md={6} lg={4}>
-          <DailyActivityWidget data={dashboardData?.dailyActivity} />
-        </Grid>
-        <Grid item xs={12} md={6} lg={4}>
-          <RecentMessagesWidget data={dashboardData?.communications} />
-        </Grid>
-        <Grid item xs={12} lg={4}>
-          <UpcomingEventsWidget data={dashboardData?.calendar} />
-        </Grid>
-        <Grid item xs={12}>
-          <Box className="dashboard-quick-links">
-            <Button 
-              variant="contained" 
-              color="primary"
-              href="/dashboard/financial-overview"
-            >
-              Go to Detailed Financial Dashboard
-            </Button>
-          </Box>
-        </Grid>
-      </Grid>
-    </Container>
-  );
-};
-
-export default FinancialManagerDashboard;
\ No newline at end of file
diff --git a/frontend/src/components/financial/manager/ManagerDashboardWidgets.css b/frontend/src/components/financial/manager/ManagerDashboardWidgets.css
deleted file mode 100644
index 8fc422c..0000000
--- a/frontend/src/components/financial/manager/ManagerDashboardWidgets.css
+++ /dev/null
@@ -1,330 +0,0 @@
-/* ManagerDashboardWidgets.css - Styling for financial manager dashboard widgets */
-
-/* Common styling for all dashboard widgets */
-.dashboard-widget {
-  height: 100%;
-  transition: transform 0.3s ease, box-shadow 0.3s ease;
-  overflow: hidden;
-}
-
-.dashboard-widget:hover {
-  transform: translateY(-4px);
-  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
-}
-
-.widget-title {
-  display: flex;
-  align-items: center;
-  margin-bottom: 16px;
-  font-weight: 600;
-  color: #333;
-}
-
-/* Daily Snapshot Widget */
-.daily-snapshot-widget .snapshot-grid {
-  margin-bottom: 12px;
-}
-
-.snapshot-item {
-  display: flex;
-  align-items: center;
-  gap: 12px;
-  padding: 12px;
-  border-radius: 8px;
-  background-color: #f9f9f9;
-  transition: background-color 0.2s;
-}
-
-.snapshot-item:hover {
-  background-color: #f0f0f0;
-}
-
-.snapshot-icon {
-  width: 40px;
-  height: 40px;
-  border-radius: 50%;
-  display: flex;
-  align-items: center;
-  justify-content: center;
-  color: white;
-}
-
-.snapshot-icon.revenue {
-  background-color: #4caf50;
-}
-
-.snapshot-icon.expenses {
-  background-color: #f44336;
-}
-
-.snapshot-icon.customers {
-  background-color: #2196f3;
-}
-
-.snapshot-icon.attendance {
-  background-color: #9c27b0;
-}
-
-.snapshot-content {
-  flex: 1;
-}
-
-.attendance-breakdown {
-  display: flex;
-  flex-direction: column;
-  gap: 8px;
-}
-
-.attendance-stats {
-  display: flex;
-  flex-wrap: wrap;
-  gap: 8px;
-}
-
-.attendance-stat {
-  padding: 4px 8px;
-  border-radius: 12px;
-  font-size: 0.75rem;
-}
-
-.attendance-stat.present {
-  background-color: #e8f5e9;
-  color: #2e7d32;
-}
-
-.attendance-stat.absent {
-  background-color: #ffebee;
-  color: #c62828;
-}
-
-.attendance-stat.late {
-  background-color: #fff8e1;
-  color: #ff8f00;
-}
-
-.attendance-stat.leave {
-  background-color: #e0f7fa;
-  color: #006064;
-}
-
-/* Action Required Widget */
-.action-required-widget .widget-header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-}
-
-.action-count-chip {
-  margin-left: 8px;
-}
-
-.action-lists-container {
-  display: flex;
-  flex-direction: column;
-  gap: 16px;
-}
-
-.action-list {
-  background-color: #f9f9f9;
-  border-radius: 8px;
-  padding: 12px;
-}
-
-.action-list-header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  margin-bottom: 8px;
-  padding-bottom: 4px;
-  border-bottom: 1px solid #eee;
-}
-
-.view-all-actions {
-  display: flex;
-  justify-content: center;
-  margin-top: 8px;
-  cursor: pointer;
-}
-
-/* Daily Activity Widget */
-.daily-activity-widget .activity-item {
-  border-left: 3px solid transparent;
-  transition: background-color 0.2s;
-  margin-bottom: 4px;
-}
-
-.activity-item:hover {
-  background-color: #f5f5f5;
-}
-
-.activity-payment {
-  border-left-color: #4caf50;
-}
-
-.activity-expense {
-  border-left-color: #f44336;
-}
-
-.activity-subscription {
-  border-left-color: #2196f3;
-}
-
-.activity-header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-}
-
-.activity-time {
-  color: #757575;
-  font-size: 0.8rem;
-}
-
-.activity-avatar {
-  background-color: #e0e0e0;
-}
-
-.activity-amount {
-  font-weight: 500;
-  color: #333;
-}
-
-.activity-customer {
-  font-size: 0.85rem;
-  color: #616161;
-}
-
-.activity-secondary {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-}
-
-/* Recent Messages Widget */
-.recent-messages-widget .message-item {
-  transition: background-color 0.2s;
-}
-
-.message-item:hover {
-  background-color: #f5f5f5;
-}
-
-.message-header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-}
-
-.message-sender {
-  font-weight: 500;
-}
-
-.message-time {
-  color: #757575;
-}
-
-.message-preview {
-  overflow: hidden;
-  text-overflow: ellipsis;
-  display: -webkit-box;
-  -webkit-line-clamp: 2;
-  -webkit-box-orient: vertical;
-  color: #616161;
-}
-
-.view-all-messages {
-  text-align: center;
-}
-
-/* Upcoming Events Widget */
-.upcoming-events-widget .event-date {
-  padding: 8px;
-  min-width: 60px;
-  text-align: center;
-  border-radius: 8px;
-  background-color: #f5f5f5;
-}
-
-.event-date .month {
-  text-transform: uppercase;
-  font-size: 0.7rem;
-  font-weight: 500;
-  color: #757575;
-}
-
-.event-date .day {
-  font-size: 1.2rem;
-  font-weight: 600;
-  color: #333;
-}
-
-.event-content {
-  flex: 1;
-}
-
-.event-title {
-  font-weight: 500;
-  margin-bottom: 2px;
-}
-
-.event-meta {
-  display: flex;
-  flex-wrap: wrap;
-  gap: 8px;
-  align-items: center;
-  font-size: 0.75rem;
-  color: #757575;
-}
-
-.event-type-indicator {
-  height: 8px;
-  width: 8px;
-  border-radius: 50%;
-  display: inline-block;
-  margin-right: 4px;
-}
-
-.event-type-payment {
-  background-color: #4caf50;
-}
-
-.event-type-meeting {
-  background-color: #2196f3;
-}
-
-.event-type-deadline {
-  background-color: #f44336;
-}
-
-.event-type-reminder {
-  background-color: #ff9800;
-}
-
-.no-events-message,
-.no-messages-message,
-.no-activity-message,
-.no-actions-message {
-  padding: 24px;
-  text-align: center;
-  color: #9e9e9e;
-}
-
-/* Responsive adjustments */
-@media (max-width: 600px) {
-  .snapshot-grid {
-    gap: 8px;
-  }
-  
-  .snapshot-item {
-    padding: 8px;
-  }
-  
-  .snapshot-icon {
-    width: 32px;
-    height: 32px;
-  }
-  
-  .attendance-stats {
-    flex-direction: column;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/components/financial/manager/RecentMessagesWidget.jsx b/frontend/src/components/financial/manager/RecentMessagesWidget.jsx
deleted file mode 100644
index 14f89a6..0000000
--- a/frontend/src/components/financial/manager/RecentMessagesWidget.jsx
+++ /dev/null
@@ -1,131 +0,0 @@
-import React from 'react';
-import { Box, Card, CardContent, Typography, List, ListItem, ListItemText, Avatar, ListItemAvatar, Button } from '@mui/material';
-import EmailIcon from '@mui/icons-material/Email';
-import './ManagerDashboardWidgets.css';
-
-// Helper function to format dates relative to today
-const formatRelativeTime = (dateString) => {
-  if (!dateString) return 'N/A';
-  
-  const date = new Date(dateString);
-  if (isNaN(date.getTime())) return 'Invalid date';
-  
-  const now = new Date();
-  const diffInSeconds = Math.floor((now - date) / 1000);
-  
-  // Less than a minute
-  if (diffInSeconds < 60) {
-    return 'just now';
-  }
-  
-  // Less than an hour
-  if (diffInSeconds < 3600) {
-    const minutes = Math.floor(diffInSeconds / 60);
-    return `${minutes} ${minutes === 1 ? 'minute' : 'minutes'} ago`;
-  }
-  
-  // Less than a day
-  if (diffInSeconds < 86400) {
-    const hours = Math.floor(diffInSeconds / 3600);
-    return `${hours} ${hours === 1 ? 'hour' : 'hours'} ago`;
-  }
-  
-  // Less than a week
-  if (diffInSeconds < 604800) {
-    const days = Math.floor(diffInSeconds / 86400);
-    return `${days} ${days === 1 ? 'day' : 'days'} ago`;
-  }
-  
-  // Format as date
-  return date.toLocaleDateString('en-US', {
-    month: 'short',
-    day: 'numeric'
-  });
-};
-
-// Helper function to truncate text
-const truncateText = (text, maxLength) => {
-  if (!text) return '';
-  if (text.length <= maxLength) return text;
-  
-  return text.substring(0, maxLength) + '...';
-};
-
-/**
- * Recent Messages Widget for Financial Manager Dashboard
- * Displays recent communications related to financial matters
- */
-const RecentMessagesWidget = ({ data }) => {
-  // Extract data with fallbacks
-  const { recentMessages = [] } = data || {};
-  
-  return (
-    <Card className="dashboard-widget recent-messages-widget">
-      <CardContent>
-        <Typography variant="h6" component="h3" className="widget-title">
-          Recent Communications
-        </Typography>
-        
-        {recentMessages.length === 0 ? (
-          <Box className="no-messages-message">
-            <Typography variant="body1" color="textSecondary" align="center">
-              No recent financial-related communications
-            </Typography>
-          </Box>
-        ) : (
-          <>
-            <List className="messages-list" disablePadding>
-          {recentMessages.map((message) => (
-            <ListItem 
-              key={message._id || message.id} 
-              divider 
-              className="message-item"
-            >
-              <ListItemAvatar>
-                <Avatar className="message-avatar">
-                  <EmailIcon />
-                </Avatar>
-              </ListItemAvatar>
-              <ListItemText
-                primary={
-                  <Box className="message-header">
-                    <Typography component="span" variant="subtitle2" className="message-sender">
-                      {message.user?.name || 'Anonymous'}
-                    </Typography>
-                    <Typography component="span" variant="caption" className="message-time">
-                      {formatRelativeTime(message.createdAt)}
-                    </Typography>
-                  </Box>
-                }
-                secondary={
-                  <Typography 
-                    component="div" 
-                    variant="body2" 
-                    className="message-preview"
-                  >
-                    {truncateText(message.message || message.content, 80)}
-                  </Typography>
-                }
-              />
-            </ListItem>
-          ))}
-        </List>
-            
-            <Box mt={1} className="view-all-messages">
-              <Button 
-                variant="text" 
-                size="small" 
-                color="primary"
-                href="/dashboard/complaints"
-              >
-                View All Messages
-              </Button>
-            </Box>
-          </>
-        )}
-      </CardContent>
-    </Card>
-  );
-};
-
-export default RecentMessagesWidget;
\ No newline at end of file
diff --git a/frontend/src/components/financial/manager/UpcomingEventsWidget.jsx b/frontend/src/components/financial/manager/UpcomingEventsWidget.jsx
deleted file mode 100644
index 65e57f0..0000000
--- a/frontend/src/components/financial/manager/UpcomingEventsWidget.jsx
+++ /dev/null
@@ -1,132 +0,0 @@
-import React from 'react';
-import { Box, Card, CardContent, Typography, List, ListItem, ListItemText, Divider } from '@mui/material';
-import EventIcon from '@mui/icons-material/Event';
-import './ManagerDashboardWidgets.css';
-
-// Helper function to format dates
-const formatDate = (dateString) => {
-  if (!dateString) return 'N/A';
-  
-  const date = new Date(dateString);
-  if (isNaN(date.getTime())) return 'Invalid date';
-  
-  return date.toLocaleDateString('en-US', {
-    month: 'short',
-    day: 'numeric'
-  });
-};
-
-// Helper function to format currency
-const formatCurrency = (amount) => {
-  if (amount === undefined || amount === null) return '';
-  
-  return new Intl.NumberFormat('en-US', {
-    style: 'currency',
-    currency: 'USD',
-    minimumFractionDigits: 2
-  }).format(amount);
-};
-
-// Helper function to calculate days difference
-const getDaysUntil = (dateString) => {
-  if (!dateString) return '';
-  
-  const date = new Date(dateString);
-  if (isNaN(date.getTime())) return '';
-  
-  const today = new Date();
-  today.setHours(0, 0, 0, 0);
-  
-  const diffTime = date.getTime() - today.getTime();
-  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
-  
-  if (diffDays === 0) return 'Today';
-  if (diffDays === 1) return 'Tomorrow';
-  return `In ${diffDays} days`;
-};
-
-/**
- * Upcoming Events Widget for Financial Manager Dashboard
- * Shows calendar of upcoming financial events like payment dues and subscription endings
- */
-const UpcomingEventsWidget = ({ data }) => {
-  // Extract data with fallbacks
-  const { upcomingEvents = [] } = data || {};
-  
-  // Group events by date
-  const groupedEvents = upcomingEvents.reduce((groups, event) => {
-    const date = formatDate(event.date);
-    if (!groups[date]) {
-      groups[date] = [];
-    }
-    groups[date].push(event);
-    return groups;
-  }, {});
-  
-  // Get unique dates and sort them
-  const dates = Object.keys(groupedEvents);
-  
-  return (
-    <Card className="dashboard-widget upcoming-events-widget">
-      <CardContent>
-        <Box className="widget-header">
-          <Typography variant="h6" component="h3" className="widget-title">
-            <EventIcon fontSize="small" sx={{ mr: 1 }} />
-            Upcoming Financial Events
-          </Typography>
-        </Box>
-        
-        {upcomingEvents.length === 0 ? (
-          <Box className="no-events-message">
-            <Typography variant="body1" color="textSecondary" align="center">
-              No upcoming events scheduled
-            </Typography>
-          </Box>
-        ) : (
-          <List disablePadding className="events-list">
-            {dates.map((date, index) => {
-              const eventsOnDate = groupedEvents[date];
-              
-              return (
-                <React.Fragment key={date}>
-                  {index > 0 && <Divider component="li" />}
-                  
-                  <ListItem className="date-header">
-                    <Typography variant="subtitle2" component="div">
-                      {date}
-                    </Typography>
-                  </ListItem>
-                  
-                  {eventsOnDate.map((event, eventIdx) => (
-                    <ListItem 
-                      key={`${date}-${eventIdx}`} 
-                      className={`event-item event-type-${event.type}`}
-                    >
-                      <ListItemText
-                        primary={
-                          <Typography variant="body2" component="span" className="event-description">
-                            {event.description}
-                            {event.amount && 
-                              <span className="event-amount"> ({formatCurrency(event.amount)})</span>
-                            }
-                          </Typography>
-                        }
-                        secondary={
-                          <Typography variant="caption" component="span" className="event-timing">
-                            {getDaysUntil(event.date)}
-                          </Typography>
-                        }
-                      />
-                    </ListItem>
-                  ))}
-                </React.Fragment>
-              );
-            })}
-          </List>
-        )}
-      </CardContent>
-    </Card>
-  );
-};
-
-export default UpcomingEventsWidget;
\ No newline at end of file
diff --git a/frontend/src/components/layouts/DashboardLayout.css b/frontend/src/components/layouts/DashboardLayout.css
deleted file mode 100644
index 3d967aa..0000000
--- a/frontend/src/components/layouts/DashboardLayout.css
+++ /dev/null
@@ -1,98 +0,0 @@
-/* frontend/src/components/layouts/DashboardLayout.css */
-.dashboard-layout {
-  display: flex;
-  height: 100vh;
-  width: 100%;
-  overflow: hidden;
-  background-color: #f8f9fa;
-}
-
-.dashboard-main {
-  flex: 1;
-  margin-left: 280px; /* Updated to match new sidebar width */
-  display: flex;
-  flex-direction: column;
-  width: calc(100% - 280px); /* Updated to match new sidebar width */
-  overflow: hidden;
-  transition: margin-left 0.3s ease, width 0.3s ease;
-}
-
-.dashboard-content-area {
-  flex: 1;
-  overflow-y: auto;
-  padding: 24px;
-  background-color: #f8f9fa;
-  animation: fadeInUp 0.5s ease forwards;
-}
-
-/* Ensure only one component renders at a time */
-.dashboard-content {
-  background-color: white;
-  border-radius: 12px;
-  padding: 24px;
-  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.04);
-  margin-bottom: 24px;
-  animation: cardAppear 0.5s cubic-bezier(0.22, 1, 0.36, 1) forwards;
-  transition: transform 0.3s ease, box-shadow 0.3s ease;
-}
-
-.dashboard-content:hover {
-  transform: translateY(-4px);
-  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
-}
-
-/* Create a staggered animation effect for multiple content blocks */
-.dashboard-content:nth-child(1) { animation-delay: 0.1s; }
-.dashboard-content:nth-child(2) { animation-delay: 0.2s; }
-.dashboard-content:nth-child(3) { animation-delay: 0.3s; }
-.dashboard-content:nth-child(4) { animation-delay: 0.4s; }
-
-/* Fix header placement */
-.dashboard-main header {
-  width: 100%;
-  z-index: 95;
-}
-
-/* Make main content area take remaining height */
-.dashboard-main main {
-  flex: 1;
-}
-
-/* Responsive adjustments */
-@media screen and (max-width: 768px) {
-  .dashboard-main {
-    margin-left: 0;
-    width: 100%;
-  }
-  
-  .dashboard-content-area {
-    padding: 16px;
-  }
-  
-  .dashboard-content {
-    padding: 16px;
-  }
-}
-
-/* Dashboard content animations */
-@keyframes fadeInUp {
-  from {
-    opacity: 0;
-    transform: translateY(20px);
-  }
-  to {
-    opacity: 1;
-    transform: translateY(0);
-  }
-}
-
-@keyframes cardAppear {
-  0% {
-    opacity: 0;
-    transform: translateY(20px) scale(0.97);
-  }
-  100% {
-    opacity: 1;
-    transform: translateY(0) scale(1);
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/components/layouts/DashboardLayout.jsx b/frontend/src/components/layouts/DashboardLayout.jsx
deleted file mode 100644
index 419e665..0000000
--- a/frontend/src/components/layouts/DashboardLayout.jsx
+++ /dev/null
@@ -1,107 +0,0 @@
-// frontend/src/components/layouts/DashboardLayout.jsx
-import React from 'react';
-import { Routes, Route } from 'react-router-dom';
-import { useAuth } from '../../contexts/AuthContext';
-import Header from './Header';
-import Sidebar from '../dashboard/Sidebar';
-import DashboardHome from '../../pages/dashboard/DashboardHome';
-import ProfilePage from '../../pages/profile/ProfilePage';
-
-// Import payroll components
-import AdminPayrollPage from '../../pages/payroll/AdminPayrollPage';
-import StaffPayslipViewPage from '../../pages/payroll/StaffPayslipViewPage';
-
-// Import complaint components
-import MyComplaintsPage from '../../pages/complaints/MyComplaintsPage';
-import AllComplaintsPage from '../../pages/complaints/AllComplaintsPage';
-
-// Import subscription and document components
-import UserSubscriptionsPage from '../../pages/subscriptions/UserSubscriptionsPage';
-import UserDocumentsPage from '../../pages/documents/UserDocumentsPage';
-
-// Import financial components
-import FinancialDashboard from '../../components/financial/FinancialDashboard';
-import SubscriptionPlans from '../../components/financial/SubscriptionPlans';
-import FinancialReportsPage from '../../pages/reports/FinancialReportsPage';
-import AttendanceReportsPage from '../../pages/reports/AttendanceReportsPage';
-import PerformanceReportsPage from '../../pages/reports/PerformanceReportsPage';
-import BudgetAllocationPage from '../../pages/budget/BudgetAllocationPage';
-import PaymentsPage from '../../pages/payments/PaymentsPage';
-
-// Import Admin specific pages
-import UserManagementPage from '../../pages/admin/UserManagementPage';
-import StatisticsPage from '../../pages/statistics/StatisticsPage';
-import SystemSettingsPage from '../../pages/admin/SystemSettingsPage'; // Import the System Settings page
-
-import './DashboardLayout.css';
-
-function DashboardLayout() {
-  const { user } = useAuth();
-
-  return (
-    <div className="dashboard-layout">
-      <Sidebar />
-      <div className="dashboard-main">
-        <Header />
-        <main className="dashboard-content-area">
-          <Routes>
-            {/* Pass user to DashboardHome so it can conditionally render */}
-            <Route path="/" element={<DashboardHome user={user} />} />
-            <Route path="/profile" element={<ProfilePage />} />
-            
-            {/* Customer routes */}
-            {user?.role === 'customer' && (
-              <>
-                <Route path="/complaints" element={<MyComplaintsPage />} /> 
-                <Route path="/subscriptions" element={<UserSubscriptionsPage />} />
-                <Route path="/documents" element={<UserDocumentsPage />} />
-              </>
-            )}
-
-            {/* Financial Manager routes */}
-            {user?.role === 'financial_manager' && (
-              <>
-                <Route path="/financial-overview" element={<FinancialDashboard />} />
-                <Route path="/subscription-plans" element={<SubscriptionPlans />} />
-                <Route path="/budget-allocation" element={<BudgetAllocationPage />} />
-                <Route path="/payments" element={<PaymentsPage />} />
-                <Route path="/payment-processing" element={<div className="dashboard-content"><h2>Payment Processing</h2></div>} />
-                <Route path="/financial-reports" element={<FinancialReportsPage />} />
-                <Route path="/payroll" element={<AdminPayrollPage />} />
-              </>
-            )}
-
-            {/* Admin routes */}
-            {user?.role === 'admin' && (
-              <>
-                <Route path="/users" element={<UserManagementPage />} />
-                <Route path="/statistics" element={<StatisticsPage />} />
-                <Route path="/settings" element={<SystemSettingsPage />} />
-                <Route path="/complaints" element={<AllComplaintsPage />} />
-                <Route path="/payroll" element={<AdminPayrollPage />} />
-                <Route path="/financial-overview" element={<FinancialDashboard />} />
-                <Route path="/subscription-plans" element={<SubscriptionPlans />} />
-                <Route path="/budget-allocation" element={<BudgetAllocationPage />} />
-                <Route path="/payments" element={<PaymentsPage />} />
-                <Route path="/financial-reports" element={<FinancialReportsPage />} />
-                <Route path="/attendance-reports" element={<AttendanceReportsPage />} />
-                <Route path="/performance-reports" element={<PerformanceReportsPage />} />
-              </>
-            )}
-
-            {/* Staff routes */}
-            {user?.role === 'staff' && (
-              <>
-                <Route path="/my-payslips" element={<StaffPayslipViewPage />} />
-                <Route path="/my-performance" element={<div className="dashboard-content"><h2>My Performance</h2></div>} />
-                <Route path="/complaints" element={<AllComplaintsPage />} />
-              </>
-            )}
-          </Routes>
-        </main>
-      </div>
-    </div>
-  );
-}
-
-export default DashboardLayout;
\ No newline at end of file
diff --git a/frontend/src/components/layouts/Header.css b/frontend/src/components/layouts/Header.css
deleted file mode 100644
index 0c620f8..0000000
--- a/frontend/src/components/layouts/Header.css
+++ /dev/null
@@ -1,103 +0,0 @@
-/* Header.css - Styling for the dashboard header component */
-
-.dashboard-header {
-  background-color: #fff;
-  height: 64px;
-  width: 100%;
-  padding: 0 32px 0 0; /* Only right padding for spacing from the edge */
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-  position: sticky;
-  top: 0;
-  z-index: 100;
-  border-radius: 12px 0 0 12px;
-  display: flex;
-  align-items: center; /* Vertically center header content */
-}
-
-.header-content {
-  display: flex;
-  justify-content: flex-end;
-  align-items: center; /* Vertically center content */
-  height: 100%;
-  width: 100%;
-  padding: 0;
-}
-
-.header-right {
-  display: flex;
-  align-items: center; /* Vertically center right section */
-  gap: 20px;
-  justify-content: flex-end;
-  width: 100%; /* Take full width to push content to the right */
-  margin-left: auto;
-}
-
-.header-user-section {
-  display: flex;
-  align-items: center;
-  gap: 16px;
-  /* Remove any left margin or alignment */
-}
-
-.profile-pic {
-  width: 40px;
-  height: 40px;
-  border-radius: 50%;
-  background-color: var(--primary-color, #4ea14a);
-  color: white;
-  display: flex;
-  align-items: center;
-  justify-content: center;
-  font-weight: 600;
-  font-size: 20px;
-}
-
-.user-info {
-  display: flex;
-  flex-direction: column;
-  justify-content: center;
-}
-
-.user-name {
-  font-weight: 600;
-  font-size: 16px;
-  color: #333;
-}
-
-.user-role {
-  font-size: 13px;
-  color: #888;
-  text-transform: capitalize;
-  margin-top: 2px;
-}
-
-.notification-bell {
-  position: relative;
-  cursor: pointer;
-  font-size: 20px;
-  color: #555;
-  background: #f5f5f5;
-  border-radius: 50%;
-  width: 40px;
-  height: 40px;
-  display: flex;
-  align-items: center;
-  justify-content: center;
-}
-
-.notification-badge {
-  position: absolute;
-  top: -6px;
-  right: -6px;
-  background-color: #e74c3c;
-  color: white;
-  border-radius: 50%;
-  width: 18px;
-  height: 18px;
-  font-size: 11px;
-  display: flex;
-  align-items: center;
-  justify-content: center;
-  font-weight: 600;
-  box-shadow: 0 1px 4px rgba(0,0,0,0.08);
-}
\ No newline at end of file
diff --git a/frontend/src/components/layouts/Header.jsx b/frontend/src/components/layouts/Header.jsx
deleted file mode 100644
index f96a55a..0000000
--- a/frontend/src/components/layouts/Header.jsx
+++ /dev/null
@@ -1,45 +0,0 @@
-// frontend/src/components/layouts/Header.jsx
-import React from 'react';
-import { useAuth } from '../../contexts/AuthContext';
-import './Header.css';
-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
-import { faBell } from '@fortawesome/free-solid-svg-icons';
-import { NotificationBadge } from '../ui/AnimatedComponents';
-
-/**
- * Header component for the dashboard layout
- * Displays user avatar, name, role, and notifications
- */
-const Header = () => {
-  const { user } = useAuth();
-
-  // Format role for display (e.g., financial_manager -> Financial Manager)
-  const formatRole = (role) => {
-    if (!role) return 'Guest';
-    return role.split('_').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ');
-  };
-
-  return (
-    <header className="dashboard-header">
-      <div className="header-content">
-        <div className="header-right">
-          <div className="header-user-section">
-            <div className="profile-pic">
-              {user?.name ? user.name.charAt(0).toUpperCase() : 'U'}
-            </div>
-            <div className="user-info">
-              <span className="user-name">{user?.name || 'User'}</span>
-              <span className="user-role">{formatRole(user?.role)}</span>
-            </div>
-          </div>
-          <div className="notification-bell" style={{ position: 'relative' }}>
-            <FontAwesomeIcon icon={faBell} size="lg" />
-            <NotificationBadge count={3} />
-          </div>
-        </div>
-      </div>
-    </header>
-  );
-};
-
-export default Header;
\ No newline at end of file
diff --git a/frontend/src/components/layouts/Sidebar.css b/frontend/src/components/layouts/Sidebar.css
deleted file mode 100644
index 56b308f..0000000
--- a/frontend/src/components/layouts/Sidebar.css
+++ /dev/null
@@ -1,220 +0,0 @@
-/* Sidebar.css - Styling for the dashboard sidebar */
-
-.sidebar {
-  width: 260px;
-  height: 100vh;
-  background-color: #ffffff;
-  border-right: 1px solid #e0e0e0;
-  position: fixed;
-  left: 0;
-  top: 0;
-  z-index: 1000;
-  box-shadow: 2px 0 4px rgba(0, 0, 0, 0.05);
-  transition: all 0.3s ease;
-  display: flex;
-  flex-direction: column;
-}
-
-.sidebar.collapsed {
-  width: 70px;
-  overflow: hidden;
-}
-
-.logo-container {
-  padding: 20px;
-  display: flex;
-  align-items: center;
-  justify-content: space-between;
-  border-bottom: 1px solid #f0f0f0;
-}
-
-.sidebar-logo {
-  display: flex;
-  align-items: center;
-  gap: 10px;
-}
-
-.logo-icon {
-  color: var(--primary-color, #4ea14a);
-  font-size: 24px;
-}
-
-.logo-text {
-  font-weight: 600;
-  font-size: 18px;
-  color: var(--text-primary, #333);
-  transition: opacity 0.3s ease;
-}
-
-.collapsed .logo-text {
-  opacity: 0;
-  width: 0;
-  visibility: hidden;
-}
-
-.toggle-btn {
-  background: transparent;
-  border: none;
-  cursor: pointer;
-  color: #666;
-  padding: 5px;
-}
-
-.toggle-btn:hover {
-  color: var(--primary-color, #4ea14a);
-}
-
-.menu-container {
-  flex: 1;
-  overflow-y: auto;
-  padding: 15px 0;
-}
-
-.menu-section {
-  margin-bottom: 15px;
-}
-
-.section-title {
-  font-size: 12px;
-  color: #999;
-  text-transform: uppercase;
-  padding: 10px 20px;
-  margin-bottom: 5px;
-  letter-spacing: 0.5px;
-}
-
-.collapsed .section-title {
-  opacity: 0;
-}
-
-.menu-item {
-  padding: 12px 20px;
-  cursor: pointer;
-  transition: background-color 0.2s;
-  display: flex;
-  align-items: center;
-  gap: 10px;
-  color: var(--text-secondary, #666);
-  text-decoration: none;
-  position: relative;
-}
-
-.menu-item:hover {
-  background-color: #f9f9f9;
-  color: var(--primary-color, #4ea14a);
-}
-
-.menu-item.active {
-  background-color: rgba(78, 161, 74, 0.1);
-  color: var(--primary-color, #4ea14a);
-  border-right: 3px solid var(--primary-color, #4ea14a);
-}
-
-.menu-icon {
-  font-size: 18px;
-  min-width: 24px;
-  text-align: center;
-}
-
-.menu-text {
-  transition: opacity 0.3s ease;
-  white-space: nowrap;
-}
-
-.collapsed .menu-text {
-  opacity: 0;
-  width: 0;
-  visibility: hidden;
-}
-
-.badge {
-  background-color: var(--primary-color, #4ea14a);
-  color: white;
-  font-size: 10px;
-  padding: 2px 6px;
-  border-radius: 10px;
-  margin-left: auto;
-}
-
-.collapsed .badge {
-  position: absolute;
-  top: 8px;
-  right: 8px;
-}
-
-.user-section {
-  border-top: 1px solid #f0f0f0;
-  padding: 15px;
-  display: flex;
-  align-items: center;
-  gap: 12px;
-}
-
-.user-avatar {
-  width: 40px;
-  height: 40px;
-  border-radius: 50%;
-  background-color: var(--primary-color, #4ea14a);
-  color: white;
-  display: flex;
-  align-items: center;
-  justify-content: center;
-  font-weight: 600;
-  font-size: 16px;
-  flex-shrink: 0;
-}
-
-.user-info {
-  overflow: hidden;
-  transition: opacity 0.3s ease;
-}
-
-.collapsed .user-info {
-  opacity: 0;
-  width: 0;
-  visibility: hidden;
-}
-
-.user-name {
-  font-weight: 500;
-  font-size: 14px;
-  color: var(--text-primary, #333);
-  white-space: nowrap;
-  text-overflow: ellipsis;
-  overflow: hidden;
-}
-
-.user-role {
-  font-size: 12px;
-  color: #999;
-  white-space: nowrap;
-  text-overflow: ellipsis;
-  overflow: hidden;
-}
-
-/* Responsive adjustments */
-@media (max-width: 768px) {
-  .sidebar {
-    transform: translateX(-100%);
-    width: 260px;
-  }
-  
-  .sidebar.mobile-open {
-    transform: translateX(0);
-  }
-  
-  .overlay {
-    position: fixed;
-    top: 0;
-    left: 0;
-    right: 0;
-    bottom: 0;
-    background-color: rgba(0, 0, 0, 0.5);
-    z-index: 999;
-    display: none;
-  }
-  
-  .overlay.active {
-    display: block;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/components/layouts/Sidebar.jsx b/frontend/src/components/layouts/Sidebar.jsx
deleted file mode 100644
index f0fbdd5..0000000
--- a/frontend/src/components/layouts/Sidebar.jsx
+++ /dev/null
@@ -1,147 +0,0 @@
-// frontend/src/components/dashboard/Sidebar.jsx
-import React from 'react';
-import { Link, useLocation } from 'react-router-dom';
-import { useAuth } from '../../contexts/AuthContext';
-import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
-import { library } from '@fortawesome/fontawesome-svg-core';
-import { 
-  faFacebook, 
-  faInstagram, 
-  faTwitter
-} from "@fortawesome/free-brands-svg-icons";
-
-import {
-  faGaugeHigh,
-  faFileLines,
-  faMoneyBillTransfer,
-  faUser,
-  faCreditCard,
-  faChartLine,
-  faCalendarDays,
-  faMoneyBill,
-  faFileSignature,
-  faTruck,
-  faRecycle,
-  faScroll,
-  faUsers,
-  faCog,
-  faClipboardList,
-  faListCheck,
-  faTrophy,
-  faTachometerAlt // Added icon for financial overview
-} from "@fortawesome/free-solid-svg-icons";
-
-library.add(
-  faFacebook, 
-  faInstagram, 
-  faTwitter,
-  faGaugeHigh,
-  faFileLines,
-  faMoneyBillTransfer,
-  faUser,
-  faCreditCard,
-  faChartLine,
-  faCalendarDays,
-  faMoneyBill,
-  faFileSignature,
-  faTruck,
-  faRecycle,
-  faScroll,
-  faUsers,
-  faCog,
-  faClipboardList,
-  faListCheck,
-  faTrophy,
-  faTachometerAlt // Add the new icon to the library
-);
-
-import './Sidebar.css';
-
-function Sidebar() {
-  const { user } = useAuth();
-  const location = useLocation();
-
-  // Define navigation items with FontAwesome icons
-  const getNavItems = () => {
-    const commonItems = [
-      { path: '/dashboard', label: 'Dashboard', icon: faGaugeHigh },
-      { path: '/dashboard/profile', label: 'My Profile', icon: faUser },
-    ];
-
-    const roleSpecificItems = {
-      customer: [ // Updated role name
-        { path: '/dashboard/collection-history', label: 'Collection History', icon: faCalendarDays },
-        { path: '/dashboard/financial-history', label: 'Financial History', icon: faMoneyBill },
-        { path: '/dashboard/complaints', label: 'Complaints', icon: faFileSignature },
-        { path: '/dashboard/pickup-requests', label: 'Pickup Requests', icon: faTruck },
-        { path: '/dashboard/available-garbage', label: 'Available Garbage', icon: faRecycle },
-        { path: '/dashboard/purchase-history', label: 'Purchase History', icon: faScroll },
-      ],
-      admin: [
-        { path: '/dashboard/financial-overview', label: 'Financial Overview', icon: faTachometerAlt }, // Add link for Admin
-        { path: '/dashboard/users', label: 'User Management', icon: faUsers },
-        { path: '/dashboard/statistics', label: 'Statistics', icon: faChartLine },
-        { path: '/dashboard/settings', label: 'System Settings', icon: faCog },
-      ],
-      // Maintaining the database role name format (with underscore)
-      financial_manager: [
-        { path: '/dashboard/financial-overview', label: 'Financial Overview', icon: faTachometerAlt }, // Add link for Financial Manager
-        { path: '/dashboard/subscription-plans', label: 'Subscription Plans', icon: faFileLines },
-        { path: '/dashboard/budget-allocation', label: 'Budget Allocation', icon: faMoneyBillTransfer },
-        { path: '/dashboard/salary', label: 'Salary', icon: faUser },
-        { path: '/dashboard/payments', label: 'Payments', icon: faCreditCard },
-      ],
-      staff: [
-        { path: '/dashboard/attendance', label: 'Attendance', icon: faClipboardList },
-        { path: '/dashboard/tasks', label: 'Tasks', icon: faListCheck },
-        { path: '/dashboard/performance', label: 'Performance', icon: faTrophy },
-      ],
-    };
-
-    return [
-      ...commonItems,
-      ...(roleSpecificItems[user?.role] || []),
-    ];
-  };
-
-  const navItems = getNavItems();
-
-  return (
-    <nav>
-      <div className="sidebar">
-        <Link to="/" className="logo-link"> {/* Changed Link destination to / */}
-          <div className="logo">
-            <img src="#" alt="logo" className="logo-img" />
-            <span className="logo-name">SmartBin</span>
-          </div>
-        </Link>
-        
-        <div className="sidebar-content">
-          <ul className="list">
-            {navItems.map((item) => (
-              <li key={item.path} className="list-item">
-                <Link 
-                  to={item.path} 
-                  className={`nav-link ${location.pathname === item.path ? 'active' : ''}`}
-                >
-                  <FontAwesomeIcon icon={item.icon} className="nav-icon" />
-                  <span className="link">{item.label}</span>
-                </Link>
-              </li>
-            ))}
-          </ul>
-          
-          <div className="bottom-content">
-            <div className="social-icons">
-              <a href="#" className="icon"><FontAwesomeIcon icon={faFacebook} /></a>
-              <a href="#" className="icon"><FontAwesomeIcon icon={faInstagram} /></a>
-              <a href="#" className="icon"><FontAwesomeIcon icon={faTwitter} /></a>
-            </div>
-          </div>
-        </div>
-      </div>
-    </nav>
-  );
-}
-
-export default Sidebar;
\ No newline at end of file
diff --git a/frontend/src/components/payroll/PayrollComponents.css b/frontend/src/components/payroll/PayrollComponents.css
deleted file mode 100644
index a861255..0000000
--- a/frontend/src/components/payroll/PayrollComponents.css
+++ /dev/null
@@ -1,272 +0,0 @@
-/* Styling for Payroll Components */
-
-/* General Styles */
-.payroll-section {
-  background-color: white;
-  border-radius: 8px;
-  padding: 20px;
-  margin-bottom: 20px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-.form-error, 
-.alert-success {
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-}
-
-.form-error {
-  background-color: #f8d7da;
-  color: #721c24;
-  border: 1px solid #f5c6cb;
-}
-
-.alert-success {
-  background-color: #d4edda;
-  color: #155724;
-  border: 1px solid #c3e6cb;
-}
-
-/* Table Styles */
-.payroll-table {
-  width: 100%;
-  border-collapse: collapse;
-  margin-top: 15px;
-  font-size: 14px;
-}
-
-.payroll-table th,
-.payroll-table td {
-  padding: 12px 15px;
-  text-align: left;
-  border-bottom: 1px solid #e0e0e0;
-}
-
-.payroll-table th {
-  background-color: #f9f9f9;
-  font-weight: 600;
-  color: #333;
-}
-
-.payroll-table tr.selected {
-  background-color: #e8f4ff;
-}
-
-.payroll-table tr.clickable {
-  cursor: pointer;
-}
-
-.payroll-table tr.clickable:hover {
-  background-color: #f5f5f5;
-}
-
-/* Payment Status Styles */
-.payment-status {
-  padding: 4px 8px;
-  border-radius: 20px;
-  font-size: 12px;
-  font-weight: 500;
-}
-
-.payment-status.paid {
-  background-color: #d1e7dd;
-  color: #0f5132;
-}
-
-.payment-status.pending {
-  background-color: #fff3cd;
-  color: #856404;
-}
-
-.payment-status.cancelled {
-  background-color: #f8d7da;
-  color: #842029;
-}
-
-/* Button Styles */
-.btn {
-  padding: 8px 16px;
-  border-radius: 4px;
-  border: none;
-  font-weight: 500;
-  cursor: pointer;
-  font-size: 14px;
-  transition: all 0.2s;
-}
-
-.btn:disabled {
-  opacity: 0.6;
-  cursor: not-allowed;
-}
-
-.btn.primary {
-  background-color: #4a90e2;
-  color: white;
-}
-
-.btn.primary:hover:not(:disabled) {
-  background-color: #3a80d2;
-}
-
-.btn.secondary {
-  background-color: #f0f0f0;
-  color: #333;
-  border: 1px solid #ddd;
-}
-
-.btn.secondary:hover:not(:disabled) {
-  background-color: #e0e0e0;
-}
-
-.btn.delete-btn {
-  background-color: #dc3545;
-  color: white;
-}
-
-.btn.delete-btn:hover:not(:disabled) {
-  background-color: #c82333;
-}
-
-/* Payroll Generator Form */
-.payroll-generator-form {
-  display: grid;
-  grid-template-columns: repeat(3, 1fr);
-  gap: 20px;
-  margin-top: 15px;
-}
-
-.form-group {
-  margin-bottom: 0;
-}
-
-.form-group label {
-  display: block;
-  margin-bottom: 8px;
-  font-weight: 500;
-  color: #333;
-}
-
-.form-group input,
-.form-group select,
-.form-group textarea {
-  width: 100%;
-  padding: 10px;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 14px;
-}
-
-.form-group textarea {
-  resize: vertical;
-  min-height: 100px;
-}
-
-/* Payslip Details */
-.payslip-details {
-  break-inside: avoid;
-}
-
-.payslip-header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  margin-bottom: 20px;
-  padding-bottom: 15px;
-  border-bottom: 1px solid #eee;
-}
-
-.payslip-title {
-  margin: 0;
-  color: #333;
-}
-
-.payslip-meta {
-  display: flex;
-  flex-wrap: wrap;
-  margin-bottom: 25px;
-  gap: 15px;
-}
-
-.payslip-meta-item {
-  flex: 1;
-  min-width: 200px;
-}
-
-.payslip-meta-item .label {
-  font-weight: 500;
-  color: #666;
-  display: block;
-  margin-bottom: 5px;
-}
-
-.payslip-summary {
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  overflow: hidden;
-  margin-bottom: 25px;
-}
-
-.payslip-row {
-  display: flex;
-  justify-content: space-between;
-  padding: 12px 15px;
-  border-bottom: 1px solid #eee;
-}
-
-.payslip-row:last-child {
-  border-bottom: none;
-}
-
-.payslip-row.total {
-  background-color: #f9f9f9;
-  font-weight: bold;
-  border-top: 2px solid #ddd;
-}
-
-.payslip-row .amount {
-  font-family: monospace;
-}
-
-.payslip-notes {
-  margin-bottom: 25px;
-}
-
-.payslip-notes h4 {
-  margin-top: 0;
-  color: #555;
-}
-
-.payslip-actions {
-  display: flex;
-  gap: 10px;
-  justify-content: flex-end;
-}
-
-/* Print specific styles */
-@media print {
-  body {
-    background-color: white !important;
-  }
-  
-  .no-print {
-    display: none !important;
-  }
-  
-  .dashboard-content {
-    padding: 0 !important;
-  }
-  
-  .payslip-details {
-    box-shadow: none !important;
-    padding: 0 !important;
-  }
-  
-  .payslip-header {
-    border-bottom: 2px solid #000 !important;
-  }
-  
-  .payroll-section {
-    box-shadow: none !important;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/components/payroll/PayrollGeneratorForm.jsx b/frontend/src/components/payroll/PayrollGeneratorForm.jsx
deleted file mode 100644
index e2eadf1..0000000
--- a/frontend/src/components/payroll/PayrollGeneratorForm.jsx
+++ /dev/null
@@ -1,73 +0,0 @@
-import React, { useState } from 'react';
-import './PayrollComponents.css';
-
-const PayrollGeneratorForm = ({ onGenerate, loading }) => {
-  const [periodStart, setPeriodStart] = useState('');
-  const [periodEnd, setPeriodEnd] = useState('');
-  const [error, setError] = useState('');
-
-  const handleSubmit = (e) => {
-    e.preventDefault();
-    setError('');
-
-    // Validate dates
-    if (!periodStart || !periodEnd) {
-      setError('Both start and end dates are required');
-      return;
-    }
-
-    const startDate = new Date(periodStart);
-    const endDate = new Date(periodEnd);
-
-    if (endDate <= startDate) {
-      setError('End date must be after start date');
-      return;
-    }
-
-    // Call the parent's generate function
-    onGenerate(periodStart, periodEnd);
-  };
-
-  return (
-    <div className="payroll-section">
-      <h3>Generate Payroll</h3>
-      {error && <div className="form-error">{error}</div>}
-      
-      <form onSubmit={handleSubmit} className="payroll-generator-form">
-        <div className="form-group">
-          <label htmlFor="periodStart">Period Start Date</label>
-          <input
-            type="date"
-            id="periodStart"
-            value={periodStart}
-            onChange={(e) => setPeriodStart(e.target.value)}
-            disabled={loading}
-            required
-          />
-        </div>
-        
-        <div className="form-group">
-          <label htmlFor="periodEnd">Period End Date</label>
-          <input
-            type="date"
-            id="periodEnd"
-            value={periodEnd}
-            onChange={(e) => setPeriodEnd(e.target.value)}
-            disabled={loading}
-            required
-          />
-        </div>
-        
-        <button 
-          type="submit" 
-          className="btn primary"
-          disabled={loading}
-        >
-          {loading ? 'Generating...' : 'Generate Payroll'}
-        </button>
-      </form>
-    </div>
-  );
-};
-
-export default PayrollGeneratorForm;
\ No newline at end of file
diff --git a/frontend/src/components/payroll/PayrollHistoryTable.jsx b/frontend/src/components/payroll/PayrollHistoryTable.jsx
deleted file mode 100644
index b4dd4d8..0000000
--- a/frontend/src/components/payroll/PayrollHistoryTable.jsx
+++ /dev/null
@@ -1,63 +0,0 @@
-import React from 'react';
-import './PayrollComponents.css';
-
-const formatDate = (dateString) => {
-  if (!dateString) return 'N/A';
-  return new Date(dateString).toLocaleDateString();
-};
-
-const formatCurrency = (amount) => {
-  if (amount == null) return 'N/A';
-  return new Intl.NumberFormat('en-US', {
-    style: 'currency',
-    currency: 'USD',
-  }).format(amount);
-};
-
-const PayrollHistoryTable = ({ payrollLogs = [], onSelectPayroll, isAdminView = false }) => {
-  if (payrollLogs.length === 0) {
-    return <p className="no-data-message">No payroll records found.</p>;
-  }
-
-  return (
-    <div className="payroll-container">
-      <table className="payroll-history-table">
-        <thead>
-          <tr>
-            <th>Period</th>
-            <th>Staff</th>
-            <th>Net Pay</th>
-            <th>Payment Status</th>
-            <th>Payment Date</th>
-            <th>Action</th>
-          </tr>
-        </thead>
-        <tbody>
-          {payrollLogs.map((log) => (
-            <tr key={log._id}>
-              <td>{formatDate(log.periodStart)} - {formatDate(log.periodEnd)}</td>
-              <td>{log.staff?.name || 'Unknown'}</td>
-              <td>{formatCurrency(log.netPay)}</td>
-              <td>
-                <span className={`payment-status ${log.isPaid ? 'paid' : 'pending'}`}>
-                  {log.isPaid ? 'Paid' : 'Pending'}
-                </span>
-              </td>
-              <td>{log.paymentDate ? formatDate(log.paymentDate) : 'Not paid'}</td>
-              <td>
-                <button
-                  className="view-btn"
-                  onClick={() => onSelectPayroll(log._id)}
-                >
-                  View Details
-                </button>
-              </td>
-            </tr>
-          ))}
-        </tbody>
-      </table>
-    </div>
-  );
-};
-
-export default PayrollHistoryTable;
\ No newline at end of file
diff --git a/frontend/src/components/payroll/PayslipDetails.jsx b/frontend/src/components/payroll/PayslipDetails.jsx
deleted file mode 100644
index b1efe85..0000000
--- a/frontend/src/components/payroll/PayslipDetails.jsx
+++ /dev/null
@@ -1,234 +0,0 @@
-import React, { useState } from 'react';
-import payrollApi from '../../services/payrollApi';
-import './PayrollComponents.css';
-
-const formatDate = (dateString) => {
-  if (!dateString) return 'N/A';
-  return new Date(dateString).toLocaleDateString();
-};
-
-const formatCurrency = (amount) => {
-  if (amount == null) return 'N/A';
-  return new Intl.NumberFormat('en-US', {
-    style: 'currency',
-    currency: 'USD',
-  }).format(amount);
-};
-
-const PayslipDetails = ({ payrollLog, isAdmin = false, onUpdate, onClose }) => {
-  const [loading, setLoading] = useState(false);
-  const [showPaymentModal, setShowPaymentModal] = useState(false);
-  const [paymentDetails, setPaymentDetails] = useState({
-    paymentDate: new Date().toISOString().split('T')[0], // Today's date as default
-    transactionRef: '',
-  });
-  const [error, setError] = useState('');
-
-  if (!payrollLog) return null;
-
-  const handlePrint = () => {
-    window.print();
-  };
-
-  const handlePaymentDetailsChange = (e) => {
-    const { name, value } = e.target;
-    setPaymentDetails({ ...paymentDetails, [name]: value });
-    setError('');
-  };
-
-  const handleMarkAsPaid = async (e) => {
-    e.preventDefault();
-    if (!paymentDetails.transactionRef.trim()) {
-      setError('Transaction reference is required');
-      return;
-    }
-
-    setLoading(true);
-    try {
-      await payrollApi.markAsPaid(payrollLog._id, paymentDetails);
-      setShowPaymentModal(false);
-      if (onUpdate) onUpdate();
-    } catch (err) {
-      setError(err.response?.data?.message || 'Failed to mark as paid');
-      console.error('Error marking payroll as paid:', err);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  return (
-    <div className="payslip-details">
-      <div className="payslip-header no-print">
-        <h3 className="payslip-title">Payslip Details</h3>
-        <div>
-          <button 
-            className="btn secondary" 
-            onClick={onClose}
-          >
-            Back
-          </button>
-          <button 
-            className="btn secondary" 
-            style={{ marginLeft: '10px' }} 
-            onClick={handlePrint}
-          >
-            Print
-          </button>
-        </div>
-      </div>
-
-      <div className="payslip-meta">
-        <div className="payslip-meta-item">
-          <div className="label">Employee:</div>
-          <div>{payrollLog.staff?.name || 'Unknown'}</div>
-        </div>
-        <div className="payslip-meta-item">
-          <div className="label">Period:</div>
-          <div>{formatDate(payrollLog.periodStart)} - {formatDate(payrollLog.periodEnd)}</div>
-        </div>
-        <div className="payslip-meta-item">
-          <div className="label">Payment Status:</div>
-          <div>
-            <span className={`payment-status ${payrollLog.isPaid ? 'paid' : 'pending'}`}>
-              {payrollLog.isPaid ? 'Paid' : 'Pending'}
-            </span>
-          </div>
-        </div>
-        {payrollLog.isPaid && (
-          <>
-            <div className="payslip-meta-item">
-              <div className="label">Payment Date:</div>
-              <div>{formatDate(payrollLog.paymentDate)}</div>
-            </div>
-            <div className="payslip-meta-item">
-              <div className="label">Transaction Ref:</div>
-              <div>{payrollLog.transactionRef}</div>
-            </div>
-          </>
-        )}
-      </div>
-
-      <h4>Earnings</h4>
-      <div className="payslip-summary">
-        <div className="payslip-row">
-          <div>Base Salary</div>
-          <div className="amount">{formatCurrency(payrollLog.baseSalary)}</div>
-        </div>
-        {payrollLog.overtime > 0 && (
-          <div className="payslip-row">
-            <div>Overtime</div>
-            <div className="amount">{formatCurrency(payrollLog.overtime)}</div>
-          </div>
-        )}
-        {payrollLog.bonus > 0 && (
-          <div className="payslip-row">
-            <div>Bonus</div>
-            <div className="amount">{formatCurrency(payrollLog.bonus)}</div>
-          </div>
-        )}
-        <div className="payslip-row">
-          <div><strong>Total Earnings</strong></div>
-          <div className="amount">{formatCurrency(payrollLog.totalEarnings)}</div>
-        </div>
-      </div>
-
-      <h4>Deductions</h4>
-      <div className="payslip-summary">
-        {payrollLog.deductions && payrollLog.deductions.map((deduction, index) => (
-          <div className="payslip-row" key={index}>
-            <div>{deduction.description}</div>
-            <div className="amount">{formatCurrency(deduction.amount)}</div>
-          </div>
-        ))}
-        <div className="payslip-row">
-          <div><strong>Total Deductions</strong></div>
-          <div className="amount">{formatCurrency(payrollLog.totalDeductions)}</div>
-        </div>
-      </div>
-
-      <div className="payslip-row total">
-        <div>Net Pay</div>
-        <div className="amount">{formatCurrency(payrollLog.netPay)}</div>
-      </div>
-
-      {isAdmin && !payrollLog.isPaid && (
-        <div className="payslip-actions no-print">
-          <button 
-            className="btn primary" 
-            onClick={() => setShowPaymentModal(true)}
-            disabled={loading}
-          >
-            Mark as Paid
-          </button>
-        </div>
-      )}
-
-      {/* Mark as Paid Modal */}
-      {showPaymentModal && (
-        <div className="payment-modal">
-          <div className="payment-modal-header">
-            <h3>Mark Payroll as Paid</h3>
-            <button 
-              className="btn secondary" 
-              onClick={() => setShowPaymentModal(false)}
-              disabled={loading}
-            >
-              ×
-            </button>
-          </div>
-          
-          {error && <div className="form-error">{error}</div>}
-          
-          <div className="payment-modal-body">
-            <form onSubmit={handleMarkAsPaid}>
-              <div className="form-group">
-                <label htmlFor="paymentDate">Payment Date</label>
-                <input
-                  type="date"
-                  id="paymentDate"
-                  name="paymentDate"
-                  value={paymentDetails.paymentDate}
-                  onChange={handlePaymentDetailsChange}
-                  disabled={loading}
-                  required
-                />
-              </div>
-              <div className="form-group">
-                <label htmlFor="transactionRef">Transaction Reference</label>
-                <input
-                  type="text"
-                  id="transactionRef"
-                  name="transactionRef"
-                  value={paymentDetails.transactionRef}
-                  onChange={handlePaymentDetailsChange}
-                  disabled={loading}
-                  required
-                  placeholder="Bank transfer reference, check number, etc."
-                />
-              </div>
-              <div className="payment-modal-footer">
-                <button 
-                  type="button" 
-                  className="btn secondary"
-                  onClick={() => setShowPaymentModal(false)}
-                  disabled={loading}
-                >
-                  Cancel
-                </button>
-                <button 
-                  type="submit" 
-                  className="btn primary"
-                  disabled={loading}
-                >
-                  {loading ? 'Processing...' : 'Confirm Payment'}
-                </button>
-              </div>
-            </form>
-          </div>
-        </div>
-      )}
-    </div>
-  );
-};
-
-export default PayslipDetails;
\ No newline at end of file
diff --git a/frontend/src/components/profile/DocumentUploadForm.css b/frontend/src/components/profile/DocumentUploadForm.css
deleted file mode 100644
index 291f07c..0000000
--- a/frontend/src/components/profile/DocumentUploadForm.css
+++ /dev/null
@@ -1,155 +0,0 @@
-/* Styling for Document Upload Form */
-
-.document-upload-container {
-  display: grid;
-  grid-template-columns: 1fr;
-  gap: 30px;
-}
-
-@media (min-width: 992px) {
-  .document-upload-container {
-    grid-template-columns: 1fr 1fr;
-  }
-}
-
-.document-upload-form,
-.documents-list {
-  background-color: white;
-  border-radius: 8px;
-  padding: 20px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-.document-upload-form h3,
-.documents-list h3 {
-  margin-top: 0;
-  margin-bottom: 20px;
-  padding-bottom: 10px;
-  border-bottom: 1px solid #eee;
-  color: #333;
-  font-size: 18px;
-}
-
-.form-error {
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  background-color: #f8d7da;
-  color: #721c24;
-  border: 1px solid #f5c6cb;
-}
-
-.form-group {
-  margin-bottom: 20px;
-}
-
-.form-group label {
-  display: block;
-  margin-bottom: 8px;
-  font-weight: 500;
-  color: #333;
-}
-
-.form-group select,
-.form-group input[type="file"] {
-  width: 100%;
-  padding: 10px;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 14px;
-}
-
-.form-group select {
-  height: 40px;
-}
-
-.file-info {
-  display: block;
-  margin-top: 5px;
-  color: #666;
-  font-size: 12px;
-}
-
-.file-preview {
-  background-color: #f9f9f9;
-  padding: 15px;
-  border-radius: 4px;
-  margin-bottom: 20px;
-}
-
-.file-preview p {
-  margin: 5px 0;
-}
-
-.btn {
-  padding: 10px 20px;
-  border-radius: 4px;
-  border: none;
-  font-weight: 500;
-  cursor: pointer;
-  font-size: 14px;
-  transition: all 0.2s;
-}
-
-.btn:disabled {
-  opacity: 0.6;
-  cursor: not-allowed;
-}
-
-.btn.primary {
-  background-color: #4a90e2;
-  color: white;
-}
-
-.btn.primary:hover:not(:disabled) {
-  background-color: #3a80d2;
-}
-
-.btn.delete-btn {
-  background-color: #dc3545;
-  color: white;
-  padding: 6px 12px;
-  font-size: 13px;
-}
-
-.btn.delete-btn:hover:not(:disabled) {
-  background-color: #c82333;
-}
-
-.documents-table {
-  width: 100%;
-  border-collapse: collapse;
-  margin-top: 15px;
-  font-size: 14px;
-}
-
-.documents-table th,
-.documents-table td {
-  padding: 12px 15px;
-  text-align: left;
-  border-bottom: 1px solid #e0e0e0;
-}
-
-.documents-table th {
-  background-color: #f9f9f9;
-  font-weight: 600;
-  color: #333;
-}
-
-.document-link {
-  color: #4a90e2;
-  text-decoration: none;
-  transition: color 0.2s;
-}
-
-.document-link:hover {
-  color: #3a80d2;
-  text-decoration: underline;
-}
-
-@media (max-width: 768px) {
-  .documents-table {
-    display: block;
-    overflow-x: auto;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/components/profile/DocumentUploadForm.jsx b/frontend/src/components/profile/DocumentUploadForm.jsx
deleted file mode 100644
index 8b74dc8..0000000
--- a/frontend/src/components/profile/DocumentUploadForm.jsx
+++ /dev/null
@@ -1,222 +0,0 @@
-import React, { useState } from 'react';
-import './DocumentUploadForm.css';
-
-/**
- * Component for users to upload and manage documents
- */
-const DocumentUploadForm = ({ documents, onUpload, onDelete, loading }) => {
-  const [file, setFile] = useState(null);
-  const [documentType, setDocumentType] = useState('identification');
-  const [uploadError, setUploadError] = useState('');
-  const [isUploading, setIsUploading] = useState(false);
-
-  // Handle file selection
-  const handleFileChange = (e) => {
-    const selectedFile = e.target.files[0];
-    
-    if (!selectedFile) {
-      setFile(null);
-      return;
-    }
-    
-    // Validate file size (max 5MB)
-    if (selectedFile.size > 5 * 1024 * 1024) {
-      setUploadError('File size exceeds the maximum limit of 5MB.');
-      setFile(null);
-      e.target.value = null; // Reset file input
-      return;
-    }
-    
-    // Validate file type
-    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png', 'image/jpg'];
-    if (!allowedTypes.includes(selectedFile.type)) {
-      setUploadError('Only PDF, JPEG, JPG, and PNG files are allowed.');
-      setFile(null);
-      e.target.value = null; // Reset file input
-      return;
-    }
-    
-    setFile(selectedFile);
-    setUploadError('');
-  };
-
-  // Handle form submission
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    
-    if (!file) {
-      setUploadError('Please select a file to upload.');
-      return;
-    }
-    
-    setIsUploading(true);
-    
-    const formData = new FormData();
-    formData.append('document', file);
-    formData.append('type', documentType);
-    
-    try {
-      const result = await onUpload(formData);
-      
-      if (!result.success) {
-        setUploadError(result.message || 'Failed to upload document.');
-      } else {
-        // Reset form on successful upload
-        setFile(null);
-        setDocumentType('identification');
-        e.target.reset(); // Reset form fields
-      }
-    } catch (error) {
-      setUploadError('An unexpected error occurred. Please try again.');
-      console.error('Document upload error:', error);
-    } finally {
-      setIsUploading(false);
-    }
-  };
-
-  // Handle document deletion
-  const handleDelete = async (docId) => {
-    if (window.confirm('Are you sure you want to delete this document?')) {
-      try {
-        await onDelete(docId);
-      } catch (error) {
-        console.error('Document deletion error:', error);
-      }
-    }
-  };
-
-  // Format document type for display
-  const formatDocumentType = (type) => {
-    return type
-      .split('_')
-      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
-      .join(' ');
-  };
-
-  // Format date for display
-  const formatDate = (dateString) => {
-    return new Date(dateString).toLocaleDateString();
-  };
-
-  // Format file size
-  const formatFileSize = (bytes) => {
-    if (bytes < 1024) return bytes + ' B';
-    else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
-    else return (bytes / 1048576).toFixed(1) + ' MB';
-  };
-
-  return (
-    <div className="document-upload-container">
-      {/* Upload Form */}
-      <div className="document-upload-form">
-        <h3>Upload Document</h3>
-        
-        {uploadError && <div className="form-error">{uploadError}</div>}
-        
-        <form onSubmit={handleSubmit}>
-          <div className="form-group">
-            <label htmlFor="documentType">Document Type</label>
-            <select
-              id="documentType"
-              value={documentType}
-              onChange={(e) => setDocumentType(e.target.value)}
-              required
-            >
-              <option value="identification">Identification</option>
-              <option value="proof_of_address">Proof of Address</option>
-              <option value="business_license">Business License</option>
-              <option value="contract">Contract</option>
-              <option value="invoice">Invoice</option>
-              <option value="receipt">Receipt</option>
-              <option value="other">Other</option>
-            </select>
-          </div>
-          
-          <div className="form-group">
-            <label htmlFor="documentFile">Select File</label>
-            <input
-              type="file"
-              id="documentFile"
-              onChange={handleFileChange}
-              accept=".pdf,.png,.jpg,.jpeg"
-              required
-            />
-            <small className="file-info">
-              Maximum file size: 5MB. Supported formats: PDF, JPEG, JPG, PNG
-            </small>
-          </div>
-          
-          {file && (
-            <div className="file-preview">
-              <p>
-                <strong>Selected file:</strong> {file.name}
-              </p>
-              <p>
-                <strong>Size:</strong> {formatFileSize(file.size)}
-              </p>
-            </div>
-          )}
-          
-          <button
-            type="submit"
-            className="btn primary"
-            disabled={isUploading || loading || !file}
-          >
-            {isUploading ? 'Uploading...' : 'Upload Document'}
-          </button>
-        </form>
-      </div>
-      
-      {/* Documents List */}
-      <div className="documents-list">
-        <h3>My Documents</h3>
-        
-        {loading ? (
-          <p>Loading documents...</p>
-        ) : documents.length === 0 ? (
-          <p>No documents uploaded yet.</p>
-        ) : (
-          <table className="documents-table">
-            <thead>
-              <tr>
-                <th>Type</th>
-                <th>Filename</th>
-                <th>Uploaded Date</th>
-                <th>Actions</th>
-              </tr>
-            </thead>
-            <tbody>
-              {documents.map((doc) => (
-                <tr key={doc._id}>
-                  <td>{formatDocumentType(doc.type)}</td>
-                  <td>
-                    <a 
-                      href={doc.url} 
-                      target="_blank" 
-                      rel="noopener noreferrer"
-                      className="document-link"
-                    >
-                      {doc.filename || 'View Document'}
-                    </a>
-                  </td>
-                  <td>{formatDate(doc.uploadedAt)}</td>
-                  <td>
-                    <button
-                      className="btn delete-btn"
-                      onClick={() => handleDelete(doc._id)}
-                      disabled={loading}
-                    >
-                      Delete
-                    </button>
-                  </td>
-                </tr>
-              ))}
-            </tbody>
-          </table>
-        )}
-      </div>
-    </div>
-  );
-};
-
-export default DocumentUploadForm;
\ No newline at end of file
diff --git a/frontend/src/components/profile/MFASetupForm.jsx b/frontend/src/components/profile/MFASetupForm.jsx
deleted file mode 100644
index 9e239de..0000000
--- a/frontend/src/components/profile/MFASetupForm.jsx
+++ /dev/null
@@ -1,291 +0,0 @@
-import React, { useState } from 'react';
-import './ProfileForms.css';
-
-const MFASetupForm = ({ profileData, onEnableMFA, onDisableMFA, loading }) => {
-  const [setupStep, setSetupStep] = useState('initial'); // 'initial', 'qrcode', 'verify', 'success'
-  const [mfaData, setMfaData] = useState({
-    qrCode: '',
-    secret: '',
-    token: '',
-    password: '',
-    recoveryCodes: []
-  });
-  const [error, setError] = useState('');
-  const [success, setSuccess] = useState('');
-
-  // Reset states when canceling setup
-  const handleCancel = () => {
-    setSetupStep('initial');
-    setMfaData({
-      qrCode: '',
-      secret: '',
-      token: '',
-      password: '',
-      recoveryCodes: []
-    });
-    setError('');
-  };
-
-  // Handle text input changes
-  const handleChange = (e) => {
-    setMfaData({ ...mfaData, [e.target.name]: e.target.value });
-    setError('');
-  };
-
-  // Start the MFA setup process - generate QR code
-  const handleStartSetup = async () => {
-    try {
-      setError('');
-      
-      // Call API to generate secret and QR code
-      const response = await onEnableMFA.generateSecret();
-      
-      if (response.success) {
-        setMfaData({
-          ...mfaData,
-          qrCode: response.data.data.qrCode,
-          secret: response.data.data.secret
-        });
-        setSetupStep('qrcode');
-      } else {
-        setError('Failed to generate MFA setup information');
-      }
-    } catch (err) {
-      setError(err.response?.data?.message || 'An error occurred while setting up MFA');
-      console.error('MFA setup error:', err);
-    }
-  };
-
-  // Verify the token and complete MFA setup
-  const handleVerifyToken = async () => {
-    if (!mfaData.token) {
-      setError('Please enter the verification code from your authenticator app');
-      return;
-    }
-
-    try {
-      setError('');
-      
-      // Call API to verify token and enable MFA
-      const response = await onEnableMFA.enableMFA({
-        token: mfaData.token,
-        secret: mfaData.secret
-      });
-      
-      if (response.success) {
-        // Save recovery codes and move to success step
-        setMfaData({
-          ...mfaData,
-          recoveryCodes: response.data.recoveryCodes || []
-        });
-        setSuccess('MFA has been successfully enabled for your account');
-        setSetupStep('success');
-      } else {
-        setError('Failed to verify the code. Please try again.');
-      }
-    } catch (err) {
-      setError(err.response?.data?.message || 'Invalid verification code');
-      console.error('MFA verification error:', err);
-    }
-  };
-
-  // Disable MFA
-  const handleDisableMFA = async () => {
-    if (!mfaData.password) {
-      setError('Please enter your password to disable MFA');
-      return;
-    }
-
-    try {
-      setError('');
-      
-      // Call API to disable MFA
-      const response = await onDisableMFA({ password: mfaData.password });
-      
-      if (response.success) {
-        setSuccess('MFA has been disabled for your account');
-        setMfaData({
-          qrCode: '',
-          secret: '',
-          token: '',
-          password: '',
-          recoveryCodes: []
-        });
-        setSetupStep('initial');
-      } else {
-        setError('Failed to disable MFA');
-      }
-    } catch (err) {
-      setError(err.response?.data?.message || 'An error occurred while disabling MFA');
-      console.error('MFA disable error:', err);
-    }
-  };
-
-  // Download recovery codes as a text file
-  const handleDownloadCodes = () => {
-    if (mfaData.recoveryCodes.length === 0) {
-      setError('No recovery codes available to download');
-      return;
-    }
-
-    const codesText = mfaData.recoveryCodes.join('\n');
-    const blob = new Blob([codesText], { type: 'text/plain' });
-    const url = URL.createObjectURL(blob);
-    
-    const a = document.createElement('a');
-    a.href = url;
-    a.download = 'smartbin-recovery-codes.txt';
-    document.body.appendChild(a);
-    a.click();
-    document.body.removeChild(a);
-    URL.revokeObjectURL(url);
-  };
-
-  return (
-    <div className="profile-form-container">
-      <h3>Two-Factor Authentication (2FA)</h3>
-
-      {error && <div className="form-error">{error}</div>}
-      {success && <div className="form-success">{success}</div>}
-
-      <div className="mfa-status">
-        <span className={`status-indicator ${profileData?.mfaEnabled ? 'enabled' : 'disabled'}`}>
-          {profileData?.mfaEnabled ? 'Enabled' : 'Disabled'}
-        </span>
-        <p>
-          Two-factor authentication adds an extra layer of security to your account by requiring 
-          both your password and access to your mobile device.
-        </p>
-      </div>
-
-      {setupStep === 'initial' && (
-        <div className="setup-initial">
-          {profileData?.mfaEnabled ? (
-            <div className="mfa-disable-form">
-              <p>To disable two-factor authentication, please confirm your password:</p>
-              <div className="form-group">
-                <label htmlFor="password">Password</label>
-                <input
-                  type="password"
-                  id="password"
-                  name="password"
-                  value={mfaData.password}
-                  onChange={handleChange}
-                  disabled={loading}
-                  placeholder="Enter your current password"
-                />
-              </div>
-              <div className="form-buttons">
-                <button
-                  type="button"
-                  className="mfa-button warning"
-                  onClick={handleDisableMFA}
-                  disabled={loading || !mfaData.password}
-                >
-                  {loading ? 'Processing...' : 'Disable 2FA'}
-                </button>
-              </div>
-            </div>
-          ) : (
-            <>
-              <p>Follow these steps to enable two-factor authentication:</p>
-              <ol>
-                <li>Install an authenticator app on your device (Google Authenticator, Microsoft Authenticator, Authy, etc.)</li>
-                <li>Scan the QR code with the app or enter the setup key manually</li>
-                <li>Enter the verification code shown in your app</li>
-                <li>Save your recovery codes in a safe place</li>
-              </ol>
-              <button
-                className="mfa-button"
-                onClick={handleStartSetup}
-                disabled={loading}
-              >
-                {loading ? 'Processing...' : 'Set Up Two-Factor Authentication'}
-              </button>
-            </>
-          )}
-        </div>
-      )}
-
-      {setupStep === 'qrcode' && (
-        <div className="qr-code-step">
-          <p>Scan this QR code with your authenticator app:</p>
-          
-          <div className="qr-code-container">
-            <img src={mfaData.qrCode} alt="QR Code for authenticator app" />
-          </div>
-          
-          <p>Or set up manually with this code:</p>
-          <code className="manual-code">{mfaData.secret}</code>
-          
-          <div className="form-group">
-            <label htmlFor="token">Enter the 6-digit verification code from your app:</label>
-            <input
-              type="text"
-              id="token"
-              name="token"
-              value={mfaData.token}
-              onChange={handleChange}
-              disabled={loading}
-              placeholder="123456"
-              autoComplete="off"
-              maxLength={6}
-            />
-          </div>
-          
-          <div className="form-buttons">
-            <button
-              className="mfa-button"
-              onClick={handleVerifyToken}
-              disabled={loading || mfaData.token.length !== 6}
-            >
-              {loading ? 'Verifying...' : 'Verify and Enable'}
-            </button>
-            <button
-              className="mfa-button secondary"
-              onClick={handleCancel}
-              disabled={loading}
-            >
-              Cancel
-            </button>
-          </div>
-        </div>
-      )}
-
-      {setupStep === 'success' && (
-        <div className="recovery-codes">
-          <h5>Important: Save Your Recovery Codes</h5>
-          <p>
-            Recovery codes can be used to access your account if you lose your device.
-            Each code can only be used once. Keep these codes in a safe place!
-          </p>
-          
-          <div className="codes-container">
-            {mfaData.recoveryCodes.map((code, index) => (
-              <div key={index} className="recovery-code">
-                {code}
-              </div>
-            ))}
-          </div>
-          
-          <div className="form-buttons">
-            <button
-              className="mfa-button"
-              onClick={handleDownloadCodes}
-            >
-              Download Recovery Codes
-            </button>
-            <button
-              className="mfa-button secondary"
-              onClick={() => setSetupStep('initial')}
-            >
-              Done
-            </button>
-          </div>
-        </div>
-      )}
-    </div>
-  );
-};
-
-export default MFASetupForm;
\ No newline at end of file
diff --git a/frontend/src/components/profile/PasswordChangeForm.jsx b/frontend/src/components/profile/PasswordChangeForm.jsx
deleted file mode 100644
index bd5a56d..0000000
--- a/frontend/src/components/profile/PasswordChangeForm.jsx
+++ /dev/null
@@ -1,120 +0,0 @@
-import React, { useState } from 'react';
-import './ProfileForms.css';
-
-const PasswordChangeForm = ({ onSubmit, loading }) => {
-  const [formData, setFormData] = useState({
-    currentPassword: '',
-    newPassword: '',
-    confirmPassword: ''
-  });
-  const [formError, setFormError] = useState('');
-  const [formSuccess, setFormSuccess] = useState('');
-
-  const handleChange = (e) => {
-    const { name, value } = e.target;
-    setFormData({ ...formData, [name]: value });
-    // Clear messages when form is being edited
-    setFormError('');
-    setFormSuccess('');
-  };
-
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    setFormError('');
-    setFormSuccess('');
-    
-    // Validate passwords
-    if (!formData.currentPassword) {
-      setFormError('Current password is required');
-      return;
-    }
-    
-    if (!formData.newPassword) {
-      setFormError('New password is required');
-      return;
-    }
-    
-    if (formData.newPassword.length < 8) {
-      setFormError('Password must be at least 8 characters long');
-      return;
-    }
-    
-    if (formData.newPassword !== formData.confirmPassword) {
-      setFormError('New passwords do not match');
-      return;
-    }
-    
-    // Submit the form
-    const result = await onSubmit(formData);
-    
-    if (result.success) {
-      setFormSuccess(result.message);
-      // Clear form after successful password change
-      setFormData({
-        currentPassword: '',
-        newPassword: '',
-        confirmPassword: ''
-      });
-    } else {
-      setFormError(result.message);
-    }
-  };
-
-  return (
-    <div className="profile-form-container">
-      <h3>Change Password</h3>
-      
-      {formError && <div className="form-error">{formError}</div>}
-      {formSuccess && <div className="form-success">{formSuccess}</div>}
-      
-      <form onSubmit={handleSubmit}>
-        <div className="form-group">
-          <label htmlFor="currentPassword">Current Password</label>
-          <input 
-            type="password" 
-            id="currentPassword" 
-            name="currentPassword" 
-            value={formData.currentPassword} 
-            onChange={handleChange}
-            disabled={loading}
-          />
-        </div>
-        
-        <div className="form-group">
-          <label htmlFor="newPassword">New Password</label>
-          <input 
-            type="password" 
-            id="newPassword" 
-            name="newPassword" 
-            value={formData.newPassword} 
-            onChange={handleChange}
-            disabled={loading}
-          />
-          <small>Must be at least 8 characters</small>
-        </div>
-        
-        <div className="form-group">
-          <label htmlFor="confirmPassword">Confirm New Password</label>
-          <input 
-            type="password" 
-            id="confirmPassword" 
-            name="confirmPassword" 
-            value={formData.confirmPassword} 
-            onChange={handleChange}
-            disabled={loading}
-          />
-        </div>
-        
-        <button 
-          type="submit" 
-          className="profile-form-button"
-          disabled={loading}
-        >
-          {loading ? 'Updating...' : 'Change Password'}
-        </button>
-      </form>
-    </div>
-  );
-};
-
-export default PasswordChangeForm;
\ No newline at end of file
diff --git a/frontend/src/components/profile/ProfileComponents.css b/frontend/src/components/profile/ProfileComponents.css
deleted file mode 100644
index dbe6478..0000000
--- a/frontend/src/components/profile/ProfileComponents.css
+++ /dev/null
@@ -1,381 +0,0 @@
-/* ProfileComponents.css */
-
-/* Overall profile page layout */
-.profile-container {
-  background-color: #fff;
-  border-radius: 10px;
-  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
-  padding: 30px;
-}
-
-.profile-header {
-  margin-bottom: 20px;
-  border-bottom: 1px solid #eee;
-  padding-bottom: 15px;
-}
-
-.profile-header h2 {
-  margin: 0;
-  font-size: 1.8rem;
-  color: #3e4b2e;
-}
-
-.profile-tabs {
-  display: flex;
-  margin-bottom: 20px;
-  border-bottom: 1px solid #eee;
-}
-
-.profile-tab {
-  padding: 10px 20px;
-  margin-right: 5px;
-  cursor: pointer;
-  border: none;
-  background: none;
-  font-size: 1rem;
-  color: #666;
-  transition: all 0.3s ease;
-}
-
-.profile-tab:hover {
-  color: #3e4b2e;
-}
-
-.profile-tab.active {
-  color: #3e4b2e;
-  border-bottom: 3px solid #3e4b2e;
-  font-weight: 600;
-}
-
-/* Form elements */
-.profile-form {
-  max-width: 800px;
-}
-
-.form-section {
-  margin-bottom: 30px;
-  border-bottom: 1px solid #f0f0f0;
-  padding-bottom: 20px;
-}
-
-.form-section:last-child {
-  border-bottom: none;
-}
-
-.form-section h3 {
-  font-size: 1.2rem;
-  color: #3e4b2e;
-  margin-bottom: 15px;
-}
-
-.form-group {
-  margin-bottom: 20px;
-}
-
-.form-group label {
-  display: block;
-  margin-bottom: 8px;
-  font-weight: 500;
-  color: #333;
-}
-
-.form-group input[type="text"],
-.form-group input[type="email"],
-.form-group input[type="tel"],
-.form-group input[type="password"],
-.form-group select,
-.form-group textarea {
-  width: 100%;
-  padding: 10px 12px;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 16px;
-  transition: border-color 0.3s;
-}
-
-.form-group input:focus,
-.form-group select:focus,
-.form-group textarea:focus {
-  outline: none;
-  border-color: #3e4b2e;
-}
-
-.form-group input[type="checkbox"] {
-  margin-right: 10px;
-}
-
-.error-message {
-  color: #dc3545;
-  font-size: 14px;
-  margin-top: 5px;
-}
-
-/* Address fields grid layout */
-.address-fields {
-  display: grid;
-  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
-  gap: 15px;
-}
-
-/* Required field indicator */
-.required {
-  color: #dc3545;
-}
-
-/* Skills tags */
-.skills-input-group {
-  display: flex;
-  margin-bottom: 10px;
-}
-
-.skills-input-group input {
-  flex-grow: 1;
-  margin-right: 10px;
-}
-
-.btn-add-skill {
-  padding: 8px 15px;
-  background-color: #3e4b2e;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  cursor: pointer;
-}
-
-.btn-add-skill:disabled {
-  background-color: #cccccc;
-  cursor: not-allowed;
-}
-
-.skills-list {
-  display: flex;
-  flex-wrap: wrap;
-  gap: 10px;
-  margin-top: 10px;
-}
-
-.skill-tag {
-  background-color: #f0f4eb;
-  color: #3e4b2e;
-  padding: 5px 10px;
-  border-radius: 15px;
-  display: flex;
-  align-items: center;
-  font-size: 0.9rem;
-}
-
-.btn-remove-skill {
-  border: none;
-  background: none;
-  color: #999;
-  margin-left: 5px;
-  cursor: pointer;
-  font-size: 1.2rem;
-  line-height: 1;
-  padding: 0 3px;
-}
-
-.btn-remove-skill:hover {
-  color: #dc3545;
-}
-
-/* Preference checkboxes */
-.preference-checkboxes {
-  display: grid;
-  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
-  gap: 15px;
-}
-
-.preference-item {
-  display: flex;
-  align-items: center;
-}
-
-/* Read-only fields */
-.readonly-field input {
-  background-color: #f8f9fa;
-  cursor: not-allowed;
-}
-
-/* Action buttons */
-.form-actions {
-  margin-top: 30px;
-  display: flex;
-  justify-content: flex-end;
-}
-
-/* Document upload styles */
-.documents-container {
-  margin-top: 20px;
-}
-
-.document-upload-form {
-  background-color: #f9f9f9;
-  border: 2px dashed #ddd;
-  border-radius: 8px;
-  padding: 20px;
-  text-align: center;
-  margin-bottom: 30px;
-  transition: border-color 0.3s;
-}
-
-.document-upload-form:hover {
-  border-color: #3e4b2e;
-}
-
-.drop-zone {
-  padding: 40px 20px;
-  cursor: pointer;
-}
-
-.drop-zone.active {
-  border-color: #3e4b2e;
-  background-color: #f0f4eb;
-}
-
-.file-input {
-  display: none;
-}
-
-.upload-icon {
-  font-size: 48px;
-  color: #3e4b2e;
-  margin-bottom: 15px;
-}
-
-.upload-progress {
-  margin-top: 15px;
-}
-
-.progress-bar {
-  height: 8px;
-  background-color: #e9ecef;
-  border-radius: 4px;
-  overflow: hidden;
-}
-
-.progress-bar-fill {
-  height: 100%;
-  background-color: #3e4b2e;
-  transition: width 0.3s ease;
-}
-
-/* Document list */
-.document-list {
-  margin-top: 30px;
-}
-
-.document-item {
-  display: flex;
-  align-items: center;
-  padding: 12px 15px;
-  background-color: #fff;
-  border: 1px solid #eee;
-  border-radius: 6px;
-  margin-bottom: 10px;
-  transition: box-shadow 0.3s;
-}
-
-.document-item:hover {
-  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
-}
-
-.document-icon {
-  margin-right: 15px;
-  font-size: 20px;
-  color: #3e4b2e;
-}
-
-.document-details {
-  flex-grow: 1;
-}
-
-.document-name {
-  font-weight: 500;
-  margin-bottom: 3px;
-}
-
-.document-meta {
-  font-size: 0.85rem;
-  color: #777;
-}
-
-.document-actions {
-  display: flex;
-  gap: 10px;
-}
-
-/* MFA setup */
-.mfa-setup {
-  max-width: 500px;
-  margin: 0 auto;
-}
-
-.qr-container {
-  text-align: center;
-  margin: 30px 0;
-}
-
-.qr-code {
-  padding: 15px;
-  background-color: #fff;
-  border: 1px solid #ddd;
-  border-radius: 8px;
-  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
-  display: inline-block;
-}
-
-.verification-code {
-  display: flex;
-  gap: 10px;
-  margin-bottom: 20px;
-}
-
-.verification-code input {
-  width: 50px;
-  height: 50px;
-  font-size: 24px;
-  text-align: center;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-}
-
-.recovery-codes {
-  background-color: #f9f9f9;
-  border: 1px solid #eee;
-  border-radius: 6px;
-  padding: 15px;
-  margin: 20px 0;
-}
-
-.recovery-code {
-  font-family: monospace;
-  font-size: 1rem;
-  background-color: #fff;
-  border: 1px solid #eee;
-  padding: 6px 12px;
-  margin-bottom: 8px;
-  border-radius: 4px;
-  display: inline-block;
-  margin-right: 8px;
-}
-
-/* Responsive adjustments */
-@media (max-width: 768px) {
-  .profile-tabs {
-    flex-wrap: wrap;
-  }
-  
-  .profile-tab {
-    padding: 10px 15px;
-    margin-bottom: 5px;
-  }
-  
-  .address-fields {
-    grid-template-columns: 1fr;
-  }
-  
-  .preference-checkboxes {
-    grid-template-columns: 1fr;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/components/profile/ProfileForm.jsx b/frontend/src/components/profile/ProfileForm.jsx
deleted file mode 100644
index 1ef1b94..0000000
--- a/frontend/src/components/profile/ProfileForm.jsx
+++ /dev/null
@@ -1,444 +0,0 @@
-import React, { useState, useEffect } from 'react';
-import { useAuth } from '../../contexts/AuthContext';
-import userApi from '../../services/userApi';
-import './ProfileComponents.css';
-
-const ProfileForm = ({ initialData, onProfileUpdate }) => {
-  const { user } = useAuth();
-  const [formData, setFormData] = useState({
-    name: '',
-    email: '',
-    phone: '',
-    address: {
-      street: '',
-      city: '',
-      state: '',
-      zipCode: ''
-    },
-    preferences: [],
-    skills: [],
-    availability: ''
-  });
-  
-  const [newSkill, setNewSkill] = useState('');
-  const [errors, setErrors] = useState({});
-  const [loading, setLoading] = useState(false);
-  const [successMessage, setSuccessMessage] = useState('');
-
-  const isStaff = user?.role === 'staff';
-  const isCustomer = user?.role === 'customer';
-
-  // Initialize form with user data when available
-  useEffect(() => {
-    if (initialData) {
-      setFormData({
-        name: initialData.name || '',
-        email: initialData.email || '',
-        phone: initialData.phone || '',
-        address: {
-          street: initialData.address?.street || '',
-          city: initialData.address?.city || '',
-          state: initialData.address?.state || '',
-          zipCode: initialData.address?.zipCode || ''
-        },
-        preferences: initialData.preferences || [],
-        skills: initialData.skills || [],
-        availability: initialData.availability || ''
-      });
-    }
-  }, [initialData]);
-
-  // Handle input change
-  const handleChange = (e) => {
-    const { name, value, type, checked } = e.target;
-    
-    if (name.includes('.')) {
-      // Handle nested fields (address)
-      const [parent, child] = name.split('.');
-      setFormData(prev => ({
-        ...prev,
-        [parent]: {
-          ...prev[parent],
-          [child]: value
-        }
-      }));
-    } else if (type === 'checkbox') {
-      // Handle preferences checkboxes
-      setFormData(prev => {
-        const updatedPreferences = checked
-          ? [...prev.preferences, value]
-          : prev.preferences.filter(pref => pref !== value);
-        
-        return { ...prev, preferences: updatedPreferences };
-      });
-    } else {
-      // Handle normal fields
-      setFormData(prev => ({
-        ...prev,
-        [name]: value
-      }));
-    }
-    
-    // Clear error for this field if it exists
-    if (errors[name]) {
-      setErrors(prev => ({ ...prev, [name]: '' }));
-    }
-    
-    // Clear success message on any change
-    if (successMessage) {
-      setSuccessMessage('');
-    }
-  };
-
-  // Add a new skill
-  const addSkill = () => {
-    if (!newSkill.trim()) return;
-    
-    // Don't add duplicates
-    if (formData.skills.includes(newSkill.trim())) {
-      setErrors(prev => ({ 
-        ...prev, 
-        skills: 'This skill has already been added.' 
-      }));
-      return;
-    }
-    
-    setFormData(prev => ({
-      ...prev,
-      skills: [...prev.skills, newSkill.trim()]
-    }));
-    setNewSkill('');
-    setErrors(prev => ({ ...prev, skills: '' }));
-  };
-
-  // Remove a skill
-  const removeSkill = (skillToRemove) => {
-    setFormData(prev => ({
-      ...prev,
-      skills: prev.skills.filter(skill => skill !== skillToRemove)
-    }));
-  };
-
-  // Validate form before submission
-  const validateForm = () => {
-    const newErrors = {};
-    
-    if (!formData.name.trim()) {
-      newErrors.name = 'Name is required';
-    }
-    
-    if (!formData.email.trim()) {
-      newErrors.email = 'Email is required';
-    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
-      newErrors.email = 'Email is invalid';
-    }
-    
-    if (formData.phone && !/^\+?[0-9]{10,15}$/.test(formData.phone.replace(/[-()\s]/g, ''))) {
-      newErrors.phone = 'Phone number format is invalid';
-    }
-    
-    setErrors(newErrors);
-    return Object.keys(newErrors).length === 0;
-  };
-
-  // Handle form submission
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    
-    if (!validateForm()) return;
-    
-    setLoading(true);
-    try {
-      await userApi.updateProfile(formData);
-      setSuccessMessage('Profile updated successfully!');
-      
-      // Notify parent component
-      if (onProfileUpdate) {
-        onProfileUpdate(formData);
-      }
-      
-      // Clear success message after 5 seconds
-      setTimeout(() => {
-        setSuccessMessage('');
-      }, 5000);
-    } catch (err) {
-      console.error('Error updating profile:', err);
-      const errorMessage = err.response?.data?.message || 'Failed to update profile';
-      setErrors({ general: errorMessage });
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  return (
-    <form className="profile-form" onSubmit={handleSubmit}>
-      {errors.general && (
-        <div className="error-message">{errors.general}</div>
-      )}
-      
-      {successMessage && (
-        <div className="success-message">{successMessage}</div>
-      )}
-      
-      <div className="form-section">
-        <h3>Personal Information</h3>
-        
-        <div className="form-group">
-          <label htmlFor="name">
-            Full Name <span className="required">*</span>
-          </label>
-          <input
-            type="text"
-            id="name"
-            name="name"
-            value={formData.name}
-            onChange={handleChange}
-            required
-            disabled={loading}
-          />
-          {errors.name && <div className="error-message">{errors.name}</div>}
-        </div>
-        
-        <div className="form-group">
-          <label htmlFor="email">
-            Email <span className="required">*</span>
-          </label>
-          <input
-            type="email"
-            id="email"
-            name="email"
-            value={formData.email}
-            onChange={handleChange}
-            required
-            disabled={loading}
-          />
-          {errors.email && <div className="error-message">{errors.email}</div>}
-        </div>
-        
-        <div className="form-group">
-          <label htmlFor="phone">Phone Number</label>
-          <input
-            type="tel"
-            id="phone"
-            name="phone"
-            value={formData.phone}
-            onChange={handleChange}
-            disabled={loading}
-            placeholder="e.g. +1 (123) 456-7890"
-          />
-          {errors.phone && <div className="error-message">{errors.phone}</div>}
-        </div>
-        
-        <div className="form-group readonly-field">
-          <label htmlFor="accountType">Account Type</label>
-          <input
-            type="text"
-            id="accountType"
-            value={user?.role ? user.role.charAt(0).toUpperCase() + user.role.slice(1) : ''}
-            disabled
-          />
-        </div>
-        
-        <div className="form-group readonly-field">
-          <label htmlFor="memberSince">Member Since</label>
-          <input
-            type="text"
-            id="memberSince"
-            value={user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}
-            disabled
-          />
-        </div>
-      </div>
-      
-      <div className="form-section">
-        <h3>Address Information</h3>
-        
-        <div className="address-fields">
-          <div className="form-group">
-            <label htmlFor="address.street">Street Address</label>
-            <input
-              type="text"
-              id="address.street"
-              name="address.street"
-              value={formData.address.street}
-              onChange={handleChange}
-              disabled={loading}
-            />
-          </div>
-          
-          <div className="form-group">
-            <label htmlFor="address.city">City</label>
-            <input
-              type="text"
-              id="address.city"
-              name="address.city"
-              value={formData.address.city}
-              onChange={handleChange}
-              disabled={loading}
-            />
-          </div>
-          
-          <div className="form-group">
-            <label htmlFor="address.state">State/Province</label>
-            <input
-              type="text"
-              id="address.state"
-              name="address.state"
-              value={formData.address.state}
-              onChange={handleChange}
-              disabled={loading}
-            />
-          </div>
-          
-          <div className="form-group">
-            <label htmlFor="address.zipCode">Zip/Postal Code</label>
-            <input
-              type="text"
-              id="address.zipCode"
-              name="address.zipCode"
-              value={formData.address.zipCode}
-              onChange={handleChange}
-              disabled={loading}
-            />
-          </div>
-        </div>
-      </div>
-      
-      {/* Staff-specific fields */}
-      {isStaff && (
-        <div className="form-section">
-          <h3>Professional Information</h3>
-          
-          <div className="form-group">
-            <label htmlFor="skills">Skills</label>
-            <div className="skills-input-group">
-              <input
-                type="text"
-                id="skills"
-                value={newSkill}
-                onChange={(e) => setNewSkill(e.target.value)}
-                placeholder="Add a skill (e.g. Waste Management, Driving)"
-                disabled={loading}
-              />
-              <button
-                type="button"
-                className="btn-add-skill"
-                onClick={addSkill}
-                disabled={!newSkill.trim() || loading}
-              >
-                Add
-              </button>
-            </div>
-            {errors.skills && <div className="error-message">{errors.skills}</div>}
-            
-            <div className="skills-list">
-              {formData.skills.map(skill => (
-                <span className="skill-tag" key={skill}>
-                  {skill}
-                  <button
-                    type="button"
-                    className="btn-remove-skill"
-                    onClick={() => removeSkill(skill)}
-                    disabled={loading}
-                  >
-                    &times;
-                  </button>
-                </span>
-              ))}
-            </div>
-          </div>
-          
-          <div className="form-group">
-            <label htmlFor="availability">Availability</label>
-            <select
-              id="availability"
-              name="availability"
-              value={formData.availability}
-              onChange={handleChange}
-              disabled={loading}
-            >
-              <option value="">Select availability</option>
-              <option value="Full-time">Full-time</option>
-              <option value="Part-time">Part-time</option>
-              <option value="Weekends">Weekends only</option>
-              <option value="Flexible">Flexible</option>
-            </select>
-          </div>
-        </div>
-      )}
-      
-      {/* Customer-specific fields */}
-      {isCustomer && (
-        <div className="form-section">
-          <h3>Preferences</h3>
-          
-          <div className="preference-checkboxes">
-            <div className="preference-item">
-              <input
-                type="checkbox"
-                id="pref-email-notifications"
-                name="preferences"
-                value="email-notifications"
-                checked={formData.preferences.includes('email-notifications')}
-                onChange={handleChange}
-                disabled={loading}
-              />
-              <label htmlFor="pref-email-notifications">Email Notifications</label>
-            </div>
-            
-            <div className="preference-item">
-              <input
-                type="checkbox"
-                id="pref-sms-notifications"
-                name="preferences"
-                value="sms-notifications"
-                checked={formData.preferences.includes('sms-notifications')}
-                onChange={handleChange}
-                disabled={loading}
-              />
-              <label htmlFor="pref-sms-notifications">SMS Notifications</label>
-            </div>
-            
-            <div className="preference-item">
-              <input
-                type="checkbox"
-                id="pref-weekly-reports"
-                name="preferences"
-                value="weekly-reports"
-                checked={formData.preferences.includes('weekly-reports')}
-                onChange={handleChange}
-                disabled={loading}
-              />
-              <label htmlFor="pref-weekly-reports">Weekly Reports</label>
-            </div>
-            
-            <div className="preference-item">
-              <input
-                type="checkbox"
-                id="pref-auto-scheduling"
-                name="preferences"
-                value="auto-scheduling"
-                checked={formData.preferences.includes('auto-scheduling')}
-                onChange={handleChange}
-                disabled={loading}
-              />
-              <label htmlFor="pref-auto-scheduling">Auto-Scheduling</label>
-            </div>
-          </div>
-        </div>
-      )}
-      
-      <div className="form-actions">
-        <button
-          type="submit"
-          className="btn primary"
-          disabled={loading}
-        >
-          {loading ? 'Saving...' : 'Save Changes'}
-        </button>
-      </div>
-    </form>
-  );
-};
-
-export default ProfileForm;
\ No newline at end of file
diff --git a/frontend/src/components/profile/ProfileForms.css b/frontend/src/components/profile/ProfileForms.css
deleted file mode 100644
index efb1b64..0000000
--- a/frontend/src/components/profile/ProfileForms.css
+++ /dev/null
@@ -1,313 +0,0 @@
-/* ProfileForms.css - Include styles for both Profile Form and MFA Form */
-
-/* Common form styles */
-.profile-form-container {
-  background-color: #fff;
-  border-radius: 8px;
-  padding: 1.5rem;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-  margin-bottom: 2rem;
-}
-
-.profile-form-container h3 {
-  margin-top: 0;
-  margin-bottom: 1.5rem;
-  color: #333;
-  border-bottom: 1px solid #eee;
-  padding-bottom: 10px;
-}
-
-.profile-form-container h4 {
-  margin-top: 1.5rem;
-  margin-bottom: 1rem;
-  color: #444;
-}
-
-.form-group {
-  margin-bottom: 1.2rem;
-}
-
-.form-group label {
-  display: block;
-  margin-bottom: 0.5rem;
-  font-weight: 500;
-  color: #555;
-}
-
-.form-group input,
-.form-group textarea {
-  width: 100%;
-  padding: 0.75rem;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 1rem;
-}
-
-.form-group input:focus,
-.form-group textarea:focus {
-  outline: none;
-  border-color: #4ea14a;
-  box-shadow: 0 0 0 2px rgba(78, 161, 74, 0.1);
-}
-
-.form-group textarea {
-  min-height: 100px;
-  resize: vertical;
-}
-
-.form-group small {
-  display: block;
-  margin-top: 0.25rem;
-  color: #777;
-  font-size: 0.875rem;
-}
-
-.form-error {
-  background-color: #f8d7da;
-  color: #721c24;
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid #f5c6cb;
-}
-
-.form-success {
-  background-color: #d4edda;
-  color: #155724;
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid #c3e6cb;
-}
-
-.profile-form-button {
-  background-color: #4ea14a;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  padding: 0.75rem 1.5rem;
-  font-size: 1rem;
-  cursor: pointer;
-  transition: background-color 0.2s;
-}
-
-.profile-form-button:hover {
-  background-color: #3c8a38;
-}
-
-.profile-form-button:disabled {
-  background-color: #8bc887;
-  cursor: not-allowed;
-}
-
-.read-only {
-  background-color: #f9f9f9;
-  cursor: not-allowed;
-}
-
-/* Skills input specific styling */
-.skills-container {
-  margin-bottom: 15px;
-}
-
-.skills-input {
-  display: flex;
-  margin-bottom: 10px;
-}
-
-.skills-input input {
-  flex: 1;
-  margin-right: 10px;
-}
-
-.skills-input button {
-  background-color: #4ea14a;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  padding: 0 15px;
-  cursor: pointer;
-}
-
-.skills-input button:disabled {
-  background-color: #8bc887;
-  cursor: not-allowed;
-}
-
-.skills-list {
-  display: flex;
-  flex-wrap: wrap;
-  gap: 10px;
-}
-
-.skill-tag {
-  background-color: #e9f5e9;
-  border: 1px solid #4ea14a;
-  border-radius: 16px;
-  padding: 4px 12px;
-  display: flex;
-  align-items: center;
-  font-size: 0.9rem;
-}
-
-.skill-tag button {
-  background: none;
-  border: none;
-  color: #666;
-  margin-left: 6px;
-  cursor: pointer;
-  font-size: 1.2rem;
-  line-height: 0.5;
-  padding: 0 0 0 5px;
-}
-
-/* MFA specific styling */
-.mfa-status {
-  display: flex;
-  flex-direction: column;
-  margin-bottom: 1.5rem;
-}
-
-.status-indicator {
-  font-weight: 600;
-  padding: 4px 12px;
-  border-radius: 20px;
-  display: inline-block;
-  width: fit-content;
-  margin-bottom: 10px;
-}
-
-.status-indicator.enabled {
-  background-color: #d4edda;
-  color: #155724;
-}
-
-.status-indicator.disabled {
-  background-color: #f8d7da;
-  color: #721c24;
-}
-
-.mfa-button {
-  background-color: #4ea14a;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  padding: 0.75rem 1.5rem;
-  font-size: 1rem;
-  cursor: pointer;
-  transition: background-color 0.2s;
-  margin-top: 1rem;
-}
-
-.mfa-button:hover {
-  background-color: #3c8a38;
-}
-
-.mfa-button:disabled {
-  background-color: #8bc887;
-  cursor: not-allowed;
-}
-
-.mfa-button.secondary {
-  background-color: #6c757d;
-  margin-left: 10px;
-}
-
-.mfa-button.secondary:hover {
-  background-color: #5a6268;
-}
-
-.mfa-button.warning {
-  background-color: #dc3545;
-}
-
-.mfa-button.warning:hover {
-  background-color: #c82333;
-}
-
-.form-buttons {
-  display: flex;
-  margin-top: 1.5rem;
-}
-
-.setup-initial {
-  margin-top: 1rem;
-}
-
-.setup-initial ol {
-  margin-bottom: 1.5rem;
-  padding-left: 1.5rem;
-}
-
-.setup-initial li {
-  margin-bottom: 0.75rem;
-}
-
-.qr-code-container {
-  display: flex;
-  justify-content: center;
-  margin: 1.5rem 0;
-  padding: 1rem;
-  border: 1px dashed #ddd;
-  background-color: #f9f9f9;
-}
-
-.qr-code-container img {
-  max-width: 200px;
-}
-
-.manual-code {
-  display: block;
-  background-color: #f9f9f9;
-  padding: 0.75rem;
-  border-radius: 4px;
-  font-family: monospace;
-  font-size: 1rem;
-  margin-bottom: 1.5rem;
-  text-align: center;
-  border: 1px solid #ddd;
-  word-break: break-all;
-}
-
-.recovery-codes h5 {
-  color: #dc3545;
-  margin-top: 0;
-  margin-bottom: 0.75rem;
-  font-size: 1.1rem;
-}
-
-.codes-container {
-  display: grid;
-  grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
-  gap: 10px;
-  margin: 1.5rem 0;
-  padding: 1rem;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  background-color: #f9f9f9;
-}
-
-.recovery-code {
-  font-family: monospace;
-  background-color: #fff;
-  padding: 8px 12px;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  text-align: center;
-}
-
-/* Responsive adjustments */
-@media (max-width: 768px) {
-  .form-buttons {
-    flex-direction: column;
-  }
-  
-  .mfa-button.secondary {
-    margin-left: 0;
-    margin-top: 0.5rem;
-  }
-  
-  .codes-container {
-    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/components/staff/AttendanceTracker.jsx b/frontend/src/components/staff/AttendanceTracker.jsx
deleted file mode 100644
index 3c26103..0000000
--- a/frontend/src/components/staff/AttendanceTracker.jsx
+++ /dev/null
@@ -1,13 +0,0 @@
-import React from 'react';
-
-const AttendanceTracker = () => {
-  return (
-    <div className="dashboard-content">
-      <h2>Attendance Tracking</h2>
-      <p>Attendance feature coming soon!</p>
-      {/* TODO: Fetch and display attendance data using attendanceApi */}
-    </div>
-  );
-};
-
-export default AttendanceTracker;
\ No newline at end of file
diff --git a/frontend/src/components/staff/PerformanceMetrics.jsx b/frontend/src/components/staff/PerformanceMetrics.jsx
deleted file mode 100644
index 1714991..0000000
--- a/frontend/src/components/staff/PerformanceMetrics.jsx
+++ /dev/null
@@ -1,13 +0,0 @@
-import React from 'react';
-
-const PerformanceMetrics = () => {
-  return (
-    <div className="dashboard-content">
-      <h2>Performance Metrics</h2>
-      <p>Performance metrics feature coming soon!</p>
-      {/* TODO: Fetch and display performance data using performanceApi */}
-    </div>
-  );
-};
-
-export default PerformanceMetrics;
\ No newline at end of file
diff --git a/frontend/src/components/staff/StaffComponents.css b/frontend/src/components/staff/StaffComponents.css
deleted file mode 100644
index 4da1955..0000000
--- a/frontend/src/components/staff/StaffComponents.css
+++ /dev/null
@@ -1,598 +0,0 @@
-/* Common styles for staff components */
-.attendance-tracker,
-.performance-metrics {
-  background-color: white;
-  border-radius: 8px;
-  padding: 20px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-  margin-bottom: 20px;
-}
-
-.tracker-header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  margin-bottom: 20px;
-}
-
-.attendance-actions {
-  display: flex;
-  gap: 10px;
-}
-
-.check-in-btn,
-.check-out-btn {
-  padding: 10px 20px;
-  border: none;
-  border-radius: 4px;
-  font-weight: 500;
-  cursor: pointer;
-}
-
-.check-in-btn {
-  background-color: #4ea14a;
-  color: white;
-}
-
-.check-out-btn {
-  background-color: #e74c3c;
-  color: white;
-}
-
-.check-in-btn:hover {
-  background-color: #3c8a38;
-}
-
-.check-out-btn:hover {
-  background-color: #c0392b;
-}
-
-.attendance-stats {
-  display: flex;
-  gap: 20px;
-  margin-bottom: 20px;
-}
-
-.stat-box {
-  flex: 1;
-  background-color: #f5f5f5;
-  border-radius: 5px;
-  padding: 15px;
-  display: flex;
-  flex-direction: column;
-  align-items: center;
-}
-
-.stat-label {
-  font-size: 14px;
-  color: #666;
-  margin-bottom: 5px;
-}
-
-.stat-value {
-  font-size: 24px;
-  font-weight: bold;
-  color: #333;
-}
-
-.date-filter {
-  display: flex;
-  gap: 20px;
-  margin-bottom: 20px;
-}
-
-.filter-item {
-  display: flex;
-  align-items: center;
-  gap: 10px;
-}
-
-.filter-item label {
-  font-weight: 500;
-  color: #555;
-}
-
-.filter-item input {
-  padding: 8px;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-}
-
-.attendance-table,
-.reviews-table {
-  width: 100%;
-  border-collapse: collapse;
-  margin-top: 20px;
-}
-
-.attendance-table th,
-.attendance-table td,
-.reviews-table th,
-.reviews-table td {
-  padding: 12px 15px;
-  text-align: left;
-  border-bottom: 1px solid #ddd;
-}
-
-.attendance-table th,
-.reviews-table th {
-  background-color: #f5f5f5;
-  font-weight: 500;
-  color: #333;
-}
-
-.status-badge {
-  display: inline-block;
-  padding: 3px 8px;
-  border-radius: 12px;
-  font-size: 12px;
-  font-weight: 500;
-  text-align: center;
-}
-
-.status-badge.present {
-  background-color: #d4edda;
-  color: #155724;
-}
-
-.status-badge.absent {
-  background-color: #f8d7da;
-  color: #721c24;
-}
-
-.status-badge.late {
-  background-color: #fff3cd;
-  color: #856404;
-}
-
-.status-badge.half-day {
-  background-color: #e2f0fb;
-  color: #0c5460;
-}
-
-/* Performance Metrics Styles */
-.performance-summary {
-  background-color: #f8f9fa;
-  border-radius: 6px;
-  padding: 20px;
-  margin-bottom: 20px;
-}
-
-.rating-overview {
-  display: flex;
-  gap: 30px;
-  align-items: center;
-}
-
-.average-rating {
-  display: flex;
-  flex-direction: column;
-  align-items: center;
-}
-
-.rating-label, .count-label {
-  font-size: 14px;
-  color: #666;
-  margin-bottom: 5px;
-}
-
-.rating-value {
-  font-size: 36px;
-  font-weight: bold;
-  color: #333;
-  margin-bottom: 5px;
-}
-
-.rating-stars {
-  display: flex;
-}
-
-.star {
-  font-size: 20px;
-  color: #ddd;
-  margin: 0 1px;
-}
-
-.star.filled {
-  color: #f39c12;
-}
-
-.review-count {
-  display: flex;
-  flex-direction: column;
-  align-items: center;
-}
-
-.count-value {
-  font-size: 28px;
-  font-weight: bold;
-  color: #333;
-}
-
-.rating-badge {
-  display: inline-block;
-  padding: 4px 8px;
-  border-radius: 4px;
-  font-weight: bold;
-  text-align: center;
-}
-
-.rating-badge.rating-10, .rating-badge.rating-9 {
-  background-color: #28a745;
-  color: white;
-}
-
-.rating-badge.rating-8, .rating-badge.rating-7 {
-  background-color: #4ea14a;
-  color: white;
-}
-
-.rating-badge.rating-6, .rating-badge.rating-5 {
-  background-color: #ffc107;
-  color: #333;
-}
-
-.rating-badge.rating-4, .rating-badge.rating-3 {
-  background-color: #fd7e14;
-  color: white;
-}
-
-.rating-badge.rating-2, .rating-badge.rating-1 {
-  background-color: #dc3545;
-  color: white;
-}
-
-.view-details-btn {
-  background-color: #007bff;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  padding: 6px 12px;
-  cursor: pointer;
-  font-size: 14px;
-}
-
-.view-details-btn:hover {
-  background-color: #0069d9;
-}
-
-/* Modal styles */
-.review-details-modal {
-  position: fixed;
-  top: 0;
-  left: 0;
-  width: 100%;
-  height: 100%;
-  background-color: rgba(0, 0, 0, 0.5);
-  display: flex;
-  justify-content: center;
-  align-items: center;
-  z-index: 1000;
-}
-
-.modal-content {
-  background-color: white;
-  border-radius: 8px;
-  padding: 30px;
-  width: 80%;
-  max-width: 800px;
-  max-height: 90vh;
-  overflow-y: auto;
-  position: relative;
-}
-
-.close-btn {
-  position: absolute;
-  top: 15px;
-  right: 20px;
-  font-size: 24px;
-  cursor: pointer;
-  color: #888;
-}
-
-.close-btn:hover {
-  color: #333;
-}
-
-.review-period {
-  margin-bottom: 20px;
-}
-
-.metrics-section, .feedback-section, .goals-section {
-  margin-bottom: 25px;
-}
-
-.metrics-grid {
-  display: grid;
-  grid-template-columns: repeat(3, 1fr);
-  gap: 15px;
-  margin-top: 15px;
-}
-
-.metric-item {
-  background-color: #f8f9fa;
-  padding: 12px;
-  border-radius: 5px;
-  display: flex;
-  flex-direction: column;
-}
-
-.metric-name {
-  font-size: 14px;
-  color: #666;
-  margin-bottom: 5px;
-}
-
-.metric-value {
-  font-size: 18px;
-  font-weight: bold;
-  color: #333;
-}
-
-.overall-rating {
-  margin-top: 20px;
-  font-size: 16px;
-}
-
-.close-details-btn {
-  background-color: #6c757d;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  padding: 8px 16px;
-  cursor: pointer;
-  font-size: 16px;
-  margin-top: 10px;
-}
-
-.close-details-btn:hover {
-  background-color: #5a6268;
-}
-
-.loading, .no-reviews, .no-records, .error-message {
-  padding: 20px;
-  text-align: center;
-  color: #666;
-  background-color: #f8f9fa;
-  border-radius: 6px;
-  margin-top: 15px;
-}
-
-.error-message {
-  color: #721c24;
-  background-color: #f8d7da;
-}
-
-/* New styles */
-.staff-component {
-  background-color: white;
-  border-radius: 8px;
-  padding: 20px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-  margin-bottom: 20px;
-}
-
-.staff-component-header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  margin-bottom: 20px;
-  border-bottom: 1px solid #eee;
-  padding-bottom: 15px;
-}
-
-.staff-component-header h2 {
-  font-size: 1.4rem;
-  color: #333;
-  margin: 0;
-}
-
-/* Attendance Tracker specific styles */
-.attendance-card {
-  display: flex;
-  justify-content: space-between;
-  background-color: #f9f9f9;
-  border-radius: 8px;
-  padding: 15px;
-  margin-bottom: 15px;
-  transition: all 0.3s ease;
-}
-
-.attendance-card:hover {
-  background-color: #f0f0f0;
-  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
-}
-
-.attendance-details {
-  flex-grow: 1;
-}
-
-.attendance-date {
-  font-weight: 500;
-  color: #444;
-  margin-bottom: 5px;
-}
-
-.attendance-time {
-  display: flex;
-  color: #666;
-  font-size: 0.9rem;
-}
-
-.attendance-time span {
-  margin-right: 15px;
-}
-
-.attendance-status {
-  display: flex;
-  align-items: center;
-}
-
-.status-indicator {
-  display: inline-block;
-  width: 10px;
-  height: 10px;
-  border-radius: 50%;
-  margin-right: 5px;
-}
-
-.status-indicator.checked-in {
-  background-color: #28a745;
-}
-
-.status-indicator.checked-out {
-  background-color: #6c757d;
-}
-
-.attendance-actions {
-  display: flex;
-  align-items: center;
-}
-
-.attendance-action-btn {
-  padding: 8px 15px;
-  border: none;
-  border-radius: 4px;
-  font-size: 0.9rem;
-  cursor: pointer;
-  transition: background-color 0.2s;
-}
-
-.check-in-btn {
-  background-color: #28a745;
-  color: white;
-}
-
-.check-in-btn:hover {
-  background-color: #218838;
-}
-
-.check-out-btn {
-  background-color: #6c757d;
-  color: white;
-}
-
-.check-out-btn:hover {
-  background-color: #5a6268;
-}
-
-/* Performance metrics styles */
-.metrics-grid {
-  display: grid;
-  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
-  gap: 20px;
-  margin-bottom: 20px;
-}
-
-.metric-card {
-  background-color: #f9f9f9;
-  border-radius: 8px;
-  padding: 15px;
-  text-align: center;
-}
-
-.metric-value {
-  font-size: 2rem;
-  font-weight: 700;
-  color: #4ea14a;
-  margin: 10px 0;
-}
-
-.metric-label {
-  font-size: 0.9rem;
-  color: #666;
-}
-
-.performance-chart {
-  width: 100%;
-  height: 300px;
-  margin-top: 20px;
-}
-
-.rating-stars {
-  font-size: 1.5rem;
-  color: #ffc107;
-  margin: 10px 0;
-}
-
-.rating-label {
-  font-size: 0.9rem;
-  color: #666;
-  text-align: center;
-  margin-bottom: 20px;
-}
-
-/* Admin management styles */
-.staff-table {
-  width: 100%;
-  border-collapse: collapse;
-  margin-top: 15px;
-}
-
-.staff-table th, 
-.staff-table td {
-  padding: 12px 15px;
-  text-align: left;
-  border-bottom: 1px solid #ddd;
-}
-
-.staff-table thead th {
-  background-color: #f5f5f5;
-  color: #333;
-  font-weight: 500;
-}
-
-.staff-table tbody tr:hover {
-  background-color: #f9f9f9;
-}
-
-.staff-action-btn {
-  padding: 5px 10px;
-  margin-right: 5px;
-  border: none;
-  border-radius: 4px;
-  font-size: 0.85rem;
-  cursor: pointer;
-}
-
-.staff-action-btn.view {
-  background-color: #e3f2fd;
-  color: #0d6efd;
-}
-
-.staff-action-btn.edit {
-  background-color: #e8f5e9;
-  color: #28a745;
-}
-
-.staff-action-btn.delete {
-  background-color: #fbeae9;
-  color: #dc3545;
-}
-
-/* Responsive adjustments */
-@media (max-width: 768px) {
-  .metrics-grid {
-    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
-  }
-  
-  .staff-table {
-    font-size: 0.9rem;
-  }
-  
-  .staff-table th, 
-  .staff-table td {
-    padding: 10px;
-  }
-}
-
-@media (max-width: 576px) {
-  .metrics-grid {
-    grid-template-columns: 1fr;
-  }
-  
-  .staff-table {
-    display: block;
-    overflow-x: auto;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/components/ui/AnimatedComponents.css b/frontend/src/components/ui/AnimatedComponents.css
deleted file mode 100644
index b7eeddc..0000000
--- a/frontend/src/components/ui/AnimatedComponents.css
+++ /dev/null
@@ -1,216 +0,0 @@
-/* Animated Card */
-.animated-card {
-  background-color: white;
-  border-radius: 12px;
-  padding: 20px;
-  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.04);
-  margin-bottom: 20px;
-  opacity: 0;
-  transform: translateY(20px);
-  animation: card-appear 0.5s cubic-bezier(0.22, 1, 0.36, 1) forwards;
-  transition: transform 0.3s ease, box-shadow 0.3s ease;
-}
-
-.animated-card.visible {
-  opacity: 1;
-  transform: translateY(0);
-}
-
-.animated-card:hover {
-  transform: translateY(-4px);
-  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
-}
-
-@keyframes card-appear {
-  0% {
-    opacity: 0;
-    transform: translateY(20px) scale(0.97);
-  }
-  100% {
-    opacity: 1;
-    transform: translateY(0) scale(1);
-  }
-}
-
-/* Ripple Button */
-.ripple-button {
-  position: relative;
-  overflow: hidden;
-  padding: 10px 20px;
-  background-color: #2e7d32;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  font-weight: 500;
-  font-size: 0.875rem;
-  cursor: pointer;
-  transition: all 0.3s ease;
-  outline: none;
-}
-
-.ripple-button:hover {
-  transform: translateY(-2px);
-  box-shadow: 0 4px 10px rgba(46, 125, 50, 0.3);
-}
-
-.ripple-button:active {
-  transform: translateY(0);
-}
-
-.ripple-button .content {
-  position: relative;
-  z-index: 1;
-}
-
-.ripple-button .ripple {
-  position: absolute;
-  border-radius: 50%;
-  background-color: rgba(255, 255, 255, 0.5);
-  transform: scale(0);
-  animation: ripple 0.5s linear;
-  z-index: 0;
-}
-
-@keyframes ripple {
-  to {
-    transform: scale(4);
-    opacity: 0;
-  }
-}
-
-/* Animated Icon */
-.animated-icon {
-  display: flex;
-  align-items: center;
-  justify-content: center;
-  width: 40px;
-  height: 40px;
-  border-radius: 8px;
-  background-color: rgba(46, 125, 50, 0.1);
-  color: #2e7d32;
-  font-size: 1.2rem;
-  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
-}
-
-.animated-icon:hover {
-  transform: translateY(-3px) rotate(8deg);
-  background-color: rgba(46, 125, 50, 0.2);
-  box-shadow: 0 5px 15px rgba(46, 125, 50, 0.2);
-}
-
-/* Count Up */
-.count-up {
-  font-size: 2.5rem;
-  font-weight: 600;
-  color: #2e7d32;
-  display: inline-block;
-}
-
-/* Progress Bar */
-.progress-container {
-  width: 100%;
-  height: 8px;
-  background-color: #f0f0f0;
-  border-radius: 4px;
-  overflow: hidden;
-  margin: 10px 0;
-}
-
-.progress-bar {
-  height: 100%;
-  background-color: #2e7d32;
-  border-radius: 4px;
-  transition: width 1s cubic-bezier(0.22, 1, 0.36, 1);
-}
-
-/* Fade In */
-.fade-in {
-  opacity: 0;
-  animation: fade-in-animation forwards;
-}
-
-.fade-in.visible {
-  opacity: 1;
-}
-
-@keyframes fade-in-animation {
-  from { opacity: 0; transform: translateY(10px); }
-  to { opacity: 1; transform: translateY(0); }
-}
-
-/* Notification Badge */
-.notification-badge {
-  display: inline-flex;
-  align-items: center;
-  justify-content: center;
-  min-width: 20px;
-  height: 20px;
-  padding: 0 6px;
-  border-radius: 10px;
-  background-color: #f44336;
-  color: white;
-  font-size: 0.75rem;
-  font-weight: 600;
-  position: absolute;  /* Add absolute positioning */
-  top: -5px;          /* Position at the top-right corner */
-  right: -5px;
-  z-index: 2;         /* Ensure it appears above the icon */
-  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
-}
-
-.notification-badge.pulse {
-  animation: badge-pulse 1s ease;
-}
-
-@keyframes badge-pulse {
-  0% { transform: scale(1); }
-  50% { transform: scale(1.2); }
-  100% { transform: scale(1); }
-}
-
-/* Floating action buttons */
-.floating-action-btn {
-  position: fixed;
-  bottom: 24px;
-  right: 24px;
-  width: 56px;
-  height: 56px;
-  border-radius: 50%;
-  background-color: #2e7d32;
-  color: white;
-  display: flex;
-  align-items: center;
-  justify-content: center;
-  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
-  cursor: pointer;
-  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
-  z-index: 100;
-}
-
-.floating-action-btn:hover {
-  transform: translateY(-4px) scale(1.05);
-  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.25);
-}
-
-/* Shake animation for errors or notifications */
-.shake {
-  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
-  transform: translate3d(0, 0, 0);
-}
-
-@keyframes shake {
-  10%, 90% { transform: translate3d(-1px, 0, 0); }
-  20%, 80% { transform: translate3d(2px, 0, 0); }
-  30%, 50%, 70% { transform: translate3d(-4px, 0, 0); }
-  40%, 60% { transform: translate3d(4px, 0, 0); }
-}
-
-/* Hover lift effect for clickable cards */
-.hover-lift {
-  transition: all 0.3s ease;
-}
-
-.hover-lift:hover {
-  transform: translateY(-6px);
-  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
-}
\ No newline at end of file
diff --git a/frontend/src/components/ui/AnimatedComponents.jsx b/frontend/src/components/ui/AnimatedComponents.jsx
deleted file mode 100644
index 383b6fc..0000000
--- a/frontend/src/components/ui/AnimatedComponents.jsx
+++ /dev/null
@@ -1,173 +0,0 @@
-import React, { useEffect, useState } from 'react';
-import './AnimatedComponents.css';
-
-// Animated card component with hover effects and staggered animation
-export const AnimatedCard = ({ children, delay = 0, className = '', ...props }) => {
-  const [isVisible, setIsVisible] = useState(false);
-  
-  useEffect(() => {
-    const timer = setTimeout(() => {
-      setIsVisible(true);
-    }, delay);
-    
-    return () => clearTimeout(timer);
-  }, [delay]);
-  
-  return (
-    <div 
-      className={`animated-card ${isVisible ? 'visible' : ''} ${className}`}
-      style={{ animationDelay: `${delay}ms` }}
-      {...props}
-    >
-      {children}
-    </div>
-  );
-};
-
-// Animated button with ripple effect
-export const RippleButton = ({ children, className = '', ...props }) => {
-  const [coords, setCoords] = useState({ x: -1, y: -1 });
-  const [isRippling, setIsRippling] = useState(false);
-
-  useEffect(() => {
-    if (coords.x !== -1 && coords.y !== -1) {
-      setIsRippling(true);
-      setTimeout(() => setIsRippling(false), 500);
-    } else {
-      setIsRippling(false);
-    }
-  }, [coords]);
-
-  useEffect(() => {
-    if (!isRippling) setCoords({ x: -1, y: -1 });
-  }, [isRippling]);
-
-  const handleClick = (e) => {
-    const rect = e.target.getBoundingClientRect();
-    setCoords({
-      x: e.clientX - rect.left,
-      y: e.clientY - rect.top
-    });
-    props.onClick && props.onClick(e);
-  };
-
-  return (
-    <button
-      className={`ripple-button ${className}`}
-      onClick={handleClick}
-      {...props}
-    >
-      {isRippling && (
-        <span
-          className="ripple"
-          style={{
-            left: coords.x,
-            top: coords.y
-          }}
-        />
-      )}
-      <span className="content">{children}</span>
-    </button>
-  );
-};
-
-// Animated icon with hover effects
-export const AnimatedIcon = ({ icon, className = '', ...props }) => {
-  return (
-    <div className={`animated-icon ${className}`} {...props}>
-      {icon}
-    </div>
-  );
-};
-
-// Animated count that increments from 0
-export const CountUp = ({ end, duration = 2000, className = '', ...props }) => {
-  const [count, setCount] = useState(0);
-  
-  useEffect(() => {
-    let startTimestamp = null;
-    const step = (timestamp) => {
-      if (!startTimestamp) startTimestamp = timestamp;
-      const progress = Math.min((timestamp - startTimestamp) / duration, 1);
-      setCount(Math.floor(progress * end));
-      
-      if (progress < 1) {
-        window.requestAnimationFrame(step);
-      }
-    };
-    
-    window.requestAnimationFrame(step);
-  }, [end, duration]);
-  
-  return (
-    <span className={`count-up ${className}`} {...props}>
-      {count}
-    </span>
-  );
-};
-
-// Animated progress bar
-export const ProgressBar = ({ progress, className = '', ...props }) => {
-  const [width, setWidth] = useState(0);
-  
-  useEffect(() => {
-    setWidth(0);
-    setTimeout(() => setWidth(progress), 50);
-  }, [progress]);
-  
-  return (
-    <div className={`progress-container ${className}`} {...props}>
-      <div 
-        className="progress-bar"
-        style={{ width: `${width}%` }}
-      />
-    </div>
-  );
-};
-
-// Fade in element on mount
-export const FadeIn = ({ children, delay = 0, duration = 500, className = '', ...props }) => {
-  const [isVisible, setIsVisible] = useState(false);
-  
-  useEffect(() => {
-    const timer = setTimeout(() => {
-      setIsVisible(true);
-    }, delay);
-    
-    return () => clearTimeout(timer);
-  }, [delay]);
-  
-  return (
-    <div 
-      className={`fade-in ${isVisible ? 'visible' : ''} ${className}`}
-      style={{ 
-        animationDelay: `${delay}ms`,
-        animationDuration: `${duration}ms`
-      }}
-      {...props}
-    >
-      {children}
-    </div>
-  );
-};
-
-// Animated notification badge
-export const NotificationBadge = ({ count = 0, className = '', ...props }) => {
-  const [animate, setAnimate] = useState(false);
-  
-  useEffect(() => {
-    if (count > 0) {
-      setAnimate(true);
-      const timer = setTimeout(() => setAnimate(false), 1000);
-      return () => clearTimeout(timer);
-    }
-  }, [count]);
-  
-  if (count === 0) return null;
-  
-  return (
-    <span className={`notification-badge ${animate ? 'pulse' : ''} ${className}`} {...props}>
-      {count}
-    </span>
-  );
-};
\ No newline at end of file
diff --git a/frontend/src/components/ui/DatePicker.jsx b/frontend/src/components/ui/DatePicker.jsx
deleted file mode 100644
index a5dbbaa..0000000
--- a/frontend/src/components/ui/DatePicker.jsx
+++ /dev/null
@@ -1,59 +0,0 @@
-// frontend/src/components/ui/DatePicker.jsx
-"use client"
-
-import * as React from "react"
-import { format } from "date-fns"
-import { Calendar as CalendarIcon } from "lucide-react"
-
-import { cn } from "@/lib/utils"
-import { Button } from "@/components/ui/button"
-import { Calendar } from "@/components/ui/calendar"
-import {
-  Popover,
-  PopoverContent,
-  PopoverTrigger,
-} from "@/components/ui/popover"
-
-/**
- * DatePicker component - A custom date picker using shadcn/ui components
- * Uses the Calendar and Popover components to create a dropdown date picker
- */
-export function DatePicker({ value, onChange }) {
-  const [date, setDate] = React.useState(value || new Date())
-
-  // Update the parent component when date changes
-  React.useEffect(() => {
-    if (onChange && date) {
-      onChange(date)
-    }
-  }, [date, onChange])
-
-  return (
-    <Popover>
-      <PopoverTrigger asChild>
-        <Button
-          variant={"outline"}
-          className={cn(
-            "w-full justify-start text-left font-normal",
-            !date && "text-muted-foreground"
-          )}
-        >
-          <CalendarIcon className="mr-2 h-4 w-4" />
-          {date ? format(date, "PPP") : <span>Pick a date</span>}
-        </Button>
-      </PopoverTrigger>
-      <PopoverContent className="w-auto p-0" align="start">
-        <Calendar
-          mode="single"
-          selected={date}
-          onSelect={(newDate) => {
-            setDate(newDate)
-          }}
-          initialFocus
-        />
-      </PopoverContent>
-    </Popover>
-  )
-}
-
-export default DatePicker
\ No newline at end of file
diff --git a/frontend/src/components/ui/FeedbackMessage.jsx b/frontend/src/components/ui/FeedbackMessage.jsx
deleted file mode 100644
index 22d8305..0000000
--- a/frontend/src/components/ui/FeedbackMessage.jsx
+++ /dev/null
@@ -1,104 +0,0 @@
-import React from 'react';
-import { 
-  Alert, 
-  Snackbar, 
-  Slide, 
-  CircularProgress, 
-  Box, 
-  Typography 
-} from '@mui/material';
-import { useTheme } from '@mui/material/styles';
-
-/**
- * A reusable component for displaying feedback messages to users.
- * This component can display error messages, success messages, and loading states
- * with a consistent design throughout the application.
- * 
- * @param {Object} props - The component props
- * @param {string} props.message - The message to display
- * @param {string} props.type - The type of message: 'error', 'success', 'info', or 'warning'
- * @param {boolean} props.loading - Whether to show a loading indicator
- * @param {string} props.loadingMessage - Message to display during loading state
- * @param {boolean} props.inline - Whether to display the message inline (Alert) or as a Snackbar
- * @param {Function} props.onClose - Function to call when the message is closed
- * @param {number} props.duration - How long to display the message in milliseconds (for Snackbar only)
- */
-const FeedbackMessage = ({
-  message,
-  type = 'info',
-  loading = false,
-  loadingMessage = 'Processing...',
-  inline = true,
-  onClose,
-  duration = 5000
-}) => {
-  const theme = useTheme();
-  
-  // If loading is true, show a loading indicator
-  if (loading) {
-    return (
-      <Box sx={{
-        display: 'flex',
-        alignItems: 'center',
-        justifyContent: inline ? 'flex-start' : 'center',
-        p: 2,
-        mb: 2,
-        backgroundColor: theme.palette.grey[50],
-        borderRadius: theme.shape.borderRadius,
-        border: `1px solid ${theme.palette.grey[200]}`
-      }}>
-        <CircularProgress size={24} color="primary" />
-        <Typography variant="body1" sx={{ ml: 2 }}>
-          {loadingMessage}
-        </Typography>
-      </Box>
-    );
-  }
-
-  // If no message, return null
-  if (!message) return null;
-
-  // For inline messages (Alert component)
-  if (inline) {
-    return (
-      <Alert 
-        severity={type}
-        onClose={onClose}
-        sx={{
-          mb: 2,
-          animation: 'fadeIn 0.3s ease',
-          '& .MuiAlert-message': {
-            width: '100%'
-          }
-        }}
-      >
-        {message}
-      </Alert>
-    );
-  }
-
-  // For non-inline messages (Snackbar component)
-  return (
-    <Snackbar
-      open={!!message}
-      autoHideDuration={duration}
-      onClose={onClose}
-      TransitionComponent={(props) => <Slide {...props} direction="up" />}
-      anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
-    >
-      <Alert 
-        severity={type} 
-        variant="filled" 
-        onClose={onClose}
-        sx={{
-          width: '100%',
-          boxShadow: theme.shadows[3]
-        }}
-      >
-        {message}
-      </Alert>
-    </Snackbar>
-  );
-};
-
-export default FeedbackMessage;
\ No newline at end of file
diff --git a/frontend/src/components/ui/FormExample.jsx b/frontend/src/components/ui/FormExample.jsx
deleted file mode 100644
index f10d480..0000000
--- a/frontend/src/components/ui/FormExample.jsx
+++ /dev/null
@@ -1,272 +0,0 @@
-// frontend/src/components/ui/FormExample.jsx
-import { useState } from "react";
-import { zodResolver } from "@hookform/resolvers/zod";
-import { useForm } from "react-hook-form";
-import * as z from "zod";
-
-// Import shadcn/ui components
-import { Button } from "@/components/ui/button";
-import {
-  Form,
-  FormControl,
-  FormDescription,
-  FormField,
-  FormItem,
-  FormLabel,
-  FormMessage,
-} from "@/components/ui/form";
-import { Input } from "@/components/ui/input";
-import {
-  Select,
-  SelectContent,
-  SelectItem,
-  SelectTrigger,
-  SelectValue,
-} from "@/components/ui/select";
-import {
-  Card,
-  CardContent,
-  CardDescription,
-  CardFooter,
-  CardHeader,
-  CardTitle,
-} from "@/components/ui/card";
-import { Checkbox } from "@/components/ui/checkbox";
-import { Textarea } from "@/components/ui/textarea";
-import { Slider } from "@/components/ui/slider";
-import { Separator } from "@/components/ui/separator";
-import { DatePicker } from "@/components/ui/DatePicker";
-
-// Define form validation schema using Zod
-const formSchema = z.object({
-  username: z
-    .string()
-    .min(3, { message: "Username must be at least 3 characters." })
-    .max(20, { message: "Username must not be longer than 20 characters." }),
-  email: z.string().email({ message: "Please enter a valid email address." }),
-  bio: z.string().max(500, { message: "Bio must not be longer than 500 characters." }).optional(),
-  role: z.string({
-    required_error: "Please select a role.",
-  }),
-  experienceYears: z.number()
-    .min(0, { message: "Experience cannot be negative." })
-    .max(50, { message: "Please enter a realistic experience value." }),
-  startDate: z.date({
-    required_error: "Please select a start date.",
-  }),
-  termsAccepted: z.literal(true, {
-    errorMap: () => ({ message: "You must accept the terms and conditions." }),
-  }),
-});
-
-/**
- * Example form component using shadcn/ui components with React Hook Form and Zod
- */
-const FormExample = ({ onSubmit = () => {} }) => {
-  const [isSubmitting, setIsSubmitting] = useState(false);
-  
-  // Define form
-  const form = useForm({
-    resolver: zodResolver(formSchema),
-    defaultValues: {
-      username: "",
-      email: "",
-      bio: "",
-      role: "",
-      experienceYears: 1,
-      startDate: new Date(),
-      termsAccepted: false,
-    },
-  });
-
-  // Handle form submission
-  const handleSubmit = async (values) => {
-    setIsSubmitting(true);
-    try {
-      // Simulate API call
-      await new Promise((resolve) => setTimeout(resolve, 1000));
-      console.log(values);
-      onSubmit(values);
-      form.reset();
-    } catch (error) {
-      console.error("Error submitting form:", error);
-    } finally {
-      setIsSubmitting(false);
-    }
-  };
-
-  return (
-    <Card className="w-full max-w-md mx-auto">
-      <CardHeader>
-        <CardTitle>Account Information</CardTitle>
-        <CardDescription>
-          Create a new account using shadcn/ui components.
-        </CardDescription>
-      </CardHeader>
-      <CardContent>
-        <Form {...form}>
-          <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6">
-            <FormField
-              control={form.control}
-              name="username"
-              render={({ field }) => (
-                <FormItem>
-                  <FormLabel>Username</FormLabel>
-                  <FormControl>
-                    <Input placeholder="Enter your username" {...field} />
-                  </FormControl>
-                  <FormDescription>
-                    This will be your public display name.
-                  </FormDescription>
-                  <FormMessage />
-                </FormItem>
-              )}
-            />
-
-            <FormField
-              control={form.control}
-              name="email"
-              render={({ field }) => (
-                <FormItem>
-                  <FormLabel>Email address</FormLabel>
-                  <FormControl>
-                    <Input
-                      type="email"
-                      placeholder="Enter your email"
-                      {...field}
-                    />
-                  </FormControl>
-                  <FormDescription>
-                    We'll never share your email with anyone else.
-                  </FormDescription>
-                  <FormMessage />
-                </FormItem>
-              )}
-            />
-
-            <FormField
-              control={form.control}
-              name="bio"
-              render={({ field }) => (
-                <FormItem>
-                  <FormLabel>Bio</FormLabel>
-                  <FormControl>
-                    <Textarea
-                      placeholder="Tell us a bit about yourself"
-                      className="resize-none"
-                      {...field}
-                    />
-                  </FormControl>
-                  <FormDescription>
-                    A brief description about yourself (optional).
-                  </FormDescription>
-                  <FormMessage />
-                </FormItem>
-              )}
-            />
-
-            <Separator className="my-4" />
-
-            <FormField
-              control={form.control}
-              name="role"
-              render={({ field }) => (
-                <FormItem>
-                  <FormLabel>Role</FormLabel>
-                  <Select
-                    onValueChange={field.onChange}
-                    defaultValue={field.value}
-                  >
-                    <FormControl>
-                      <SelectTrigger>
-                        <SelectValue placeholder="Select a role" />
-                      </SelectTrigger>
-                    </FormControl>
-                    <SelectContent>
-                      <SelectItem value="admin">Administrator</SelectItem>
-                      <SelectItem value="manager">Manager</SelectItem>
-                      <SelectItem value="user">Regular User</SelectItem>
-                    </SelectContent>
-                  </Select>
-                  <FormDescription>
-                    Select the appropriate role for your account.
-                  </FormDescription>
-                  <FormMessage />
-                </FormItem>
-              )}
-            />
-
-            <FormField
-              control={form.control}
-              name="experienceYears"
-              render={({ field }) => (
-                <FormItem>
-                  <FormLabel>Years of Experience: {field.value}</FormLabel>
-                  <FormControl>
-                    <Slider
-                      defaultValue={[field.value]}
-                      min={0}
-                      max={50}
-                      step={1}
-                      onValueChange={(values) => field.onChange(values[0])}
-                    />
-                  </FormControl>
-                  <FormDescription>
-                    Drag the slider to indicate your experience level.
-                  </FormDescription>
-                  <FormMessage />
-                </FormItem>
-              )}
-            />
-
-            <FormField
-              control={form.control}
-              name="startDate"
-              render={({ field }) => (
-                <FormItem className="flex flex-col">
-                  <FormLabel>Start Date</FormLabel>
-                  <DatePicker
-                    value={field.value}
-                    onChange={field.onChange}
-                  />
-                  <FormDescription>
-                    When would you like to start?
-                  </FormDescription>
-                  <FormMessage />
-                </FormItem>
-              )}
-            />
-
-            <FormField
-              control={form.control}
-              name="termsAccepted"
-              render={({ field }) => (
-                <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
-                  <FormControl>
-                    <Checkbox
-                      checked={field.value}
-                      onCheckedChange={field.onChange}
-                    />
-                  </FormControl>
-                  <div className="space-y-1 leading-none">
-                    <FormLabel>Accept terms and conditions</FormLabel>
-                    <FormDescription>
-                      You agree to our Terms of Service and Privacy Policy.
-                    </FormDescription>
-                  </div>
-                  <FormMessage />
-                </FormItem>
-              )}
-            />
-
-            <Button type="submit" className="w-full" disabled={isSubmitting}>
-              {isSubmitting ? "Submitting..." : "Create account"}
-            </Button>
-          </form>
-        </Form>
-      </CardContent>
-    </Card>
-  );
-};
-
-export default FormExample;
\ No newline at end of file
diff --git a/frontend/src/components/ui/Logo/Logo.css b/frontend/src/components/ui/Logo/Logo.css
deleted file mode 100644
index 0746dc4..0000000
--- a/frontend/src/components/ui/Logo/Logo.css
+++ /dev/null
@@ -1,53 +0,0 @@
-.logo-container {
-  display: flex;
-  align-items: center;
-  gap: 10px;
-  text-decoration: none;
-}
-
-.logo-icon {
-  width: 40px;
-  height: 40px;
-  color: #4CAF50;
-}
-
-.logo-text {
-  font-size: 1.5rem;
-  font-weight: 700;
-  color: #4CAF50;
-  letter-spacing: 0.5px;
-}
-
-.logo-text span {
-  color: #2E7D32;
-}
-
-/* Logo size variations */
-.logo-small .logo-icon {
-  width: 24px;
-  height: 24px;
-}
-
-.logo-small .logo-text {
-  font-size: 1.1rem;
-}
-
-.logo-large .logo-icon {
-  width: 48px;
-  height: 48px;
-}
-
-.logo-large .logo-text {
-  font-size: 1.8rem;
-}
-
-@media (max-width: 768px) {
-  .logo-text {
-    font-size: 1.2rem;
-  }
-  
-  .logo-icon {
-    width: 30px;
-    height: 30px;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/components/ui/Logo/Logo.jsx b/frontend/src/components/ui/Logo/Logo.jsx
deleted file mode 100644
index 562778a..0000000
--- a/frontend/src/components/ui/Logo/Logo.jsx
+++ /dev/null
@@ -1,22 +0,0 @@
-import React from 'react';
-import { Link } from 'react-router-dom';
-import './Logo.css';
-
-const Logo = ({ size = 'medium', linkTo = '/' }) => {
-  return (
-    <Link to={linkTo} className={`logo-container logo-${size}`}>
-      <svg 
-        className="logo-icon"
-        xmlns="http://www.w3.org/2000/svg" 
-        viewBox="0 0 24 24"
-        fill="currentColor"
-      >
-        {/* Recycling bin icon */}
-        <path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" />
-      </svg>
-      <div className="logo-text">Smart<span>Bin</span></div>
-    </Link>
-  );
-};
-
-export default Logo;
\ No newline at end of file
diff --git a/frontend/src/components/ui/ReusableDialog.jsx b/frontend/src/components/ui/ReusableDialog.jsx
deleted file mode 100644
index f8d0d12..0000000
--- a/frontend/src/components/ui/ReusableDialog.jsx
+++ /dev/null
@@ -1,65 +0,0 @@
-// frontend/src/components/ui/ReusableDialog.jsx
-import React from "react";
-import {
-  Dialog,
-  DialogContent,
-  DialogDescription,
-  DialogFooter,
-  DialogHeader,
-  DialogTitle,
-  DialogClose,
-} from "@/components/ui/dialog";
-import { Button } from "@/components/ui/button";
-
-/**
- * A reusable dialog component built with shadcn/ui
- * This can be used throughout the application for consistent dialog/modal UI
- */
-const ReusableDialog = ({
-  open,
-  onOpenChange,
-  title,
-  description,
-  children,
-  footer,
-  closeText = "Close",
-  showClose = true,
-  onClose,
-}) => {
-  const handleClose = () => {
-    if (onClose) {
-      onClose();
-    }
-  };
-
-  return (
-    <Dialog open={open} onOpenChange={onOpenChange}>
-      <DialogContent className="sm:max-w-[425px]">
-        {title && (
-          <DialogHeader>
-            <DialogTitle>{title}</DialogTitle>
-            {description && <DialogDescription>{description}</DialogDescription>}
-          </DialogHeader>
-        )}
-
-        <div className="py-4">{children}</div>
-
-        <DialogFooter className="flex justify-between items-center">
-          {footer ? (
-            footer
-          ) : (
-            showClose && (
-              <DialogClose asChild>
-                <Button variant="outline" onClick={handleClose}>
-                  {closeText}
-                </Button>
-              </DialogClose>
-            )
-          )}
-        </DialogFooter>
-      </DialogContent>
-    </Dialog>
-  );
-};
-
-export default ReusableDialog;
\ No newline at end of file
diff --git a/frontend/src/components/ui/ToastNotification.jsx b/frontend/src/components/ui/ToastNotification.jsx
deleted file mode 100644
index 269b224..0000000
--- a/frontend/src/components/ui/ToastNotification.jsx
+++ /dev/null
@@ -1,87 +0,0 @@
-// frontend/src/components/ui/ToastNotification.jsx
-import React from "react";
-import { toast } from "sonner";
-
-/**
- * Utility functions for displaying toast notifications using Sonner
- * This provides a consistent interface for toast notifications across the application
- */
-export const showToast = {
-  /**
-   * Show a success toast notification
-   * @param {string} message - The message to display
-   * @param {Object} options - Additional options for the toast
-   */
-  success: (message, options = {}) => {
-    toast.success(message, {
-      duration: 3000,
-      ...options,
-    });
-  },
-
-  /**
-   * Show an error toast notification
-   * @param {string} message - The message to display
-   * @param {Object} options - Additional options for the toast
-   */
-  error: (message, options = {}) => {
-    toast.error(message, {
-      duration: 4000,
-      ...options,
-    });
-  },
-
-  /**
-   * Show an info toast notification
-   * @param {string} message - The message to display
-   * @param {Object} options - Additional options for the toast
-   */
-  info: (message, options = {}) => {
-    toast.info(message, {
-      duration: 3000,
-      ...options,
-    });
-  },
-
-  /**
-   * Show a warning toast notification
-   * @param {string} message - The message to display
-   * @param {Object} options - Additional options for the toast
-   */
-  warning: (message, options = {}) => {
-    toast.warning(message, {
-      duration: 4000,
-      ...options,
-    });
-  },
-
-  /**
-   * Show a loading toast notification that can be updated
-   * @param {string} message - The message to display
-   * @param {Object} options - Additional options for the toast
-   * @returns {string} - The ID of the toast that can be used to update it
-   */
-  loading: (message, options = {}) => {
-    return toast.loading(message, {
-      duration: Infinity, // Loading toasts should stay until dismissed
-      ...options,
-    });
-  },
-
-  /**
-   * Show a promise toast notification that changes based on the promise result
-   * @param {Promise} promise - The promise to track
-   * @param {Object} messages - Object containing loading, success, and error messages
-   * @param {Object} options - Additional options for the toast
-   */
-  promise: (promise, messages, options = {}) => {
-    return toast.promise(promise, {
-      loading: messages.loading || "Loading...",
-      success: messages.success || "Success!",
-      error: messages.error || "An error occurred",
-      ...options,
-    });
-  },
-};
-
-export default showToast;
\ No newline at end of file
diff --git a/frontend/src/components/ui/UserDataDisplay.jsx b/frontend/src/components/ui/UserDataDisplay.jsx
deleted file mode 100644
index c4dce0b..0000000
--- a/frontend/src/components/ui/UserDataDisplay.jsx
+++ /dev/null
@@ -1,305 +0,0 @@
-// frontend/src/components/ui/UserDataDisplay.jsx
-import React from 'react';
-import { 
-  Table, 
-  TableBody, 
-  TableCaption, 
-  TableCell, 
-  TableHead, 
-  TableHeader, 
-  TableRow 
-} from "@/components/ui/table";
-import { 
-  Tabs, 
-  TabsContent, 
-  TabsList, 
-  TabsTrigger 
-} from "@/components/ui/tabs";
-import {
-  Accordion,
-  AccordionContent,
-  AccordionItem,
-  AccordionTrigger,
-} from "@/components/ui/accordion";
-import {
-  HoverCard,
-  HoverCardContent,
-  HoverCardTrigger,
-} from "@/components/ui/hover-card";
-import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
-import { Button } from "@/components/ui/button";
-import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
-
-/**
- * Demo component for displaying user data with shadcn/ui components
- * This component demonstrates how to use multiple shadcn/ui components together
- */
-const UserDataDisplay = ({ users = [] }) => {
-  // Default sample data if no users are provided
-  const sampleUsers = users.length > 0 ? users : [
-    {
-      id: 1,
-      name: "John Doe",
-      email: "john.doe@example.com",
-      role: "Administrator",
-      status: "Active",
-      lastLogin: "2025-04-30T12:00:00",
-      avatar: "https://api.dicebear.com/6.x/initials/svg?seed=JD",
-      details: {
-        phone: "+1 (555) 123-4567",
-        department: "IT Department",
-        location: "New York",
-        joinDate: "2024-01-15",
-      },
-      notes: [
-        { id: 1, title: "Project Assignment", content: "Assigned to Smart City Waste Management project" },
-        { id: 2, title: "Performance Review", content: "Excellent technical skills, meets all deadlines" },
-      ]
-    },
-    {
-      id: 2,
-      name: "Jane Smith",
-      email: "jane.smith@example.com",
-      role: "Manager",
-      status: "Inactive",
-      lastLogin: "2025-04-25T09:15:00",
-      avatar: "https://api.dicebear.com/6.x/initials/svg?seed=JS",
-      details: {
-        phone: "+1 (555) 987-6543",
-        department: "Operations",
-        location: "Boston",
-        joinDate: "2023-11-03",
-      },
-      notes: [
-        { id: 1, title: "Vacation Schedule", content: "Approved vacation from May 15-22, 2025" },
-        { id: 2, title: "Training Completion", content: "Completed leadership training program" },
-      ]
-    },
-    {
-      id: 3,
-      name: "Alex Johnson",
-      email: "alex.johnson@example.com",
-      role: "User",
-      status: "Active",
-      lastLogin: "2025-05-01T10:30:00",
-      avatar: "https://api.dicebear.com/6.x/initials/svg?seed=AJ",
-      details: {
-        phone: "+1 (555) 456-7890",
-        department: "Marketing",
-        location: "Los Angeles",
-        joinDate: "2024-03-10",
-      },
-      notes: [
-        { id: 1, title: "Project Status", content: "Current project is 75% complete, on schedule" },
-      ]
-    },
-  ];
-
-  return (
-    <div className="space-y-8">
-      <Card>
-        <CardHeader>
-          <CardTitle>User Management Dashboard</CardTitle>
-        </CardHeader>
-        <CardContent>
-          <Tabs defaultValue="table" className="w-full">
-            <TabsList className="mb-4">
-              <TabsTrigger value="table">Table View</TabsTrigger>
-              <TabsTrigger value="cards">Card View</TabsTrigger>
-              <TabsTrigger value="details">Detailed View</TabsTrigger>
-            </TabsList>
-            
-            {/* Table View */}
-            <TabsContent value="table">
-              <Table>
-                <TableCaption>A list of users in the system</TableCaption>
-                <TableHeader>
-                  <TableRow>
-                    <TableHead>Name</TableHead>
-                    <TableHead>Email</TableHead>
-                    <TableHead>Role</TableHead>
-                    <TableHead>Status</TableHead>
-                    <TableHead>Last Login</TableHead>
-                    <TableHead className="text-right">Actions</TableHead>
-                  </TableRow>
-                </TableHeader>
-                <TableBody>
-                  {sampleUsers.map((user) => (
-                    <TableRow key={user.id}>
-                      <TableCell className="font-medium">
-                        <div className="flex items-center gap-2">
-                          <Avatar className="h-8 w-8">
-                            <AvatarImage src={user.avatar} alt={user.name} />
-                            <AvatarFallback>{user.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
-                          </Avatar>
-                          {user.name}
-                        </div>
-                      </TableCell>
-                      <TableCell>{user.email}</TableCell>
-                      <TableCell>{user.role}</TableCell>
-                      <TableCell>
-                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
-                          user.status === 'Active' 
-                            ? 'bg-green-100 text-green-800' 
-                            : 'bg-red-100 text-red-800'
-                        }`}>
-                          {user.status}
-                        </span>
-                      </TableCell>
-                      <TableCell>{new Date(user.lastLogin).toLocaleString()}</TableCell>
-                      <TableCell className="text-right">
-                        <HoverCard>
-                          <HoverCardTrigger asChild>
-                            <Button variant="ghost" size="sm">
-                              View Details
-                            </Button>
-                          </HoverCardTrigger>
-                          <HoverCardContent className="w-80">
-                            <div className="flex justify-between space-x-4">
-                              <Avatar>
-                                <AvatarImage src={user.avatar} />
-                                <AvatarFallback>{user.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
-                              </Avatar>
-                              <div className="space-y-1">
-                                <h4 className="text-sm font-semibold">{user.name}</h4>
-                                <p className="text-sm text-muted-foreground">
-                                  {user.role} at {user.details.department}
-                                </p>
-                                <p className="text-sm text-muted-foreground">
-                                  {user.details.location}
-                                </p>
-                                <div className="flex items-center pt-2">
-                                  <span className="text-xs text-muted-foreground">
-                                    Joined on {new Date(user.details.joinDate).toLocaleDateString()}
-                                  </span>
-                                </div>
-                              </div>
-                            </div>
-                          </HoverCardContent>
-                        </HoverCard>
-                      </TableCell>
-                    </TableRow>
-                  ))}
-                </TableBody>
-              </Table>
-            </TabsContent>
-            
-            {/* Card View */}
-            <TabsContent value="cards">
-              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
-                {sampleUsers.map((user) => (
-                  <Card key={user.id}>
-                    <CardHeader className="pb-2">
-                      <div className="flex items-center justify-between">
-                        <div className="flex items-center space-x-2">
-                          <Avatar>
-                            <AvatarImage src={user.avatar} alt={user.name} />
-                            <AvatarFallback>{user.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
-                          </Avatar>
-                          <div>
-                            <CardTitle className="text-lg">{user.name}</CardTitle>
-                            <p className="text-sm text-muted-foreground">{user.role}</p>
-                          </div>
-                        </div>
-                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
-                          user.status === 'Active' 
-                            ? 'bg-green-100 text-green-800' 
-                            : 'bg-red-100 text-red-800'
-                        }`}>
-                          {user.status}
-                        </span>
-                      </div>
-                    </CardHeader>
-                    <CardContent>
-                      <div className="space-y-2">
-                        <div className="flex items-center justify-between">
-                          <span className="text-sm text-muted-foreground">Email</span>
-                          <span className="text-sm">{user.email}</span>
-                        </div>
-                        <div className="flex items-center justify-between">
-                          <span className="text-sm text-muted-foreground">Department</span>
-                          <span className="text-sm">{user.details.department}</span>
-                        </div>
-                        <div className="flex items-center justify-between">
-                          <span className="text-sm text-muted-foreground">Location</span>
-                          <span className="text-sm">{user.details.location}</span>
-                        </div>
-                        <div className="flex items-center justify-between">
-                          <span className="text-sm text-muted-foreground">Last Login</span>
-                          <span className="text-sm">{new Date(user.lastLogin).toLocaleString()}</span>
-                        </div>
-                      </div>
-                      <div className="flex justify-end mt-4">
-                        <Button variant="outline" size="sm">View Profile</Button>
-                      </div>
-                    </CardContent>
-                  </Card>
-                ))}
-              </div>
-            </TabsContent>
-            
-            {/* Detailed View */}
-            <TabsContent value="details">
-              <Accordion type="single" collapsible className="w-full">
-                {sampleUsers.map((user) => (
-                  <AccordionItem key={user.id} value={`user-${user.id}`}>
-                    <AccordionTrigger>
-                      <div className="flex items-center gap-2">
-                        <Avatar className="h-6 w-6">
-                          <AvatarImage src={user.avatar} alt={user.name} />
-                          <AvatarFallback>{user.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
-                        </Avatar>
-                        <span>{user.name}</span>
-                        <span className="text-muted-foreground text-sm">({user.role})</span>
-                      </div>
-                    </AccordionTrigger>
-                    <AccordionContent>
-                      <div className="space-y-4 pl-8">
-                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
-                          <div>
-                            <h4 className="text-sm font-semibold mb-2">Contact Information</h4>
-                            <div className="space-y-1">
-                              <p className="text-sm">Email: {user.email}</p>
-                              <p className="text-sm">Phone: {user.details.phone}</p>
-                            </div>
-                          </div>
-                          <div>
-                            <h4 className="text-sm font-semibold mb-2">Employment Details</h4>
-                            <div className="space-y-1">
-                              <p className="text-sm">Department: {user.details.department}</p>
-                              <p className="text-sm">Location: {user.details.location}</p>
-                              <p className="text-sm">Join Date: {new Date(user.details.joinDate).toLocaleDateString()}</p>
-                            </div>
-                          </div>
-                        </div>
-                        
-                        <div>
-                          <h4 className="text-sm font-semibold mb-2">Notes</h4>
-                          <div className="space-y-2">
-                            {user.notes.map((note) => (
-                              <div key={note.id} className="border rounded p-2">
-                                <p className="text-sm font-medium">{note.title}</p>
-                                <p className="text-sm text-muted-foreground">{note.content}</p>
-                              </div>
-                            ))}
-                          </div>
-                        </div>
-                        
-                        <div className="flex justify-end">
-                          <Button variant="outline" className="mr-2">Edit User</Button>
-                          <Button variant="default">View Activity</Button>
-                        </div>
-                      </div>
-                    </AccordionContent>
-                  </AccordionItem>
-                ))}
-              </Accordion>
-            </TabsContent>
-          </Tabs>
-        </CardContent>
-      </Card>
-    </div>
-  );
-};
-
-export default UserDataDisplay;
\ No newline at end of file
diff --git a/frontend/src/contexts/AuthContext.jsx b/frontend/src/contexts/AuthContext.jsx
deleted file mode 100644
index 1a243c0..0000000
--- a/frontend/src/contexts/AuthContext.jsx
+++ /dev/null
@@ -1,168 +0,0 @@
-import React, { createContext, useState, useEffect, useContext } from 'react';
-import axios from 'axios';
-import { setAuthToken, getAuthToken } from '../services/authService';
-
-const AuthContext = createContext();
-
-export function AuthProvider({ children }) {
-  const [authState, setAuthState] = useState({
-    isAuthenticated: false,
-    token: null,
-    user: null
-  });
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState(null);
-
-  // Set axios default authorization header when token changes
-  useEffect(() => {
-    if (authState.token) {
-      axios.defaults.headers.common['Authorization'] = `Bearer ${authState.token}`;
-    } else {
-      delete axios.defaults.headers.common['Authorization'];
-    }
-  }, [authState.token]);
-
-  useEffect(() => {
-    // Check if user is logged in on page load
-    const checkUserLoggedIn = async () => {
-      try {
-        const token = getAuthToken(); // Use consistent token retrieval
-        if (token) {
-          // Set auth header
-          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
-          
-          // Get user data
-          const response = await axios.get('http://localhost:5000/api/auth/me');
-          setAuthState({
-            isAuthenticated: true,
-            token,
-            user: response.data
-          });
-        }
-      } catch (error) {
-        console.error('Authentication error:', error);
-        setAuthToken(null); // Use consistent token removal
-        setAuthState({
-          isAuthenticated: false,
-          token: null,
-          user: null
-        });
-      } finally {
-        setLoading(false);
-      }
-    };
-
-    checkUserLoggedIn();
-  }, []);
-
-  // Register new user
-  const register = async (userData) => {
-    try {
-      const response = await axios.post('http://localhost:5000/api/auth/register', userData);
-      
-      // Save token and update state
-      setAuthToken(response.data.token); // Use consistent token storage
-      setAuthState({
-        isAuthenticated: true,
-        token: response.data.token,
-        user: {
-          id: response.data._id,
-          name: response.data.name,
-          email: response.data.email,
-          role: response.data.role,
-          mfaEnabled: response.data.mfaEnabled || false
-        }
-      });
-      return response.data;
-    } catch (error) {
-      setError(error.response?.data?.message || 'Registration failed');
-      throw error;
-    }
-  };
-
-  // Login user
-  const login = async (email, password) => {
-    try {
-      const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });
-      
-      // Check if MFA is required
-      if (response.data.mfaRequired) {
-        // Return data for MFA verification (don't update auth state yet)
-        return {
-          mfaRequired: true,
-          userId: response.data.userId
-        };
-      }
-      
-      // Regular login (no MFA)
-      setAuthToken(response.data.token); // Use consistent token storage
-      setAuthState({
-        isAuthenticated: true,
-        token: response.data.token,
-        user: {
-          id: response.data._id,
-          name: response.data.name,
-          email: response.data.email,
-          role: response.data.role,
-          mfaEnabled: response.data.mfaEnabled || false
-        }
-      });
-      return response.data;
-    } catch (error) {
-      setError(error.response?.data?.message || 'Login failed');
-      throw error;
-    }
-  };
-
-  // Logout user
-  const logout = () => {
-    setAuthToken(null); // Use consistent token removal
-    setAuthState({
-      isAuthenticated: false,
-      token: null,
-      user: null
-    });
-    // Clear authorization header
-    delete axios.defaults.headers.common['Authorization'];
-  };
-
-  // Update user data in context
-  const updateUser = (newUserData) => {
-    setAuthState(prevState => ({
-      ...prevState,
-      user: {
-        ...prevState.user, // Keep existing user data
-        ...newUserData     // Overwrite with new data
-      }
-    }));
-    // Optionally, update localStorage user data if you store it there
-    // setUser(authState.user); // Assuming setUser exists in authService.js
-  };
-
-
-  // Get user data from token
-  const user = authState.user;
-
-  return (
-    <AuthContext.Provider value={{ 
-      user, 
-      loading, 
-      error, 
-      isAuthenticated: authState.isAuthenticated,
-      register, 
-      login, 
-      logout,
-      updateUser, // Add updateUser to the context value
-      setAuthState // Expose for MFA flow
-    }}>
-      {children}
-    </AuthContext.Provider>
-  );
-}
-
-// Custom hook to use auth context
-export function useAuth() {
-  return useContext(AuthContext);
-}
-
-export default AuthContext;
\ No newline at end of file
diff --git a/frontend/src/hooks/useApi.js b/frontend/src/hooks/useApi.js
deleted file mode 100644
index 30af845..0000000
--- a/frontend/src/hooks/useApi.js
+++ /dev/null
@@ -1,32 +0,0 @@
-// frontend/src/hooks/useApi.js
-import { useState, useCallback } from 'react';
-
-/**
- * Custom hook for API calls that manages loading, error states, and request functionality
- * @param {Function} apiFunction - The API function to call (should return a promise)
- * @returns {Object} Object containing data, loading state, error state, and request function
- */
-const useApi = (apiFunction) => {
-    const [data, setData] = useState(null);
-    const [loading, setLoading] = useState(false);
-    const [error, setError] = useState(null);
-
-    const request = useCallback(async (...args) => {
-        try {
-            setLoading(true);
-            setError(null);
-            const response = await apiFunction(...args);
-            setData(response);
-            return response;
-        } catch (err) {
-            setError(err.message || 'An error occurred');
-            throw err;
-        } finally {
-            setLoading(false);
-        }
-    }, [apiFunction]);
-
-    return { data, loading, error, request };
-};
-
-export default useApi;
\ No newline at end of file
diff --git a/frontend/src/index.css b/frontend/src/index.css
index 94bd2b2..08a3ac9 100644
--- a/frontend/src/index.css
+++ b/frontend/src/index.css
@@ -1,226 +1,68 @@
-/* Import our global CSS variables */
-@import url('./variables.css');
+:root {
+  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
+  line-height: 1.5;
+  font-weight: 400;
 
-/* Import our theme styles */
-@import url('../styles/themeStyles.css');
+  color-scheme: light dark;
+  color: rgba(255, 255, 255, 0.87);
+  background-color: #242424;
 
-/* Base styles and resets */
-* {
-  margin: 0;
-  padding: 0;
-  box-sizing: border-box;
-}
-
-html {
-  font-size: 16px;
-  scroll-behavior: smooth;
-}
-
-body {
-  font-family: var(--font-family);
-  line-height: 1.5;
-  font-weight: var(--font-weight-regular);
-  color: var(--text-primary);
-  background-color: var(--bg-default);
-  min-height: 100vh;
-  min-width: 320px;
-  
   font-synthesis: none;
   text-rendering: optimizeLegibility;
   -webkit-font-smoothing: antialiased;
   -moz-osx-font-smoothing: grayscale;
 }
 
-/* Typography */
-h1, h2, h3, h4, h5, h6 {
-  margin-bottom: 0.5em;
-  font-weight: var(--font-weight-medium);
-  line-height: 1.2;
-  color: var(--text-primary);
-}
-
-h1 {
-  font-size: var(--font-size-xxl);
-}
-
-h2 {
-  font-size: var(--font-size-xl);
-}
-
-h3 {
-  font-size: var(--font-size-lg);
-}
-
-p {
-  margin-bottom: 1rem;
-}
-
 a {
-  color: var(--primary-color);
-  text-decoration: none;
-  transition: color var(--transition-speed-fast) ease;
+  font-weight: 500;
+  color: #646cff;
+  text-decoration: inherit;
 }
-
 a:hover {
-  color: var(--primary-dark);
-  text-decoration: underline;
+  color: #535bf2;
+}
+
+body {
+  margin: 0;
+  display: flex;
+  place-items: center;
+  min-width: 320px;
+  min-height: 100vh;
 }
 
-/* Focus styling for accessibility */
-:focus {
-  outline: 2px solid var(--primary-color);
-  outline-offset: 2px;
+h1 {
+  font-size: 3.2em;
+  line-height: 1.1;
 }
 
-/* Button styling */
 button {
-  cursor: pointer;
-  font-family: var(--font-family);
-  font-weight: var(--font-weight-medium);
-  border-radius: var(--border-radius-md);
+  border-radius: 8px;
   border: 1px solid transparent;
   padding: 0.6em 1.2em;
-  font-size: var(--font-size-md);
-  background-color: var(--bg-light);
-  transition: all var(--transition-speed-normal) var(--transition-ease);
+  font-size: 1em;
+  font-weight: 500;
+  font-family: inherit;
+  background-color: #1a1a1a;
+  cursor: pointer;
+  transition: border-color 0.25s;
 }
-
 button:hover {
-  transform: translateY(-2px);
-  box-shadow: var(--shadow-sm);
+  border-color: #646cff;
 }
-
-button:active {
-  transform: translateY(0);
+button:focus,
+button:focus-visible {
+  outline: 4px auto -webkit-focus-ring-color;
 }
 
-button:disabled {
-  opacity: 0.6;
-  cursor: not-allowed;
-}
-
-/* Form controls */
-input, select, textarea {
-  font-family: var(--font-family);
-  font-size: var(--font-size-md);
-  padding: 0.5rem 0.75rem;
-  border: 1px solid var(--border-color);
-  border-radius: var(--border-radius-sm);
-  background-color: var(--bg-paper);
-  transition: border-color var(--transition-speed-fast) ease;
-}
-
-input:focus, select:focus, textarea:focus {
-  outline: none;
-  border-color: var(--primary-color);
-  box-shadow: 0 0 0 2px rgba(62, 75, 46, 0.1);
-}
-
-/* Common component styles */
-.card {
-  background-color: var(--bg-paper);
-  border-radius: var(--border-radius-lg);
-  padding: var(--card-padding);
-  box-shadow: var(--shadow-md);
-  transition: all var(--transition-speed-normal) ease;
-}
-
-.card-hover:hover {
-  transform: translateY(-4px);
-  box-shadow: var(--shadow-lg);
-}
-
-/* Page transitions */
-.page-transition {
-  opacity: 1;
-  transition: var(--transition-speed-normal) var(--transition-ease);
-  transition-property: opacity, transform;
-}
-
-.page-transition.fadeIn {
-  opacity: 1;
-  transform: translateY(0) scale(1);
-}
-
-.page-transition.fadeOut {
-  opacity: 0;
-  transform: translateY(20px) scale(0.98);
-}
-
-/* Loading indicator */
-.loading-indicator {
-  width: 40px;
-  height: 40px;
-  border: 3px solid var(--border-light);
-  border-radius: 50%;
-  border-top-color: var(--primary-color);
-  animation: spin 1s ease-in-out infinite;
-  margin: 40px auto;
-}
-
-@keyframes spin {
-  to { transform: rotate(360deg); }
-}
-
-/* Animations */
-@keyframes pulse-light {
-  0% { box-shadow: 0 0 0 0 rgba(62, 75, 46, 0.4); }
-  70% { box-shadow: 0 0 0 10px rgba(62, 75, 46, 0); }
-  100% { box-shadow: 0 0 0 0 rgba(62, 75, 46, 0); }
-}
-
-@keyframes fade-in {
-  from { opacity: 0; }
-  to { opacity: 1; }
-}
-
-@keyframes slide-in {
-  from { transform: translateY(-20px); opacity: 0; }
-  to { transform: translateY(0); opacity: 1; }
-}
-
-/* Common utility classes */
-.text-center { text-align: center; }
-.text-right { text-align: right; }
-.text-left { text-align: left; }
-
-.mb-0 { margin-bottom: 0; }
-.mb-1 { margin-bottom: var(--space-sm); }
-.mb-2 { margin-bottom: var(--space-md); }
-.mb-3 { margin-bottom: var(--space-lg); }
-
-.mt-0 { margin-top: 0; }
-.mt-1 { margin-top: var(--space-sm); }
-.mt-2 { margin-top: var(--space-md); }
-.mt-3 { margin-top: var(--space-lg); }
-
-.p-0 { padding: 0; }
-.p-1 { padding: var(--space-sm); }
-.p-2 { padding: var(--space-md); }
-.p-3 { padding: var(--space-lg); }
-
-.w-100 { width: 100%; }
-.h-100 { height: 100%; }
-
-.d-flex { display: flex; }
-.flex-column { flex-direction: column; }
-.justify-content-between { justify-content: space-between; }
-.align-items-center { align-items: center; }
-.flex-wrap { flex-wrap: wrap; }
-
-/* Dark mode - to be implemented fully later if needed */
-@media (prefers-color-scheme: dark) {
+@media (prefers-color-scheme: light) {
   :root {
-    color-scheme: dark;
+    color: #213547;
+    background-color: #ffffff;
   }
-  
-  body {
-    color: var(--text-white);
-    background-color: var(--bg-dark);
+  a:hover {
+    color: #747bff;
   }
-  
   button {
-    background-color: #2c2c2c;
-    color: var(--text-white);
+    background-color: #f9f9f9;
   }
 }
diff --git a/frontend/src/index.tsx b/frontend/src/index.tsx
new file mode 100644
index 0000000..35b252c
--- /dev/null
+++ b/frontend/src/index.tsx
@@ -0,0 +1,19 @@
+import React from 'react';
+import ReactDOM from 'react-dom/client';
+import { BrowserRouter } from 'react-router-dom';
+import App from './App';
+import './index.css';
+
+// React Router future flags enable කරන්න
+const router = (
+  <BrowserRouter future={{ v7_startTransition: true, v7_relativeSplatPath: true }}>
+    <App />
+  </BrowserRouter>
+);
+
+const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
+root.render(
+  <React.StrictMode>
+    {router}
+  </React.StrictMode>
+);
\ No newline at end of file
diff --git a/frontend/src/lib/utils.js b/frontend/src/lib/utils.js
deleted file mode 100644
index e05aad4..0000000
--- a/frontend/src/lib/utils.js
+++ /dev/null
@@ -1,9 +0,0 @@
-// frontend/src/lib/utils.js
-
-/**
- * Utility function to conditionally join class names together
- * Used by shadcn/ui components for conditional styling
- */
-export function cn(...classes) {
-  return classes.filter(Boolean).join(" ");
-}
\ No newline at end of file
diff --git a/frontend/src/main.jsx b/frontend/src/main.jsx
deleted file mode 100644
index 4766548..0000000
--- a/frontend/src/main.jsx
+++ /dev/null
@@ -1,13 +0,0 @@
-import { StrictMode } from 'react'
-import { createRoot } from 'react-dom/client'
-import { AuthProvider } from './contexts/AuthContext'
-import './index.css'
-import App from './App.jsx'
-
-createRoot(document.getElementById('root')).render(
-  <StrictMode>
-    <AuthProvider>
-      <App />
-    </AuthProvider>
-  </StrictMode>,
-)
diff --git a/frontend/src/main.tsx b/frontend/src/main.tsx
new file mode 100644
index 0000000..180966d
--- /dev/null
+++ b/frontend/src/main.tsx
@@ -0,0 +1,10 @@
+import { StrictMode } from "react";
+import { createRoot } from "react-dom/client";
+import "./index.css";
+import App from "./App.jsx"; // .tsx extension එක specify කරන්න ඕනෑ නෑ, Vite එක ඒක හොයාගන්නවා
+
+createRoot(document.getElementById("root")!).render(
+  <StrictMode>
+    <App />
+  </StrictMode>
+);
\ No newline at end of file
diff --git a/frontend/src/muiTheme.js b/frontend/src/muiTheme.js
deleted file mode 100644
index 111abfb..0000000
--- a/frontend/src/muiTheme.js
+++ /dev/null
@@ -1,379 +0,0 @@
-import { createTheme } from '@mui/material/styles';
-
-/**
- * SmartBin Material UI Theme
- * 
- * This theme is designed to match the SmartBin brand colors and design specifications.
- * It provides consistent styling for all Material UI components throughout the application.
- */
-const smartBinTheme = createTheme({
-  palette: {
-    primary: {
-      main: '#3e4b2e', // SmartBin primary green
-      light: '#5e7245',
-      dark: '#2c3720',
-      contrastText: '#fff',
-    },
-    secondary: {
-      main: '#5e6472', // SmartBin secondary color
-      light: '#7d8490',
-      dark: '#424854',
-      contrastText: '#fff',
-    },
-    error: {
-      main: '#dc3545', // Bootstrap danger red for consistency
-    },
-    warning: {
-      main: '#ffc107', // Bootstrap warning yellow
-    },
-    info: {
-      main: '#0dcaf0', // Bootstrap info blue
-    },
-    success: {
-      main: '#198754', // Bootstrap success green
-    },
-    background: {
-      default: '#f8f9fa',
-      paper: '#ffffff',
-    },
-    text: {
-      primary: '#212529',
-      secondary: '#6c757d',
-    },
-    divider: '#dee2e6',
-  },
-  typography: {
-    fontFamily: [
-      'Roboto',
-      'Arial',
-      'sans-serif'
-    ].join(','),
-    h1: {
-      fontWeight: 600,
-      fontSize: '2.5rem',
-    },
-    h2: {
-      fontWeight: 600,
-      fontSize: '2rem',
-    },
-    h3: {
-      fontWeight: 500,
-      fontSize: '1.75rem',
-    },
-    h4: {
-      fontWeight: 500,
-      fontSize: '1.5rem',
-    },
-    h5: {
-      fontWeight: 500,
-      fontSize: '1.25rem',
-    },
-    h6: {
-      fontWeight: 500,
-      fontSize: '1rem',
-    },
-    body1: {
-      fontSize: '1rem',
-    },
-    body2: {
-      fontSize: '0.875rem',
-    },
-    button: {
-      textTransform: 'none', // Avoid ALL CAPS buttons
-      fontWeight: 500,
-    },
-  },
-  shape: {
-    borderRadius: 6,
-  },
-  shadows: [
-    'none',
-    '0 1px 3px rgba(0, 0, 0, 0.1)',
-    '0 2px 4px rgba(0, 0, 0, 0.1)',
-    '0 4px 8px rgba(0, 0, 0, 0.12)',
-    '0 8px 16px rgba(0, 0, 0, 0.14)',
-    // Keep the rest of default shadows
-    ...Array(20).fill(''),
-  ],
-  transitions: {
-    easing: {
-      easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
-    },
-    duration: {
-      shortest: 150,
-      shorter: 200,
-      short: 250,
-      standard: 300,
-      complex: 375,
-      enteringScreen: 225,
-      leavingScreen: 195,
-    },
-  },
-  components: {
-    MuiButton: {
-      styleOverrides: {
-        root: {
-          borderRadius: 4,
-          padding: '8px 16px',
-          transition: 'all 0.3s ease',
-          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
-          '&:hover': {
-            transform: 'translateY(-2px)',
-            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.12)',
-          },
-        },
-        containedPrimary: {
-          '&:hover': {
-            backgroundColor: '#304021',
-          },
-        },
-        outlined: {
-          borderWidth: '1px',
-          '&:hover': {
-            borderWidth: '1px',
-          },
-        },
-        startIcon: {
-          marginRight: '8px',
-        },
-        endIcon: {
-          marginLeft: '8px',
-        },
-      },
-    },
-    MuiAppBar: {
-      styleOverrides: {
-        root: {
-          backgroundColor: '#3e4b2e',
-        },
-      },
-    },
-    MuiTableHead: {
-      styleOverrides: {
-        root: {
-          backgroundColor: '#f8f9fa',
-        },
-      },
-    },
-    MuiTableCell: {
-      styleOverrides: {
-        head: {
-          fontWeight: 600,
-          color: '#495057',
-        },
-        root: {
-          padding: '12px 16px',
-        },
-      },
-    },
-    MuiTableRow: {
-      styleOverrides: {
-        root: {
-          '&:hover': {
-            backgroundColor: 'rgba(0, 0, 0, 0.04)',
-          },
-        },
-      },
-    },
-    MuiCard: {
-      styleOverrides: {
-        root: {
-          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
-          borderRadius: 8,
-          transition: 'all 0.3s ease',
-          '&:hover': {
-            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.12)',
-          },
-        },
-      },
-    },
-    MuiCardHeader: {
-      styleOverrides: {
-        root: {
-          padding: '16px 20px',
-        },
-        title: {
-          fontSize: '1.25rem',
-          fontWeight: 500,
-        },
-        subheader: {
-          fontSize: '0.875rem',
-          color: '#6c757d',
-        },
-      },
-    },
-    MuiCardContent: {
-      styleOverrides: {
-        root: {
-          padding: '20px',
-          '&:last-child': {
-            paddingBottom: '20px',
-          },
-        },
-      },
-    },
-    MuiPaper: {
-      styleOverrides: {
-        root: {
-          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
-        },
-        elevation1: {
-          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
-        },
-        elevation2: {
-          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
-        },
-        elevation3: {
-          boxShadow: '0 4px 8px rgba(0, 0, 0, 0.12)',
-        },
-        elevation4: {
-          boxShadow: '0 8px 16px rgba(0, 0, 0, 0.14)',
-        },
-      },
-    },
-    MuiAlert: {
-      styleOverrides: {
-        root: {
-          borderRadius: 6,
-          fontSize: '0.875rem',
-        },
-        standardSuccess: {
-          backgroundColor: '#d1e7dd',
-          color: '#0f5132',
-        },
-        standardError: {
-          backgroundColor: '#f8d7da',
-          color: '#842029',
-        },
-        standardWarning: {
-          backgroundColor: '#fff3cd',
-          color: '#664d03',
-        },
-        standardInfo: {
-          backgroundColor: '#cff4fc',
-          color: '#055160',
-        },
-      },
-    },
-    MuiTextField: {
-      defaultProps: {
-        variant: 'outlined',
-        margin: 'normal',
-        fullWidth: true,
-      },
-      styleOverrides: {
-        root: {
-          '& .MuiOutlinedInput-root': {
-            borderRadius: 4,
-            transition: 'all 0.3s ease',
-            '&:hover .MuiOutlinedInput-notchedOutline': {
-              borderColor: '#3e4b2e80',
-            },
-            '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
-              borderColor: '#3e4b2e',
-              borderWidth: '2px',
-            },
-          },
-          '& .MuiInputLabel-root': {
-            color: '#6c757d',
-            '&.Mui-focused': {
-              color: '#3e4b2e',
-            },
-          },
-          '& .MuiFilledInput-root': {
-            borderRadius: '4px 4px 0 0',
-          },
-        },
-      },
-    },
-    MuiSelect: {
-      styleOverrides: {
-        outlined: {
-          borderRadius: 4,
-        },
-      },
-    },
-    MuiChip: {
-      styleOverrides: {
-        root: {
-          borderRadius: 16,
-          height: 32,
-          fontSize: '0.875rem',
-        },
-        colorPrimary: {
-          backgroundColor: '#3e4b2e',
-        },
-        deleteIcon: {
-          color: 'inherit',
-          opacity: 0.7,
-          '&:hover': {
-            opacity: 1,
-          },
-        },
-      },
-    },
-    MuiTab: {
-      styleOverrides: {
-        root: {
-          textTransform: 'none',
-          fontSize: '0.875rem',
-          fontWeight: 500,
-          minHeight: 48,
-        },
-      },
-    },
-    MuiTabs: {
-      styleOverrides: {
-        indicator: {
-          backgroundColor: '#3e4b2e',
-          height: 3,
-        },
-      },
-    },
-    MuiFormHelperText: {
-      styleOverrides: {
-        root: {
-          fontSize: '0.75rem',
-          marginTop: 4,
-        },
-      },
-    },
-    MuiDialog: {
-      styleOverrides: {
-        paper: {
-          borderRadius: 8,
-          boxShadow: '0 8px 16px rgba(0, 0, 0, 0.14)',
-        },
-      },
-    },
-    MuiDialogTitle: {
-      styleOverrides: {
-        root: {
-          padding: '16px 24px',
-          fontSize: '1.25rem',
-          fontWeight: 500,
-        },
-      },
-    },
-    MuiBadge: {
-      styleOverrides: {
-        badge: {
-          fontWeight: 500,
-          fontSize: '0.75rem',
-          minWidth: 20,
-          height: 20,
-        },
-      },
-    },
-    MuiLinearProgress: {
-      styleOverrides: {
-        root: {
-          borderRadius: 4,
-          height: 6,
-        },
-      },
-    },
-  },
-});
-
-export default smartBinTheme;
\ No newline at end of file
diff --git a/frontend/src/pages/LandingPage.css b/frontend/src/pages/LandingPage.css
deleted file mode 100644
index 08f469d..0000000
--- a/frontend/src/pages/LandingPage.css
+++ /dev/null
@@ -1,70 +0,0 @@
-/* frontend/src/pages/LandingPage.css */
-.landing-page {
-  min-height: 100vh;
-  display: flex;
-  flex-direction: column;
-}
-
-.header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  padding: 1rem 2rem;
-  background-color: #ffffff;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-.logo {
-  font-size: 1.5rem;
-  font-weight: bold;
-  color: #2ecc71;
-}
-
-.hero {
-  flex: 1;
-  display: flex;
-  flex-direction: column;
-  justify-content: center;
-  align-items: center;
-  text-align: center;
-  padding: 2rem;
-  background-color: #f9f9f9;
-}
-
-.hero h1 {
-  font-size: 2.5rem;
-  margin-bottom: 1rem;
-  color: #333;
-}
-
-.hero p {
-  font-size: 1.2rem;
-  margin-bottom: 2rem;
-  color: #666;
-  max-width: 600px;
-}
-
-.get-started-button, .dashboard-button, .login-button {
-  display: inline-block;
-  padding: 0.75rem 1.5rem;
-  background-color: #2ecc71;
-  color: white;
-  text-decoration: none;
-  border-radius: 4px;
-  font-weight: bold;
-  transition: background-color 0.3s;
-}
-
-.login-button {
-  background-color: transparent;
-  color: #2ecc71;
-  border: 1px solid #2ecc71;
-}
-
-.get-started-button:hover, .dashboard-button:hover {
-  background-color: #27ae60;
-}
-
-.login-button:hover {
-  background-color: rgba(46, 204, 113, 0.1);
-}
\ No newline at end of file
diff --git a/frontend/src/pages/LandingPage.jsx b/frontend/src/pages/LandingPage.jsx
deleted file mode 100644
index d3abf96..0000000
--- a/frontend/src/pages/LandingPage.jsx
+++ /dev/null
@@ -1,43 +0,0 @@
-import React from 'react';
-import { Link } from 'react-router-dom';
-import { useAuth } from '../contexts/AuthContext';
-import Logo from '../components/ui/Logo/Logo';
-import './LandingPage.css';
-
-function LandingPage() {
-  const { user } = useAuth();
-
-  return (
-    <div className="landing-page">
-      <header className="header">
-        <Logo />
-        <nav>
-          {user ? (
-            <Link to="/dashboard" className="dashboard-button">Dashboard</Link>
-          ) : (
-            <Link to="/login" className="login-button">Login</Link>
-          )}
-        </nav>
-      </header>
-
-      <section className="hero">
-        {!user ? (
-          <>
-            <h1>Smart Waste Management Solution</h1>
-            <p>Revolutionizing how we handle waste for a cleaner, greener future</p>
-            <Link to="/register" className="get-started-button">Get Started With Us</Link>
-          </>
-        ) : (
-          <>
-            <h1>Welcome back, {user.name}!</h1>
-            <p>Continue managing your waste efficiently with SmartBin</p>
-            <Link to="/dashboard" className="dashboard-button">Go to Dashboard</Link>
-          </>
-        )}
-      </section>
-      
-    </div>
-  );
-}
-
-export default LandingPage;
\ No newline at end of file
diff --git a/frontend/src/pages/NotFound.jsx b/frontend/src/pages/NotFound.jsx
deleted file mode 100644
index 6102d90..0000000
--- a/frontend/src/pages/NotFound.jsx
+++ /dev/null
@@ -1,14 +0,0 @@
-import React from 'react';
-import { Link } from 'react-router-dom';
-
-const NotFound = () => {
-  return (
-    <div style={{ textAlign: 'center', marginTop: '50px' }}>
-      <h1>404 - Page Not Found</h1>
-      <p>Sorry, the page you are looking for does not exist.</p>
-      <Link to="/">Go back to Home</Link>
-    </div>
-  );
-};
-
-export default NotFound;
\ No newline at end of file
diff --git a/frontend/src/pages/admin/AdminComplaintsDashboard.jsx b/frontend/src/pages/admin/AdminComplaintsDashboard.jsx
deleted file mode 100644
index ade981e..0000000
--- a/frontend/src/pages/admin/AdminComplaintsDashboard.jsx
+++ /dev/null
@@ -1,162 +0,0 @@
-import React, { useState, useEffect, useCallback } from 'react';
-import ComplaintList from '../../components/complaints/ComplaintList';
-import ComplaintDetail from '../../components/complaints/ComplaintDetail';
-import complaintApi from '../../services/complaintApi';
-import '../../components/complaints/ComplaintComponents.css';
-
-const AdminComplaintsDashboard = () => {
-  const [complaints, setComplaints] = useState([]);
-  const [selectedComplaintId, setSelectedComplaintId] = useState(null);
-  const [selectedComplaint, setSelectedComplaint] = useState(null);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState('');
-  const [filter, setFilter] = useState('all');
-
-  // Function to fetch all complaints
-  const fetchComplaints = useCallback(async () => {
-    setLoading(true);
-    try {
-      // Add filtering parameters as needed
-      const filters = {};
-      if (filter !== 'all') {
-        filters.status = filter;
-      }
-      
-      const response = await complaintApi.getAllComplaints(filters);
-      setComplaints(response.data);
-      setError('');
-    } catch (err) {
-      console.error('Error fetching complaints:', err);
-      setError('Failed to load complaints. Please try again later.');
-    } finally {
-      setLoading(false);
-    }
-  }, [filter]);
-
-  // Function to fetch a specific complaint
-  const fetchComplaintDetails = useCallback(async (id) => {
-    if (!id) return;
-    
-    setLoading(true);
-    try {
-      const response = await complaintApi.getComplaintById(id);
-      setSelectedComplaint(response.data);
-    } catch (err) {
-      console.error('Error fetching complaint details:', err);
-      setError('Failed to load complaint details.');
-    } finally {
-      setLoading(false);
-    }
-  }, []);
-
-  // Load complaints on component mount and when filter changes
-  useEffect(() => {
-    fetchComplaints();
-  }, [fetchComplaints]);
-
-  // Load selected complaint details when ID changes
-  useEffect(() => {
-    if (selectedComplaintId) {
-      fetchComplaintDetails(selectedComplaintId);
-    } else {
-      setSelectedComplaint(null);
-    }
-  }, [selectedComplaintId, fetchComplaintDetails]);
-
-  // Handle complaint selection
-  const handleSelectComplaint = (id) => {
-    setSelectedComplaintId(id);
-  };
-
-  // Handle update of complaint details
-  const handleComplaintUpdated = () => {
-    fetchComplaintDetails(selectedComplaintId);
-    fetchComplaints(); // Refresh the list too
-  };
-
-  // Handle closing complaint detail view
-  const handleCloseDetail = () => {
-    setSelectedComplaintId(null);
-  };
-
-  // Handle filter change
-  const handleFilterChange = (e) => {
-    setFilter(e.target.value);
-  };
-
-  // Calculate counts for dashboard stats
-  const countByStatus = {
-    new: complaints.filter(c => c.status === 'New').length,
-    inProgress: complaints.filter(c => c.status === 'In Progress').length,
-    resolved: complaints.filter(c => c.status === 'Resolved').length,
-    closed: complaints.filter(c => c.status === 'Closed').length,
-    total: complaints.length
-  };
-
-  return (
-    <div className="dashboard-content">
-      <h2>Complaints Management</h2>
-      
-      {error && <div className="form-error">{error}</div>}
-      
-      {!selectedComplaint ? (
-        <>
-          {/* Dashboard stats */}
-          <div className="dashboard-grid">
-            <div className="dashboard-card">
-              <h3>Total Complaints</h3>
-              <p>{countByStatus.total}</p>
-            </div>
-            <div className="dashboard-card">
-              <h3>New</h3>
-              <p>{countByStatus.new}</p>
-            </div>
-            <div className="dashboard-card">
-              <h3>In Progress</h3>
-              <p>{countByStatus.inProgress}</p>
-            </div>
-            <div className="dashboard-card">
-              <h3>Resolved</h3>
-              <p>{countByStatus.resolved}</p>
-            </div>
-          </div>
-          
-          {/* Filter controls */}
-          <div className="admin-filter-bar">
-            <select 
-              className="filter-select"
-              value={filter}
-              onChange={handleFilterChange}
-            >
-              <option value="all">All Complaints</option>
-              <option value="New">New</option>
-              <option value="In Progress">In Progress</option>
-              <option value="Resolved">Resolved</option>
-              <option value="Closed">Closed</option>
-            </select>
-          </div>
-          
-          {/* Complaints list */}
-          {loading ? (
-            <p>Loading complaints...</p>
-          ) : (
-            <ComplaintList 
-              complaints={complaints} 
-              onSelectComplaint={handleSelectComplaint}
-              isAdminView={true}
-            />
-          )}
-        </>
-      ) : (
-        <ComplaintDetail 
-          complaint={selectedComplaint} 
-          isAdmin={true}
-          onUpdate={handleComplaintUpdated}
-          onClose={handleCloseDetail}
-        />
-      )}
-    </div>
-  );
-};
-
-export default AdminComplaintsDashboard;
\ No newline at end of file
diff --git a/frontend/src/pages/admin/SystemSettingsPage.jsx b/frontend/src/pages/admin/SystemSettingsPage.jsx
deleted file mode 100644
index bf81d8d..0000000
--- a/frontend/src/pages/admin/SystemSettingsPage.jsx
+++ /dev/null
@@ -1,227 +0,0 @@
-import React, { useState, useEffect, useCallback } from 'react';
-import {
-    Container, Paper, Typography, TextField, Button, Box, Grid,
-    Select, MenuItem, FormControl, InputLabel, Switch, FormControlLabel,
-    CircularProgress, Alert, Snackbar
-} from '@mui/material';
-import settingsApi from '../../services/settingsApi';
-
-const SystemSettingsPage = () => {
-    const [settings, setSettings] = useState({
-        appName: '',
-        defaultTimezone: '',
-        defaultCurrency: '',
-        defaultNewUserRole: 'customer',
-        passwordMinLength: 8,
-        sessionTimeoutMinutes: 60,
-        maintenanceMode: false,
-    });
-    const [initialSettings, setInitialSettings] = useState({});
-    const [loading, setLoading] = useState(true);
-    const [saving, setSaving] = useState(false);
-    const [error, setError] = useState(null);
-    const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
-
-    const fetchSettings = useCallback(async () => {
-        setLoading(true);
-        setError(null);
-        try {
-            const data = await settingsApi.getSettings();
-            setSettings(data);
-            setInitialSettings(data);
-        } catch (err) {
-            setError(err.message || 'Failed to load settings.');
-        } finally {
-            setLoading(false);
-        }
-    }, []);
-
-    useEffect(() => {
-        fetchSettings();
-    }, [fetchSettings]);
-
-    const handleChange = (event) => {
-        const { name, value, type, checked } = event.target;
-        setSettings(prev => ({
-            ...prev,
-            [name]: type === 'checkbox' ? checked : value,
-        }));
-    };
-
-    const handleNumericChange = (event) => {
-        const { name, value } = event.target;
-        if (value === '' || /^[0-9]+$/.test(value)) {
-            setSettings(prev => ({
-                ...prev,
-                [name]: value === '' ? '' : Number(value)
-            }));
-        }
-    };
-
-    const handleSubmit = async (event) => {
-        event.preventDefault();
-        setSaving(true);
-        setError(null);
-        try {
-            const dataToSubmit = {
-                ...settings,
-                passwordMinLength: Number(settings.passwordMinLength) || 8,
-                sessionTimeoutMinutes: Number(settings.sessionTimeoutMinutes) || 60,
-            };
-            const updatedData = await settingsApi.updateSettings(dataToSubmit);
-            setSettings(updatedData);
-            setInitialSettings(updatedData);
-            setSnackbar({ open: true, message: 'Settings updated successfully!', severity: 'success' });
-        } catch (err) {
-            setError(err.message || 'Failed to update settings.');
-            setSnackbar({ open: true, message: err.message || 'Failed to update settings.', severity: 'error' });
-        } finally {
-            setSaving(false);
-        }
-    };
-
-    const handleCloseSnackbar = () => {
-        setSnackbar({ ...snackbar, open: false });
-    };
-
-    const hasChanged = JSON.stringify(settings) !== JSON.stringify(initialSettings);
-
-    if (loading) {
-        return <Box display="flex" justifyContent="center" p={5}><CircularProgress /></Box>;
-    }
-
-    return (
-        <Container maxWidth="md">
-            <Paper sx={{ p: 3, mt: 3 }}>
-                <Typography variant="h4" gutterBottom>
-                    System Settings
-                </Typography>
-
-                {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
-
-                <Box component="form" onSubmit={handleSubmit}>
-                    <Grid container spacing={3}>
-                        {/* General Settings */}
-                        <Grid item xs={12}>
-                            <Typography variant="h6">General</Typography>
-                        </Grid>
-                        <Grid item xs={12} md={6}>
-                            <TextField
-                                label="Application Name"
-                                name="appName"
-                                value={settings.appName}
-                                onChange={handleChange}
-                                fullWidth
-                                disabled={saving}
-                            />
-                        </Grid>
-                        <Grid item xs={12} md={6}>
-                            <TextField
-                                label="Default Timezone"
-                                name="defaultTimezone"
-                                value={settings.defaultTimezone}
-                                onChange={handleChange}
-                                fullWidth
-                                disabled={saving}
-                            />
-                        </Grid>
-                        <Grid item xs={12} md={6}>
-                            <TextField
-                                label="Default Currency (ISO Code)"
-                                name="defaultCurrency"
-                                value={settings.defaultCurrency}
-                                onChange={handleChange}
-                                fullWidth
-                                disabled={saving}
-                                inputProps={{ maxLength: 3, style: { textTransform: 'uppercase' } }}
-                            />
-                        </Grid>
-                        <Grid item xs={12} md={6}>
-                            <FormControlLabel
-                                control={
-                                    <Switch
-                                        checked={settings.maintenanceMode}
-                                        onChange={handleChange}
-                                        name="maintenanceMode"
-                                        disabled={saving}
-                                    />
-                                }
-                                label="Maintenance Mode"
-                            />
-                        </Grid>
-
-                        {/* User Settings */}
-                        <Grid item xs={12}>
-                            <Typography variant="h6" sx={{ mt: 2 }}>User Management</Typography>
-                        </Grid>
-                        <Grid item xs={12} md={6}>
-                            <FormControl fullWidth>
-                                <InputLabel id="default-role-label">Default New User Role</InputLabel>
-                                <Select
-                                    labelId="default-role-label"
-                                    label="Default New User Role"
-                                    name="defaultNewUserRole"
-                                    value={settings.defaultNewUserRole}
-                                    onChange={handleChange}
-                                    disabled={saving}
-                                >
-                                    <MenuItem value="customer">Customer</MenuItem>
-                                    <MenuItem value="staff">Staff</MenuItem>
-                                </Select>
-                            </FormControl>
-                        </Grid>
-                        <Grid item xs={12} md={6}>
-                            <TextField
-                                label="Minimum Password Length"
-                                name="passwordMinLength"
-                                type="number"
-                                value={settings.passwordMinLength}
-                                onChange={handleNumericChange}
-                                fullWidth
-                                disabled={saving}
-                                InputProps={{ inputProps: { min: 6 } }}
-                            />
-                        </Grid>
-                        <Grid item xs={12} md={6}>
-                            <TextField
-                                label="Session Timeout (Minutes)"
-                                name="sessionTimeoutMinutes"
-                                type="number"
-                                value={settings.sessionTimeoutMinutes}
-                                onChange={handleNumericChange}
-                                fullWidth
-                                disabled={saving}
-                                InputProps={{ inputProps: { min: 5 } }}
-                            />
-                        </Grid>
-
-                        {/* Save Button */}
-                        <Grid item xs={12} sx={{ mt: 2 }}>
-                            <Button
-                                type="submit"
-                                variant="contained"
-                                color="primary"
-                                disabled={saving || !hasChanged}
-                                startIcon={saving ? <CircularProgress size={20} color="inherit" /> : null}
-                            >
-                                {saving ? 'Saving...' : 'Save Settings'}
-                            </Button>
-                        </Grid>
-                    </Grid>
-                </Box>
-            </Paper>
-            <Snackbar
-                open={snackbar.open}
-                autoHideDuration={6000}
-                onClose={handleCloseSnackbar}
-                anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
-            >
-                <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
-                    {snackbar.message}
-                </Alert>
-            </Snackbar>
-        </Container>
-    );
-};
-
-export default SystemSettingsPage;
\ No newline at end of file
diff --git a/frontend/src/pages/admin/UserManagementPage.jsx b/frontend/src/pages/admin/UserManagementPage.jsx
deleted file mode 100644
index 807b50b..0000000
--- a/frontend/src/pages/admin/UserManagementPage.jsx
+++ /dev/null
@@ -1,234 +0,0 @@
-// frontend/src/pages/admin/UserManagementPage.jsx
-import React, { useState, useEffect, useCallback } from 'react';
-import {
-  Box, Button, Typography, CircularProgress, Alert, Snackbar,
-  Pagination, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle
-} from '@mui/material';
-import AddIcon from '@mui/icons-material/Add';
-import UserList from '../../components/admin/UserList';
-import UserForm from '../../components/admin/UserForm';
-import { getAllUsers, createUser, updateUser, deleteUser } from '../../services/adminService';
-
-const UserManagementPage = () => {
-  const [users, setUsers] = useState([]);
-  const [loading, setLoading] = useState(false);
-  const [error, setError] = useState(null);
-  const [formServerError, setFormServerError] = useState(null); // Separate error state for the form
-  const [paginationInfo, setPaginationInfo] = useState({
-    currentPage: 1,
-    totalPages: 1,
-    totalUsers: 0,
-  });
-  const [selectedUser, setSelectedUser] = useState(null); // For editing
-  const [showForm, setShowForm] = useState(false);
-  const [formLoading, setFormLoading] = useState(false);
-  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
-  const [confirmDelete, setConfirmDelete] = useState({ open: false, userId: null });
-
-  const fetchUsers = useCallback(async (page = 1) => {
-    setLoading(true);
-    setError(null);
-    try {
-      const data = await getAllUsers({ page, limit: 10 }); // Adjust limit as needed
-      setUsers(data.users || []);
-      setPaginationInfo({
-        currentPage: data.currentPage || 1,
-        totalPages: data.totalPages || 1,
-        totalUsers: data.totalUsers || 0,
-      });
-    } catch (err) {
-      setError(err.message || 'Failed to fetch users');
-      setSnackbar({ open: true, message: err.message || 'Failed to fetch users', severity: 'error' });
-    } finally {
-      setLoading(false);
-    }
-  }, []);
-
-  useEffect(() => {
-    fetchUsers(paginationInfo.currentPage);
-  }, [fetchUsers, paginationInfo.currentPage]);
-
-  const handlePageChange = (event, value) => {
-    setPaginationInfo(prev => ({ ...prev, currentPage: value }));
-  };
-
-  const handleAddUserClick = () => {
-    setSelectedUser(null);
-    setFormServerError(null); // Clear previous form errors
-    setShowForm(true);
-  };
-
-  const handleEditUserClick = (user) => {
-    setSelectedUser(user);
-    setFormServerError(null); // Clear previous form errors
-    setShowForm(true);
-  };
-
-  const handleFormCancel = () => {
-    setShowForm(false);
-    setSelectedUser(null);
-    setFormServerError(null);
-  };
-
-  const handleFormSubmit = async (formData) => {
-    setFormLoading(true);
-    setFormServerError(null);
-    const isEditMode = Boolean(selectedUser?._id);
-    const action = isEditMode ? updateUser : createUser;
-    const userId = isEditMode ? selectedUser._id : undefined;
-
-    try {
-      await action(userId, formData); // Pass ID only for update
-      setShowForm(false);
-      setSelectedUser(null);
-      setSnackbar({ open: true, message: `User ${isEditMode ? 'updated' : 'created'} successfully!`, severity: 'success' });
-      // Refresh users list - fetch current page again
-      fetchUsers(paginationInfo.currentPage);
-    } catch (err) {
-      console.error('Form submission error:', err);
-      const errorMessage = err.message || `Failed to ${isEditMode ? 'update' : 'create'} user`;
-      setFormServerError({ message: errorMessage }); // Set form-specific error
-      setSnackbar({ open: true, message: errorMessage, severity: 'error' });
-    } finally {
-      setFormLoading(false);
-    }
-  };
-
-  const handleDeleteUserClick = (userId) => {
-    setConfirmDelete({ open: true, userId: userId });
-  };
-
-  const handleConfirmDelete = async () => {
-    const userId = confirmDelete.userId;
-    if (!userId) return;
-
-    setLoading(true); // Use main loading indicator for delete
-    setError(null);
-    setConfirmDelete({ open: false, userId: null }); // Close dialog
-
-    try {
-      await deleteUser(userId);
-      setSnackbar({ open: true, message: 'User deleted successfully!', severity: 'success' });
-      // Refresh list: If the deleted user was the last on the page, go to previous page
-      const newTotalUsers = paginationInfo.totalUsers - 1;
-      const newTotalPages = Math.ceil(newTotalUsers / 10); // Assuming limit is 10
-      let pageToFetch = paginationInfo.currentPage;
-      if (users.length === 1 && paginationInfo.currentPage > 1) {
-        pageToFetch = paginationInfo.currentPage - 1;
-      }
-      if (pageToFetch > newTotalPages && newTotalPages > 0) {
-         pageToFetch = newTotalPages;
-      }
-      if (newTotalUsers === 0) {
-          pageToFetch = 1;
-      }
-      // Update pagination state *before* fetching if page changes
-      if (pageToFetch !== paginationInfo.currentPage) {
-          setPaginationInfo(prev => ({ ...prev, currentPage: pageToFetch }));
-      } else {
-          fetchUsers(pageToFetch); // Fetch the potentially adjusted current page
-      }
-
-    } catch (err) {
-      setError(err.message || 'Failed to delete user');
-      setSnackbar({ open: true, message: err.message || 'Failed to delete user', severity: 'error' });
-      setLoading(false); // Ensure loading is false on error
-    }
-    // setLoading(false) is handled by fetchUsers in success case
-  };
-
-  const handleCloseSnackbar = (event, reason) => {
-    if (reason === 'clickaway') {
-      return;
-    }
-    setSnackbar({ ...snackbar, open: false });
-  };
-
-  const handleCloseConfirmDelete = () => {
-    setConfirmDelete({ open: false, userId: null });
-  };
-
-  return (
-    <Box sx={{ p: 3 }}>
-      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
-        <Typography variant="h4" gutterBottom>
-          User Management
-        </Typography>
-        <Button
-          variant="contained"
-          startIcon={<AddIcon />}
-          onClick={handleAddUserClick}
-        >
-          Add New User
-        </Button>
-      </Box>
-
-      {error && !loading && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
-
-      <UserList
-        users={users}
-        onEdit={handleEditUserClick}
-        onDelete={handleDeleteUserClick}
-        loading={loading}
-      />
-
-      {paginationInfo.totalPages > 1 && (
-        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>
-          <Pagination
-            count={paginationInfo.totalPages}
-            page={paginationInfo.currentPage}
-            onChange={handlePageChange}
-            color="primary"
-            disabled={loading}
-          />
-        </Box>
-      )}
-
-      {/* User Form Dialog */}
-      <UserForm
-        key={selectedUser?._id || 'new'} // Force re-render on user change
-        initialData={selectedUser}
-        onSubmit={handleFormSubmit}
-        onCancel={handleFormCancel}
-        loading={formLoading}
-        open={showForm}
-        serverError={formServerError} // Pass server error to form
-      />
-
-      {/* Delete Confirmation Dialog */}
-      <Dialog
-        open={confirmDelete.open}
-        onClose={handleCloseConfirmDelete}
-        aria-labelledby="alert-dialog-title"
-        aria-describedby="alert-dialog-description"
-      >
-        <DialogTitle id="alert-dialog-title">{"Confirm Deletion"}</DialogTitle>
-        <DialogContent>
-          <DialogContentText id="alert-dialog-description">
-            Are you sure you want to delete this user? This action cannot be undone.
-          </DialogContentText>
-        </DialogContent>
-        <DialogActions>
-          <Button onClick={handleCloseConfirmDelete} disabled={loading}>Cancel</Button>
-          <Button onClick={handleConfirmDelete} color="error" autoFocus disabled={loading}>
-            {loading ? <CircularProgress size={20} /> : 'Delete'}
-          </Button>
-        </DialogActions>
-      </Dialog>
-
-      {/* Snackbar for feedback */}
-      <Snackbar
-        open={snackbar.open}
-        autoHideDuration={6000}
-        onClose={handleCloseSnackbar}
-        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
-      >
-        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
-          {snackbar.message}
-        </Alert>
-      </Snackbar>
-    </Box>
-  );
-};
-
-export default UserManagementPage;
diff --git a/frontend/src/pages/auth/Auth.css b/frontend/src/pages/auth/Auth.css
deleted file mode 100644
index 2f84184..0000000
--- a/frontend/src/pages/auth/Auth.css
+++ /dev/null
@@ -1,188 +0,0 @@
-/* frontend/src/pages/auth/Auth.css */
-.auth-container {
-  display: flex;
-  justify-content: center;
-  align-items: center;
-  min-height: 100vh;
-  background-color: #f9f9f9;
-  padding: 2rem 1rem;
-}
-
-.auth-form-container {
-  width: 100%;
-  max-width: 450px;
-  padding: 2rem;
-  background-color: white;
-  border-radius: 8px;
-  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
-}
-
-.auth-form-container h2 {
-  margin-bottom: 1.5rem;
-  text-align: center;
-  color: #333;
-}
-
-.form-group {
-  margin-bottom: 1.5rem;
-}
-
-.form-group label {
-  display: block;
-  margin-bottom: 0.5rem;
-  color: #555;
-  font-weight: 500;
-}
-
-.form-group input,
-.form-group select,
-.form-group textarea {
-  width: 100%;
-  padding: 0.75rem;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 14px;
-  background-color: #ffffff;
-  color: #333;
-}
-
-.form-group textarea {
-  min-height: 80px;
-  resize: vertical;
-}
-
-.form-group input::placeholder,
-.form-group select::placeholder,
-.form-group textarea::placeholder {
-  color: #999;
-}
-
-.form-group input:focus,
-.form-group select:focus,
-.form-group textarea:focus {
-  outline: none;
-  border-color: #4ea14a;
-  box-shadow: 0 0 0 2px rgba(78, 161, 74, 0.1);
-}
-
-.form-text {
-  display: block;
-  margin-top: 0.25rem;
-  font-size: 0.875rem;
-  color: #6c757d;
-}
-
-.auth-error {
-  background-color: #f8d7da;
-  color: #721c24;
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid #f5c6cb;
-}
-
-.auth-button {
-  width: 100%;
-  padding: 0.75rem;
-  background-color: #4ea14a;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  font-size: 1rem;
-  font-weight: bold;
-  cursor: pointer;
-  transition: background-color 0.3s;
-}
-
-.auth-button:hover {
-  background-color: #3c8a38;
-}
-
-.auth-button:disabled {
-  background-color: #8bc887;
-  cursor: not-allowed;
-}
-
-.auth-footer {
-  margin-top: 1.5rem;
-  text-align: center;
-  color: #777;
-}
-
-.auth-footer a {
-  color: #4ea14a;
-  text-decoration: none;
-}
-
-.auth-footer a:hover {
-  text-decoration: underline;
-}
-
-/* Override autofill styles in Chrome/Safari */
-input:-webkit-autofill,
-input:-webkit-autofill:hover, 
-input:-webkit-autofill:focus,
-input:-webkit-autofill:active {
-  -webkit-box-shadow: 0 0 0 30px white inset !important;
-  -webkit-text-fill-color: #333 !important;
-  transition: background-color 5000s ease-in-out 0s;
-}
-
-/* For Firefox and other browsers */
-input:-moz-autofill,
-input:-moz-autofill:hover,
-input:-moz-autofill:focus,
-input:-moz-autofill:active {
-  background-color: white !important;
-  color: #333 !important;
-}
-
-/* Address section */
-.address-heading {
-  margin-top: 1.5rem;
-  margin-bottom: 1rem;
-  font-size: 1.1rem;
-  color: #444;
-  border-bottom: 1px solid #eee;
-  padding-bottom: 0.5rem;
-}
-
-/* MFA related styles */
-.mfa-options {
-  margin-top: 1rem;
-  display: flex;
-  flex-direction: column;
-  gap: 0.5rem;
-}
-
-.mfa-link-button {
-  background: none;
-  border: none;
-  color: #4a90e2;
-  cursor: pointer;
-  font-size: 0.9rem;
-  padding: 0.2rem;
-  text-decoration: underline;
-  text-align: center;
-}
-
-.mfa-link-button:hover {
-  color: #357ABD;
-}
-
-/* Mobile responsive adjustments */
-@media (max-width: 480px) {
-  .auth-form-container {
-    padding: 1.5rem;
-  }
-  
-  .form-group {
-    margin-bottom: 1rem;
-  }
-  
-  .form-group input,
-  .form-group select,
-  .form-group textarea {
-    padding: 0.6rem;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/pages/auth/Login.jsx b/frontend/src/pages/auth/Login.jsx
deleted file mode 100644
index 44e5069..0000000
--- a/frontend/src/pages/auth/Login.jsx
+++ /dev/null
@@ -1,295 +0,0 @@
-// src/pages/auth/Login.jsx
-import React, { useState } from 'react';
-import { useNavigate, Link } from 'react-router-dom';
-import { useAuth } from '../../contexts/AuthContext';
-import mfaApi from '../../services/mfaApi';
-import './Auth.css';
-
-function Login() {
-  const [formData, setFormData] = useState({
-    email: '',
-    password: ''
-  });
-  const [mfaData, setMfaData] = useState({
-    userId: '',
-    token: '',
-    recoveryMode: false,
-    recoveryCode: ''
-  });
-  const [error, setError] = useState('');
-  const [loading, setLoading] = useState(false);
-  const [showMfaPrompt, setShowMfaPrompt] = useState(false);
-  const navigate = useNavigate();
-  const { login, setAuthState } = useAuth();
-
-  const handleChange = (e) => {
-    const { name, value } = e.target;
-    if (name === 'token' || name === 'recoveryCode') {
-      setMfaData({ ...mfaData, [name]: value });
-    } else {
-      setFormData({ ...formData, [name]: value });
-    }
-  };
-
-  const toggleRecoveryMode = () => {
-    setMfaData({
-      ...mfaData,
-      recoveryMode: !mfaData.recoveryMode,
-      token: '',
-      recoveryCode: ''
-    });
-    setError('');
-  };
-
-  // Handle regular login (first step)
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    setError('');
-    setLoading(true);
-
-    // Basic frontend validation
-    if (!formData.email || !formData.password) {
-      setError('Please enter both email and password.');
-      setLoading(false);
-      return;
-    }
-
-    try {
-      const response = await login(formData.email, formData.password);
-      
-      // Check if MFA is required
-      if (response.mfaRequired) {
-        // Show MFA verification prompt
-        setMfaData({ ...mfaData, userId: response.userId });
-        setShowMfaPrompt(true);
-      } else {
-        // Regular login successful
-        navigate('/dashboard');
-      }
-    } catch (err) {
-      // Improved error handling
-      if (err.response?.data?.errors) {
-        // Handle validation errors array from express-validator
-        const messages = err.response.data.errors.map(e => e.msg).join(', ');
-        setError(`Login failed: ${messages}`);
-      } else if (err.response?.data?.message) {
-        // Handle specific error message from backend
-        setError(err.response.data.message);
-      } else if (err.request) {
-        // Handle network error
-        setError('Network error. Please check connection.');
-      } else {
-        // Handle other unexpected errors
-        setError('An unexpected error occurred during login.');
-      }
-      console.error('Login error:', err);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  // Handle MFA verification (second step)
-  const handleMfaVerify = async (e) => {
-    e.preventDefault();
-    setError('');
-    setLoading(true);
-
-    try {
-      let response;
-      
-      // Check if user is using recovery code or regular token
-      if (mfaData.recoveryMode) {
-        if (!mfaData.recoveryCode.trim()) {
-          setError('Please enter a recovery code');
-          setLoading(false);
-          return;
-        }
-        
-        // Verify with recovery code
-        response = await mfaApi.useRecoveryCode(mfaData.userId, mfaData.recoveryCode);
-      } else {
-        if (!mfaData.token.trim()) {
-          setError('Please enter the verification code');
-          setLoading(false);
-          return;
-        }
-        
-        // Verify with token
-        response = await mfaApi.verifyMFA(mfaData.userId, mfaData.token);
-      }
-      
-      // Set auth state with response data (includes token)
-      setAuthState({
-        isAuthenticated: true,
-        token: response.data.token,
-        user: {
-          id: response.data._id,
-          name: response.data.name,
-          email: response.data.email,
-          role: response.data.role,
-          mfaEnabled: response.data.mfaEnabled
-        }
-      });
-      
-      // Navigate to dashboard after successful verification
-      navigate('/dashboard');
-    } catch (err) {
-      if (err.response?.data?.message) {
-        setError(err.response.data.message);
-      } else {
-        setError('Failed to verify MFA code. Please try again.');
-      }
-      console.error('MFA verification error:', err);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  // Reset MFA state and go back to login
-  const handleCancelMfa = () => {
-    setShowMfaPrompt(false);
-    setMfaData({
-      userId: '',
-      token: '',
-      recoveryMode: false,
-      recoveryCode: ''
-    });
-  };
-
-  // Show either login form or MFA verification form
-  return (
-    <div className="auth-container">
-      <div className="auth-form-container">
-        {!showMfaPrompt ? (
-          // Step 1: Regular login form
-          <>
-            <h2>Login to SmartBin</h2>
-            
-            {error && <div className="auth-error">{error}</div>}
-            
-            <form onSubmit={handleSubmit}>
-              <div className="form-group">
-                <label htmlFor="email">Email</label>
-                <input
-                  type="email"
-                  id="email"
-                  name="email"
-                  value={formData.email}
-                  onChange={handleChange}
-                  required
-                />
-              </div>
-              
-              <div className="form-group">
-                <label htmlFor="password">Password</label>
-                <input
-                  type="password"
-                  id="password"
-                  name="password"
-                  value={formData.password}
-                  onChange={handleChange}
-                  required
-                />
-              </div>
-              
-              <button 
-                type="submit" 
-                className="auth-button"
-                disabled={loading}
-              >
-                {loading ? 'Logging in...' : 'Login'}
-              </button>
-            </form>
-          </>
-        ) : (
-          // Step 2: MFA verification form
-          <>
-            <h2>Two-Factor Authentication</h2>
-            
-            {error && <div className="auth-error">{error}</div>}
-            
-            {mfaData.recoveryMode ? (
-              // Recovery code mode
-              <form onSubmit={handleMfaVerify}>
-                <div className="form-group">
-                  <label htmlFor="recoveryCode">Recovery Code</label>
-                  <input
-                    type="text"
-                    id="recoveryCode"
-                    name="recoveryCode"
-                    value={mfaData.recoveryCode}
-                    onChange={handleChange}
-                    placeholder="Enter your recovery code"
-                    autoComplete="off"
-                    autoFocus
-                    required
-                  />
-                </div>
-                
-                <button 
-                  type="submit" 
-                  className="auth-button"
-                  disabled={loading}
-                >
-                  {loading ? 'Verifying...' : 'Verify Recovery Code'}
-                </button>
-              </form>
-            ) : (
-              // Regular token mode
-              <form onSubmit={handleMfaVerify}>
-                <div className="form-group">
-                  <label htmlFor="token">Verification Code</label>
-                  <input
-                    type="text"
-                    id="token"
-                    name="token"
-                    value={mfaData.token}
-                    onChange={handleChange}
-                    placeholder="Enter 6-digit code from your app"
-                    autoComplete="off"
-                    autoFocus
-                    required
-                  />
-                </div>
-                
-                <button 
-                  type="submit" 
-                  className="auth-button"
-                  disabled={loading}
-                >
-                  {loading ? 'Verifying...' : 'Verify Code'}
-                </button>
-              </form>
-            )}
-            
-            <div className="mfa-options">
-              <button 
-                type="button" 
-                className="mfa-link-button" 
-                onClick={toggleRecoveryMode}
-              >
-                {mfaData.recoveryMode 
-                  ? 'Use authenticator app instead' 
-                  : 'Use recovery code instead'}
-              </button>
-              
-              <button 
-                type="button" 
-                className="mfa-link-button" 
-                onClick={handleCancelMfa}
-              >
-                Back to login
-              </button>
-            </div>
-          </>
-        )}
-        
-        <div className="auth-footer">
-          Don't have an account? <Link to="/register">Sign up</Link>
-        </div>
-      </div>
-    </div>
-  );
-}
-
-export default Login;
\ No newline at end of file
diff --git a/frontend/src/pages/auth/Register.jsx b/frontend/src/pages/auth/Register.jsx
deleted file mode 100644
index cfbd48a..0000000
--- a/frontend/src/pages/auth/Register.jsx
+++ /dev/null
@@ -1,287 +0,0 @@
-// frontend/src/pages/auth/Register.jsx
-import React, { useState } from 'react';
-import { Link, useNavigate } from 'react-router-dom';
-import { useAuth } from '../../contexts/AuthContext';
-import './Auth.css';
-
-const validatePhone = (phone) => {
-  const phoneRegex = /^\+?[1-9]\d{1,14}$/;
-  return phoneRegex.test(phone);
-};
-
-const validateEmail = (email) => {
-  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
-  return emailRegex.test(email);
-};
-
-function Register() {
-  const [formData, setFormData] = useState({
-    name: '',
-    email: '',
-    password: '',
-    phone: '',
-    address: {
-      street: '',
-      city: '',
-      postalCode: '',
-      country: 'Sri Lanka'
-    }
-  });
-  const [formError, setFormError] = useState('');
-  const [loading, setLoading] = useState(false);
-  const { register } = useAuth();
-  const navigate = useNavigate();
-
-  const handleChange = (e) => {
-    const { name, value } = e.target;
-    
-    if (name.startsWith('address.')) {
-      const addressField = name.split('.')[1];
-      setFormData({
-        ...formData,
-        address: {
-          ...formData.address,
-          [addressField]: value
-        }
-      });
-    } else {
-      setFormData({
-        ...formData,
-        [name]: value
-      });
-    }
-  };
-
-  const handleBlur = (e) => {
-    const { name, value } = e.target;
-    
-    if (name === 'email' && value && !validateEmail(value)) {
-      setFormError('Please enter a valid email address');
-    } else if (name === 'password' && value.length < 8) {
-      setFormError('Password must be at least 8 characters long');
-    } else if (name === 'phone' && value && !validatePhone(value)) {
-      setFormError('Please enter a valid phone number (with country code if international)');
-    } else if (name === 'address.street' && value.trim().length < 3) {
-      setFormError('Street address should be at least 3 characters long');
-    } else if (name === 'address.city' && value.trim().length < 2) {
-      setFormError('City should be at least 2 characters long');
-    } else {
-      setFormError('');
-    }
-  };
-
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    setFormError('');
-    setLoading(true);
-    
-    // Frontend Validation Checks before API call
-    if (!formData.name.trim()) {
-      setFormError('Full Name is required');
-      setLoading(false);
-      return;
-    }
-    if (!validateEmail(formData.email)) {
-      setFormError('Please enter a valid email address');
-      setLoading(false);
-      return;
-    }
-    if (formData.password.length < 8) {
-      setFormError('Password must be at least 8 characters long');
-      setLoading(false);
-      return;
-    }
-    if (!validatePhone(formData.phone)) {
-      setFormError('Please enter a valid phone number');
-      setLoading(false);
-      return;
-    }
-    if (!formData.address.street.trim()) {
-      setFormError('Street address is required');
-      setLoading(false);
-      return;
-    }
-    if (!formData.address.city.trim()) {
-      setFormError('City is required');
-      setLoading(false);
-      return;
-    }
-    
-    try {
-      await register(formData);
-      navigate('/dashboard');
-    } catch (err) {
-      // Improved error handling for backend responses
-      if (err.response?.data?.errors) {
-        // Handle validation errors array from express-validator
-        const messages = err.response.data.errors.map(e => e.msg).join(', ');
-        setFormError(`Registration failed: ${messages}`);
-      } else if (err.response?.data?.message) {
-        // Handle specific error message from backend
-        setFormError(err.response.data.message);
-      } else if (err.request) {
-        // Handle network error
-        setFormError('Network error. Please check connection');
-      } else {
-        // Handle other unexpected errors
-        setFormError('An unexpected error occurred during registration');
-      }
-      console.error('Registration error:', err);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  return (
-    <div className="auth-container">
-      <div className="auth-form-container">
-        <h2>Create an Account</h2>
-        
-        {formError && (
-          <div className="auth-error" aria-live="assertive">{formError}</div>
-        )}
-        
-        <form onSubmit={handleSubmit}>
-          <div className="form-group">
-            <label htmlFor="name">Full Name</label>
-            <input
-              type="text"
-              id="name"
-              name="name"
-              value={formData.name}
-              onChange={handleChange}
-              onBlur={handleBlur}
-              disabled={loading}
-              required
-              aria-label="Full Name"
-            />
-          </div>
-          
-          <div className="form-group">
-            <label htmlFor="email">Email</label>
-            <input
-              type="email" 
-              id="email"
-              name="email"
-              value={formData.email}
-              onChange={handleChange}
-              onBlur={handleBlur}
-              disabled={loading}
-              required
-            />
-          </div>
-          
-          <div className="form-group">
-            <label htmlFor="password">Password</label>
-            <input
-              type="password"
-              id="password"
-              name="password"
-              value={formData.password}
-              onChange={handleChange}
-              onBlur={handleBlur}
-              disabled={loading}
-              required
-              minLength="8"
-              aria-label="Password"
-              aria-describedby="passwordHelp"
-            />
-            <small id="passwordHelp" className="form-text text-muted">
-              Password must be at least 8 characters long and include numbers or symbols for better security.
-            </small>
-          </div>
-
-          <div className="form-group">
-            <label htmlFor="phone">Phone Number</label>
-            <input
-              type="tel"
-              id="phone"
-              name="phone"
-              value={formData.phone}
-              onChange={handleChange}
-              onBlur={handleBlur}
-              placeholder="+94XXXXXXXXX"
-              disabled={loading}
-              required
-              aria-label="Phone Number"
-            />
-            <small className="form-text text-muted">
-              Enter a valid phone number with country code
-            </small>
-          </div>
-
-          <h3 className="address-heading">Address Information</h3>
-
-          <div className="form-group">
-            <label htmlFor="address.street">Street Address</label>
-            <input
-              type="text"
-              id="address.street"
-              name="address.street"
-              value={formData.address.street}
-              onChange={handleChange}
-              onBlur={handleBlur}
-              disabled={loading}
-              required
-              aria-label="Street Address"
-            />
-          </div>
-
-          <div className="form-group">
-            <label htmlFor="address.city">City</label>
-            <input
-              type="text"
-              id="address.city"
-              name="address.city"
-              value={formData.address.city}
-              onChange={handleChange}
-              onBlur={handleBlur}
-              disabled={loading}
-              required
-              aria-label="City"
-            />
-          </div>
-
-          <div className="form-group">
-            <label htmlFor="address.postalCode">Postal Code</label>
-            <input
-              type="text"
-              id="address.postalCode"
-              name="address.postalCode"
-              value={formData.address.postalCode}
-              onChange={handleChange}
-              disabled={loading}
-              aria-label="Postal Code"
-            />
-          </div>
-
-          <div className="form-group">
-            <label htmlFor="address.country">Country</label>
-            <input
-              type="text"
-              id="address.country"
-              name="address.country"
-              value={formData.address.country}
-              onChange={handleChange}
-              disabled={loading}
-              aria-label="Country"
-            />
-            <small className="form-text text-muted">
-              Default is Sri Lanka. Change if you're in another country.
-            </small>
-          </div>
-          
-          <button type="submit" className="auth-button" disabled={loading}>
-            {loading ? 'Registering...' : 'Register'}
-          </button>
-        </form>
-        
-        <div className="auth-footer">
-          Already have an account? <Link to="/login">Login</Link>
-        </div>
-      </div>
-    </div>
-  );
-}
-
-export default Register;
\ No newline at end of file
diff --git a/frontend/src/pages/budget/BudgetAllocationPage.jsx b/frontend/src/pages/budget/BudgetAllocationPage.jsx
deleted file mode 100644
index a833ad4..0000000
--- a/frontend/src/pages/budget/BudgetAllocationPage.jsx
+++ /dev/null
@@ -1,243 +0,0 @@
-// frontend/src/pages/budget/BudgetAllocationPage.jsx
-import React, { useState, useEffect, useCallback } from 'react';
-import { 
-    Container, 
-    Typography, 
-    Grid, 
-    Paper, 
-    CircularProgress, 
-    Alert, 
-    Box, 
-    Button, 
-    Collapse 
-} from '@mui/material';
-import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
-import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
-import { DatePicker } from '@mui/x-date-pickers/DatePicker';
-import { format, startOfMonth, endOfMonth } from 'date-fns';
-
-import BudgetForm from '../../components/budget/BudgetForm';
-import BudgetList from '../../components/budget/BudgetList';
-import BudgetSummaryView from '../../components/budget/BudgetSummaryView';
-import * as budgetApi from '../../services/budgetApi';
-
-const BudgetAllocationPage = () => {
-    // State for budgets data
-    const [budgets, setBudgets] = useState([]);
-    const [loading, setLoading] = useState(false);
-    const [error, setError] = useState(null);
-
-    // State for summary data
-    const [summaryData, setSummaryData] = useState([]);
-    const [loadingSummary, setLoadingSummary] = useState(false);
-    const [errorSummary, setErrorSummary] = useState(null);
-    
-    // UI states
-    const [editingBudget, setEditingBudget] = useState(null);
-    const [showForm, setShowForm] = useState(false);
-    const [feedback, setFeedback] = useState({ type: '', message: '' });
-
-    // State for summary date range
-    const [summaryStartDate, setSummaryStartDate] = useState(startOfMonth(new Date()));
-    const [summaryEndDate, setSummaryEndDate] = useState(endOfMonth(new Date()));
-
-    // Fetch budgets from API
-    const fetchBudgets = useCallback(async () => {
-        try {
-            setLoading(true);
-            setError(null);
-            const response = await budgetApi.getBudgets();
-            setBudgets(Array.isArray(response.docs) ? response.docs : (Array.isArray(response) ? response : []));
-        } catch (err) {
-            console.error('Error fetching budgets:', err);
-            setError(err.message || 'Failed to fetch budgets');
-        } finally {
-            setLoading(false);
-        }
-    }, []);
-
-    // Fetch summary data
-    const fetchSummaryData = useCallback(async () => {
-        if (!summaryStartDate || !summaryEndDate) return;
-        try {
-            setLoadingSummary(true);
-            setErrorSummary(null);
-            const formattedStart = format(summaryStartDate, 'yyyy-MM-dd');
-            const formattedEnd = format(summaryEndDate, 'yyyy-MM-dd');
-            const response = await budgetApi.getBudgetSummary(formattedStart, formattedEnd);
-            setSummaryData(response.summary || []);
-        } catch (err) {
-            console.error('Error fetching budget summary:', err);
-            setErrorSummary(err.message || 'Failed to fetch budget summary');
-        } finally {
-            setLoadingSummary(false);
-        }
-    }, [summaryStartDate, summaryEndDate]);
-
-    // Initial data fetch
-    useEffect(() => {
-        fetchBudgets();
-        fetchSummaryData();
-    }, [fetchBudgets, fetchSummaryData]);
-
-    // Form submission handler
-    const handleFormSubmit = async (budgetData) => {
-        try {
-            setFeedback({ type: '', message: '' });
-            if (editingBudget) {
-                await budgetApi.updateBudget(editingBudget._id, budgetData);
-                setFeedback({ type: 'success', message: 'Budget updated successfully!' });
-            } else {
-                await budgetApi.createBudget(budgetData);
-                setFeedback({ type: 'success', message: 'Budget created successfully!' });
-            }
-            setEditingBudget(null);
-            setShowForm(false);
-            fetchBudgets();
-            fetchSummaryData();
-        } catch (err) {
-            console.error('Error submitting budget:', err);
-            setFeedback({ 
-                type: 'error', 
-                message: err.message || 'Failed to save budget. Please check your input and try again.'
-            });
-        }
-    };
-
-    // Edit budget handler
-    const handleEdit = (budget) => {
-        setEditingBudget(budget);
-        setShowForm(true);
-        setFeedback({ type: '', message: '' });
-    };
-
-    // Delete budget handler
-    const handleDelete = async (id) => {
-        if (window.confirm('Are you sure you want to delete this budget?')) {
-            try {
-                setFeedback({ type: '', message: '' });
-                await budgetApi.deleteBudget(id);
-                setFeedback({ type: 'success', message: 'Budget deleted successfully!' });
-                fetchBudgets();
-                fetchSummaryData();
-            } catch (err) {
-                console.error('Error deleting budget:', err);
-                setFeedback({ type: 'error', message: err.message || 'Failed to delete budget.' });
-            }
-        }
-    };
-
-    // Cancel edit handler
-    const handleCancelEdit = () => {
-        setEditingBudget(null);
-        setShowForm(false);
-        setFeedback({ type: '', message: '' });
-    };
-
-    // Toggle form visibility
-    const handleToggleForm = () => {
-        if (showForm) {
-            handleCancelEdit();
-        } else {
-            setShowForm(true);
-        }
-    };
-
-    return (
-        <LocalizationProvider dateAdapter={AdapterDateFns}>
-            <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
-                <Typography variant="h4" gutterBottom component="div">
-                    Budget Allocation Management
-                </Typography>
-
-                {feedback.message && (
-                    <Alert severity={feedback.type} sx={{ mb: 2 }} onClose={() => setFeedback({ type: '', message: '' })}>
-                        {feedback.message}
-                    </Alert>
-                )}
-
-                {/* Budget Creation/Editing Form */} 
-                <Box sx={{ mb: 3 }}>
-                    <Button variant="contained" onClick={handleToggleForm} sx={{ mb: 1 }}>
-                        {showForm ? (editingBudget ? 'Cancel Edit' : 'Cancel New Budget') : 'Add New Budget'}
-                    </Button>
-                    <Collapse in={showForm}>
-                        <Paper sx={{ p: 3, mt: 1 }}>
-                            <BudgetForm 
-                                onSubmit={handleFormSubmit} 
-                                initialData={editingBudget} 
-                                onCancel={handleCancelEdit} 
-                            />
-                        </Paper>
-                    </Collapse>
-                </Box>
-
-                {/* Budget List */} 
-                <Paper sx={{ p: 3, mb: 3 }}>
-                    <Typography variant="h6" gutterBottom>Existing Budgets</Typography>
-                    {loading ? (
-                        <Box display="flex" justifyContent="center" p={3}>
-                            <CircularProgress />
-                        </Box>
-                    ) : error ? (
-                        <Alert severity="error">Error loading budgets: {error}</Alert>
-                    ) : budgets.length === 0 ? (
-                        <Alert severity="info">No budgets found. Create your first budget above.</Alert>
-                    ) : (
-                        <BudgetList 
-                            budgets={budgets}
-                            onEdit={handleEdit}
-                            onDelete={handleDelete}
-                        />
-                    )}
-                </Paper>
-
-                {/* Budget Summary */} 
-                <Paper sx={{ p: 3 }}>
-                    <Typography variant="h6" gutterBottom>Budget Summary</Typography>
-                    <Grid container spacing={3} columns={{ xs: 12, sm: 12, md: 12, lg: 12 }}>
-                      <Grid xs={12} sm={6} md={4}>
-                        <DatePicker
-                          label="Summary Start Date"
-                          value={summaryStartDate}
-                          onChange={(newValue) => setSummaryStartDate(newValue)}
-                          slotProps={{ textField: { fullWidth: true, margin: 'dense' } }}
-                        />
-                      </Grid>
-                      <Grid xs={12} sm={6} md={4}>
-                        <DatePicker
-                          label="Summary End Date"
-                          value={summaryEndDate}
-                          onChange={(newValue) => setSummaryEndDate(newValue)}
-                          minDate={summaryStartDate}
-                          slotProps={{ textField: { fullWidth: true, margin: 'dense' } }}
-                        />
-                      </Grid>
-                      <Grid xs={12} sm={12} md={4}>
-                        <Button 
-                          variant="outlined" 
-                          onClick={fetchSummaryData} 
-                          disabled={loadingSummary || !summaryStartDate || !summaryEndDate}
-                          fullWidth
-                        >
-                          {loadingSummary ? <CircularProgress size={24} /> : 'Refresh Summary'}
-                        </Button>
-                      </Grid>
-                    </Grid>
-                    
-                    {loadingSummary ? (
-                        <Box display="flex" justifyContent="center" p={3}>
-                            <CircularProgress />
-                        </Box>
-                    ) : errorSummary ? (
-                        <Alert severity="error">Error loading summary: {errorSummary}</Alert>
-                    ) : (
-                        <BudgetSummaryView summaryData={summaryData} />
-                    )}
-                </Paper>
-            </Container>
-        </LocalizationProvider>
-    );
-};
-
-export default BudgetAllocationPage;
diff --git a/frontend/src/pages/complaints/AllComplaintsPage.jsx b/frontend/src/pages/complaints/AllComplaintsPage.jsx
deleted file mode 100644
index 3b8c9eb..0000000
--- a/frontend/src/pages/complaints/AllComplaintsPage.jsx
+++ /dev/null
@@ -1,451 +0,0 @@
-import React, { useState, useEffect, useCallback } from 'react';
-import { useAuth } from '../../contexts/AuthContext';
-import '../../components/complaints/ComplaintComponents.css';
-
-/**
- * Page component for admins and staff to manage all complaints
- */
-const AllComplaintsPage = () => {
-  const { user } = useAuth();
-  const [complaints, setComplaints] = useState([]);
-  const [filteredComplaints, setFilteredComplaints] = useState([]);
-  const [selectedComplaint, setSelectedComplaint] = useState(null);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState('');
-  
-  // Filter states
-  const [statusFilter, setStatusFilter] = useState('all');
-  const [typeFilter, setTypeFilter] = useState('all');
-  const [searchTerm, setSearchTerm] = useState('');
-
-  // Response state
-  const [responseText, setResponseText] = useState('');
-  
-  // Simulated complaint data - replace with actual API calls in production
-  const fetchComplaints = useCallback(async () => {
-    setLoading(true);
-    try {
-      // Simulate API call with timeout
-      setTimeout(() => {
-        const mockComplaints = [
-          {
-            _id: '1',
-            user: {
-              _id: 'u1',
-              name: 'Alice Johnson',
-              email: 'alice@example.com'
-            },
-            subject: 'Missed Pickup',
-            type: 'Service',
-            description: 'My waste was not collected on the scheduled date (April 24, 2025)',
-            status: 'new',
-            createdAt: '2025-04-24T10:30:00',
-            responses: []
-          },
-          {
-            _id: '2',
-            user: {
-              _id: 'u2',
-              name: 'Bob Smith',
-              email: 'bob@example.com'
-            },
-            subject: 'Billing Issue',
-            type: 'Billing',
-            description: 'I was charged twice for my April subscription',
-            status: 'in-progress',
-            createdAt: '2025-04-22T14:15:00',
-            responses: [
-              {
-                _id: 'r1',
-                content: 'We are investigating this issue and will resolve it shortly.',
-                createdAt: '2025-04-23T09:20:00',
-                isStaff: true,
-                author: 'Support Staff'
-              }
-            ]
-          },
-          {
-            _id: '3',
-            user: {
-              _id: 'u3',
-              name: 'Carol Davis',
-              email: 'carol@example.com'
-            },
-            subject: 'App Not Working',
-            type: 'Technical',
-            description: 'The mobile app crashes whenever I try to schedule a pickup.',
-            status: 'new',
-            createdAt: '2025-04-23T16:45:00',
-            responses: []
-          },
-          {
-            _id: '4',
-            user: {
-              _id: 'u4',
-              name: 'David Wilson',
-              email: 'david@example.com'
-            },
-            subject: 'Suggestion for Service Improvement',
-            type: 'Feedback',
-            description: 'I think it would be helpful if we could get SMS notifications before pickups.',
-            status: 'resolved',
-            createdAt: '2025-04-20T11:20:00',
-            responses: [
-              {
-                _id: 'r2',
-                content: 'Thank you for your suggestion! We are considering adding this feature in our next update.',
-                createdAt: '2025-04-21T10:15:00',
-                isStaff: true,
-                author: 'Product Manager'
-              },
-              {
-                _id: 'r3',
-                content: 'Thanks for considering my suggestion!',
-                createdAt: '2025-04-21T14:30:00',
-                isStaff: false,
-                author: 'David Wilson'
-              }
-            ]
-          }
-        ];
-        
-        setComplaints(mockComplaints);
-        setFilteredComplaints(mockComplaints);
-        setLoading(false);
-        setError('');
-      }, 1000);
-    } catch (err) {
-      console.error('Error fetching complaints:', err);
-      setError('Failed to load complaints. Please try again later.');
-      setLoading(false);
-    }
-  }, []);
-
-  // Apply filters whenever the filter conditions change
-  useEffect(() => {
-    if (complaints.length === 0) return;
-    
-    let result = [...complaints];
-    
-    // Apply status filter
-    if (statusFilter !== 'all') {
-      result = result.filter(complaint => complaint.status === statusFilter);
-    }
-    
-    // Apply type filter
-    if (typeFilter !== 'all') {
-      result = result.filter(complaint => complaint.type === typeFilter);
-    }
-    
-    // Apply search term
-    if (searchTerm) {
-      const term = searchTerm.toLowerCase();
-      result = result.filter(complaint => 
-        complaint.subject.toLowerCase().includes(term) ||
-        complaint.description.toLowerCase().includes(term) ||
-        complaint.user.name.toLowerCase().includes(term) ||
-        complaint.user.email.toLowerCase().includes(term)
-      );
-    }
-    
-    setFilteredComplaints(result);
-  }, [complaints, statusFilter, typeFilter, searchTerm]);
-
-  // Load complaints on component mount
-  useEffect(() => {
-    fetchComplaints();
-  }, [fetchComplaints]);
-
-  // Handle complaint selection
-  const handleSelectComplaint = (complaint) => {
-    setSelectedComplaint(complaint);
-    setResponseText('');
-  };
-
-  // Handle back button in detail view
-  const handleBackToList = () => {
-    setSelectedComplaint(null);
-  };
-
-  // Handle adding response to a complaint
-  const handleAddResponse = (e) => {
-    e.preventDefault();
-    if (!responseText.trim() || !selectedComplaint) return;
-    
-    const updatedComplaints = complaints.map(complaint => {
-      if (complaint._id === selectedComplaint._id) {
-        const newResponse = {
-          _id: `resp-${Date.now()}`,
-          content: responseText,
-          createdAt: new Date().toISOString(),
-          isStaff: true,
-          author: user?.name || 'Staff Member'
-        };
-        
-        return {
-          ...complaint,
-          responses: [...complaint.responses, newResponse]
-        };
-      }
-      return complaint;
-    });
-    
-    setComplaints(updatedComplaints);
-    
-    // Update filteredComplaints as well
-    setFilteredComplaints(prev => 
-      prev.map(c => c._id === selectedComplaint._id ? 
-        updatedComplaints.find(uc => uc._id === selectedComplaint._id) : c
-      )
-    );
-    
-    // Update selectedComplaint to reflect changes
-    const updatedComplaint = updatedComplaints.find(c => c._id === selectedComplaint._id);
-    setSelectedComplaint(updatedComplaint);
-    
-    // Clear response text
-    setResponseText('');
-  };
-
-  // Handle updating complaint status
-  const handleUpdateStatus = (status) => {
-    if (!selectedComplaint) return;
-    
-    const updatedComplaints = complaints.map(complaint => {
-      if (complaint._id === selectedComplaint._id) {
-        return {
-          ...complaint,
-          status
-        };
-      }
-      return complaint;
-    });
-    
-    setComplaints(updatedComplaints);
-    
-    // Update filteredComplaints as well
-    setFilteredComplaints(prev => 
-      prev.map(c => c._id === selectedComplaint._id ? 
-        {...c, status} : c
-      )
-    );
-    
-    // Update selectedComplaint to reflect changes
-    setSelectedComplaint({
-      ...selectedComplaint,
-      status
-    });
-  };
-
-  // Format date for display
-  const formatDate = (dateString) => {
-    return new Date(dateString).toLocaleString();
-  };
-
-  return (
-    <div className="dashboard-content">
-      <h2>Complaint Management</h2>
-      
-      {error && <div className="form-error">{error}</div>}
-      
-      {selectedComplaint ? (
-        // Complaint detail view
-        <div className="complaint-detail">
-          <div className="complaint-detail-header">
-            <div>
-              <h3 className="complaint-detail-title">{selectedComplaint.subject}</h3>
-              <div className="complaint-detail-meta">
-                <div className="meta-item">
-                  <span className="meta-label">Status:</span>
-                  <span className={`complaint-status status-${selectedComplaint.status}`}>
-                    {selectedComplaint.status.replace('-', ' ')}
-                  </span>
-                </div>
-                <div className="meta-item">
-                  <span className="meta-label">Type:</span>
-                  <span>{selectedComplaint.type}</span>
-                </div>
-                <div className="meta-item">
-                  <span className="meta-label">Customer:</span>
-                  <span>{selectedComplaint.user.name} ({selectedComplaint.user.email})</span>
-                </div>
-                <div className="meta-item">
-                  <span className="meta-label">Submitted:</span>
-                  <span>{formatDate(selectedComplaint.createdAt)}</span>
-                </div>
-              </div>
-            </div>
-            
-            <button className="action-btn action-back" onClick={handleBackToList}>
-              Back to List
-            </button>
-          </div>
-          
-          <div>
-            <h4>Description</h4>
-            <div className="complaint-description">
-              {selectedComplaint.description}
-            </div>
-          </div>
-          
-          {/* Response section */}
-          <div className="responses-history">
-            <h4>Communication History</h4>
-            
-            {selectedComplaint.responses.length === 0 ? (
-              <p>No responses yet.</p>
-            ) : (
-              selectedComplaint.responses.map(response => (
-                <div key={response._id} className="response-item">
-                  <div className="response-header">
-                    <span className="response-author">
-                      {response.isStaff ? '👤 ' + response.author : '🧑 ' + response.author}
-                    </span>
-                    <span className="response-date">{formatDate(response.createdAt)}</span>
-                  </div>
-                  <div className="response-content">{response.content}</div>
-                </div>
-              ))
-            )}
-          </div>
-          
-          {/* Add new response form */}
-          {selectedComplaint.status !== 'closed' && (
-            <div className="response-section">
-              <h4>Add Response</h4>
-              <form onSubmit={handleAddResponse}>
-                <textarea 
-                  name="responseText" 
-                  placeholder="Type your response here..." 
-                  value={responseText}
-                  onChange={(e) => setResponseText(e.target.value)}
-                  required
-                ></textarea>
-                <button type="submit" className="action-btn action-update">
-                  Send Response
-                </button>
-              </form>
-            </div>
-          )}
-          
-          {/* Admin actions */}
-          <div className="admin-actions">
-            <button 
-              className="action-btn action-update"
-              onClick={() => handleUpdateStatus('in-progress')}
-              disabled={selectedComplaint.status === 'in-progress'}
-            >
-              Mark In Progress
-            </button>
-            <button 
-              className="action-btn action-resolve"
-              onClick={() => handleUpdateStatus('resolved')}
-              disabled={selectedComplaint.status === 'resolved'}
-            >
-              Mark Resolved
-            </button>
-            <button 
-              className="action-btn action-close"
-              onClick={() => handleUpdateStatus('closed')}
-              disabled={selectedComplaint.status === 'closed'}
-            >
-              Close Complaint
-            </button>
-          </div>
-        </div>
-      ) : loading ? (
-        // Loading state
-        <p>Loading complaints...</p>
-      ) : (
-        // Complaints list view
-        <>
-          {/* Filter controls */}
-          <div className="complaint-section">
-            <div className="filter-controls">
-              <div className="filter-group">
-                <input
-                  type="text"
-                  placeholder="Search complaints..."
-                  value={searchTerm}
-                  onChange={(e) => setSearchTerm(e.target.value)}
-                  className="search-input"
-                />
-              </div>
-              
-              <div className="filter-group">
-                <span className="filter-label">Status:</span>
-                <select 
-                  value={statusFilter} 
-                  onChange={(e) => setStatusFilter(e.target.value)}
-                  className="filter-select"
-                >
-                  <option value="all">All Statuses</option>
-                  <option value="new">New</option>
-                  <option value="in-progress">In Progress</option>
-                  <option value="resolved">Resolved</option>
-                  <option value="closed">Closed</option>
-                </select>
-              </div>
-              
-              <div className="filter-group">
-                <span className="filter-label">Type:</span>
-                <select 
-                  value={typeFilter} 
-                  onChange={(e) => setTypeFilter(e.target.value)}
-                  className="filter-select"
-                >
-                  <option value="all">All Types</option>
-                  <option value="Service">Service</option>
-                  <option value="Billing">Billing</option>
-                  <option value="Technical">Technical</option>
-                  <option value="Feedback">Feedback</option>
-                  <option value="Other">Other</option>
-                </select>
-              </div>
-            </div>
-            
-            {/* Complaints table */}
-            {filteredComplaints.length === 0 ? (
-              <p>No complaints found matching your filters.</p>
-            ) : (
-              <table className="payroll-table">
-                <thead>
-                  <tr>
-                    <th>Subject</th>
-                    <th>Customer</th>
-                    <th>Type</th>
-                    <th>Status</th>
-                    <th>Date</th>
-                    <th>Responses</th>
-                  </tr>
-                </thead>
-                <tbody>
-                  {filteredComplaints.map(complaint => (
-                    <tr 
-                      key={complaint._id} 
-                      onClick={() => handleSelectComplaint(complaint)}
-                      className="clickable"
-                    >
-                      <td>{complaint.subject}</td>
-                      <td>{complaint.user.name}</td>
-                      <td>{complaint.type}</td>
-                      <td>
-                        <span className={`complaint-status status-${complaint.status}`}>
-                          {complaint.status.replace('-', ' ')}
-                        </span>
-                      </td>
-                      <td>{new Date(complaint.createdAt).toLocaleDateString()}</td>
-                      <td>{complaint.responses.length}</td>
-                    </tr>
-                  ))}
-                </tbody>
-              </table>
-            )}
-          </div>
-        </>
-      )}
-    </div>
-  );
-};
-
-export default AllComplaintsPage;
\ No newline at end of file
diff --git a/frontend/src/pages/complaints/MyComplaintsPage.jsx b/frontend/src/pages/complaints/MyComplaintsPage.jsx
deleted file mode 100644
index d55e22d..0000000
--- a/frontend/src/pages/complaints/MyComplaintsPage.jsx
+++ /dev/null
@@ -1,336 +0,0 @@
-import React, { useState, useEffect, useCallback } from 'react';
-import { useAuth } from '../../contexts/AuthContext';
-import '../../components/complaints/ComplaintComponents.css';
-
-/**
- * Page component for customers to view and submit their complaints
- */
-const MyComplaintsPage = () => {
-  const { user } = useAuth();
-  const [complaints, setComplaints] = useState([]);
-  const [selectedComplaint, setSelectedComplaint] = useState(null);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState('');
-  
-  const [newComplaint, setNewComplaint] = useState({
-    subject: '',
-    type: 'Service',
-    description: ''
-  });
-  
-  // Simulated complaint data - replace with actual API calls in production
-  const fetchComplaints = useCallback(async () => {
-    if (!user?._id) return;
-    
-    setLoading(true);
-    try {
-      // Simulate API call with timeout
-      setTimeout(() => {
-        const mockComplaints = [
-          {
-            _id: '1',
-            subject: 'Missed Pickup',
-            type: 'Service',
-            description: 'My waste was not collected on the scheduled date (April 24, 2025)',
-            status: 'new',
-            createdAt: '2025-04-24T10:30:00',
-            responses: []
-          },
-          {
-            _id: '2',
-            subject: 'Billing Issue',
-            type: 'Billing',
-            description: 'I was charged twice for my April subscription',
-            status: 'in-progress',
-            createdAt: '2025-04-22T14:15:00',
-            responses: [
-              {
-                _id: 'r1',
-                content: 'We are investigating this issue and will resolve it shortly.',
-                createdAt: '2025-04-23T09:20:00',
-                isStaff: true,
-                author: 'Support Staff'
-              }
-            ]
-          }
-        ];
-        
-        setComplaints(mockComplaints);
-        setLoading(false);
-        setError('');
-      }, 1000);
-    } catch (err) {
-      console.error('Error fetching complaints:', err);
-      setError('Failed to load complaints. Please try again later.');
-      setLoading(false);
-    }
-  }, [user?._id]);
-
-  // Load complaints on component mount
-  useEffect(() => {
-    fetchComplaints();
-  }, [fetchComplaints]);
-
-  // Handle form input changes
-  const handleInputChange = (e) => {
-    const { name, value } = e.target;
-    setNewComplaint(prev => ({
-      ...prev,
-      [name]: value
-    }));
-  };
-
-  // Handle form submission
-  const handleSubmit = (e) => {
-    e.preventDefault();
-    
-    // Validate form
-    if (!newComplaint.subject.trim() || !newComplaint.description.trim()) {
-      setError('Please fill in all required fields.');
-      return;
-    }
-    
-    // Add the new complaint to the list (simulate server response)
-    const newComplaintObj = {
-      _id: `temp-${Date.now()}`,
-      ...newComplaint,
-      status: 'new',
-      createdAt: new Date().toISOString(),
-      responses: []
-    };
-    
-    setComplaints([newComplaintObj, ...complaints]);
-    
-    // Reset form
-    setNewComplaint({
-      subject: '',
-      type: 'Service',
-      description: ''
-    });
-    
-    // Show success message
-    alert('Complaint submitted successfully!');
-  };
-
-  // Handle complaint selection
-  const handleSelectComplaint = (complaint) => {
-    setSelectedComplaint(complaint);
-  };
-
-  // Handle back button in detail view
-  const handleBackToList = () => {
-    setSelectedComplaint(null);
-  };
-
-  // Handle adding response to a complaint
-  const handleAddResponse = (complaintId, responseText) => {
-    if (!responseText.trim()) return;
-    
-    const updatedComplaints = complaints.map(complaint => {
-      if (complaint._id === complaintId) {
-        const newResponse = {
-          _id: `resp-${Date.now()}`,
-          content: responseText,
-          createdAt: new Date().toISOString(),
-          isStaff: false,
-          author: user?.name || 'Customer'
-        };
-        
-        return {
-          ...complaint,
-          responses: [...complaint.responses, newResponse]
-        };
-      }
-      return complaint;
-    });
-    
-    setComplaints(updatedComplaints);
-    
-    // Update selectedComplaint as well to reflect changes
-    if (selectedComplaint && selectedComplaint._id === complaintId) {
-      const updatedComplaint = updatedComplaints.find(c => c._id === complaintId);
-      setSelectedComplaint(updatedComplaint);
-    }
-  };
-
-  // Format date for display
-  const formatDate = (dateString) => {
-    return new Date(dateString).toLocaleString();
-  };
-
-  return (
-    <div className="dashboard-content">
-      <h2>My Complaints</h2>
-      
-      {error && <div className="form-error">{error}</div>}
-      
-      {selectedComplaint ? (
-        // Complaint detail view
-        <div className="complaint-detail">
-          <div className="complaint-detail-header">
-            <div>
-              <h3 className="complaint-detail-title">{selectedComplaint.subject}</h3>
-              <div className="complaint-detail-meta">
-                <div className="meta-item">
-                  <span className="meta-label">Status:</span>
-                  <span className={`complaint-status status-${selectedComplaint.status}`}>
-                    {selectedComplaint.status.replace('-', ' ')}
-                  </span>
-                </div>
-                <div className="meta-item">
-                  <span className="meta-label">Type:</span>
-                  <span>{selectedComplaint.type}</span>
-                </div>
-                <div className="meta-item">
-                  <span className="meta-label">Submitted:</span>
-                  <span>{formatDate(selectedComplaint.createdAt)}</span>
-                </div>
-              </div>
-            </div>
-            
-            <button className="action-btn action-back" onClick={handleBackToList}>
-              Back to List
-            </button>
-          </div>
-          
-          <div>
-            <h4>Description</h4>
-            <div className="complaint-description">
-              {selectedComplaint.description}
-            </div>
-          </div>
-          
-          {/* Response section */}
-          <div className="responses-history">
-            <h4>Responses</h4>
-            
-            {selectedComplaint.responses.length === 0 ? (
-              <p>No responses yet.</p>
-            ) : (
-              selectedComplaint.responses.map(response => (
-                <div key={response._id} className="response-item">
-                  <div className="response-header">
-                    <span className="response-author">
-                      {response.isStaff ? '👤 ' + response.author : '🧑 You'}
-                    </span>
-                    <span className="response-date">{formatDate(response.createdAt)}</span>
-                  </div>
-                  <div className="response-content">{response.content}</div>
-                </div>
-              ))
-            )}
-          </div>
-          
-          {/* Add new response form */}
-          {selectedComplaint.status !== 'closed' && (
-            <div className="response-section">
-              <h4>Add Response</h4>
-              <form onSubmit={(e) => {
-                e.preventDefault();
-                const responseText = e.target.elements.responseText.value;
-                handleAddResponse(selectedComplaint._id, responseText);
-                e.target.elements.responseText.value = '';
-              }}>
-                <textarea 
-                  name="responseText" 
-                  placeholder="Type your response here..." 
-                  required
-                ></textarea>
-                <button type="submit" className="action-btn action-update">
-                  Submit Response
-                </button>
-              </form>
-            </div>
-          )}
-        </div>
-      ) : loading ? (
-        // Loading state
-        <p>Loading complaints...</p>
-      ) : (
-        // Complaints list view
-        <>
-          {/* New complaint form */}
-          <div className="complaint-section">
-            <h3>Submit a New Complaint</h3>
-            <form className="complaint-form" onSubmit={handleSubmit}>
-              <div className="form-row">
-                <label htmlFor="subject">Subject *</label>
-                <input
-                  type="text"
-                  id="subject"
-                  name="subject"
-                  value={newComplaint.subject}
-                  onChange={handleInputChange}
-                  required
-                />
-              </div>
-              
-              <div className="form-row">
-                <label htmlFor="type">Type</label>
-                <select
-                  id="type"
-                  name="type"
-                  value={newComplaint.type}
-                  onChange={handleInputChange}
-                >
-                  <option value="Service">Service Issue</option>
-                  <option value="Billing">Billing Issue</option>
-                  <option value="Technical">Technical Problem</option>
-                  <option value="Feedback">General Feedback</option>
-                  <option value="Other">Other</option>
-                </select>
-              </div>
-              
-              <div className="form-row">
-                <label htmlFor="description">Description *</label>
-                <textarea
-                  id="description"
-                  name="description"
-                  value={newComplaint.description}
-                  onChange={handleInputChange}
-                  required
-                />
-              </div>
-              
-              <button type="submit" className="submit-button">
-                Submit Complaint
-              </button>
-            </form>
-          </div>
-          
-          {/* Complaints list */}
-          <div className="complaint-section">
-            <h3>My Previous Complaints</h3>
-            
-            {complaints.length === 0 ? (
-              <p>You haven't submitted any complaints yet.</p>
-            ) : (
-              <ul className="complaints-list">
-                {complaints.map(complaint => (
-                  <li 
-                    key={complaint._id} 
-                    className={`complaint-item ${complaint.status}`}
-                    onClick={() => handleSelectComplaint(complaint)}
-                  >
-                    <div className="complaint-header">
-                      <h4 className="complaint-title">{complaint.subject}</h4>
-                      <span className={`complaint-status status-${complaint.status}`}>
-                        {complaint.status.replace('-', ' ')}
-                      </span>
-                    </div>
-                    <div className="complaint-meta">
-                      <span>{complaint.type}</span>
-                      <span>{formatDate(complaint.createdAt)}</span>
-                    </div>
-                  </li>
-                ))}
-              </ul>
-            )}
-          </div>
-        </>
-      )}
-    </div>
-  );
-};
-
-export default MyComplaintsPage;
\ No newline at end of file
diff --git a/frontend/src/pages/dashboard/DashboardHome.css b/frontend/src/pages/dashboard/DashboardHome.css
deleted file mode 100644
index bb5c9db..0000000
--- a/frontend/src/pages/dashboard/DashboardHome.css
+++ /dev/null
@@ -1,85 +0,0 @@
-.dashboard-content h2 {
-  margin-bottom: 20px;
-  color: #333;
-}
-
-.dashboard-cards {
-  display: grid;
-  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
-  gap: 20px;
-  margin-bottom: 30px;
-}
-
-.dashboard-card {
-  background-color: white;
-  border-radius: 8px;
-  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
-  padding: 20px;
-  transition: transform 0.2s ease, box-shadow 0.2s ease;
-}
-
-.dashboard-card:hover {
-  transform: translateY(-5px);
-  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
-}
-
-.dashboard-card h3 {
-  margin-top: 0;
-  margin-bottom: 15px;
-  font-size: 1.2rem;
-  color: #3a3a3a;
-  border-bottom: 1px solid #f0f0f0;
-  padding-bottom: 10px;
-}
-
-.dashboard-card p {
-  margin: 8px 0;
-}
-
-.dashboard-card strong {
-  font-weight: 600;
-  color: #555;
-}
-
-.dashboard-card .btn {
-  margin-top: 15px;
-  width: 100%;
-}
-
-.error-message {
-  color: #dc3545;
-  background-color: #f8d7da;
-  border: 1px solid #f5c6cb;
-  border-radius: 4px;
-  padding: 10px;
-  margin-bottom: 20px;
-}
-
-.status {
-  display: inline-block;
-  padding: 3px 8px;
-  border-radius: 12px;
-  font-size: 0.85rem;
-  font-weight: 500;
-}
-
-.status.checked-in {
-  background-color: #d4edda;
-  color: #155724;
-}
-
-.status.checked-out {
-  background-color: #f8d7da;
-  color: #721c24;
-}
-
-.status.good {
-  background-color: #d4edda;
-  color: #155724;
-}
-
-@media (max-width: 768px) {
-  .dashboard-cards {
-    grid-template-columns: 1fr;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/pages/dashboard/DashboardHome.jsx b/frontend/src/pages/dashboard/DashboardHome.jsx
deleted file mode 100644
index 27b3c00..0000000
--- a/frontend/src/pages/dashboard/DashboardHome.jsx
+++ /dev/null
@@ -1,201 +0,0 @@
-import React, { useState, useEffect } from 'react';
-import { useNavigate } from 'react-router-dom'; // Import useNavigate
-import { useAuth } from '../../contexts/AuthContext';
-import FinancialDashboard from '../../components/financial/FinancialDashboard';
-import FinancialManagerDashboard from '../../components/financial/manager/FinancialManagerDashboard';
-import './DashboardHome.css';
-
-// Placeholder service calls for summary data
-// In a real implementation, these would call actual API endpoints
-const fetchCustomerDashboardData = async () => {
-  // Simulated API call response
-  return {
-    openComplaints: 2,
-    nextPickupDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toLocaleDateString(),
-    subscriptionStatus: 'Active',
-    subscriptionPlan: 'Premium',
-    accountBalance: '$120.00',
-    totalCollections: 24,
-    upcomingPayment: {
-      amount: '$49.99',
-      dueDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000).toLocaleDateString()
-    }
-  };
-};
-
-const fetchStaffDashboardData = async () => {
-  return {
-    attendanceStatus: 'Checked In',
-    assignedTasks: 5,
-    completedTasks: 3,
-    performanceRating: 4.7,
-    upcomingPayday: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000).toLocaleDateString(),
-    lastPayAmount: '$1,200.00'
-  };
-};
-
-const fetchAdminDashboardData = async () => {
-  return {
-    totalUsers: 450,
-    activeSubscriptions: 320,
-    openComplaints: 8,
-    pendingPayrolls: 12,
-    systemHealth: 'Good',
-    recentSignups: 15,
-    monthlyRevenue: '$24,500'
-  };
-};
-
-const DashboardHome = ({ user }) => {
-  const [dashboardData, setDashboardData] = useState(null);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState('');
-  const { role } = useAuth()?.user || user || {};
-  const navigate = useNavigate(); // Initialize useNavigate
-  
-  useEffect(() => {
-    const fetchDashboardData = async () => {
-      setLoading(true);
-      setError('');
-      try {
-        let data;
-        switch(role) {
-          case 'customer':
-            data = await fetchCustomerDashboardData();
-            break;
-          case 'staff':
-            data = await fetchStaffDashboardData();
-            break;
-          case 'admin':
-            data = await fetchAdminDashboardData();
-            break;
-          case 'financial_manager':
-            // Financial managers see their dedicated dashboard
-            // No need to fetch data here
-            setLoading(false);
-            return;
-          default:
-            throw new Error('Unknown user role');
-        }
-        setDashboardData(data);
-      } catch (err) {
-        console.error('Error fetching dashboard data:', err);
-        setError('Failed to load dashboard information. Please try again later.');
-      } finally {
-        setLoading(false);
-      }
-    };
-
-    if (role) {
-      fetchDashboardData();
-    }
-  }, [role]);
-
-  if (!user || !role) {
-    return <div className="dashboard-content"><p>Please log in to view your dashboard.</p></div>;
-  }
-
-  if (role === 'financial_manager') {
-    return (
-      <div className="dashboard-content">
-        <FinancialManagerDashboard />
-      </div>
-    );
-  }
-
-  if (loading) {
-    return <div className="dashboard-content"><p>Loading dashboard data...</p></div>;
-  }
-
-  if (error) {
-    return <div className="dashboard-content"><p className="error-message">{error}</p></div>;
-  }
-
-  const renderCustomerDashboard = () => (
-    <>
-      <h2>Customer Dashboard</h2>
-      <div className="dashboard-cards">
-        <div className="dashboard-card">
-          <h3>Subscription</h3>
-          <p><strong>Status:</strong> {dashboardData.subscriptionStatus}</p>
-          <p><strong>Plan:</strong> {dashboardData.subscriptionPlan}</p>
-          <p><strong>Balance:</strong> {dashboardData.accountBalance}</p>
-        </div>
-        <div className="dashboard-card">
-          <h3>Services</h3>
-          <p><strong>Next Pickup:</strong> {dashboardData.nextPickupDate}</p>
-          <p><strong>Total Collections:</strong> {dashboardData.totalCollections}</p>
-        </div>
-        <div className="dashboard-card">
-          <h3>Support</h3>
-          <p><strong>Open Complaints:</strong> {dashboardData.openComplaints}</p>
-          <button className="btn secondary">Submit a Complaint</button>
-        </div>
-        <div className="dashboard-card">
-          <h3>Next Payment</h3>
-          <p><strong>Amount:</strong> {dashboardData.upcomingPayment.amount}</p>
-          <p><strong>Due Date:</strong> {dashboardData.upcomingPayment.dueDate}</p>
-        </div>
-      </div>
-    </>
-  );
-
-  const renderStaffDashboard = () => (
-    <>
-      <h2>Staff Dashboard</h2>
-      <div className="dashboard-cards">
-        <div className="dashboard-card">
-          <h3>Attendance</h3>
-          <p><strong>Status:</strong> <span className="status checked-in">{dashboardData.attendanceStatus}</span></p>
-          <button className="btn secondary">Clock Out</button>
-        </div>
-        <div className="dashboard-card">
-          <h3>Tasks</h3>
-          <p><strong>Assigned:</strong> {dashboardData.assignedTasks}</p>
-          <p><strong>Completed:</strong> {dashboardData.completedTasks}</p>
-          <button className="btn secondary">View Tasks</button>
-        </div>
-        <div className="dashboard-card">
-          <h3>Performance</h3>
-          <p><strong>Rating:</strong> {dashboardData.performanceRating}/5.0</p>
-          <button className="btn secondary">View Details</button>
-        </div>
-        <div className="dashboard-card">
-          <h3>Payroll</h3>
-          <p><strong>Next Payday:</strong> {dashboardData.upcomingPayday}</p>
-          <p><strong>Last Pay:</strong> {dashboardData.lastPayAmount}</p>
-          <button className="btn secondary">View Payslips</button>
-        </div>
-      </div>
-    </>
-  );
-
-  const renderAdminDashboard = () => (
-    <>
-      <h2>Admin Dashboard</h2>
-      <div className="dashboard-cards">
-        <div className="dashboard-card">
-          <h3>Users</h3>
-          <p><strong>Total Users:</strong> {dashboardData.totalUsers}</p>
-          <p><strong>Active Subscriptions:</strong> {dashboardData.activeSubscriptions}</p>
-          <p><strong>Recent Signups:</strong> {dashboardData.recentSignups} in the last 30 days</p>
-        </div>
-        <div className="dashboard-card">
-          <h3>Support</h3>
-          <p><strong>Open Complaints:</strong> {dashboardData.openComplaints}</p>
-          <button className="btn secondary">Manage Complaints</button>
-        </div>
-      </div>
-    </>
-  );
-
-  return (
-    <div className="dashboard-content">
-      {role === 'customer' && renderCustomerDashboard()}
-      {role === 'staff' && renderStaffDashboard()}
-      {role === 'admin' && renderAdminDashboard()}
-    </div>
-  );
-};
-
-export default DashboardHome;
\ No newline at end of file
diff --git a/frontend/src/pages/documents/UserDocumentsPage.jsx b/frontend/src/pages/documents/UserDocumentsPage.jsx
deleted file mode 100644
index 1059d7d..0000000
--- a/frontend/src/pages/documents/UserDocumentsPage.jsx
+++ /dev/null
@@ -1,99 +0,0 @@
-import React, { useState, useEffect, useCallback } from 'react';
-import { useAuth } from '../../contexts/AuthContext';
-import DocumentUploadForm from '../../components/profile/DocumentUploadForm';
-import profileApi from '../../services/profileApi';
-
-/**
- * Page component for users to view, upload, and manage their documents
- */
-const UserDocumentsPage = () => {
-  const { user } = useAuth();
-  const [documents, setDocuments] = useState([]);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState('');
-  const [success, setSuccess] = useState('');
-
-  // Function to fetch user documents
-  const fetchDocuments = useCallback(async () => {
-    if (!user?._id) return;
-    
-    setLoading(true);
-    try {
-      const response = await profileApi.getProfile();
-      setDocuments(response.data.documents || []);
-      setError('');
-    } catch (err) {
-      console.error('Error fetching documents:', err);
-      setError('Failed to load documents. Please try again later.');
-    } finally {
-      setLoading(false);
-    }
-  }, [user?._id]);
-
-  // Load documents on component mount
-  useEffect(() => {
-    fetchDocuments();
-  }, [fetchDocuments]);
-
-  // Handle document upload
-  const handleDocumentUpload = async (formData) => {
-    try {
-      setLoading(true);
-      await profileApi.uploadDocument(formData);
-      await fetchDocuments(); 
-      setSuccess('Document uploaded successfully');
-      setTimeout(() => setSuccess(''), 3000);
-      return { success: true, message: 'Document uploaded successfully' };
-    } catch (err) {
-      console.error('Error uploading document:', err);
-      return { 
-        success: false, 
-        message: err.response?.data?.message || 'Failed to upload document' 
-      };
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  // Handle document deletion
-  const handleDocumentDelete = async (docId) => {
-    try {
-      setLoading(true);
-      await profileApi.deleteDocument(docId);
-      await fetchDocuments();
-      setSuccess('Document deleted successfully');
-      setTimeout(() => setSuccess(''), 3000);
-      return { success: true, message: 'Document deleted successfully' };
-    } catch (err) {
-      console.error('Error deleting document:', err);
-      return { 
-        success: false, 
-        message: err.response?.data?.message || 'Failed to delete document' 
-      };
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  return (
-    <div className="dashboard-content">
-      <h2>My Documents</h2>
-      
-      {error && <div className="form-error">{error}</div>}
-      {success && <div className="form-success">{success}</div>}
-      
-      {loading && documents.length === 0 ? (
-        <p>Loading documents...</p>
-      ) : (
-        <DocumentUploadForm
-          documents={documents}
-          onUpload={handleDocumentUpload}
-          onDelete={handleDocumentDelete}
-          loading={loading}
-        />
-      )}
-    </div>
-  );
-};
-
-export default UserDocumentsPage;
\ No newline at end of file
diff --git a/frontend/src/pages/experimental/AceternityExperimentPage.css b/frontend/src/pages/experimental/AceternityExperimentPage.css
deleted file mode 100644
index 50aa826..0000000
--- a/frontend/src/pages/experimental/AceternityExperimentPage.css
+++ /dev/null
@@ -1,441 +0,0 @@
-/* frontend/src/pages/experimental/AceternityExperimentPage.css */
-
-/* Base Aceternity colors and variables */
-:root {
-  /* Default light mode theme */
-  --aceternity-bg: #ffffff;
-  --aceternity-text: #0f172a;
-  --aceternity-primary: #3b82f6;
-  --aceternity-primary-foreground: #ffffff;
-  --aceternity-secondary: #f1f5f9;
-  --aceternity-secondary-foreground: #0f172a;
-  --aceternity-muted: #f1f5f9;
-  --aceternity-muted-foreground: #64748b;
-  --aceternity-border: #e2e8f0;
-  --aceternity-radius: 0.5rem;
-  --aceternity-glow: rgba(59, 130, 246, 0.5);
-}
-
-/* Dark mode overrides - will apply if user has dark mode preference */
-@media (prefers-color-scheme: dark) {
-  :root {
-    --aceternity-bg: #0c0a09;
-    --aceternity-text: #fafafa;
-    --aceternity-primary: #3b82f6;
-    --aceternity-primary-foreground: #ffffff;
-    --aceternity-secondary: #1e293b;
-    --aceternity-secondary-foreground: #e2e8f0;
-    --aceternity-muted: #1e293b;
-    --aceternity-muted-foreground: #94a3b8;
-    --aceternity-border: #334155;
-  }
-}
-
-/* Card styling with glassmorphism */
-.aceternity-card {
-  background-color: var(--aceternity-bg);
-  border-radius: var(--aceternity-radius);
-  border: 1px solid var(--aceternity-border);
-  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
-  overflow: hidden;
-  height: 100%;
-  position: relative;
-}
-
-.aceternity-card::before {
-  content: '';
-  position: absolute;
-  inset: 0;
-  background: radial-gradient(
-    800px circle at var(--mouse-x, 0) var(--mouse-y, 0),
-    rgba(59, 130, 246, 0.15),
-    transparent 40%
-  );
-  opacity: 0;
-  transition: opacity 0.5s;
-}
-
-.aceternity-card:hover::before {
-  opacity: 1;
-}
-
-.aceternity-card-content {
-  padding: 24px;
-  position: relative;
-  z-index: 1;
-}
-
-/* Typography */
-.aceternity-heading {
-  color: var(--aceternity-text);
-  font-size: 1.5rem;
-  font-weight: 700;
-  margin-bottom: 1.5rem;
-  position: relative;
-  display: inline-block;
-}
-
-.aceternity-heading::after {
-  content: '';
-  position: absolute;
-  bottom: -8px;
-  left: 0;
-  width: 40%;
-  height: 3px;
-  background: linear-gradient(90deg, var(--aceternity-primary), transparent);
-  border-radius: 3px;
-}
-
-.aceternity-subtitle {
-  color: var(--aceternity-text);
-  font-size: 1rem;
-  font-weight: 600;
-  margin-bottom: 0.75rem;
-}
-
-/* Layout sections */
-.aceternity-section {
-  margin-bottom: 1.75rem;
-}
-
-/* Button styling with effects */
-.aceternity-button-group {
-  display: flex;
-  gap: 0.75rem;
-  margin-bottom: 0.75rem;
-  flex-wrap: wrap;
-}
-
-.aceternity-button {
-  display: inline-flex;
-  align-items: center;
-  justify-content: center;
-  border-radius: var(--aceternity-radius);
-  font-size: 0.875rem;
-  font-weight: 500;
-  height: 2.5rem;
-  padding: 0 1rem;
-  cursor: pointer;
-  transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);
-  position: relative;
-  overflow: hidden;
-}
-
-.aceternity-button-text {
-  position: relative;
-  z-index: 1;
-}
-
-.aceternity-button-primary {
-  background-color: var(--aceternity-primary);
-  color: var(--aceternity-primary-foreground);
-  border: none;
-  box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);
-  transition: box-shadow 0.3s ease;
-}
-
-.aceternity-button-primary:hover {
-  box-shadow: 0 0 20px 0 rgba(59, 130, 246, 0.4);
-  transform: translateY(-2px);
-}
-
-.aceternity-button-shine {
-  position: absolute;
-  top: -50%;
-  left: -50%;
-  right: -50%;
-  bottom: -50%;
-  background: linear-gradient(
-    90deg,
-    transparent,
-    rgba(255, 255, 255, 0.2),
-    transparent
-  );
-  transform: rotate(45deg) translateX(-100%);
-  transition: transform 550ms;
-}
-
-.aceternity-button-primary:hover .aceternity-button-shine {
-  transform: rotate(45deg) translateX(100%);
-}
-
-.aceternity-button-outline {
-  background-color: transparent;
-  border: 1px solid var(--aceternity-border);
-  color: var(--aceternity-text);
-}
-
-.aceternity-button-outline:hover {
-  background-color: var(--aceternity-secondary);
-  color: var(--aceternity-secondary-foreground);
-  border-color: transparent;
-  transform: translateY(-2px);
-}
-
-.aceternity-button-ghost {
-  background-color: transparent;
-  border: none;
-  color: var(--aceternity-text);
-}
-
-.aceternity-button-ghost:hover {
-  background-color: var(--aceternity-secondary);
-  transform: translateY(-2px);
-}
-
-.aceternity-button-secondary {
-  background-color: var(--aceternity-secondary);
-  color: var(--aceternity-secondary-foreground);
-  border: none;
-}
-
-.aceternity-button-secondary:hover {
-  background-color: rgba(203, 213, 225, 0.8);
-  transform: translateY(-2px);
-}
-
-/* Form elements */
-.aceternity-form-item {
-  display: flex;
-  flex-direction: column;
-  gap: 0.5rem;
-  margin-bottom: 1rem;
-}
-
-.aceternity-label {
-  font-size: 0.875rem;
-  font-weight: 500;
-  color: var(--aceternity-text);
-}
-
-.aceternity-input-wrapper {
-  position: relative;
-}
-
-.aceternity-input {
-  height: 2.5rem;
-  border-radius: var(--aceternity-radius);
-  border: 1px solid var(--aceternity-border);
-  background-color: rgba(255, 255, 255, 0.8);
-  padding: 0 0.75rem;
-  font-size: 0.875rem;
-  color: var(--aceternity-text);
-  transition: all 200ms ease;
-  width: 100%;
-  position: relative;
-  z-index: 1;
-}
-
-.aceternity-input:focus {
-  outline: none;
-  border-color: var(--aceternity-primary);
-}
-
-.aceternity-input::placeholder {
-  color: var(--aceternity-muted-foreground);
-}
-
-.aceternity-input-glow {
-  position: absolute;
-  top: 0;
-  left: 0;
-  right: 0;
-  bottom: 0;
-  background: var(--aceternity-primary);
-  border-radius: var(--aceternity-radius);
-  z-index: 0;
-  opacity: 0;
-  filter: blur(16px);
-  transform: scale(0.85);
-  transition: all 300ms ease;
-  pointer-events: none;
-}
-
-.aceternity-input:focus + .aceternity-input-glow {
-  opacity: 0.15;
-  transform: scale(0.95);
-}
-
-/* Switch component */
-.aceternity-switch-container {
-  display: flex;
-  align-items: center;
-  gap: 0.75rem;
-}
-
-.aceternity-switch {
-  position: relative;
-  display: inline-block;
-  width: 48px;
-  height: 24px;
-}
-
-.aceternity-switch input {
-  opacity: 0;
-  width: 0;
-  height: 0;
-}
-
-.aceternity-switch-slider {
-  position: absolute;
-  cursor: pointer;
-  top: 0;
-  left: 0;
-  right: 0;
-  bottom: 0;
-  background-color: var(--aceternity-muted);
-  transition: .3s;
-  border-radius: 24px;
-}
-
-.aceternity-switch-slider:before {
-  position: absolute;
-  content: "";
-  height: 18px;
-  width: 18px;
-  left: 3px;
-  bottom: 3px;
-  background-color: white;
-  transition: .3s cubic-bezier(0.34, 1.56, 0.64, 1);
-  border-radius: 50%;
-}
-
-.aceternity-switch input:checked + .aceternity-switch-slider {
-  background-color: var(--aceternity-primary);
-}
-
-.aceternity-switch input:checked + .aceternity-switch-slider:before {
-  transform: translateX(24px);
-}
-
-.aceternity-switch-glow {
-  position: absolute;
-  top: 0;
-  left: 0;
-  right: 0;
-  bottom: 0;
-  border-radius: 24px;
-  z-index: -1;
-  opacity: 0;
-  transition: opacity 0.3s ease;
-}
-
-.aceternity-switch input:checked ~ .aceternity-switch-glow {
-  background: var(--aceternity-primary);
-  filter: blur(8px);
-  opacity: 0.35;
-}
-
-.aceternity-switch-label {
-  font-size: 0.875rem;
-  color: var(--aceternity-text);
-}
-
-/* Spotlight Cards */
-.aceternity-spotlight-container {
-  display: grid;
-  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
-  gap: 0.75rem;
-  margin-bottom: 1rem;
-}
-
-.aceternity-spotlight-card {
-  position: relative;
-  overflow: hidden;
-  background: var(--aceternity-secondary);
-  border: 1px solid var(--aceternity-border);
-  border-radius: var(--aceternity-radius);
-  height: 120px;
-  cursor: pointer;
-}
-
-.aceternity-spotlight-card::before {
-  content: '';
-  position: absolute;
-  inset: 0;
-  background: radial-gradient(
-    circle at var(--mouse-x, 0) var(--mouse-y, 0),
-    rgba(59, 130, 246, 0.4) 0%,
-    transparent 45%
-  );
-  opacity: 0;
-  transition: opacity 0.25s;
-}
-
-.aceternity-spotlight-card:hover::before {
-  opacity: 1;
-}
-
-.aceternity-spotlight-card-content {
-  position: relative;
-  z-index: 1;
-  padding: 1rem;
-}
-
-.aceternity-spotlight-card-content h4 {
-  margin: 0 0 0.5rem 0;
-  font-size: 1rem;
-  font-weight: 600;
-  color: var(--aceternity-text);
-}
-
-.aceternity-spotlight-card-content p {
-  margin: 0;
-  font-size: 0.875rem;
-  color: var(--aceternity-muted-foreground);
-}
-
-/* Animation Effects */
-.aceternity-effect-pulse {
-  animation: pulse 2s infinite;
-}
-
-@keyframes pulse {
-  0% {
-    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.4);
-  }
-  70% {
-    box-shadow: 0 0 0 10px rgba(59, 130, 246, 0);
-  }
-  100% {
-    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);
-  }
-}
-
-.aceternity-effect-ripple {
-  position: relative;
-  overflow: hidden;
-}
-
-.aceternity-effect-ripple::after {
-  content: '';
-  position: absolute;
-  top: 50%;
-  left: 50%;
-  width: 5px;
-  height: 5px;
-  background: rgba(255, 255, 255, 0.5);
-  opacity: 0;
-  border-radius: 100%;
-  transform: scale(1, 1) translate(-50%, -50%);
-  transform-origin: 50% 50%;
-}
-
-.aceternity-effect-ripple:focus:not(:active)::after {
-  animation: ripple 0.6s ease-out;
-}
-
-@keyframes ripple {
-  0% {
-    transform: scale(0, 0);
-    opacity: 0.5;
-  }
-  20% {
-    transform: scale(25, 25);
-    opacity: 0.5;
-  }
-  100% {
-    opacity: 0;
-    transform: scale(40, 40);
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/pages/experimental/AceternityExperimentPage.jsx b/frontend/src/pages/experimental/AceternityExperimentPage.jsx
deleted file mode 100644
index 0c57b2f..0000000
--- a/frontend/src/pages/experimental/AceternityExperimentPage.jsx
+++ /dev/null
@@ -1,269 +0,0 @@
-// frontend/src/pages/experimental/AceternityExperimentPage.jsx
-import React, { useState } from 'react';
-import { 
-  Box, 
-  Button as MuiButton, 
-  TextField, 
-  Card, 
-  CardContent, 
-  Typography, 
-  Switch,
-  Snackbar,
-  Alert,
-  Paper,
-  Container
-} from '@mui/material';
-
-// CSS for Aceternity-like styling
-import './AceternityExperimentPage.css';
-
-/**
- * This is an experimental page for testing Aceternity UI components
- * alongside our existing Material UI components
- */
-const AceternityExperimentPage = () => {
-  const [count, setCount] = useState(0);
-  const [inputValue, setInputValue] = useState('');
-  const [switchValue, setSwitchValue] = useState(false);
-  const [snackbarOpen, setSnackbarOpen] = useState(false);
-  const [hoveredCard, setHoveredCard] = useState(null);
-
-  const handleIncrement = () => {
-    setCount(count + 1);
-  };
-
-  const handleShowSnackbar = () => {
-    setSnackbarOpen(true);
-  };
-
-  const handleCloseSnackbar = () => {
-    setSnackbarOpen(false);
-  };
-
-  const handleMouseMove = (e, cardId) => {
-    if (hoveredCard === cardId) {
-      const card = e.currentTarget;
-      const rect = card.getBoundingClientRect();
-      const x = e.clientX - rect.left;
-      const y = e.clientY - rect.top;
-      
-      card.style.setProperty('--mouse-x', `${x}px`);
-      card.style.setProperty('--mouse-y', `${y}px`);
-    }
-  };
-
-  return (
-    <Container maxWidth="xl" sx={{ py: 4 }}>
-      <Paper sx={{ p: 3, mb: 4 }}>
-        <Typography variant="h4" gutterBottom>
-          Aceternity UI Experiment Page
-        </Typography>
-        <Typography variant="body1" paragraph>
-          This page demonstrates how Aceternity UI components would look alongside our existing Material UI components.
-          Aceternity UI offers modern, animated components to enhance user experience with motion and interactivity.
-        </Typography>
-      </Paper>
-
-      <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 4, mb: 6 }}>
-        {/* Material UI Components */}
-        <Card variant="outlined" sx={{ height: '100%' }}>
-          <CardContent>
-            <Typography variant="h5" color="primary" gutterBottom>
-              Material UI Components (Current)
-            </Typography>
-            
-            <Box sx={{ mb: 3 }}>
-              <Typography variant="subtitle1" gutterBottom>Buttons</Typography>
-              <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
-                <MuiButton variant="contained" color="primary">Primary</MuiButton>
-                <MuiButton variant="outlined" color="primary">Secondary</MuiButton>
-                <MuiButton variant="text">Text</MuiButton>
-              </Box>
-            </Box>
-            
-            <Box sx={{ mb: 3 }}>
-              <Typography variant="subtitle1" gutterBottom>Input</Typography>
-              <TextField 
-                label="Material UI Input" 
-                variant="outlined" 
-                fullWidth 
-                value={inputValue}
-                onChange={(e) => setInputValue(e.target.value)}
-                sx={{ mb: 2 }}
-              />
-            </Box>
-            
-            <Box sx={{ mb: 3 }}>
-              <Typography variant="subtitle1" gutterBottom>Counter</Typography>
-              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
-                <MuiButton variant="contained" onClick={handleIncrement}>
-                  Count: {count}
-                </MuiButton>
-              </Box>
-            </Box>
-            
-            <Box sx={{ mb: 3 }}>
-              <Typography variant="subtitle1" gutterBottom>Switch</Typography>
-              <Switch 
-                checked={switchValue} 
-                onChange={() => setSwitchValue(!switchValue)} 
-              />
-              <Typography variant="body2" component="span" sx={{ ml: 1 }}>
-                {switchValue ? 'On' : 'Off'}
-              </Typography>
-            </Box>
-            
-            <Box sx={{ mb: 3 }}>
-              <Typography variant="subtitle1" gutterBottom>Notification</Typography>
-              <MuiButton variant="contained" color="secondary" onClick={handleShowSnackbar}>
-                Show Notification
-              </MuiButton>
-            </Box>
-          </CardContent>
-        </Card>
-
-        {/* Aceternity UI Styled Components */}
-        <div className="aceternity-card">
-          <div className="aceternity-card-content">
-            <h2 className="aceternity-heading">Aceternity UI Styled Components</h2>
-            
-            {/* Buttons with shine effect */}
-            <div className="aceternity-section">
-              <h3 className="aceternity-subtitle">Animated Buttons</h3>
-              <div className="aceternity-button-group">
-                <button className="aceternity-button aceternity-button-primary">
-                  <span className="aceternity-button-text">Primary</span>
-                  <span className="aceternity-button-shine"></span>
-                </button>
-                <button className="aceternity-button aceternity-button-outline">
-                  <span className="aceternity-button-text">Secondary</span>
-                </button>
-                <button className="aceternity-button aceternity-button-ghost">
-                  <span className="aceternity-button-text">Ghost</span>
-                </button>
-              </div>
-            </div>
-            
-            {/* Glowing input */}
-            <div className="aceternity-section">
-              <h3 className="aceternity-subtitle">Glowing Input</h3>
-              <div className="aceternity-form-item">
-                <label className="aceternity-label">Aceternity UI Input</label>
-                <div className="aceternity-input-wrapper">
-                  <input 
-                    type="text" 
-                    className="aceternity-input" 
-                    placeholder="Type here..." 
-                    value={inputValue}
-                    onChange={(e) => setInputValue(e.target.value)}
-                  />
-                  <div className="aceternity-input-glow"></div>
-                </div>
-              </div>
-            </div>
-            
-            {/* Animated counter */}
-            <div className="aceternity-section">
-              <h3 className="aceternity-subtitle">Animated Counter</h3>
-              <button className="aceternity-button aceternity-button-primary aceternity-effect-pulse" onClick={handleIncrement}>
-                <span className="aceternity-button-text">Count: {count}</span>
-              </button>
-            </div>
-            
-            {/* Animated toggle switch */}
-            <div className="aceternity-section">
-              <h3 className="aceternity-subtitle">Animated Switch</h3>
-              <div className="aceternity-switch-container">
-                <label className="aceternity-switch">
-                  <input 
-                    type="checkbox" 
-                    checked={switchValue} 
-                    onChange={() => setSwitchValue(!switchValue)} 
-                  />
-                  <span className="aceternity-switch-slider"></span>
-                  <span className="aceternity-switch-glow"></span>
-                </label>
-                <span className="aceternity-switch-label">{switchValue ? 'Active' : 'Inactive'}</span>
-              </div>
-            </div>
-            
-            {/* Spotlight cards */}
-            <div className="aceternity-section">
-              <h3 className="aceternity-subtitle">Spotlight Cards</h3>
-              <div className="aceternity-spotlight-container">
-                <div 
-                  className="aceternity-spotlight-card"
-                  onMouseEnter={() => setHoveredCard('card1')}
-                  onMouseLeave={() => setHoveredCard(null)}
-                  onMouseMove={(e) => handleMouseMove(e, 'card1')}
-                >
-                  <div className="aceternity-spotlight-card-content">
-                    <h4>Hover Me!</h4>
-                    <p>Interactive spotlight effect</p>
-                  </div>
-                </div>
-                <div 
-                  className="aceternity-spotlight-card"
-                  onMouseEnter={() => setHoveredCard('card2')}
-                  onMouseLeave={() => setHoveredCard(null)}
-                  onMouseMove={(e) => handleMouseMove(e, 'card2')}
-                >
-                  <div className="aceternity-spotlight-card-content">
-                    <h4>Motion Effects</h4>
-                    <p>Hover to see the magic</p>
-                  </div>
-                </div>
-              </div>
-            </div>
-            
-            {/* Notification button with animation */}
-            <div className="aceternity-section">
-              <h3 className="aceternity-subtitle">Notification</h3>
-              <button 
-                className="aceternity-button aceternity-button-secondary aceternity-effect-ripple"
-                onClick={handleShowSnackbar}
-              >
-                <span className="aceternity-button-text">Show Notification</span>
-              </button>
-            </div>
-          </div>
-        </div>
-      </Box>
-
-      {/* MUI Snackbar for notifications */}
-      <Snackbar 
-        open={snackbarOpen} 
-        autoHideDuration={4000} 
-        onClose={handleCloseSnackbar}
-        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
-      >
-        <Alert onClose={handleCloseSnackbar} severity="success">
-          This is a notification message!
-        </Alert>
-      </Snackbar>
-
-      {/* Additional documentation section */}
-      <Paper sx={{ p: 3, mb: 4 }}>
-        <Typography variant="h5" gutterBottom>
-          About Aceternity UI
-        </Typography>
-        <Typography variant="body1" paragraph>
-          Aceternity UI is a modern component library that focuses on animations and interactive effects.
-          Unlike Shadcn UI, it does still require Tailwind CSS for implementation in a real project.
-          This demo shows how the components would look and feel without using Tailwind.
-        </Typography>
-        <Typography variant="body1">
-          Key features:
-        </Typography>
-        <ul>
-          <Box component="li" sx={{ mt: 1 }}>Motion-based interactions and animations</Box>
-          <Box component="li" sx={{ mt: 1 }}>Modern, clean aesthetic with subtle effects</Box>
-          <Box component="li" sx={{ mt: 1 }}>Engaging user experience through micro-interactions</Box>
-          <Box component="li" sx={{ mt: 1 }}>Spotlight effects and cursor-following elements</Box>
-        </ul>
-      </Paper>
-    </Container>
-  );
-};
-
-export default AceternityExperimentPage;
\ No newline at end of file
diff --git a/frontend/src/pages/experimental/ShadcnExperimentPage.css b/frontend/src/pages/experimental/ShadcnExperimentPage.css
deleted file mode 100644
index 15751a0..0000000
--- a/frontend/src/pages/experimental/ShadcnExperimentPage.css
+++ /dev/null
@@ -1,203 +0,0 @@
-/* frontend/src/pages/experimental/ShadcnExperimentPage.css */
-
-/* Base shadcn styles inspired by shadcn/ui aesthetic */
-:root {
-  --shadcn-bg: #ffffff;
-  --shadcn-text: #0f172a;
-  --shadcn-primary: #111827;
-  --shadcn-primary-foreground: #ffffff;
-  --shadcn-secondary: #f3f4f6;
-  --shadcn-secondary-foreground: #111827;
-  --shadcn-muted: #f3f4f6;
-  --shadcn-muted-foreground: #6b7280;
-  --shadcn-border: #e5e7eb;
-  --shadcn-radius: 0.5rem;
-}
-
-/* Card styling */
-.shadcn-card {
-  background-color: var(--shadcn-bg);
-  border-radius: var(--shadcn-radius);
-  border: 1px solid var(--shadcn-border);
-  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
-  overflow: hidden;
-  height: 100%;
-}
-
-.shadcn-card-content {
-  padding: 24px;
-}
-
-/* Typography */
-.shadcn-heading {
-  color: var(--shadcn-text);
-  font-size: 1.25rem;
-  font-weight: 600;
-  margin-bottom: 1rem;
-}
-
-.shadcn-subtitle {
-  color: var(--shadcn-text);
-  font-size: 0.875rem;
-  font-weight: 500;
-  margin-bottom: 0.5rem;
-}
-
-/* Layout sections */
-.shadcn-section {
-  margin-bottom: 1.5rem;
-}
-
-/* Button styling */
-.shadcn-button-group {
-  display: flex;
-  gap: 0.5rem;
-  margin-bottom: 0.5rem;
-}
-
-.shadcn-button {
-  display: inline-flex;
-  align-items: center;
-  justify-content: center;
-  border-radius: var(--shadcn-radius);
-  font-size: 0.875rem;
-  font-weight: 500;
-  height: 2.5rem;
-  padding: 0 1rem;
-  cursor: pointer;
-  transition: all 150ms;
-}
-
-.shadcn-button-primary {
-  background-color: var(--shadcn-primary);
-  color: var(--shadcn-primary-foreground);
-  border: none;
-}
-
-.shadcn-button-primary:hover {
-  opacity: 0.9;
-}
-
-.shadcn-button-outline {
-  background-color: transparent;
-  border: 1px solid var(--shadcn-border);
-  color: var(--shadcn-text);
-}
-
-.shadcn-button-outline:hover {
-  background-color: var(--shadcn-secondary);
-  color: var(--shadcn-secondary-foreground);
-}
-
-.shadcn-button-ghost {
-  background-color: transparent;
-  border: none;
-  color: var(--shadcn-text);
-}
-
-.shadcn-button-ghost:hover {
-  background-color: var(--shadcn-secondary);
-}
-
-.shadcn-button-secondary {
-  background-color: var(--shadcn-secondary);
-  color: var(--shadcn-secondary-foreground);
-  border: none;
-}
-
-.shadcn-button-secondary:hover {
-  background-color: #e5e7eb;
-}
-
-/* Form elements */
-.shadcn-form-item {
-  display: flex;
-  flex-direction: column;
-  gap: 0.5rem;
-  margin-bottom: 1rem;
-}
-
-.shadcn-label {
-  font-size: 0.875rem;
-  font-weight: 500;
-  color: var(--shadcn-text);
-}
-
-.shadcn-input {
-  height: 2.5rem;
-  border-radius: var(--shadcn-radius);
-  border: 1px solid var(--shadcn-border);
-  background-color: var(--shadcn-bg);
-  padding: 0 0.75rem;
-  font-size: 0.875rem;
-  color: var(--shadcn-text);
-  transition: border-color 150ms;
-  width: 100%;
-}
-
-.shadcn-input:focus {
-  outline: none;
-  border-color: #000000;
-  box-shadow: 0 0 0 1px #000000;
-}
-
-.shadcn-input::placeholder {
-  color: var(--shadcn-muted-foreground);
-}
-
-/* Switch component */
-.shadcn-switch-container {
-  display: flex;
-  align-items: center;
-  gap: 0.5rem;
-}
-
-.shadcn-switch {
-  position: relative;
-  display: inline-block;
-  width: 36px;
-  height: 20px;
-}
-
-.shadcn-switch input {
-  opacity: 0;
-  width: 0;
-  height: 0;
-}
-
-.shadcn-switch-slider {
-  position: absolute;
-  cursor: pointer;
-  top: 0;
-  left: 0;
-  right: 0;
-  bottom: 0;
-  background-color: var(--shadcn-muted);
-  transition: .3s;
-  border-radius: 20px;
-}
-
-.shadcn-switch-slider:before {
-  position: absolute;
-  content: "";
-  height: 16px;
-  width: 16px;
-  left: 2px;
-  bottom: 2px;
-  background-color: white;
-  transition: .3s;
-  border-radius: 50%;
-}
-
-.shadcn-switch input:checked + .shadcn-switch-slider {
-  background-color: var(--shadcn-primary);
-}
-
-.shadcn-switch input:checked + .shadcn-switch-slider:before {
-  transform: translateX(16px);
-}
-
-.shadcn-switch-label {
-  font-size: 0.875rem;
-  color: var(--shadcn-text);
-}
\ No newline at end of file
diff --git a/frontend/src/pages/experimental/ShadcnExperimentPage.jsx b/frontend/src/pages/experimental/ShadcnExperimentPage.jsx
deleted file mode 100644
index af551d5..0000000
--- a/frontend/src/pages/experimental/ShadcnExperimentPage.jsx
+++ /dev/null
@@ -1,189 +0,0 @@
-// frontend/src/pages/experimental/ShadcnExperimentPage.jsx
-import React, { useState } from 'react';
-import { 
-  Box, 
-  Button as MuiButton, 
-  TextField, 
-  Card, 
-  CardContent, 
-  Typography, 
-  Switch,
-  Snackbar,
-  Alert,
-  Paper
-} from '@mui/material';
-
-// CSS for shadcn-like styling
-import './ShadcnExperimentPage.css';
-
-/**
- * This is an experimental page for testing shadcn/ui components
- * alongside our existing Material UI components
- */
-const ShadcnExperimentPage = () => {
-  const [count, setCount] = useState(0);
-  const [inputValue, setInputValue] = useState('');
-  const [switchValue, setSwitchValue] = useState(false);
-  const [snackbarOpen, setSnackbarOpen] = useState(false);
-
-  const handleIncrement = () => {
-    setCount(count + 1);
-  };
-
-  const handleShowSnackbar = () => {
-    setSnackbarOpen(true);
-  };
-
-  const handleCloseSnackbar = () => {
-    setSnackbarOpen(false);
-  };
-
-  return (
-    <Box sx={{ p: 4, maxWidth: 1200, mx: 'auto' }}>
-      <Paper sx={{ p: 3, mb: 4 }}>
-        <Typography variant="h4" gutterBottom>
-          Shadcn/UI Experiment Page
-        </Typography>
-        <Typography variant="body1" paragraph>
-          This page demonstrates how shadcn/ui components would look alongside our existing Material UI components.
-          You can use this page to experiment with the shadcn/ui design system and decide if it's right for your project.
-        </Typography>
-      </Paper>
-
-      <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 4 }}>
-        {/* Material UI Components */}
-        <Card variant="outlined" sx={{ height: '100%' }}>
-          <CardContent>
-            <Typography variant="h5" color="primary" gutterBottom>
-              Material UI Components (Current)
-            </Typography>
-            
-            <Box sx={{ mb: 3 }}>
-              <Typography variant="subtitle1" gutterBottom>Buttons</Typography>
-              <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
-                <MuiButton variant="contained" color="primary">Primary</MuiButton>
-                <MuiButton variant="outlined" color="primary">Secondary</MuiButton>
-                <MuiButton variant="text">Text</MuiButton>
-              </Box>
-            </Box>
-            
-            <Box sx={{ mb: 3 }}>
-              <Typography variant="subtitle1" gutterBottom>Input</Typography>
-              <TextField 
-                label="Material UI Input" 
-                variant="outlined" 
-                fullWidth 
-                value={inputValue}
-                onChange={(e) => setInputValue(e.target.value)}
-                sx={{ mb: 2 }}
-              />
-            </Box>
-            
-            <Box sx={{ mb: 3 }}>
-              <Typography variant="subtitle1" gutterBottom>Counter</Typography>
-              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
-                <MuiButton variant="contained" onClick={handleIncrement}>
-                  Count: {count}
-                </MuiButton>
-              </Box>
-            </Box>
-            
-            <Box sx={{ mb: 3 }}>
-              <Typography variant="subtitle1" gutterBottom>Switch</Typography>
-              <Switch 
-                checked={switchValue} 
-                onChange={() => setSwitchValue(!switchValue)} 
-              />
-              <Typography variant="body2" component="span" sx={{ ml: 1 }}>
-                {switchValue ? 'On' : 'Off'}
-              </Typography>
-            </Box>
-            
-            <Box>
-              <Typography variant="subtitle1" gutterBottom>Notification</Typography>
-              <MuiButton variant="contained" color="secondary" onClick={handleShowSnackbar}>
-                Show Notification
-              </MuiButton>
-            </Box>
-          </CardContent>
-        </Card>
-
-        {/* Shadcn UI Styled Components */}
-        <div className="shadcn-card">
-          <div className="shadcn-card-content">
-            <h2 className="shadcn-heading">Shadcn UI Styled Components</h2>
-            
-            <div className="shadcn-section">
-              <h3 className="shadcn-subtitle">Buttons</h3>
-              <div className="shadcn-button-group">
-                <button className="shadcn-button shadcn-button-primary">Primary</button>
-                <button className="shadcn-button shadcn-button-outline">Secondary</button>
-                <button className="shadcn-button shadcn-button-ghost">Text</button>
-              </div>
-            </div>
-            
-            <div className="shadcn-section">
-              <h3 className="shadcn-subtitle">Input</h3>
-              <div className="shadcn-form-item">
-                <label className="shadcn-label">Shadcn UI Input</label>
-                <input 
-                  type="text" 
-                  className="shadcn-input" 
-                  placeholder="Type here..." 
-                  value={inputValue}
-                  onChange={(e) => setInputValue(e.target.value)}
-                />
-              </div>
-            </div>
-            
-            <div className="shadcn-section">
-              <h3 className="shadcn-subtitle">Counter</h3>
-              <button className="shadcn-button shadcn-button-primary" onClick={handleIncrement}>
-                Count: {count}
-              </button>
-            </div>
-            
-            <div className="shadcn-section">
-              <h3 className="shadcn-subtitle">Switch</h3>
-              <div className="shadcn-switch-container">
-                <label className="shadcn-switch">
-                  <input 
-                    type="checkbox" 
-                    checked={switchValue} 
-                    onChange={() => setSwitchValue(!switchValue)} 
-                  />
-                  <span className="shadcn-switch-slider"></span>
-                </label>
-                <span className="shadcn-switch-label">{switchValue ? 'On' : 'Off'}</span>
-              </div>
-            </div>
-            
-            <div className="shadcn-section">
-              <h3 className="shadcn-subtitle">Notification</h3>
-              <button 
-                className="shadcn-button shadcn-button-secondary"
-                onClick={handleShowSnackbar}
-              >
-                Show Notification
-              </button>
-            </div>
-          </div>
-        </div>
-      </Box>
-
-      {/* MUI Snackbar for notifications */}
-      <Snackbar 
-        open={snackbarOpen} 
-        autoHideDuration={4000} 
-        onClose={handleCloseSnackbar}
-        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
-      >
-        <Alert onClose={handleCloseSnackbar} severity="success">
-          This is a notification message!
-        </Alert>
-      </Snackbar>
-    </Box>
-  );
-};
-
-export default ShadcnExperimentPage;
\ No newline at end of file
diff --git a/frontend/src/pages/payments/PaymentsPage.css b/frontend/src/pages/payments/PaymentsPage.css
deleted file mode 100644
index 656868f..0000000
--- a/frontend/src/pages/payments/PaymentsPage.css
+++ /dev/null
@@ -1,141 +0,0 @@
-/* frontend/src/pages/payments/PaymentsPage.css */
-
-.payments-page {
-  display: flex;
-  flex-direction: column;
-  gap: 20px;
-}
-
-.filters-section {
-  padding: 20px;
-  background-color: #fff;
-  border-radius: 8px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
-}
-
-.filters-section h3 {
-  margin-top: 0;
-  margin-bottom: 15px;
-  color: var(--text-primary);
-}
-
-.filter-controls {
-  display: flex;
-  flex-wrap: wrap;
-  gap: 15px;
-  align-items: flex-end;
-}
-
-.filter-controls .form-group {
-  flex: 1 1 180px; /* Allow wrapping */
-  margin-bottom: 0;
-}
-
-.filter-actions {
-  display: flex;
-  gap: 10px;
-  margin-left: auto; /* Push buttons to the right */
-}
-
-.payments-table-container {
-  padding: 20px;
-  background-color: #fff;
-  border-radius: 8px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
-  overflow-x: auto; /* Allow horizontal scrolling on small screens */
-}
-
-.payments-table {
-  width: 100%;
-  border-collapse: collapse;
-  margin-top: 15px;
-}
-
-.payments-table th,
-.payments-table td {
-  padding: 12px 15px;
-  text-align: left;
-  border-bottom: 1px solid #e0e0e0;
-  white-space: nowrap; /* Prevent text wrapping */
-}
-
-.payments-table th {
-  background-color: #f9f9f9;
-  font-weight: 600;
-  color: #333;
-}
-
-.payments-table tbody tr:hover {
-  background-color: #f5f5f5;
-}
-
-/* Payment Status Styles */
-.payment-status {
-  padding: 4px 8px;
-  border-radius: 20px;
-  font-size: 12px;
-  font-weight: 500;
-  text-transform: capitalize;
-}
-
-.payment-status.completed {
-  background-color: #d1e7dd; /* Green */
-  color: #0f5132;
-}
-
-.payment-status.pending {
-  background-color: #fff3cd; /* Yellow */
-  color: #856404;
-}
-
-.payment-status.failed {
-  background-color: #f8d7da; /* Red */
-  color: #721c24;
-}
-
-.payment-status.refunded {
-  background-color: #e2e3e5; /* Gray */
-  color: #383d41;
-}
-
-.payment-status.requires_action {
-  background-color: #cfe2ff; /* Blue */
-  color: #084298;
-}
-
-.pagination-controls {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  margin-top: 20px;
-  padding-top: 15px;
-  border-top: 1px solid #e0e0e0;
-}
-
-.pagination-controls span {
-  font-size: 14px;
-  color: #555;
-}
-
-.no-data {
-  padding: 20px;
-  text-align: center;
-  color: #777;
-}
-
-.btn.small {
-  padding: 4px 8px;
-  font-size: 12px;
-}
-
-.loading-indicator {
-  padding: 20px;
-  text-align: center;
-  color: #555;
-}
-
-.card {
-  background-color: #fff;
-  border-radius: 8px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
-}
diff --git a/frontend/src/pages/payments/PaymentsPage.jsx b/frontend/src/pages/payments/PaymentsPage.jsx
deleted file mode 100644
index b1c6bbf..0000000
--- a/frontend/src/pages/payments/PaymentsPage.jsx
+++ /dev/null
@@ -1,334 +0,0 @@
-import React, { useState, useEffect } from 'react';
-import jsPDF from 'jspdf';
-import autoTable from 'jspdf-autotable';
-import paymentApi from '../../services/paymentApi';
-import LinearProgress from '@mui/material/LinearProgress'; // Import LinearProgress
-import Box from '@mui/material/Box'; // Import Box for layout
-import Typography from '@mui/material/Typography'; // Import Typography for text
-import './PaymentsPage.css'; // We'll create this CSS file next
-
-const PaymentsPage = () => {
-  const [payments, setPayments] = useState([]);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState('');
-  const [page, setPage] = useState(1);
-  const [limit] = useState(10); // Items per page
-  const [totalPages, setTotalPages] = useState(1);
-  // Add customerName and paymentMethod to filters state
-  const [filters, setFilters] = useState({ status: '', startDate: '', endDate: '', customerName: '', paymentMethod: '' });
-  const [exporting, setExporting] = useState(false); // State for PDF export loading
-  const [exportProgress, setExportProgress] = useState(0); // State for export progress
-
-  const fetchPayments = async (currentPage = 1, currentFilters = filters) => {
-    setLoading(true);
-    console.log('PaymentsPage: Starting fetchPayments', { currentPage, currentFilters }); // Added log
-    setError('');
-    try {
-      // Ensure only non-empty filters are sent
-      const activeFilters = Object.entries(currentFilters).reduce((acc, [key, value]) => {
-        if (value) {
-          acc[key] = value;
-        }
-        return acc;
-      }, {});
-
-      const response = await paymentApi.getPayments({
-        page: currentPage,
-        limit,
-        ...activeFilters // Spread the active filters
-      });
-      console.log('PaymentsPage: API response received', response); // Added log
-      setPayments(response.docs || []);
-      setPage(response.page || 1);
-      setTotalPages(response.totalPages || 1);
-    } catch (err) {
-      console.error('PaymentsPage: Error fetching payments:', err); // Added log
-      setError('Failed to load payments. Please try again.');
-    } finally {
-      console.log('PaymentsPage: fetchPayments finished'); // Added log
-      setLoading(false);
-    }
-  };
-
-  useEffect(() => {
-    fetchPayments(page, filters);
-  }, [page, filters, limit]); // Refetch when page, filters, or limit change
-
-  const handleFilterChange = (e) => {
-    const { name, value } = e.target;
-    setFilters(prev => ({ ...prev, [name]: value }));
-  };
-
-  const applyFilters = () => {
-    setPage(1); // Reset to first page when applying filters
-    fetchPayments(1, filters);
-  };
-
-  const clearFilters = () => {
-    // Reset all filters including the new ones
-    setFilters({ status: '', startDate: '', endDate: '', customerName: '', paymentMethod: '' });
-    setPage(1);
-    fetchPayments(1, { status: '', startDate: '', endDate: '', customerName: '', paymentMethod: '' });
-  };
-
-  const handlePageChange = (newPage) => {
-    if (newPage >= 1 && newPage <= totalPages) {
-      setPage(newPage);
-    }
-  };
-
-  const formatCurrency = (amount) => {
-    // Ensure amount is a number before formatting
-    const numericAmount = Number(amount);
-    if (isNaN(numericAmount)) return 'N/A';
-    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(numericAmount);
-  };
-
-  const formatDate = (dateString) => {
-    if (!dateString) return 'N/A';
-    try {
-      return new Date(dateString).toLocaleDateString();
-    } catch (e) {
-      console.error("Error formatting date:", dateString, e);
-      return 'Invalid Date';
-    }
-  };
-
-  // Function to handle PDF export with progress simulation
-  const handleExportPDF = async () => { // Make async if data fetching is needed inside
-    setExporting(true);
-    setExportProgress(0); // Reset progress
-
-    try {
-        // Simulate initial setup (10%)
-        await new Promise(resolve => setTimeout(resolve, 100)); // Small delay
-        setExportProgress(10);
-
-        const doc = new jsPDF();
-
-        doc.setFontSize(18);
-        doc.text('Payments Report', 14, 22);
-        doc.setFontSize(11);
-        doc.setTextColor(100);
-
-        // Simulate adding filters info (20%)
-        await new Promise(resolve => setTimeout(resolve, 100));
-        setExportProgress(20);
-
-        const filterInfo = Object.entries(filters)
-          .filter(([, value]) => value)
-          .map(([key, value]) => {
-            let label = key.replace(/([A-Z])/g, ' $1');
-            label = label.charAt(0).toUpperCase() + label.slice(1);
-            return `${label}: ${value}`;
-          })
-          .join(', ');
-
-        doc.text(`Filters Applied: ${filterInfo || 'None'}`, 14, 30);
-
-        // Simulate preparing data (40%) - In a real scenario, you might fetch all data here
-        await new Promise(resolve => setTimeout(resolve, 200));
-        setExportProgress(40);
-
-        const tableColumn = ["Date", "Customer", "Description", "Amount", "Status", "Method"];
-        const tableRows = [];
-
-        // Note: This uses only the currently loaded 'payments'. For a full report,
-        // you might need to fetch ALL payments matching the filters here.
-        payments.forEach(payment => {
-          const paymentData = [
-            formatDate(payment.paymentDate),
-            payment.user?.name || 'N/A',
-            payment.description || 'N/A',
-            formatCurrency(payment.amount),
-            payment.status || 'N/A',
-            payment.paymentMethod?.replace('_', ' ') || 'N/A'
-          ];
-          tableRows.push(paymentData);
-        });
-
-        // Simulate adding table (80%)
-        await new Promise(resolve => setTimeout(resolve, 300));
-        setExportProgress(80);
-
-        autoTable(doc, {
-          head: [tableColumn],
-          body: tableRows,
-          startY: 35,
-          theme: 'striped',
-          headStyles: { fillColor: [34, 139, 34] },
-        });
-
-        // Simulate saving (95%)
-        await new Promise(resolve => setTimeout(resolve, 100));
-        setExportProgress(95);
-
-        doc.save(`payments-report-${new Date().toISOString().split('T')[0]}.pdf`);
-
-        // Finalize (100%)
-        setExportProgress(100);
-        await new Promise(resolve => setTimeout(resolve, 500)); // Keep progress bar at 100% briefly
-
-    } catch (error) {
-        console.error("Error exporting PDF:", error);
-        setError("Failed to export PDF. Please try again.");
-        // Optionally reset progress on error
-        setExportProgress(0);
-    } finally {
-        setExporting(false);
-        // Optionally reset progress after a longer delay
-        // setTimeout(() => setExportProgress(0), 2000);
-    }
-  };
-
-
-  return (
-    <div className="payments-page dashboard-content">
-      <h2>Payments Management</h2>
-
-      {/* Filter Section */}
-      <div className="filters-section card">
-        <h3>Filter Payments</h3>
-        <div className="filter-controls">
-          {/* Status Filter */}
-          <div className="form-group">
-            <label htmlFor="status">Status</label>
-            <select id="status" name="status" value={filters.status} onChange={handleFilterChange} disabled={loading}>
-              <option value="">All</option>
-              <option value="completed">Completed</option>
-              <option value="pending">Pending</option>
-              <option value="failed">Failed</option>
-              <option value="refunded">Refunded</option>
-              <option value="requires_action">Requires Action</option>
-            </select>
-          </div>
-          {/* Payment Method Filter */}
-          <div className="form-group">
-            <label htmlFor="paymentMethod">Payment Method</label>
-            <select id="paymentMethod" name="paymentMethod" value={filters.paymentMethod} onChange={handleFilterChange} disabled={loading}>
-              <option value="">All</option>
-              <option value="card">Credit Card</option>
-              <option value="paypal">PayPal</option>
-              <option value="bank_transfer">Bank Transfer</option>
-              {/* Add other methods if applicable */}
-            </select>
-          </div>
-          {/* Customer Name Filter */}
-          <div className="form-group">
-            <label htmlFor="customerName">Customer Name</label>
-            <input
-              type="text"
-              id="customerName"
-              name="customerName"
-              placeholder="Enter customer name..."
-              value={filters.customerName}
-              onChange={handleFilterChange}
-              disabled={loading}
-            />
-          </div>
-          {/* Start Date Filter */}
-          <div className="form-group">
-            <label htmlFor="startDate">Start Date</label>
-            <input type="date" id="startDate" name="startDate" value={filters.startDate} onChange={handleFilterChange} disabled={loading} />
-          </div>
-          {/* End Date Filter */}
-          <div className="form-group">
-            <label htmlFor="endDate">End Date</label>
-            <input type="date" id="endDate" name="endDate" value={filters.endDate} onChange={handleFilterChange} disabled={loading} />
-          </div>
-          {/* Filter Actions */}
-          <div className="filter-actions">
-            <button className="btn primary" onClick={applyFilters} disabled={loading || exporting}>Apply Filters</button>
-            <button className="btn secondary" onClick={clearFilters} disabled={loading || exporting}>Clear Filters</button>
-            {/* Export Button */}
-            <button
-              className="btn success"
-              onClick={handleExportPDF}
-              disabled={loading || exporting || payments.length === 0}
-            >
-              {exporting ? 'Exporting...' : 'Export to PDF'}
-            </button>
-          </div>
-          {/* Progress Bar Display */}
-          {exporting && (
-            <Box sx={{ width: '100%', mt: 2 }}>
-              <Typography variant="caption" display="block" gutterBottom>
-                Exporting PDF... {`${Math.round(exportProgress)}%`}
-              </Typography>
-              <LinearProgress variant="determinate" value={exportProgress} />
-            </Box>
-          )}
-        </div>
-      </div>
-
-      {error && <div className="form-error">{error}</div>}
-
-      {loading ? (
-        <div className="loading-indicator">Loading payments...</div>
-      ) : payments.length === 0 ? (
-        <div className="card no-data">
-          <p>No payments found matching the criteria.</p>
-        </div>
-      ) : (
-        <div className="payments-table-container card">
-          <table className="payments-table">
-            <thead>
-              <tr>
-                <th>Date</th>
-                <th>Customer</th>
-                <th>Description</th>
-                <th>Amount</th>
-                <th>Status</th>
-                <th>Method</th>
-                <th>Actions</th>
-              </tr>
-            </thead>
-            <tbody>
-              {payments.map(payment => (
-                <tr key={payment._id}>
-                  <td>{formatDate(payment.paymentDate)}</td>
-                  <td>{payment.user?.name || 'N/A'}</td>
-                  <td>{payment.description}</td>
-                  <td>{formatCurrency(payment.amount)}</td>
-                  <td>
-                    <span className={`payment-status ${payment.status?.toLowerCase()}`}>
-                      {payment.status}
-                    </span>
-                  </td>
-                  <td>{payment.paymentMethod?.replace('_', ' ') || 'N/A'}</td>
-                  <td>
-                    {/* Add actions like view details, update status etc. */}
-                    <button className="btn small secondary">Details</button>
-                  </td>
-                </tr>
-              ))}
-            </tbody>
-          </table>
-
-          {/* Pagination */}
-          {totalPages > 1 && (
-            <div className="pagination-controls">
-              <button 
-                onClick={() => handlePageChange(page - 1)} 
-                disabled={page <= 1 || loading}
-                className="btn secondary"
-              >
-                Previous
-              </button>
-              <span>Page {page} of {totalPages}</span>
-              <button 
-                onClick={() => handlePageChange(page + 1)} 
-                disabled={page >= totalPages || loading}
-                className="btn secondary"
-              >
-                Next
-              </button>
-            </div>
-          )}
-        </div>
-      )}
-    </div>
-  );
-};
-
-export default PaymentsPage;
diff --git a/frontend/src/pages/payroll/AdminPayrollPage.jsx b/frontend/src/pages/payroll/AdminPayrollPage.jsx
deleted file mode 100644
index 733ce83..0000000
--- a/frontend/src/pages/payroll/AdminPayrollPage.jsx
+++ /dev/null
@@ -1,552 +0,0 @@
-import React, { useState, useEffect, useCallback } from 'react';
-import { useAuth } from '../../contexts/AuthContext';
-import '../../components/payroll/PayrollComponents.css';
-
-/**
- * Page component for admins and financial managers to manage staff payroll
- */
-const AdminPayrollPage = () => {
-  const { user } = useAuth();
-  const [staff, setStaff] = useState([]);
-  const [payrolls, setPayrolls] = useState([]);
-  const [selectedStaff, setSelectedStaff] = useState(null);
-  const [selectedPayroll, setSelectedPayroll] = useState(null);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState('');
-  const [success, setSuccess] = useState('');
-  
-  const [payrollForm, setPayrollForm] = useState({
-    month: new Date().getMonth(),
-    year: new Date().getFullYear(),
-    basicSalary: 0,
-    overtime: 0,
-    bonuses: 0,
-    deductions: 0,
-    notes: ''
-  });
-
-  // Define months for the dropdown
-  const months = [
-    'January', 'February', 'March', 'April', 
-    'May', 'June', 'July', 'August', 
-    'September', 'October', 'November', 'December'
-  ];
-  
-  // Simulated data - replace with actual API calls in production
-  const fetchStaffMembers = useCallback(async () => {
-    setLoading(true);
-    try {
-      // Simulate API call with timeout
-      setTimeout(() => {
-        const mockStaff = [
-          {
-            _id: 's1',
-            name: 'John Doe',
-            email: 'john@smartbin.com',
-            role: 'staff',
-            department: 'Operations',
-            joiningDate: '2024-01-15'
-          },
-          {
-            _id: 's2',
-            name: 'Jane Smith',
-            email: 'jane@smartbin.com',
-            role: 'staff',
-            department: 'Customer Support',
-            joiningDate: '2024-02-10'
-          },
-          {
-            _id: 's3',
-            name: 'Robert Johnson',
-            email: 'robert@smartbin.com',
-            role: 'staff',
-            department: 'Maintenance',
-            joiningDate: '2023-11-05'
-          }
-        ];
-        
-        setStaff(mockStaff);
-        setLoading(false);
-        setError('');
-      }, 1000);
-    } catch (err) {
-      console.error('Error fetching staff members:', err);
-      setError('Failed to load staff members. Please try again later.');
-      setLoading(false);
-    }
-  }, []);
-
-  // Fetch payroll records for a specific staff member
-  const fetchStaffPayroll = useCallback((staffId) => {
-    if (!staffId) return;
-    
-    setLoading(true);
-    try {
-      // Simulate API call with timeout
-      setTimeout(() => {
-        const mockPayrolls = [
-          {
-            _id: 'p1',
-            staffId: staffId,
-            month: 2, // March (0-indexed)
-            year: 2025,
-            basicSalary: 5000,
-            overtime: 300,
-            bonuses: 500,
-            deductions: 150,
-            totalAmount: 5650,
-            status: 'paid',
-            paymentDate: '2025-04-01T10:15:00',
-            notes: 'Monthly salary for March 2025'
-          },
-          {
-            _id: 'p2',
-            staffId: staffId,
-            month: 1, // February (0-indexed)
-            year: 2025,
-            basicSalary: 5000,
-            overtime: 200,
-            bonuses: 0,
-            deductions: 100,
-            totalAmount: 5100,
-            status: 'paid',
-            paymentDate: '2025-03-01T09:30:00',
-            notes: 'Monthly salary for February 2025'
-          }
-        ];
-        
-        setPayrolls(mockPayrolls);
-        setSelectedPayroll(null);
-        setLoading(false);
-        setError('');
-      }, 1000);
-    } catch (err) {
-      console.error('Error fetching payroll records:', err);
-      setError('Failed to load payroll records. Please try again later.');
-      setLoading(false);
-    }
-  }, []);
-
-  // Load staff members on component mount
-  useEffect(() => {
-    fetchStaffMembers();
-  }, [fetchStaffMembers]);
-
-  // Handle staff selection
-  const handleSelectStaff = (staffMember) => {
-    setSelectedStaff(staffMember);
-    setSelectedPayroll(null);
-    fetchStaffPayroll(staffMember._id);
-  };
-
-  // Handle payroll selection
-  const handleSelectPayroll = (payroll) => {
-    setSelectedPayroll(payroll);
-  };
-
-  // Handle form input changes
-  const handleInputChange = (e) => {
-    const { name, value } = e.target;
-    setPayrollForm(prev => ({
-      ...prev,
-      [name]: name === 'notes' ? value : Number(value)
-    }));
-  };
-
-  // Calculate total amount
-  const calculateTotal = () => {
-    return (
-      payrollForm.basicSalary + 
-      payrollForm.overtime + 
-      payrollForm.bonuses - 
-      payrollForm.deductions
-    );
-  };
-
-  // Handle payroll form submission
-  const handleSubmitPayroll = (e) => {
-    e.preventDefault();
-    
-    if (!selectedStaff) {
-      setError('Please select a staff member first.');
-      return;
-    }
-    
-    // Create new payroll object
-    const newPayroll = {
-      _id: `temp-${Date.now()}`,
-      staffId: selectedStaff._id,
-      month: payrollForm.month,
-      year: payrollForm.year,
-      basicSalary: payrollForm.basicSalary,
-      overtime: payrollForm.overtime,
-      bonuses: payrollForm.bonuses,
-      deductions: payrollForm.deductions,
-      totalAmount: calculateTotal(),
-      status: 'pending',
-      createdAt: new Date().toISOString(),
-      notes: payrollForm.notes
-    };
-    
-    // Add to payrolls list
-    setPayrolls([newPayroll, ...payrolls]);
-    
-    // Show success message
-    setSuccess(`Payroll for ${selectedStaff.name} (${months[payrollForm.month]} ${payrollForm.year}) has been created.`);
-    
-    // Reset form to defaults with current month/year
-    setPayrollForm({
-      month: new Date().getMonth(),
-      year: new Date().getFullYear(),
-      basicSalary: 0,
-      overtime: 0,
-      bonuses: 0,
-      deductions: 0,
-      notes: ''
-    });
-    
-    // Clear success message after 5 seconds
-    setTimeout(() => setSuccess(''), 5000);
-  };
-
-  // Handle marking a payroll as paid
-  const handleMarkAsPaid = (payrollId) => {
-    const updatedPayrolls = payrolls.map(payroll => 
-      payroll._id === payrollId 
-        ? { ...payroll, status: 'paid', paymentDate: new Date().toISOString() }
-        : payroll
-    );
-    
-    setPayrolls(updatedPayrolls);
-    
-    // Update selected payroll if it's the one being marked as paid
-    if (selectedPayroll && selectedPayroll._id === payrollId) {
-      setSelectedPayroll({
-        ...selectedPayroll, 
-        status: 'paid', 
-        paymentDate: new Date().toISOString()
-      });
-    }
-    
-    setSuccess('Payroll has been marked as paid.');
-    setTimeout(() => setSuccess(''), 5000);
-  };
-
-  // Format currency
-  const formatCurrency = (amount) => {
-    return new Intl.NumberFormat('en-US', {
-      style: 'currency',
-      currency: 'USD'
-    }).format(amount);
-  };
-
-  return (
-    <div className="dashboard-content">
-      <h2>Payroll Management</h2>
-      
-      {error && <div className="form-error">{error}</div>}
-      {success && <div className="alert-success">{success}</div>}
-      
-      {/* Staff list section */}
-      <div className="payroll-section">
-        <h3>Select Staff Member</h3>
-        {loading && staff.length === 0 ? (
-          <p>Loading staff members...</p>
-        ) : staff.length === 0 ? (
-          <p>No staff members found.</p>
-        ) : (
-          <table className="payroll-table">
-            <thead>
-              <tr>
-                <th>Name</th>
-                <th>Email</th>
-                <th>Department</th>
-                <th>Joining Date</th>
-                <th>Action</th>
-              </tr>
-            </thead>
-            <tbody>
-              {staff.map(staffMember => (
-                <tr 
-                  key={staffMember._id}
-                  className={selectedStaff?._id === staffMember._id ? 'selected' : ''}
-                >
-                  <td>{staffMember.name}</td>
-                  <td>{staffMember.email}</td>
-                  <td>{staffMember.department}</td>
-                  <td>{new Date(staffMember.joiningDate).toLocaleDateString()}</td>
-                  <td>
-                    <button 
-                      className="btn primary"
-                      onClick={() => handleSelectStaff(staffMember)}
-                    >
-                      Select
-                    </button>
-                  </td>
-                </tr>
-              ))}
-            </tbody>
-          </table>
-        )}
-      </div>
-      
-      {/* Payroll generation form */}
-      {selectedStaff && (
-        <div className="payroll-section">
-          <h3>Generate Payroll for {selectedStaff.name}</h3>
-          <form onSubmit={handleSubmitPayroll} className="payroll-generator-form">
-            <div className="form-group">
-              <label htmlFor="month">Month</label>
-              <select
-                id="month"
-                name="month"
-                value={payrollForm.month}
-                onChange={handleInputChange}
-                required
-              >
-                {months.map((month, index) => (
-                  <option key={month} value={index}>{month}</option>
-                ))}
-              </select>
-            </div>
-            
-            <div className="form-group">
-              <label htmlFor="year">Year</label>
-              <input
-                type="number"
-                id="year"
-                name="year"
-                min="2020"
-                max="2030"
-                value={payrollForm.year}
-                onChange={handleInputChange}
-                required
-              />
-            </div>
-            
-            <div className="form-group">
-              <label htmlFor="basicSalary">Basic Salary</label>
-              <input
-                type="number"
-                id="basicSalary"
-                name="basicSalary"
-                min="0"
-                step="0.01"
-                value={payrollForm.basicSalary}
-                onChange={handleInputChange}
-                required
-              />
-            </div>
-            
-            <div className="form-group">
-              <label htmlFor="overtime">Overtime</label>
-              <input
-                type="number"
-                id="overtime"
-                name="overtime"
-                min="0"
-                step="0.01"
-                value={payrollForm.overtime}
-                onChange={handleInputChange}
-              />
-            </div>
-            
-            <div className="form-group">
-              <label htmlFor="bonuses">Bonuses</label>
-              <input
-                type="number"
-                id="bonuses"
-                name="bonuses"
-                min="0"
-                step="0.01"
-                value={payrollForm.bonuses}
-                onChange={handleInputChange}
-              />
-            </div>
-            
-            <div className="form-group">
-              <label htmlFor="deductions">Deductions</label>
-              <input
-                type="number"
-                id="deductions"
-                name="deductions"
-                min="0"
-                step="0.01"
-                value={payrollForm.deductions}
-                onChange={handleInputChange}
-              />
-            </div>
-            
-            <div className="form-group" style={{ gridColumn: '1 / -1' }}>
-              <label htmlFor="notes">Notes</label>
-              <textarea
-                id="notes"
-                name="notes"
-                rows="3"
-                value={payrollForm.notes}
-                onChange={handleInputChange}
-              />
-            </div>
-            
-            <div className="form-group" style={{ gridColumn: '1 / -1' }}>
-              <button type="submit" className="btn primary">
-                Generate Payroll
-              </button>
-            </div>
-          </form>
-        </div>
-      )}
-      
-      {/* Payroll history */}
-      {selectedStaff && payrolls.length > 0 && (
-        <div className="payroll-section">
-          <h3>Payroll History for {selectedStaff.name}</h3>
-          <table className="payroll-table">
-            <thead>
-              <tr>
-                <th>Period</th>
-                <th>Amount</th>
-                <th>Status</th>
-                <th>Created/Paid Date</th>
-                <th>Actions</th>
-              </tr>
-            </thead>
-            <tbody>
-              {payrolls.map(payroll => (
-                <tr 
-                  key={payroll._id}
-                  className={selectedPayroll?._id === payroll._id ? 'selected clickable' : 'clickable'}
-                  onClick={() => handleSelectPayroll(payroll)}
-                >
-                  <td>{`${months[payroll.month]} ${payroll.year}`}</td>
-                  <td>{formatCurrency(payroll.totalAmount)}</td>
-                  <td>
-                    <span className={`payment-status ${payroll.status}`}>
-                      {payroll.status}
-                    </span>
-                  </td>
-                  <td>
-                    {payroll.paymentDate 
-                      ? new Date(payroll.paymentDate).toLocaleDateString() 
-                      : new Date(payroll.createdAt).toLocaleDateString()}
-                  </td>
-                  <td>
-                    {payroll.status === 'pending' && (
-                      <button 
-                        className="btn primary"
-                        onClick={(e) => {
-                          e.stopPropagation();
-                          handleMarkAsPaid(payroll._id);
-                        }}
-                      >
-                        Mark as Paid
-                      </button>
-                    )}
-                    {payroll.status === 'paid' && (
-                      <button 
-                        className="btn secondary"
-                        onClick={(e) => {
-                          e.stopPropagation();
-                          // Implement print/download functionality here
-                          alert('Print/Download functionality will be implemented here');
-                        }}
-                      >
-                        Print
-                      </button>
-                    )}
-                  </td>
-                </tr>
-              ))}
-            </tbody>
-          </table>
-        </div>
-      )}
-      
-      {/* Payslip details */}
-      {selectedPayroll && (
-        <div className="payroll-section payslip-details">
-          <div className="payslip-header">
-            <h3 className="payslip-title">Payslip Details</h3>
-            <button 
-              className="btn secondary no-print"
-              onClick={() => setSelectedPayroll(null)}
-            >
-              Close
-            </button>
-          </div>
-          
-          <div className="payslip-meta">
-            <div className="payslip-meta-item">
-              <span className="label">Employee:</span>
-              <span>{selectedStaff.name}</span>
-            </div>
-            <div className="payslip-meta-item">
-              <span className="label">Department:</span>
-              <span>{selectedStaff.department}</span>
-            </div>
-            <div className="payslip-meta-item">
-              <span className="label">Period:</span>
-              <span>{`${months[selectedPayroll.month]} ${selectedPayroll.year}`}</span>
-            </div>
-            <div className="payslip-meta-item">
-              <span className="label">Status:</span>
-              <span className={`payment-status ${selectedPayroll.status}`}>
-                {selectedPayroll.status}
-              </span>
-            </div>
-            {selectedPayroll.paymentDate && (
-              <div className="payslip-meta-item">
-                <span className="label">Payment Date:</span>
-                <span>{new Date(selectedPayroll.paymentDate).toLocaleDateString()}</span>
-              </div>
-            )}
-          </div>
-          
-          <div className="payslip-summary">
-            <div className="payslip-row">
-              <span>Basic Salary</span>
-              <span className="amount">{formatCurrency(selectedPayroll.basicSalary)}</span>
-            </div>
-            <div className="payslip-row">
-              <span>Overtime</span>
-              <span className="amount">{formatCurrency(selectedPayroll.overtime)}</span>
-            </div>
-            <div className="payslip-row">
-              <span>Bonuses</span>
-              <span className="amount">{formatCurrency(selectedPayroll.bonuses)}</span>
-            </div>
-            <div className="payslip-row">
-              <span>Deductions</span>
-              <span className="amount">-{formatCurrency(selectedPayroll.deductions)}</span>
-            </div>
-            <div className="payslip-row total">
-              <span>Total</span>
-              <span className="amount">{formatCurrency(selectedPayroll.totalAmount)}</span>
-            </div>
-          </div>
-          
-          {selectedPayroll.notes && (
-            <div className="payslip-notes">
-              <h4>Notes</h4>
-              <p>{selectedPayroll.notes}</p>
-            </div>
-          )}
-          
-          <div className="payslip-actions no-print">
-            <button 
-              className="btn primary"
-              onClick={() => {
-                // Implement print functionality
-                window.print();
-              }}
-            >
-              Print Payslip
-            </button>
-          </div>
-        </div>
-      )}
-    </div>
-  );
-};
-
-export default AdminPayrollPage;
\ No newline at end of file
diff --git a/frontend/src/pages/payroll/StaffPayslipViewPage.jsx b/frontend/src/pages/payroll/StaffPayslipViewPage.jsx
deleted file mode 100644
index 29a7895..0000000
--- a/frontend/src/pages/payroll/StaffPayslipViewPage.jsx
+++ /dev/null
@@ -1,243 +0,0 @@
-import React, { useState, useEffect, useCallback } from 'react';
-import { useAuth } from '../../contexts/AuthContext';
-import '../../components/payroll/PayrollComponents.css';
-
-/**
- * Page component for staff members to view their payslips
- */
-const StaffPayslipViewPage = () => {
-  const { user } = useAuth();
-  const [payslips, setPayslips] = useState([]);
-  const [selectedPayslip, setSelectedPayslip] = useState(null);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState('');
-  
-  // Define months for display
-  const months = [
-    'January', 'February', 'March', 'April', 
-    'May', 'June', 'July', 'August', 
-    'September', 'October', 'November', 'December'
-  ];
-  
-  // Simulated payslip data - replace with actual API calls in production
-  const fetchPayslips = useCallback(async () => {
-    if (!user?._id) return;
-    
-    setLoading(true);
-    try {
-      // Simulate API call with timeout
-      setTimeout(() => {
-        const mockPayslips = [
-          {
-            _id: 'p1',
-            staffId: user._id,
-            month: 2, // March (0-indexed)
-            year: 2025,
-            basicSalary: 5000,
-            overtime: 300,
-            bonuses: 500,
-            deductions: 150,
-            totalAmount: 5650,
-            status: 'paid',
-            paymentDate: '2025-04-01T10:15:00',
-            notes: 'Monthly salary for March 2025'
-          },
-          {
-            _id: 'p2',
-            staffId: user._id,
-            month: 1, // February (0-indexed)
-            year: 2025,
-            basicSalary: 5000,
-            overtime: 200,
-            bonuses: 0,
-            deductions: 100,
-            totalAmount: 5100,
-            status: 'paid',
-            paymentDate: '2025-03-01T09:30:00',
-            notes: 'Monthly salary for February 2025'
-          },
-          {
-            _id: 'p3',
-            staffId: user._id,
-            month: 0, // January (0-indexed)
-            year: 2025,
-            basicSalary: 5000,
-            overtime: 100,
-            bonuses: 250,
-            deductions: 100,
-            totalAmount: 5250,
-            status: 'paid',
-            paymentDate: '2025-02-01T11:20:00',
-            notes: 'Monthly salary for January 2025'
-          }
-        ];
-        
-        setPayslips(mockPayslips);
-        setLoading(false);
-        setError('');
-      }, 1000);
-    } catch (err) {
-      console.error('Error fetching payslips:', err);
-      setError('Failed to load payslips. Please try again later.');
-      setLoading(false);
-    }
-  }, [user?._id]);
-
-  // Load payslips on component mount
-  useEffect(() => {
-    fetchPayslips();
-  }, [fetchPayslips]);
-
-  // Handle payslip selection
-  const handleSelectPayslip = (payslip) => {
-    setSelectedPayslip(payslip);
-  };
-
-  // Format currency
-  const formatCurrency = (amount) => {
-    return new Intl.NumberFormat('en-US', {
-      style: 'currency',
-      currency: 'USD'
-    }).format(amount);
-  };
-
-  return (
-    <div className="dashboard-content">
-      <h2>My Payslips</h2>
-      
-      {error && <div className="form-error">{error}</div>}
-      
-      {loading ? (
-        <p>Loading your payslips...</p>
-      ) : payslips.length === 0 ? (
-        <div className="payroll-section">
-          <p>No payslips found.</p>
-        </div>
-      ) : (
-        <>
-          {/* Payslips list */}
-          <div className="payroll-section">
-            <h3>Payslip History</h3>
-            <table className="payroll-table">
-              <thead>
-                <tr>
-                  <th>Period</th>
-                  <th>Payment Date</th>
-                  <th>Amount</th>
-                  <th>Status</th>
-                  <th>Action</th>
-                </tr>
-              </thead>
-              <tbody>
-                {payslips.map(payslip => (
-                  <tr key={payslip._id}>
-                    <td>{`${months[payslip.month]} ${payslip.year}`}</td>
-                    <td>{new Date(payslip.paymentDate).toLocaleDateString()}</td>
-                    <td>{formatCurrency(payslip.totalAmount)}</td>
-                    <td>
-                      <span className={`payment-status ${payslip.status}`}>
-                        {payslip.status}
-                      </span>
-                    </td>
-                    <td>
-                      <button
-                        className="btn primary"
-                        onClick={() => handleSelectPayslip(payslip)}
-                      >
-                        View Details
-                      </button>
-                    </td>
-                  </tr>
-                ))}
-              </tbody>
-            </table>
-          </div>
-          
-          {/* Selected payslip details */}
-          {selectedPayslip && (
-            <div className="payroll-section payslip-details">
-              <div className="payslip-header">
-                <h3 className="payslip-title">Payslip Details</h3>
-                <button 
-                  className="btn secondary no-print"
-                  onClick={() => setSelectedPayslip(null)}
-                >
-                  Close
-                </button>
-              </div>
-              
-              <div className="payslip-meta">
-                <div className="payslip-meta-item">
-                  <span className="label">Employee:</span>
-                  <span>{user?.name || 'Staff Member'}</span>
-                </div>
-                <div className="payslip-meta-item">
-                  <span className="label">Department:</span>
-                  <span>{user?.department || 'N/A'}</span>
-                </div>
-                <div className="payslip-meta-item">
-                  <span className="label">Period:</span>
-                  <span>{`${months[selectedPayslip.month]} ${selectedPayslip.year}`}</span>
-                </div>
-                <div className="payslip-meta-item">
-                  <span className="label">Payment Date:</span>
-                  <span>{new Date(selectedPayslip.paymentDate).toLocaleDateString()}</span>
-                </div>
-              </div>
-              
-              <div className="payslip-summary">
-                <div className="payslip-row">
-                  <span>Basic Salary</span>
-                  <span className="amount">{formatCurrency(selectedPayslip.basicSalary)}</span>
-                </div>
-                {selectedPayslip.overtime > 0 && (
-                  <div className="payslip-row">
-                    <span>Overtime</span>
-                    <span className="amount">{formatCurrency(selectedPayslip.overtime)}</span>
-                  </div>
-                )}
-                {selectedPayslip.bonuses > 0 && (
-                  <div className="payslip-row">
-                    <span>Bonuses</span>
-                    <span className="amount">{formatCurrency(selectedPayslip.bonuses)}</span>
-                  </div>
-                )}
-                {selectedPayslip.deductions > 0 && (
-                  <div className="payslip-row">
-                    <span>Deductions</span>
-                    <span className="amount">-{formatCurrency(selectedPayslip.deductions)}</span>
-                  </div>
-                )}
-                <div className="payslip-row total">
-                  <span>Total</span>
-                  <span className="amount">{formatCurrency(selectedPayslip.totalAmount)}</span>
-                </div>
-              </div>
-              
-              {selectedPayslip.notes && (
-                <div className="payslip-notes">
-                  <h4>Notes</h4>
-                  <p>{selectedPayslip.notes}</p>
-                </div>
-              )}
-              
-              <div className="payslip-actions no-print">
-                <button 
-                  className="btn primary"
-                  onClick={() => {
-                    // Implement print functionality
-                    window.print();
-                  }}
-                >
-                  Print Payslip
-                </button>
-              </div>
-            </div>
-          )}
-        </>
-      )}
-    </div>
-  );
-};
-
-export default StaffPayslipViewPage;
\ No newline at end of file
diff --git a/frontend/src/pages/profile/ProfilePage.css b/frontend/src/pages/profile/ProfilePage.css
deleted file mode 100644
index da71d1e..0000000
--- a/frontend/src/pages/profile/ProfilePage.css
+++ /dev/null
@@ -1,130 +0,0 @@
-.profile-page {
-  width: 100%;
-  max-width: 800px;
-  margin: 0 auto;
-  padding: 20px;
-}
-
-.profile-page h2 {
-  margin-bottom: 20px;
-  color: #333;
-}
-
-.profile-loading {
-  text-align: center;
-  padding: 30px;
-  font-size: 16px;
-  color: #666;
-}
-
-.profile-error {
-  background-color: #f8d7da;
-  color: #721c24;
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid #f5c6cb;
-}
-
-.profile-tabs {
-  display: flex;
-  justify-content: space-between;
-  margin-bottom: 20px;
-  border-bottom: 1px solid #ddd;
-}
-
-.tab-button {
-  padding: 10px 20px;
-  background: #f8f8f8; /* Brighter background for inactive tabs */
-  border: none;
-  border-bottom: 3px solid transparent;
-  color: #555;
-  font-size: 16px;
-  cursor: pointer;
-  transition: all 0.3s;
-  margin-right: 10px; /* Add margin to create space between tabs */
-  box-shadow: 0 1px 3px rgba(0,0,0,0.05); /* Subtle shadow for depth */
-}
-
-.tab-button:hover {
-  color: #4ea14a;
-  background-color: #ffffff; /* Even brighter on hover */
-}
-
-.tab-button.active {
-  border-bottom: 3px solid #4ea14a;
-  color: #4ea14a;
-  font-weight: bold; /* Make the active tab text bold */
-  background-color: #ffffff; /* White background for active tab */
-  box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Slightly stronger shadow for active tab */
-}
-
-.profile-content {
-  background-color: white;
-  border-radius: 8px;
-  padding: 20px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-/* Update input field styles */
-.profile-form-container input,
-.profile-form-container select,
-.profile-form-container textarea {
-  background-color: #ffffff; /* Light background color */
-  color: #333; /* Dark text color */
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  padding: 10px;
-  font-size: 14px;
-}
-
-.profile-form-container input::placeholder,
-.profile-form-container select::placeholder,
-.profile-form-container textarea::placeholder {
-  color: #999; /* Placeholder text color */
-}
-
-.profile-form-container input:focus,
-.profile-form-container select:focus,
-.profile-form-container textarea:focus {
-  outline: none;
-  border-color: #4ea14a; /* Add focus border color */
-}
-
-/* Add this at the end of your file */
-
-.delete-account-section {
-  margin-top: 40px;
-  padding-top: 20px;
-  border-top: 1px solid #eee;
-}
-
-.delete-account-section h3 {
-  color: #dc3545;
-  margin-bottom: 10px;
-}
-
-.delete-account-section p {
-  color: #666;
-  margin-bottom: 15px;
-}
-
-.delete-account-button {
-  background-color: #dc3545;
-  color: white;
-  border: none;
-  padding: 10px 20px;
-  border-radius: 4px;
-  cursor: pointer;
-  font-size: 16px;
-  transition: background-color 0.3s;
-}
-
-.delete-account-button:hover {
-  background-color: #bd2130;
-}
-
-.delete-account-button:disabled {
-  background-color: #e4606d;
-  cursor: not-allowed;
-}
\ No newline at end of file
diff --git a/frontend/src/pages/profile/ProfilePage.jsx b/frontend/src/pages/profile/ProfilePage.jsx
deleted file mode 100644
index a5a9f51..0000000
--- a/frontend/src/pages/profile/ProfilePage.jsx
+++ /dev/null
@@ -1,438 +0,0 @@
-import React, { useState, useEffect, useCallback } from 'react';
-import { useNavigate } from 'react-router-dom';
-import { useAuth } from '../../contexts/AuthContext';
-import ProfileForm from '../../components/profile/ProfileForm';
-import PasswordChangeForm from '../../components/profile/PasswordChangeForm';
-import DocumentUploadForm from '../../components/profile/DocumentUploadForm';
-import MFASetupForm from '../../components/profile/MFASetupForm';
-import profileApi from '../../services/profileApi';
-import mfaApi from '../../services/mfaApi';
-import './ProfilePage.css';
-
-/**
- * Renders the user profile page with multiple tabs for editing profile info,
- * changing password, managing documents, and setting up MFA.
- */
-const ProfilePage = () => {
-  const [activeTab, setActiveTab] = useState('profile');
-  const [profileData, setProfileData] = useState(null);
-  const [loading, setLoading] = useState(true);
-  const [operationInProgress, setOperationInProgress] = useState(false); // Separate loading state for operations
-  const [error, setError] = useState(null);
-  const [successMessage, setSuccessMessage] = useState('');
-  const { user, logout, updateUser } = useAuth();
-  const navigate = useNavigate();
-
-  // Clear success message after 5 seconds
-  useEffect(() => {
-    if (successMessage) {
-      const timer = setTimeout(() => {
-        setSuccessMessage('');
-      }, 5000);
-      return () => clearTimeout(timer);
-    }
-  }, [successMessage]);
-
-  /**
-   * Fetches the user's full profile data from the backend API.
-   * Updates the local state and potentially the auth context if user details differ.
-   * Uses useCallback to prevent unnecessary re-fetching.
-   * @async
-   */
-  // Use useCallback to memoize fetchProfileData
-  const fetchProfileData = useCallback(async () => {
-    try {
-      setLoading(true);
-      setError(null);
-      const response = await profileApi.getProfile();
-      
-      if (!response || !response.data) {
-        throw new Error('Invalid response from server');
-      }
-      
-      setProfileData(response.data);
-      
-      // Update user context if needed
-      if (user && response.data && 
-          (user.name !== response.data.name || 
-           user.email !== response.data.email ||
-           user.role !== response.data.role)) {
-        updateUser({
-          ...user,
-          name: response.data.name,
-          email: response.data.email,
-          role: response.data.role
-        });
-      }
-    } catch (err) {
-      console.error('Error fetching profile:', err);
-      setError('Failed to load profile data. Please try again later.');
-    } finally {
-      setLoading(false);
-    }
-  }, [user, updateUser]);
-
-  useEffect(() => {
-    fetchProfileData();
-  }, [fetchProfileData]);
-
-  /**
-   * Handles the submission of the profile information form.
-   * Sends updated data to the backend API.
-   * @async
-   * @param {object} updatedData - The updated profile data from the form.
-   * @returns {Promise<{success: boolean, message: string}>} Result object indicating success or failure.
-   */
-  const handleProfileUpdate = async (updatedData) => {
-    try {
-      setOperationInProgress(true);
-      setError(null);
-      const response = await profileApi.updateProfile(updatedData);
-      setProfileData(response.data);
-      setSuccessMessage('Profile updated successfully!');
-      return { success: true, message: 'Profile updated successfully' };
-    } catch (err) {
-      console.error('Error updating profile:', err);
-      const errorMsg = err.response?.data?.message || 'Failed to update profile';
-      setError(errorMsg);
-      return { success: false, message: errorMsg };
-    } finally {
-      setOperationInProgress(false);
-    }
-  };
-
-  /**
-   * Handles the submission of the password change form.
-   * Sends the new password data to the backend API.
-   * @async
-   * @param {object} passwordData - Contains currentPassword, newPassword.
-   * @returns {Promise<{success: boolean, message: string}>} Result object indicating success or failure.
-   */
-  const handlePasswordChange = async (passwordData) => {
-    try {
-      setOperationInProgress(true);
-      setError(null);
-      await profileApi.changePassword(passwordData);
-      setSuccessMessage('Password changed successfully!');
-      return { success: true, message: 'Password changed successfully' };
-    } catch (err) {
-      console.error('Error changing password:', err);
-      const errorMsg = err.response?.data?.message || 'Failed to change password';
-      setError(errorMsg);
-      return { success: false, message: errorMsg };
-    } finally {
-      setOperationInProgress(false);
-    }
-  };
-
-  // MFA handlers
-  /**
-   * Object containing functions to interact with the MFA API for enabling MFA.
-   * Includes generating secrets and verifying tokens.
-   */
-  const handleMFAOperations = {
-    generateSecret: async () => {
-      try {
-        setOperationInProgress(true);
-        setError(null);
-        const response = await mfaApi.generateSecret();
-        return { success: true, data: response.data };
-      } catch (err) {
-        console.error('Error generating MFA secret:', err);
-        const errorMsg = err.response?.data?.message || 'Failed to generate MFA secret';
-        setError(errorMsg);
-        return { success: false, message: errorMsg };
-      } finally {
-        setOperationInProgress(false);
-      }
-    },
-    enableMFA: async ({ token, secret }) => {
-      try {
-        setOperationInProgress(true);
-        setError(null);
-        const response = await mfaApi.enableMFA(token, secret);
-        await fetchProfileData(); // Refresh profile to update MFA status
-        setSuccessMessage('Multi-factor authentication enabled successfully!');
-        return { 
-          success: true, 
-          message: 'MFA enabled successfully', 
-          data: { recoveryCodes: response.data.recoveryCodes } 
-        };
-      } catch (err) {
-        console.error('Error enabling MFA:', err);
-        const errorMsg = err.response?.data?.message || 'Failed to enable MFA';
-        setError(errorMsg);
-        return { success: false, message: errorMsg };
-      } finally {
-        setOperationInProgress(false);
-      }
-    }
-  };
-
-  /**
-   * Handles the request to disable MFA.
-   * Sends the user's current password for verification to the backend API.
-   * @async
-   * @param {object} data - Contains the user's password.
-   * @param {string} data.password - The user's current password.
-   * @returns {Promise<{success: boolean, message: string}>} Result object indicating success or failure.
-   */
-  const handleDisableMFA = async ({ password }) => {
-    try {
-      setOperationInProgress(true);
-      setError(null);
-      await mfaApi.disableMFA(password);
-      await fetchProfileData(); // Refresh profile to update MFA status
-      setSuccessMessage('Multi-factor authentication disabled successfully!');
-      return { success: true, message: 'MFA disabled successfully' };
-    } catch (err) {
-      console.error('Error disabling MFA:', err);
-      const errorMsg = err.response?.data?.message || 'Failed to disable MFA';
-      setError(errorMsg);
-      return { success: false, message: errorMsg };
-    } finally {
-      setOperationInProgress(false);
-    }
-  };
-
-  /**
-   * Handles the submission of a new document upload.
-   * Sends the file data via FormData to the backend API.
-   * @async
-   * @param {FormData} formData - The FormData object containing the file and type.
-   * @returns {Promise<{success: boolean, message: string, documentId?: string}>} Result object.
-   */
-  const handleDocumentUpload = async (formData) => {
-    try {
-      setOperationInProgress(true);
-      setError(null);
-      const response = await profileApi.uploadDocument(formData);
-      await fetchProfileData(); // Refresh profile data to get updated documents list
-      setSuccessMessage('Document uploaded successfully!');
-      return { 
-        success: true, 
-        message: 'Document uploaded successfully',
-        documentId: response.data?.documentId
-      };
-    } catch (err) {
-      console.error('Error uploading document:', err);
-      const errorMsg = err.response?.data?.message || 'Failed to upload document';
-      setError(errorMsg);
-      return { success: false, message: errorMsg };
-    } finally {
-      setOperationInProgress(false);
-    }
-  };
-
-  /**
-   * Handles the deletion of a specific document.
-   * Sends a request to the backend API to delete the document by ID.
-   * @async
-   * @param {string} docId - The ID of the document to delete.
-   * @returns {Promise<{success: boolean, message: string}>} Result object.
-   */
-  // Function to handle document deletion and refresh
-  const handleDocumentDelete = async (docId) => {
-    try {
-      setOperationInProgress(true);
-      setError(null);
-      await profileApi.deleteDocument(docId);
-      await fetchProfileData(); // Refresh after delete
-      setSuccessMessage('Document deleted successfully!');
-      return { success: true, message: 'Document deleted successfully' };
-    } catch (err) {
-      console.error('Error deleting document:', err);
-      const errorMsg = err.response?.data?.message || 'Failed to delete document';
-      setError(errorMsg);
-      return { success: false, message: errorMsg };
-    } finally {
-      setOperationInProgress(false);
-    }
-  };
-
-  /**
-   * Handles the user's request to delete their own account.
-   * Shows a confirmation dialog before proceeding.
-   * @async
-   */
-  const handleDeleteAccount = async () => {
-    // Confirmation dialog
-    const isConfirmed = window.confirm(
-      "Are you sure you want to delete your account? This action cannot be undone and all your data will be permanently deleted."
-    );
-    
-    if (!isConfirmed) return;
-    
-    try {
-      setOperationInProgress(true);
-      setError(null);
-      await profileApi.deleteAccount();
-      // Show success message temporarily before redirecting
-      setSuccessMessage('Account deleted successfully. Redirecting...');
-      
-      // Short delay before logout and redirect
-      setTimeout(() => {
-        // Log user out after account deletion
-        logout();
-        // Redirect to homepage
-        navigate('/');
-      }, 1500);
-    } catch (err) {
-      console.error('Error deleting account:', err);
-      setError(err.response?.data?.message || 'Failed to delete account. Please try again.');
-      setOperationInProgress(false);
-    }
-  };
-
-  // Initial loading state
-  if (loading && !profileData) {
-    return (
-      <div className="profile-loading-container">
-        <div className="profile-loading">Loading profile information...</div>
-      </div>
-    );
-  }
-
-  // Check if user is customer to show delete option
-  const canDeleteAccount = profileData?.role === 'customer' || user?.role === 'customer'; 
-
-  return (
-    <div className="profile-page">
-      <h2>My Profile</h2>
-      
-      {error && (
-        <div className="profile-message error-message" role="alert">
-          <span className="message-icon">⚠️</span> {error}
-        </div>
-      )}
-      
-      {successMessage && (
-        <div className="profile-message success-message" role="status">
-          <span className="message-icon">✓</span> {successMessage}
-        </div>
-      )}
-      
-      <div className="profile-tabs" role="tablist">
-        <button 
-          className={`tab-button ${activeTab === 'profile' ? 'active' : ''}`}
-          onClick={() => setActiveTab('profile')}
-          role="tab"
-          aria-selected={activeTab === 'profile'}
-          id="tab-profile"
-          aria-controls="panel-profile"
-        >
-          Profile Information
-        </button>
-        <button 
-          className={`tab-button ${activeTab === 'password' ? 'active' : ''}`}
-          onClick={() => setActiveTab('password')}
-          role="tab"
-          aria-selected={activeTab === 'password'}
-          id="tab-password"
-          aria-controls="panel-password"
-        >
-          Change Password
-        </button>
-        <button 
-          className={`tab-button ${activeTab === 'security' ? 'active' : ''}`}
-          onClick={() => setActiveTab('security')}
-          role="tab"
-          aria-selected={activeTab === 'security'}
-          id="tab-security"
-          aria-controls="panel-security"
-        >
-          Security
-        </button>
-        <button 
-          className={`tab-button ${activeTab === 'documents' ? 'active' : ''}`}
-          onClick={() => setActiveTab('documents')}
-          role="tab"
-          aria-selected={activeTab === 'documents'}
-          id="tab-documents"
-          aria-controls="panel-documents"
-        >
-          Documents
-        </button>
-      </div>
-      
-      <div className="profile-content">
-        <div 
-          role="tabpanel" 
-          id="panel-profile" 
-          aria-labelledby="tab-profile"
-          hidden={activeTab !== 'profile'}
-        >
-          {activeTab === 'profile' && (
-            <ProfileForm 
-              profileData={profileData} 
-              onSubmit={handleProfileUpdate}
-              loading={operationInProgress}
-            />
-          )}
-        </div>
-        
-        <div 
-          role="tabpanel" 
-          id="panel-password" 
-          aria-labelledby="tab-password"
-          hidden={activeTab !== 'password'}
-        >
-          {activeTab === 'password' && (
-            <PasswordChangeForm 
-              onSubmit={handlePasswordChange}
-              loading={operationInProgress}
-            />
-          )}
-        </div>
-        
-        <div 
-          role="tabpanel" 
-          id="panel-security" 
-          aria-labelledby="tab-security"
-          hidden={activeTab !== 'security'}
-        >
-          {activeTab === 'security' && (
-            <MFASetupForm 
-              profileData={profileData}
-              onEnableMFA={handleMFAOperations}
-              onDisableMFA={handleDisableMFA}
-              loading={operationInProgress}
-            />
-          )}
-        </div>
-        
-        <div 
-          role="tabpanel" 
-          id="panel-documents" 
-          aria-labelledby="tab-documents"
-          hidden={activeTab !== 'documents'}
-        >
-          {activeTab === 'documents' && (
-            <DocumentUploadForm 
-              documents={profileData?.documents || []}
-              onUpload={handleDocumentUpload}
-              onDelete={handleDocumentDelete}
-              loading={operationInProgress}
-            />
-          )}
-        </div>
-      </div>
-      
-      {canDeleteAccount && (
-        <div className="delete-account-section">
-          <h3>Delete Account</h3>
-          <p>Once you delete your account, there is no going back. Please be certain.</p>
-          <button 
-            className="delete-account-button"
-            onClick={handleDeleteAccount}
-            disabled={operationInProgress}
-          >
-            {operationInProgress ? 'Processing...' : 'Delete My Account'}
-          </button>
-        </div>
-      )}
-    </div>
-  );
-};
-
-export default ProfilePage;
\ No newline at end of file
diff --git a/frontend/src/pages/profile/UserDocumentsPage.jsx b/frontend/src/pages/profile/UserDocumentsPage.jsx
deleted file mode 100644
index 447276f..0000000
--- a/frontend/src/pages/profile/UserDocumentsPage.jsx
+++ /dev/null
@@ -1,158 +0,0 @@
-import React, { useState, useEffect } from 'react';
-import { useAuth } from '../../contexts/AuthContext';
-import DocumentUploadForm from '../../components/profile/DocumentUploadForm';
-
-/**
- * Page component for users to manage their documents
- */
-const UserDocumentsPage = () => {
-  const { user } = useAuth();
-  const [documents, setDocuments] = useState([]);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState('');
-  const [successMessage, setSuccessMessage] = useState('');
-  
-  // Fetch user documents on component mount
-  useEffect(() => {
-    fetchUserDocuments();
-  }, []);
-  
-  // Fetch user documents from API
-  const fetchUserDocuments = async () => {
-    if (!user?._id) return;
-    
-    setLoading(true);
-    try {
-      // Simulate API call
-      setTimeout(() => {
-        const mockDocuments = [
-          {
-            _id: 'doc1',
-            userId: user._id,
-            type: 'identification',
-            filename: 'national_id.pdf',
-            url: '#',
-            uploadedAt: '2025-04-10T15:30:00',
-            fileSize: 1024000
-          },
-          {
-            _id: 'doc2',
-            userId: user._id,
-            type: 'proof_of_address',
-            filename: 'utility_bill.pdf',
-            url: '#',
-            uploadedAt: '2025-04-05T11:20:00',
-            fileSize: 850000
-          },
-          {
-            _id: 'doc3',
-            userId: user._id,
-            type: 'contract',
-            filename: 'service_agreement.pdf',
-            url: '#',
-            uploadedAt: '2025-03-15T09:45:00',
-            fileSize: 1500000
-          }
-        ];
-        setDocuments(mockDocuments);
-        setLoading(false);
-      }, 1000);
-    } catch (err) {
-      console.error('Error fetching documents:', err);
-      setError('Failed to load your documents. Please try again later.');
-      setLoading(false);
-    }
-  };
-  
-  // Handle document upload
-  const handleUploadDocument = async (formData) => {
-    setLoading(true);
-    setError('');
-    setSuccessMessage('');
-    
-    try {
-      // Simulate API call
-      return new Promise((resolve) => {
-        setTimeout(() => {
-          // Generate a mock document
-          const newDocument = {
-            _id: `doc${Date.now()}`,
-            userId: user._id,
-            type: formData.get('type'),
-            filename: formData.get('document').name,
-            url: '#',
-            uploadedAt: new Date().toISOString(),
-            fileSize: formData.get('document').size
-          };
-          
-          setDocuments((prevDocs) => [...prevDocs, newDocument]);
-          setSuccessMessage('Document uploaded successfully!');
-          setLoading(false);
-          
-          // Auto-hide success message after 5 seconds
-          setTimeout(() => {
-            setSuccessMessage('');
-          }, 5000);
-          
-          resolve({ success: true, document: newDocument });
-        }, 1500);
-      });
-    } catch (err) {
-      console.error('Error uploading document:', err);
-      setError('Failed to upload document. Please try again.');
-      setLoading(false);
-      return { success: false, message: err.message || 'Upload failed' };
-    }
-  };
-  
-  // Handle document deletion
-  const handleDeleteDocument = async (documentId) => {
-    setLoading(true);
-    setError('');
-    setSuccessMessage('');
-    
-    try {
-      // Simulate API call
-      return new Promise((resolve) => {
-        setTimeout(() => {
-          setDocuments((prevDocs) => 
-            prevDocs.filter((doc) => doc._id !== documentId)
-          );
-          setSuccessMessage('Document deleted successfully!');
-          setLoading(false);
-          
-          // Auto-hide success message after 5 seconds
-          setTimeout(() => {
-            setSuccessMessage('');
-          }, 5000);
-          
-          resolve({ success: true });
-        }, 1000);
-      });
-    } catch (err) {
-      console.error('Error deleting document:', err);
-      setError('Failed to delete document. Please try again.');
-      setLoading(false);
-      return { success: false, message: err.message || 'Deletion failed' };
-    }
-  };
-
-  return (
-    <div className="dashboard-content">
-      <h2>My Documents</h2>
-      <p>Upload and manage your important documents in one secure place.</p>
-      
-      {error && <div className="form-error">{error}</div>}
-      {successMessage && <div className="alert-success">{successMessage}</div>}
-      
-      <DocumentUploadForm 
-        documents={documents}
-        onUpload={handleUploadDocument}
-        onDelete={handleDeleteDocument}
-        loading={loading}
-      />
-    </div>
-  );
-};
-
-export default UserDocumentsPage;
\ No newline at end of file
diff --git a/frontend/src/pages/profile/UserSubscriptionsPage.css b/frontend/src/pages/profile/UserSubscriptionsPage.css
deleted file mode 100644
index e0c3c5f..0000000
--- a/frontend/src/pages/profile/UserSubscriptionsPage.css
+++ /dev/null
@@ -1,304 +0,0 @@
-.subscription-section {
-  margin-bottom: 2rem;
-  background-color: #fff;
-  border-radius: 8px;
-  padding: 1.5rem;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-.subscription-error {
-  background-color: #ffebee;
-  color: #d32f2f;
-  padding: 0.8rem;
-  border-radius: 4px;
-  margin-bottom: 1rem;
-}
-
-.subscription-success {
-  background-color: #e8f5e9;
-  color: #2e7d32;
-  padding: 0.8rem;
-  border-radius: 4px;
-  margin-bottom: 1rem;
-}
-
-.no-subscription {
-  text-align: center;
-  padding: 2rem 0;
-}
-
-.subscription-card {
-  border: 1px solid #e0e0e0;
-  border-radius: 8px;
-  padding: 1.5rem;
-  margin-bottom: 1rem;
-}
-
-.subscription-header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  margin-bottom: 1rem;
-  border-bottom: 1px solid #e0e0e0;
-  padding-bottom: 0.8rem;
-}
-
-.subscription-header h4 {
-  margin: 0;
-  color: #333;
-  font-size: 1.2rem;
-}
-
-.subscription-status {
-  padding: 4px 12px;
-  border-radius: 50px;
-  font-size: 0.85rem;
-  font-weight: 500;
-}
-
-.status-active {
-  background-color: #e8f5e9;
-  color: #2e7d32;
-}
-
-.status-cancelled {
-  background-color: #f5f5f5;
-  color: #757575;
-}
-
-.status-pending {
-  background-color: #fff8e1;
-  color: #f57c00;
-}
-
-.subscription-details {
-  margin-bottom: 1rem;
-}
-
-.detail-row {
-  display: flex;
-  margin-bottom: 0.5rem;
-}
-
-.detail-label {
-  font-weight: 500;
-  width: 120px;
-  color: #666;
-}
-
-.subscription-features {
-  margin: 1rem 0;
-}
-
-.subscription-features h5 {
-  margin: 0 0 0.5rem 0;
-  color: #333;
-}
-
-.subscription-features ul {
-  list-style-type: none;
-  padding-left: 0;
-}
-
-.subscription-features li {
-  padding: 0.3rem 0;
-  position: relative;
-  padding-left: 1.5rem;
-}
-
-.subscription-features li::before {
-  content: '✓';
-  position: absolute;
-  left: 0;
-  color: #4caf50;
-}
-
-.subscription-actions {
-  display: flex;
-  gap: 1rem;
-  margin-top: 1rem;
-}
-
-/* Plan cards */
-.plans-container {
-  display: grid;
-  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
-  gap: 1.5rem;
-  margin-top: 1rem;
-}
-
-.plan-card {
-  position: relative;
-  border: 1px solid #e0e0e0;
-  border-radius: 8px;
-  padding: 1.5rem;
-  display: flex;
-  flex-direction: column;
-  height: 100%;
-  transition: all 0.3s ease;
-}
-
-.plan-card:hover {
-  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
-  transform: translateY(-3px);
-}
-
-.plan-card h4 {
-  margin: 0.5rem 0;
-  font-size: 1.3rem;
-  text-align: center;
-}
-
-.recommended-badge, .current-badge {
-  position: absolute;
-  top: -10px;
-  left: 50%;
-  transform: translateX(-50%);
-  padding: 4px 12px;
-  border-radius: 50px;
-  font-size: 0.75rem;
-  font-weight: 600;
-  letter-spacing: 0.5px;
-}
-
-.recommended-badge {
-  background-color: #2196f3;
-  color: white;
-}
-
-.current-badge {
-  background-color: #4caf50;
-  color: white;
-}
-
-.plan-card.recommended {
-  border: 2px solid #2196f3;
-}
-
-.plan-card.current {
-  border: 2px solid #4caf50;
-}
-
-.plan-price {
-  text-align: center;
-  margin: 1rem 0;
-}
-
-.price {
-  font-size: 1.8rem;
-  font-weight: 600;
-  color: #333;
-}
-
-.frequency {
-  font-size: 1rem;
-  color: #666;
-}
-
-.plan-description {
-  text-align: center;
-  color: #666;
-  margin-bottom: 1.5rem;
-}
-
-.plan-features {
-  flex-grow: 1;
-}
-
-.plan-features ul {
-  list-style-type: none;
-  padding-left: 0;
-}
-
-.plan-features li {
-  padding: 0.5rem 0;
-  border-bottom: 1px solid #f0f0f0;
-  position: relative;
-  padding-left: 1.5rem;
-}
-
-.plan-features li::before {
-  content: '✓';
-  position: absolute;
-  left: 0;
-  color: #4caf50;
-}
-
-.plan-features li:last-child {
-  border-bottom: none;
-}
-
-.plan-card button {
-  margin-top: 1.5rem;
-}
-
-.btn {
-  padding: 10px 20px;
-  border: none;
-  border-radius: 4px;
-  font-weight: 500;
-  cursor: pointer;
-  transition: background-color 0.3s ease;
-}
-
-.btn.primary {
-  background-color: #2196f3;
-  color: white;
-}
-
-.btn.primary:hover {
-  background-color: #1976d2;
-}
-
-.btn.secondary {
-  background-color: #f5f5f5;
-  color: #333;
-}
-
-.btn.secondary:hover {
-  background-color: #e0e0e0;
-}
-
-.btn.cancel {
-  background-color: #f5f5f5;
-  color: #d32f2f;
-}
-
-.btn.cancel:hover {
-  background-color: #ffebee;
-}
-
-.btn.current-btn {
-  background-color: #e8f5e9;
-  color: #2e7d32;
-  cursor: default;
-}
-
-.btn:disabled {
-  opacity: 0.7;
-  cursor: not-allowed;
-}
-
-/* Responsive adjustments */
-@media (max-width: 768px) {
-  .plans-container {
-    grid-template-columns: 1fr;
-  }
-  
-  .subscription-header {
-    flex-direction: column;
-    align-items: flex-start;
-  }
-  
-  .subscription-status {
-    margin-top: 0.5rem;
-  }
-  
-  .subscription-actions {
-    flex-direction: column;
-  }
-  
-  .subscription-actions button {
-    width: 100%;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/pages/profile/UserSubscriptionsPage.jsx b/frontend/src/pages/profile/UserSubscriptionsPage.jsx
deleted file mode 100644
index a809aa0..0000000
--- a/frontend/src/pages/profile/UserSubscriptionsPage.jsx
+++ /dev/null
@@ -1,364 +0,0 @@
-import React, { useState, useEffect } from 'react';
-import { useAuth } from '../../contexts/AuthContext';
-import './UserSubscriptionsPage.css';
-
-/**
- * Component for users to view and manage their subscription plans
- */
-const UserSubscriptionsPage = () => {
-  const { user } = useAuth();
-  const [subscriptions, setSubscriptions] = useState([]);
-  const [availablePlans, setAvailablePlans] = useState([]);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState('');
-  const [successMessage, setSuccessMessage] = useState('');
-  
-  // Fetch user subscriptions and available plans on component mount
-  useEffect(() => {
-    fetchUserSubscriptions();
-    fetchAvailablePlans();
-  }, []);
-  
-  // Fetch user's active subscriptions
-  const fetchUserSubscriptions = async () => {
-    if (!user?._id) return;
-    
-    setLoading(true);
-    try {
-      // Simulate API call
-      setTimeout(() => {
-        // Mock data - in a real app this would come from an API
-        const mockSubscriptions = [
-          {
-            _id: 'sub1',
-            userId: user._id,
-            planId: 'plan2',
-            planName: 'Standard',
-            status: 'active',
-            startDate: '2025-01-15T00:00:00',
-            endDate: '2025-05-15T00:00:00',
-            nextBillingDate: '2025-05-15T00:00:00',
-            amount: 59.99,
-            frequency: 'monthly',
-            features: [
-              'Weekly Waste Collection',
-              'Recycling Services',
-              'Standard Support',
-              'Online Account Management'
-            ]
-          }
-        ];
-        setSubscriptions(mockSubscriptions);
-        setLoading(false);
-      }, 1000);
-    } catch (err) {
-      console.error('Error fetching subscriptions:', err);
-      setError('Failed to load your subscriptions. Please try again later.');
-      setLoading(false);
-    }
-  };
-  
-  // Fetch available subscription plans
-  const fetchAvailablePlans = async () => {
-    try {
-      // Simulate API call
-      setTimeout(() => {
-        // Mock data - in a real app this would come from an API
-        const mockPlans = [
-          {
-            _id: 'plan1',
-            name: 'Basic',
-            description: 'Essential waste management services for small households',
-            price: 29.99,
-            billingFrequency: 'monthly',
-            features: [
-              'Bi-weekly Waste Collection',
-              'Basic Recycling Services',
-              'Email Support',
-              'Online Account Access'
-            ],
-            recommended: false
-          },
-          {
-            _id: 'plan2',
-            name: 'Standard',
-            description: 'Complete waste management solution for households',
-            price: 59.99,
-            billingFrequency: 'monthly',
-            features: [
-              'Weekly Waste Collection',
-              'Recycling Services',
-              'Standard Support',
-              'Online Account Management'
-            ],
-            recommended: true
-          },
-          {
-            _id: 'plan3',
-            name: 'Premium',
-            description: 'Premium waste management for businesses and large households',
-            price: 99.99,
-            billingFrequency: 'monthly',
-            features: [
-              'Twice Weekly Waste Collection',
-              'Full Recycling Services',
-              'Priority Support',
-              'Detailed Analytics',
-              'Customized Collection Schedule'
-            ],
-            recommended: false
-          }
-        ];
-        setAvailablePlans(mockPlans);
-      }, 1200);
-    } catch (err) {
-      console.error('Error fetching plans:', err);
-    }
-  };
-  
-  // Handle subscription upgrade/change
-  const handleChangePlan = async (planId) => {
-    setLoading(true);
-    setError('');
-    setSuccessMessage('');
-    
-    try {
-      // Simulate API call
-      return new Promise((resolve) => {
-        setTimeout(() => {
-          const selectedPlan = availablePlans.find(plan => plan._id === planId);
-          
-          if (!selectedPlan) {
-            setError('Selected plan not found');
-            setLoading(false);
-            resolve({ success: false });
-            return;
-          }
-          
-          // Create a mock updated subscription
-          const updatedSubscription = {
-            _id: subscriptions[0]?._id || `sub${Date.now()}`,
-            userId: user._id,
-            planId: selectedPlan._id,
-            planName: selectedPlan.name,
-            status: 'active',
-            startDate: new Date().toISOString(),
-            endDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString(),
-            nextBillingDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
-            amount: selectedPlan.price,
-            frequency: selectedPlan.billingFrequency,
-            features: selectedPlan.features
-          };
-          
-          setSubscriptions([updatedSubscription]);
-          setSuccessMessage(`Successfully changed to ${selectedPlan.name} plan!`);
-          setLoading(false);
-          
-          // Auto-hide success message after 5 seconds
-          setTimeout(() => {
-            setSuccessMessage('');
-          }, 5000);
-          
-          resolve({ success: true });
-        }, 1500);
-      });
-    } catch (err) {
-      console.error('Error changing subscription plan:', err);
-      setError('Failed to change your subscription plan. Please try again.');
-      setLoading(false);
-      return { success: false };
-    }
-  };
-  
-  // Handle subscription cancellation
-  const handleCancelSubscription = async (subscriptionId) => {
-    if (!window.confirm('Are you sure you want to cancel your subscription? This action cannot be undone.')) {
-      return;
-    }
-    
-    setLoading(true);
-    setError('');
-    setSuccessMessage('');
-    
-    try {
-      // Simulate API call
-      return new Promise((resolve) => {
-        setTimeout(() => {
-          const updatedSubscriptions = subscriptions.map(sub => 
-            sub._id === subscriptionId 
-              ? { ...sub, status: 'cancelled', endDate: new Date().toISOString() } 
-              : sub
-          );
-          
-          setSubscriptions(updatedSubscriptions);
-          setSuccessMessage('Your subscription has been cancelled.');
-          setLoading(false);
-          
-          // Auto-hide success message after 5 seconds
-          setTimeout(() => {
-            setSuccessMessage('');
-          }, 5000);
-          
-          resolve({ success: true });
-        }, 1000);
-      });
-    } catch (err) {
-      console.error('Error cancelling subscription:', err);
-      setError('Failed to cancel your subscription. Please try again.');
-      setLoading(false);
-      return { success: false };
-    }
-  };
-  
-  // Format date for display
-  const formatDate = (dateString) => {
-    return new Date(dateString).toLocaleDateString();
-  };
-
-  return (
-    <div className="dashboard-content">
-      <h2>My Subscriptions</h2>
-      <p>View and manage your SmartBin subscription plans</p>
-      
-      {error && <div className="subscription-error">{error}</div>}
-      {successMessage && <div className="subscription-success">{successMessage}</div>}
-      
-      {/* Current Subscription Section */}
-      <div className="subscription-section">
-        <h3>Current Subscription</h3>
-        
-        {loading ? (
-          <p>Loading your subscription details...</p>
-        ) : subscriptions.length === 0 ? (
-          <div className="no-subscription">
-            <p>You don't have any active subscriptions.</p>
-            <button 
-              className="btn primary"
-              onClick={() => window.scrollTo({ top: document.getElementById('available-plans').offsetTop, behavior: 'smooth' })}
-            >
-              View Available Plans
-            </button>
-          </div>
-        ) : (
-          subscriptions.map(subscription => (
-            <div key={subscription._id} className="subscription-card">
-              <div className="subscription-header">
-                <h4>{subscription.planName} Plan</h4>
-                <span className={`subscription-status status-${subscription.status}`}>
-                  {subscription.status.charAt(0).toUpperCase() + subscription.status.slice(1)}
-                </span>
-              </div>
-              
-              <div className="subscription-details">
-                <div className="detail-row">
-                  <span className="detail-label">Price:</span>
-                  <span className="detail-value">${subscription.amount} / {subscription.frequency}</span>
-                </div>
-                
-                <div className="detail-row">
-                  <span className="detail-label">Start Date:</span>
-                  <span className="detail-value">{formatDate(subscription.startDate)}</span>
-                </div>
-                
-                {subscription.status === 'active' && (
-                  <>
-                    <div className="detail-row">
-                      <span className="detail-label">Next Billing:</span>
-                      <span className="detail-value">{formatDate(subscription.nextBillingDate)}</span>
-                    </div>
-                  </>
-                )}
-                
-                {subscription.status === 'cancelled' && (
-                  <div className="detail-row">
-                    <span className="detail-label">End Date:</span>
-                    <span className="detail-value">{formatDate(subscription.endDate)}</span>
-                  </div>
-                )}
-              </div>
-              
-              <div className="subscription-features">
-                <h5>Features</h5>
-                <ul>
-                  {subscription.features.map((feature, index) => (
-                    <li key={index}>{feature}</li>
-                  ))}
-                </ul>
-              </div>
-              
-              {subscription.status === 'active' && (
-                <div className="subscription-actions">
-                  <button 
-                    className="btn secondary"
-                    onClick={() => window.scrollTo({ top: document.getElementById('available-plans').offsetTop, behavior: 'smooth' })}
-                  >
-                    Change Plan
-                  </button>
-                  <button 
-                    className="btn cancel"
-                    onClick={() => handleCancelSubscription(subscription._id)}
-                    disabled={loading}
-                  >
-                    Cancel Subscription
-                  </button>
-                </div>
-              )}
-            </div>
-          ))
-        )}
-      </div>
-      
-      {/* Available Plans Section */}
-      <div id="available-plans" className="subscription-section">
-        <h3>Available Plans</h3>
-        
-        {loading && <p>Loading available plans...</p>}
-        
-        <div className="plans-container">
-          {availablePlans.map(plan => {
-            // Check if user is currently subscribed to this plan
-            const isCurrentPlan = subscriptions.some(sub => 
-              sub.planId === plan._id && sub.status === 'active'
-            );
-            
-            return (
-              <div 
-                key={plan._id} 
-                className={`plan-card ${plan.recommended ? 'recommended' : ''} ${isCurrentPlan ? 'current' : ''}`}
-              >
-                {plan.recommended && <div className="recommended-badge">Recommended</div>}
-                {isCurrentPlan && <div className="current-badge">Current Plan</div>}
-                
-                <h4>{plan.name}</h4>
-                <div className="plan-price">
-                  <span className="price">${plan.price}</span>
-                  <span className="frequency">/ {plan.billingFrequency}</span>
-                </div>
-                
-                <p className="plan-description">{plan.description}</p>
-                
-                <div className="plan-features">
-                  <ul>
-                    {plan.features.map((feature, index) => (
-                      <li key={index}>{feature}</li>
-                    ))}
-                  </ul>
-                </div>
-                
-                <button 
-                  className={`btn ${isCurrentPlan ? 'current-btn' : 'primary'}`}
-                  onClick={() => handleChangePlan(plan._id)}
-                  disabled={loading || isCurrentPlan}
-                >
-                  {isCurrentPlan ? 'Current Plan' : 'Select Plan'}
-                </button>
-              </div>
-            );
-          })}
-        </div>
-      </div>
-    </div>
-  );
-};
-
-export default UserSubscriptionsPage;
\ No newline at end of file
diff --git a/frontend/src/pages/reports/AttendanceReportsPage.jsx b/frontend/src/pages/reports/AttendanceReportsPage.jsx
deleted file mode 100644
index c1cb84a..0000000
--- a/frontend/src/pages/reports/AttendanceReportsPage.jsx
+++ /dev/null
@@ -1,502 +0,0 @@
-import React, { useState, useEffect } from 'react';
-import { 
-  BarChart, 
-  Bar, 
-  XAxis, 
-  YAxis, 
-  CartesianGrid, 
-  Tooltip, 
-  Legend, 
-  ResponsiveContainer,
-  PieChart,
-  Pie,
-  Cell
-} from 'recharts';
-import { LinearProgress } from '@mui/material'; // Assuming Material UI is used, adjust if needed
-import attendanceApi from '../../services/attendanceApi';
-import './FinancialReportsPage.css'; // Reuse same styling
-
-const AttendanceReportsPage = () => {
-  const [reportType, setReportType] = useState('monthly');
-  const [startDate, setStartDate] = useState('');
-  const [endDate, setEndDate] = useState('');
-  const [month, setMonth] = useState(new Date().getMonth() + 1); // Current month (1-12)
-  const [year, setYear] = useState(new Date().getFullYear()); // Current year
-  const [staffId, setStaffId] = useState('');
-  const [staffList, setStaffList] = useState([]);
-  const [reportData, setReportData] = useState(null);
-  const [loading, setLoading] = useState(false);
-  const [exportLoading, setExportLoading] = useState(false);
-  const [error, setError] = useState('');
-
-  // Get staff list for filtering
-  useEffect(() => {
-    const fetchStaffList = async () => {
-      try {
-        // This is a placeholder. In a real app, you would fetch staff list from an API
-        // For now, we'll leave it empty as we don't have a specific endpoint
-        // setStaffList([...]);
-      } catch (err) {
-        console.error('Error fetching staff list:', err);
-      }
-    };
-
-    fetchStaffList();
-  }, []);
-
-  const handleGenerateReport = async () => {
-    if (reportType === 'monthly') {
-      if (!month || !year) {
-        setError('Please select both month and year.');
-        return;
-      }
-    } else {
-      // For detailed reports
-      if (!startDate || !endDate) {
-        setError('Please select both start and end dates.');
-        return;
-      }
-      
-      // Validate date range
-      if (new Date(startDate) > new Date(endDate)) {
-        setError('Start date cannot be after end date.');
-        return;
-      }
-    }
-    
-    setLoading(true);
-    setError('');
-    setReportData(null);
-    
-    try {
-      let response;
-      
-      switch (reportType) {
-        case 'monthly':
-          response = await attendanceApi.getAttendanceSummary(month, year);
-          setReportData(response.data);
-          break;
-        case 'detailed':
-          response = await attendanceApi.getDetailedAttendanceReport(startDate, endDate, staffId || undefined);
-          setReportData(response.data);
-          break;
-        default:
-          throw new Error('Invalid report type selected');
-      }
-    } catch (err) {
-      console.error('Report generation error:', err);
-      setError(err.response?.data?.message || `Failed to generate ${reportType} report.`);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  const handleExportReport = async () => {
-    if (reportType === 'monthly' && (!month || !year)) {
-      setError('Please select both month and year to export report.');
-      return;
-    }
-    
-    setExportLoading(true);
-    setError('');
-    
-    try {
-      let response;
-      
-      if (reportType === 'monthly') {
-        response = await attendanceApi.exportAttendanceReport(month, year);
-      } else {
-        // For detailed report, we need to generate the summary first
-        if (!reportData) {
-          await handleGenerateReport();
-        }
-        response = await attendanceApi.exportAttendanceReport(month, year);
-      }
-      
-      // Create a blob from the PDF data
-      const blob = new Blob([response.data], { type: 'application/pdf' });
-      
-      // Create a link and trigger download
-      const url = window.URL.createObjectURL(blob);
-      const a = document.createElement('a');
-      const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
-                         'July', 'August', 'September', 'October', 'November', 'December'];
-                         
-
-      a.href = url;
-      a.download = `attendance-report-${monthNames[month-1]}-${year}.pdf`;
-      document.body.appendChild(a);
-      a.click();
-      window.URL.revokeObjectURL(url);
-      document.body.removeChild(a);
-    } catch (err) {
-      console.error('Report export error:', err);
-      setError(err.response?.data?.message || 'Failed to export attendance report.');
-    } finally {
-      setExportLoading(false);
-    }
-  };
-
-  const renderMonthlySummary = (data) => {
-    if (!data || data.length === 0) return <p>No attendance data available for the selected month.</p>;
-    
-    // Process data for charts
-    // Calculate department-wide statistics
-    let totalHours = 0;
-    let totalPresent = 0;
-    let totalAbsent = 0;
-    let totalLate = 0;
-    let totalLeave = 0;
-    
-    data.forEach(staff => {
-      totalHours += staff.summary?.totalHours || 0;
-      totalPresent += staff.summary?.presentDays || 0;
-      totalAbsent += staff.summary?.absentDays || 0;
-      totalLate += staff.summary?.lateDays || 0;
-      totalLeave += staff.summary?.leaveDays || 0;
-    });
-    
-    // Prepare status distribution data for pie chart
-    const statusData = [
-      { name: 'Present', value: totalPresent },
-      { name: 'Absent', value: totalAbsent },
-      { name: 'Late', value: totalLate },
-      { name: 'On Leave', value: totalLeave }
-    ].filter(item => item.value > 0);
-    
-    // Prepare staff hours data for bar chart
-    const staffHoursData = data.map(staff => ({
-      name: staff.staff?.name || 'Unknown',
-      hours: staff.summary?.totalHours || 0
-    })).sort((a, b) => b.hours - a.hours); // Sort by hours (descending)
-    
-    const COLORS = ['#4caf50', '#f44336', '#ff9800', '#2196f3'];
-    
-    return (
-      <div className="report-content">
-        <div className="report-summary">
-          <h4>Department Summary</h4>
-          <div className="summary-grid">
-            <div className="summary-item">
-              <span className="label">Total Hours:</span>
-              <span className="value">{totalHours.toFixed(2)}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Present Days:</span>
-              <span className="value">{totalPresent}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Absent Days:</span>
-              <span className="value">{totalAbsent}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Late Days:</span>
-              <span className="value">{totalLate}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Leave Days:</span>
-              <span className="value">{totalLeave}</span>
-            </div>
-          </div>
-        </div>
-        
-        <div className="report-charts-grid">
-          <div className="chart-container">
-            <h4>Attendance Status Distribution</h4>
-            <ResponsiveContainer width="100%" height={300}>
-              <PieChart>
-                <Pie
-                  data={statusData}
-                  cx="50%"
-                  cy="50%"
-                  outerRadius={100}
-                  fill="#8884d8"
-                  dataKey="value"
-                  nameKey="name"
-                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
-                >
-                  {statusData.map((entry, index) => (
-                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
-                  ))}
-                </Pie>
-                <Tooltip formatter={(value) => `${value} days`} />
-              </PieChart>
-            </ResponsiveContainer>
-          </div>
-          
-          <div className="chart-container">
-            <h4>Staff Hours Worked</h4>
-            <ResponsiveContainer width="100%" height={300}>
-              <BarChart data={staffHoursData.slice(0, 10)}>
-                <CartesianGrid strokeDasharray="3 3" />
-                <XAxis dataKey="name" />
-                <YAxis />
-                <Tooltip formatter={(value) => `${value.toFixed(2)} hours`} />
-                <Bar dataKey="hours" name="Hours" fill="#8884d8" />
-              </BarChart>
-            </ResponsiveContainer>
-          </div>
-        </div>
-        
-        <div className="report-table">
-          <h4>Staff Attendance Details</h4>
-          <table className="data-table">
-            <thead>
-              <tr>
-                <th>Staff Name</th>
-                <th>Total Hours</th>
-                <th>Present Days</th>
-                <th>Absent Days</th>
-                <th>Late Days</th>
-                <th>Leave Days</th>
-              </tr>
-            </thead>
-            <tbody>
-              {data.map((staff, index) => (
-                <tr key={index}>
-                  <td>{staff.staff?.name || 'Unknown'}</td>
-                  <td>{(staff.summary?.totalHours || 0).toFixed(2)}</td>
-                  <td>{staff.summary?.presentDays || 0}</td>
-                  <td>{staff.summary?.absentDays || 0}</td>
-                  <td>{staff.summary?.lateDays || 0}</td>
-                  <td>{staff.summary?.leaveDays || 0}</td>
-                </tr>
-              ))}
-            </tbody>
-          </table>
-        </div>
-      </div>
-    );
-  };
-  
-  const renderDetailedReport = (data) => {
-    if (!data || !data.staffReports || data.staffReports.length === 0) 
-      return <p>No attendance data available for the selected period.</p>;
-    
-    // Process working days information
-    const workingDays = data.periodInfo?.workingDays || 0;
-    
-    return (
-      <div className="report-content">
-        <div className="report-summary">
-          <h4>Attendance Period Summary</h4>
-          <div className="summary-grid">
-            <div className="summary-item">
-              <span className="label">Start Date:</span>
-              <span className="value">{new Date(data.periodInfo.startDate).toLocaleDateString()}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">End Date:</span>
-              <span className="value">{new Date(data.periodInfo.endDate).toLocaleDateString()}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Working Days:</span>
-              <span className="value">{workingDays}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Staff Members:</span>
-              <span className="value">{data.staffReports.length}</span>
-            </div>
-          </div>
-        </div>
-        
-        {data.staffReports.map((staffReport, index) => (
-          <div key={index} className="staff-report-section">
-            <h4>{staffReport.staffInfo.name}</h4>
-            <div className="summary-grid mini">
-              <div className="summary-item">
-                <span className="label">Total Hours:</span>
-                <span className="value">{staffReport.summary.totalHours.toFixed(2)}</span>
-              </div>
-              <div className="summary-item">
-                <span className="label">Attendance Rate:</span>
-                <span className="value">{staffReport.summary.attendanceRate}%</span>
-              </div>
-              <div className="summary-item">
-                <span className="label">Present:</span>
-                <span className="value">{staffReport.summary.presentDays}</span>
-              </div>
-              <div className="summary-item">
-                <span className="label">Absent:</span>
-                <span className="value">{staffReport.summary.absentDays}</span>
-              </div>
-              <div className="summary-item">
-                <span className="label">Late:</span>
-                <span className="value">{staffReport.summary.lateDays}</span>
-              </div>
-            </div>
-            
-            {staffReport.records.length > 0 && (
-              <table className="data-table mini">
-                <thead>
-                  <tr>
-                    <th>Date</th>
-                    <th>Status</th>
-                    <th>Check In</th>
-                    <th>Check Out</th>
-                    <th>Hours</th>
-                    <th>Notes</th>
-                  </tr>
-                </thead>
-                <tbody>
-                  {staffReport.records.map((record, idx) => (
-                    <tr key={idx}>
-                      <td>{new Date(record.date).toLocaleDateString()}</td>
-                      <td className={record.status.toLowerCase().replace(' ', '-')}>{record.status}</td>
-                      <td>{record.checkInTime ? new Date(record.checkInTime).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : '-'}</td>
-                      <td>{record.checkOutTime ? new Date(record.checkOutTime).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : '-'}</td>
-                      <td>{record.totalHours ? record.totalHours.toFixed(2) : '-'}</td>
-                      <td>{record.notes || '-'}</td>
-                    </tr>
-                  ))}
-                </tbody>
-              </table>
-            )}
-          </div>
-        ))}
-      </div>
-    );
-  };
-  
-  const renderReportData = () => {
-    if (!reportData) return null;
-    
-    switch (reportType) {
-      case 'monthly':
-        return renderMonthlySummary(reportData);
-      case 'detailed':
-        return renderDetailedReport(reportData);
-      default:
-        return <pre>{JSON.stringify(reportData, null, 2)}</pre>;
-    }
-  };
-  
-  const monthOptions = [
-    { value: 1, label: 'January' },
-    { value: 2, label: 'February' },
-    { value: 3, label: 'March' },
-    { value: 4, label: 'April' },
-    { value: 5, label: 'May' },
-    { value: 6, label: 'June' },
-    { value: 7, label: 'July' },
-    { value: 8, label: 'August' },
-    { value: 9, label: 'September' },
-    { value: 10, label: 'October' },
-    { value: 11, label: 'November' },
-    { value: 12, label: 'December' }
-  ];
-  
-  // Generate year options (last 5 years)
-  const currentYear = new Date().getFullYear();
-  const yearOptions = [];
-  for (let i = 0; i < 5; i++) {
-    yearOptions.push({ value: currentYear - i, label: (currentYear - i).toString() });
-  }
-
-  return (
-    <div className="attendance-reports-page dashboard-content">
-      <h2>Attendance Reports</h2>
-
-      <div className="report-controls">
-        <div className="form-group">
-          <label htmlFor="reportType">Report Type:</label>
-          <select id="reportType" value={reportType} onChange={(e) => setReportType(e.target.value)}>
-            <option value="monthly">Monthly Summary</option>
-            <option value="detailed">Detailed Attendance</option>
-          </select>
-        </div>
-        
-        {reportType === 'monthly' ? (
-          <>
-            <div className="form-group">
-              <label htmlFor="month">Month:</label>
-              <select id="month" value={month} onChange={(e) => setMonth(parseInt(e.target.value, 10))}>
-                {monthOptions.map(option => (
-                  <option key={option.value} value={option.value}>
-                    {option.label}
-                  </option>
-                ))}
-              </select>
-            </div>
-            <div className="form-group">
-              <label htmlFor="year">Year:</label>
-              <select id="year" value={year} onChange={(e) => setYear(parseInt(e.target.value, 10))}>
-                {yearOptions.map(option => (
-                  <option key={option.value} value={option.value}>
-                    {option.label}
-                  </option>
-                ))}
-              </select>
-            </div>
-          </>
-        ) : (
-          <>
-            <div className="form-group">
-              <label htmlFor="startDate">Start Date:</label>
-              <input 
-                type="date" 
-                id="startDate" 
-                value={startDate} 
-                onChange={(e) => setStartDate(e.target.value)}
-                max={endDate || undefined}
-              />
-            </div>
-            <div className="form-group">
-              <label htmlFor="endDate">End Date:</label>
-              <input 
-                type="date" 
-                id="endDate" 
-                value={endDate} 
-                onChange={(e) => setEndDate(e.target.value)} 
-                min={startDate || undefined}
-              />
-            </div>
-            {staffList.length > 0 && (
-              <div className="form-group">
-                <label htmlFor="staffId">Staff Member:</label>
-                <select id="staffId" value={staffId} onChange={(e) => setStaffId(e.target.value)}>
-                  <option value="">All Staff</option>
-                  {staffList.map(staff => (
-                    <option key={staff._id} value={staff._id}>
-                      {staff.name}
-                    </option>
-                  ))}
-                </select>
-              </div>
-            )}
-          </>
-        )}
-        
-        <button 
-          className="btn primary" 
-          onClick={handleGenerateReport} 
-          disabled={loading || (reportType === 'monthly' ? (!month || !year) : (!startDate || !endDate))}
-        >
-          {loading ? 'Generating...' : 'Generate Report'}
-        </button>
-        
-        <div className="export-section"> {/* Wrap button and progress bar */}
-          <button 
-            className="btn secondary" 
-            onClick={handleExportReport} 
-            disabled={exportLoading || (reportType === 'monthly' ? (!month || !year) : (!startDate || !endDate))}
-          >
-            {exportLoading ? 'Exporting...' : 'Export PDF Report'}
-          </button>
-          {exportLoading && <LinearProgress style={{ marginTop: '8px' }} />} {/* Add progress bar */}
-        </div>
-      </div>
-
-      {error && <div className="error-message">{error}</div>}
-
-      <div className="report-output">
-        <h3>{reportType === 'monthly' ? 'Monthly Attendance Summary' : 'Detailed Attendance Report'}</h3>
-        {loading && <p className="loading-message">Loading report data...</p>}
-        {!loading && reportData && renderReportData()}
-        {!loading && !reportData && !error && <p>Select parameters and generate a report.</p>}
-      </div>
-    </div>
-  );
-};
-
-export default AttendanceReportsPage;
\ No newline at end of file
diff --git a/frontend/src/pages/reports/FinancialReportsPage.css b/frontend/src/pages/reports/FinancialReportsPage.css
deleted file mode 100644
index b2be328..0000000
--- a/frontend/src/pages/reports/FinancialReportsPage.css
+++ /dev/null
@@ -1,200 +0,0 @@
-.financial-reports-page {
-  padding: 20px;
-  background-color: #f5f7fa;
-  border-radius: 8px;
-  color: #333;
-}
-
-.report-controls {
-  display: flex;
-  flex-wrap: wrap;
-  gap: 15px;
-  align-items: flex-end;
-  background-color: white;
-  padding: 20px;
-  border-radius: 8px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-  margin-bottom: 20px;
-}
-
-.form-group {
-  display: flex;
-  flex-direction: column;
-  margin-bottom: 10px;
-  min-width: 200px;
-}
-
-.form-group label {
-  margin-bottom: 5px;
-  font-weight: 500;
-  font-size: 0.9rem;
-}
-
-.form-group input[type="date"],
-.form-group select {
-  padding: 8px 12px;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 0.9rem;
-}
-
-.report-output {
-  background-color: white;
-  padding: 20px;
-  border-radius: 8px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-.error-message {
-  color: #dc3545;
-  background-color: #f8d7da;
-  padding: 12px;
-  border-radius: 4px;
-  margin: 20px 0;
-}
-
-.loading-message {
-  text-align: center;
-  padding: 20px;
-  color: #666;
-}
-
-/* Report Content Styles */
-.report-content {
-  margin-top: 20px;
-}
-
-.report-summary {
-  background-color: #f8f9fa;
-  padding: 15px;
-  border-radius: 6px;
-  margin-bottom: 20px;
-}
-
-.summary-grid {
-  display: grid;
-  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
-  gap: 20px;
-}
-
-.summary-item {
-  display: flex;
-  flex-direction: column;
-}
-
-.summary-item .label {
-  font-size: 0.9rem;
-  color: #666;
-}
-
-.summary-item .value {
-  font-size: 1.6rem;
-  font-weight: 600;
-  margin-top: 5px;
-  color: #333;
-}
-
-.summary-item.highlight .value {
-  color: #2c7be5;
-}
-
-.report-chart {
-  margin: 30px 0;
-}
-
-.report-charts-grid {
-  display: grid;
-  grid-template-columns: 1fr;
-  gap: 20px;
-  margin: 30px 0;
-}
-
-@media (min-width: 992px) {
-  .report-charts-grid {
-    grid-template-columns: repeat(2, 1fr);
-  }
-}
-
-.chart-container {
-  background-color: #fff;
-  padding: 20px;
-  border-radius: 8px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-.chart-container h4 {
-  margin-top: 0;
-  margin-bottom: 15px;
-}
-
-.report-table {
-  margin-top: 30px;
-  overflow-x: auto;
-}
-
-.data-table {
-  width: 100%;
-  border-collapse: collapse;
-  font-size: 0.9rem;
-}
-
-.data-table th,
-.data-table td {
-  padding: 10px 15px;
-  text-align: left;
-  border-bottom: 1px solid #eee;
-}
-
-.data-table th {
-  background-color: #f8f9fa;
-  font-weight: 500;
-}
-
-.data-table tbody tr:hover {
-  background-color: #f5f5f5;
-}
-
-/* Button styles */
-.btn {
-  padding: 8px 16px;
-  border-radius: 4px;
-  border: none;
-  font-weight: 500;
-  cursor: pointer;
-  transition: background-color 0.2s, transform 0.1s;
-}
-
-.btn:disabled {
-  opacity: 0.6;
-  cursor: not-allowed;
-}
-
-.btn.primary {
-  background-color: #3e4b2e;
-  color: white;
-}
-
-.btn.primary:hover:not(:disabled) {
-  background-color: #304021;
-  transform: translateY(-1px);
-}
-
-.btn.primary:active:not(:disabled) {
-  transform: translateY(1px);
-}
-
-/* Responsive adjustments */
-@media (max-width: 768px) {
-  .report-controls {
-    flex-direction: column;
-    align-items: stretch;
-  }
-  
-  .form-group {
-    width: 100%;
-  }
-  
-  .summary-grid {
-    grid-template-columns: 1fr;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/pages/reports/FinancialReportsPage.jsx b/frontend/src/pages/reports/FinancialReportsPage.jsx
deleted file mode 100644
index 00575f8..0000000
--- a/frontend/src/pages/reports/FinancialReportsPage.jsx
+++ /dev/null
@@ -1,442 +0,0 @@
-import React, { useState } from 'react';
-import { 
-  BarChart, 
-  Bar, 
-  XAxis, 
-  YAxis, 
-  CartesianGrid, 
-  Tooltip, 
-  Legend, 
-  ResponsiveContainer,
-  LineChart,
-  Line,
-  PieChart,
-  Pie,
-  Cell
-} from 'recharts';
-import { LinearProgress } from '@mui/material'; // Assuming Material UI is used, adjust if needed
-import financialApi from '../../services/financialApi';
-import './FinancialReportsPage.css'; 
-
-const FinancialReportsPage = () => {
-  const [reportType, setReportType] = useState('profit-loss');
-  const [startDate, setStartDate] = useState(''); 
-  const [endDate, setEndDate] = useState('');
-  const [reportData, setReportData] = useState(null);
-  const [loading, setLoading] = useState(false);
-  const [error, setError] = useState('');
-  const [exportLoading, setExportLoading] = useState(false);
-
-  const handleGenerateReport = async () => {
-    // Basic validation
-    if (!startDate || !endDate) {
-       setError('Please select both start and end dates.');
-       return;
-    }
-    
-    // Validate date range
-    if (new Date(startDate) > new Date(endDate)) {
-      setError('Start date cannot be after end date.');
-      return;
-    }
-    
-    setLoading(true);
-    setError('');
-    setReportData(null);
-    
-    try {
-      const params = { startDate, endDate };
-      let response;
-      
-      switch (reportType) {
-        case 'profit-loss':
-          response = await financialApi.getProfitLossReport(params);
-          setReportData(response.data);
-          break;
-        case 'revenue-by-customer':
-          response = await financialApi.getRevenueByCustomerReport(params);
-          setReportData(response.data);
-          break;
-        case 'expense-details':
-          response = await financialApi.getExpenseDetailsReport(params);
-          setReportData(response.data);
-          break;
-        default:
-          throw new Error('Invalid report type selected');
-      }
-    } catch (err) {
-      console.error('Report generation error:', err);
-      setError(err.response?.data?.message || `Failed to generate ${reportType} report.`);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  // Function to handle PDF export
-  const handleExportReport = async () => {
-    if (!startDate || !endDate) {
-      setError('Please select both start and end dates.');
-      return;
-    }
-    
-    setExportLoading(true);
-    setError('');
-    
-    try {
-      // Create date range parameter for the API call
-      const params = { startDate, endDate, type: reportType };
-      
-      // Call the export API function with proper parameters
-      const response = await financialApi.exportReport(params);
-      
-      // Create a blob from the response data
-      const blob = new Blob([response.data], { type: 'application/pdf' });
-      
-      // Create a URL for the blob
-      const url = window.URL.createObjectURL(blob);
-      
-      // Create a temporary link element to trigger the download
-      const link = document.createElement('a');
-      link.href = url;
-      link.setAttribute('download', `${reportType}-report-${startDate}-to-${endDate}.pdf`);
-      
-      // Append link to body, click it to start download, then clean up
-      document.body.appendChild(link);
-      link.click();
-      
-      // Clean up by removing the link and revoking the URL
-      document.body.removeChild(link);
-      window.URL.revokeObjectURL(url);
-      
-    } catch (err) {
-      console.error('Report export error:', err);
-      setError('Failed to export report as PDF. Please try again later.');
-    } finally {
-      setExportLoading(false);
-    }
-  };
-
-  // Format currency for report display
-  const formatCurrency = (amount) => {
-    return new Intl.NumberFormat('en-US', {
-      style: 'currency',
-      currency: 'USD'
-    }).format(Number(amount) || 0);
-  };
-
-  const renderProfitLossReport = (data) => {
-    if (!data || !data.summary) return <p>No profit & loss data available for the selected period.</p>;
-    
-    return (
-      <div className="report-content">
-        <div className="report-summary">
-          <h4>Summary</h4>
-          <div className="summary-grid">
-            <div className="summary-item">
-              <span className="label">Total Revenue:</span>
-              <span className="value">{formatCurrency(data.summary.totalRevenue)}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Total Expenses:</span>
-              <span className="value">{formatCurrency(data.summary.totalExpenses)}</span>
-            </div>
-            <div className="summary-item highlight">
-              <span className="label">Net Profit:</span>
-              <span className="value">{formatCurrency(data.summary.netProfit)}</span>
-            </div>
-          </div>
-        </div>
-        
-        {data.monthlyData && data.monthlyData.length > 0 && (
-          <div className="report-chart">
-            <h4>Monthly Trends</h4>
-            <ResponsiveContainer width="100%" height={300}>
-              <LineChart data={data.monthlyData}>
-                <CartesianGrid strokeDasharray="3 3" />
-                <XAxis dataKey="month" />
-                <YAxis />
-                <Tooltip formatter={(value) => formatCurrency(value)} />
-                <Legend />
-                <Line type="monotone" dataKey="revenue" name="Revenue" stroke="#4caf50" />
-                <Line type="monotone" dataKey="expenses" name="Expenses" stroke="#f44336" />
-                <Line type="monotone" dataKey="profit" name="Profit" stroke="#2196f3" />
-              </LineChart>
-            </ResponsiveContainer>
-          </div>
-        )}
-      </div>
-    );
-  };
-  
-  const renderRevenueByCustomerReport = (data) => {
-    if (!data || !data.customers || data.customers.length === 0) 
-      return <p>No customer revenue data available for the selected period.</p>;
-    
-    // Sort customers by revenue (highest first)
-    const sortedCustomers = [...data.customers].sort((a, b) => b.revenue - a.revenue);
-    const topCustomers = sortedCustomers.slice(0, 10); // Show top 10
-    
-    // Prepare data for pie chart
-    const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];
-    
-    return (
-      <div className="report-content">
-        <div className="report-summary">
-          <h4>Customer Revenue Summary</h4>
-          <div className="summary-grid">
-            <div className="summary-item">
-              <span className="label">Total Customers:</span>
-              <span className="value">{data.totalCustomers}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Total Revenue:</span>
-              <span className="value">{formatCurrency(data.totalRevenue)}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Average Per Customer:</span>
-              <span className="value">{formatCurrency(data.averageRevenue)}</span>
-            </div>
-          </div>
-        </div>
-        
-        <div className="report-charts-grid">
-          <div className="chart-container">
-            <h4>Top Customers by Revenue</h4>
-            <ResponsiveContainer width="100%" height={300}>
-              <BarChart data={topCustomers}>
-                <CartesianGrid strokeDasharray="3 3" />
-                <XAxis dataKey="name" />
-                <YAxis />
-                <Tooltip formatter={(value) => formatCurrency(value)} />
-                <Bar dataKey="revenue" name="Revenue" fill="#8884d8" />
-              </BarChart>
-            </ResponsiveContainer>
-          </div>
-          
-          <div className="chart-container">
-            <h4>Revenue Distribution</h4>
-            <ResponsiveContainer width="100%" height={300}>
-              <PieChart>
-                <Pie
-                  data={topCustomers}
-                  cx="50%"
-                  cy="50%"
-                  outerRadius={100}
-                  fill="#8884d8"
-                  dataKey="revenue"
-                  nameKey="name"
-                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
-                >
-                  {topCustomers.map((entry, index) => (
-                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
-                  ))}
-                </Pie>
-                <Tooltip formatter={(value) => formatCurrency(value)} />
-              </PieChart>
-            </ResponsiveContainer>
-          </div>
-        </div>
-        
-        <div className="report-table">
-          <h4>Customer Details</h4>
-          <table className="data-table">
-            <thead>
-              <tr>
-                <th>Customer</th>
-                <th>Revenue</th>
-                <th>Orders</th>
-                <th>Average Order</th>
-              </tr>
-            </thead>
-            <tbody>
-              {sortedCustomers.map((customer, index) => (
-                <tr key={index}>
-                  <td>{customer.name}</td>
-                  <td>{formatCurrency(customer.revenue)}</td>
-                  <td>{customer.orders}</td>
-                  <td>{formatCurrency(customer.averageOrder)}</td>
-                </tr>
-              ))}
-            </tbody>
-          </table>
-        </div>
-      </div>
-    );
-  };
-  
-  const renderExpenseDetailsReport = (data) => {
-    if (!data || !data.expenses || data.expenses.length === 0)
-      return <p>No expense data available for the selected period.</p>;
-    
-    // Group expenses by category
-    const expensesByCategory = data.expensesByCategory || [];
-    
-    // Prepare colors for charts
-    const COLORS = ['#ff9800', '#e91e63', '#2196f3', '#4caf50', '#9c27b0', '#795548'];
-    
-    return (
-      <div className="report-content">
-        <div className="report-summary">
-          <h4>Expense Summary</h4>
-          <div className="summary-grid">
-            <div className="summary-item">
-              <span className="label">Total Expenses:</span>
-              <span className="value">{formatCurrency(data.totalExpenses)}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Largest Category:</span>
-              <span className="value">
-                {expensesByCategory[0]?.category || 'N/A'} 
-                {expensesByCategory[0]?.amount ? ` (${formatCurrency(expensesByCategory[0].amount)})` : ''}
-              </span>
-            </div>
-          </div>
-        </div>
-        
-        <div className="report-charts-grid">
-          <div className="chart-container">
-            <h4>Expenses by Category</h4>
-            <ResponsiveContainer width="100%" height={300}>
-              <PieChart>
-                <Pie
-                  data={expensesByCategory}
-                  cx="50%"
-                  cy="50%"
-                  outerRadius={100}
-                  fill="#8884d8"
-                  dataKey="amount"
-                  nameKey="category"
-                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
-                >
-                  {expensesByCategory.map((entry, index) => (
-                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
-                  ))}
-                </Pie>
-                <Tooltip formatter={(value) => formatCurrency(value)} />
-              </PieChart>
-            </ResponsiveContainer>
-          </div>
-          
-          <div className="chart-container">
-            <h4>Monthly Expense Trend</h4>
-            <ResponsiveContainer width="100%" height={300}>
-              <LineChart data={data.monthlyExpenses || []}>
-                <CartesianGrid strokeDasharray="3 3" />
-                <XAxis dataKey="month" />
-                <YAxis />
-                <Tooltip formatter={(value) => formatCurrency(value)} />
-                <Line type="monotone" dataKey="amount" name="Expenses" stroke="#f44336" />
-              </LineChart>
-            </ResponsiveContainer>
-          </div>
-        </div>
-        
-        <div className="report-table">
-          <h4>Recent Expenses</h4>
-          <table className="data-table">
-            <thead>
-              <tr>
-                <th>Date</th>
-                <th>Category</th>
-                <th>Description</th>
-                <th>Amount</th>
-              </tr>
-            </thead>
-            <tbody>
-              {data.expenses.map((expense, index) => (
-                <tr key={index}>
-                  <td>{new Date(expense.date).toLocaleDateString()}</td>
-                  <td>{expense.category}</td>
-                  <td>{expense.description}</td>
-                  <td>{formatCurrency(expense.amount)}</td>
-                </tr>
-              ))}
-            </tbody>
-          </table>
-        </div>
-      </div>
-    );
-  };
-
-  const renderReportData = () => {
-    if (!reportData) return null;
-    
-    switch (reportType) {
-      case 'profit-loss':
-        return renderProfitLossReport(reportData);
-      case 'revenue-by-customer':
-        return renderRevenueByCustomerReport(reportData);
-      case 'expense-details':
-        return renderExpenseDetailsReport(reportData);
-      default:
-        return <pre>{JSON.stringify(reportData, null, 2)}</pre>;
-    }
-  };
-
-  return (
-    <div className="financial-reports-page dashboard-content">
-      <h2>Financial Reports</h2>
-
-      <div className="report-controls">
-        <div className="form-group">
-          <label htmlFor="startDate">Start Date:</label>
-          <input 
-            type="date" 
-            id="startDate" 
-            value={startDate} 
-            onChange={(e) => setStartDate(e.target.value)}
-            max={endDate || undefined}
-          />
-        </div>
-        <div className="form-group">
-          <label htmlFor="endDate">End Date:</label>
-          <input 
-            type="date" 
-            id="endDate" 
-            value={endDate} 
-            onChange={(e) => setEndDate(e.target.value)} 
-            min={startDate || undefined}
-          />
-        </div>
-        <div className="form-group">
-          <label htmlFor="reportType">Report Type:</label>
-          <select id="reportType" value={reportType} onChange={(e) => setReportType(e.target.value)}>
-            <option value="profit-loss">Profit & Loss</option>
-            <option value="revenue-by-customer">Revenue By Customer</option>
-            <option value="expense-details">Expense Details</option>
-          </select>
-        </div>
-        <button 
-          className="btn primary" 
-          onClick={handleGenerateReport} 
-          disabled={loading || !startDate || !endDate}
-        >
-          {loading ? 'Generating...' : 'Generate Report'}
-        </button>
-        {reportData && (
-          <div className="export-section"> {/* Wrap button and progress bar */}
-            <button
-              className="btn secondary"
-              onClick={handleExportReport}
-              disabled={exportLoading || !startDate || !endDate}
-            >
-              {exportLoading ? 'Exporting...' : 'Export PDF Report'}
-            </button>
-            {exportLoading && <LinearProgress style={{ marginTop: '8px' }} />} {/* Add progress bar */}
-          </div>
-        )}
-      </div>
-
-      {error && <div className="error-message">{error}</div>}
-
-      <div className="report-output">
-        <h3>{reportType.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} Report</h3>
-        {loading && <p className="loading-message">Loading report data...</p>}
-        {!loading && reportData && renderReportData()}
-        {!loading && !reportData && !error && <p>Select parameters and generate a report.</p>}
-      </div>
-    </div>
-  );
-};
-
-export default FinancialReportsPage;
\ No newline at end of file
diff --git a/frontend/src/pages/reports/PerformanceReportsPage.jsx b/frontend/src/pages/reports/PerformanceReportsPage.jsx
deleted file mode 100644
index 14ba63a..0000000
--- a/frontend/src/pages/reports/PerformanceReportsPage.jsx
+++ /dev/null
@@ -1,455 +0,0 @@
-import React, { useState, useEffect } from 'react';
-import { 
-  BarChart, 
-  Bar, 
-  XAxis, 
-  YAxis, 
-  CartesianGrid, 
-  Tooltip, 
-  Legend, 
-  ResponsiveContainer,
-  PieChart,
-  Pie,
-  Cell
-} from 'recharts';
-import { LinearProgress } from '@mui/material'; // Assuming Material UI is used, adjust if needed
-import performanceApi from '../../services/performanceApi';
-import './FinancialReportsPage.css'; // Reuse same styling
-
-const PerformanceReportsPage = () => {
-  const [reportType, setReportType] = useState('summary');
-  const [period, setPeriod] = useState('year');
-  const [startDate, setStartDate] = useState('');
-  const [endDate, setEndDate] = useState('');
-  const [staffId, setStaffId] = useState('');
-  const [staffList, setStaffList] = useState([]);
-  const [reportData, setReportData] = useState(null);
-  const [loading, setLoading] = useState(false);
-  const [exportLoading, setExportLoading] = useState(false);
-  const [error, setError] = useState('');
-
-  // Get staff list for filtering
-  useEffect(() => {
-    const fetchStaffList = async () => {
-      try {
-        // This is a placeholder. In a real app, you would fetch staff list from an API
-        // For now, we'll leave it empty as we don't have a specific endpoint
-        // setStaffList([...]);
-      } catch (err) {
-        console.error('Error fetching staff list:', err);
-      }
-    };
-
-    fetchStaffList();
-  }, []);
-
-  const handleGenerateReport = async () => {
-    if (reportType === 'detailed') {
-      // For detailed reports, validate date range
-      if (!startDate || !endDate) {
-        setError('Please select both start and end dates.');
-        return;
-      }
-      
-      // Validate date range
-      if (new Date(startDate) > new Date(endDate)) {
-        setError('Start date cannot be after end date.');
-        return;
-      }
-    }
-    
-    setLoading(true);
-    setError('');
-    setReportData(null);
-    
-    try {
-      let response;
-      
-      switch (reportType) {
-        case 'summary':
-          response = await performanceApi.getPerformanceSummary();
-          setReportData(response.data);
-          break;
-        case 'detailed':
-          response = await performanceApi.getDetailedPerformanceReport(startDate, endDate, staffId || undefined);
-          setReportData(response.data);
-          break;
-        default:
-          throw new Error('Invalid report type selected');
-      }
-    } catch (err) {
-      console.error('Report generation error:', err);
-      setError(err.response?.data?.message || `Failed to generate ${reportType} report.`);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  const handleExportReport = async () => {
-    setExportLoading(true);
-    setError('');
-    
-    try {
-      const response = await performanceApi.exportPerformanceReport(period, staffId || undefined);
-      
-      // Create a blob from the PDF data
-      const blob = new Blob([response.data], { type: 'application/pdf' });
-      
-      // Create a link and trigger download
-      const url = window.URL.createObjectURL(blob);
-      const a = document.createElement('a');
-      const reportPeriod = period || 'custom';
-                         
-      a.href = url;
-      a.download = `performance-report-${reportPeriod}-${new Date().toISOString().slice(0, 10)}.pdf`;
-      document.body.appendChild(a);
-      a.click();
-      window.URL.revokeObjectURL(url);
-      document.body.removeChild(a);
-    } catch (err) {
-      console.error('Report export error:', err);
-      setError(err.response?.data?.message || 'Failed to export performance report.');
-    } finally {
-      setExportLoading(false);
-    }
-  };
-
-  const renderPerformanceSummary = (data) => {
-    if (!data || !data.byStaff || data.byStaff.length === 0) {
-      return <p>No performance data available for the selected period.</p>;
-    }
-    
-    const { overall, byStaff, period } = data;
-    
-    // Prepare data for charts
-    const staffRatings = byStaff.map(staff => ({
-      name: staff.staffName,
-      rating: staff.averageRating,
-      reviews: staff.reviewCount
-    })).sort((a, b) => b.rating - a.rating);
-    
-    // Rating distribution data
-    const ratingDistribution = [
-      { name: "5★", value: 0 },
-      { name: "4★", value: 0 },
-      { name: "3★", value: 0 },
-      { name: "2★", value: 0 },
-      { name: "1★", value: 0 }
-    ];
-    
-    // Count staff by rating buckets
-    byStaff.forEach(staff => {
-      const ratingFloor = Math.floor(staff.averageRating);
-      if (ratingFloor >= 1 && ratingFloor <= 5) {
-        ratingDistribution[5 - ratingFloor].value += 1;
-      }
-    });
-    
-    const COLORS = ['#4caf50', '#8bc34a', '#ffeb3b', '#ff9800', '#f44336'];
-    
-    return (
-      <div className="report-content">
-        <div className="report-summary">
-          <h4>Performance Summary</h4>
-          <div className="summary-grid">
-            <div className="summary-item">
-              <span className="label">Period:</span>
-              <span className="value">
-                {new Date(period.start).toLocaleDateString()} - {new Date(period.end).toLocaleDateString()}
-              </span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Overall Rating:</span>
-              <span className="value">{overall.averageRating.toFixed(2)}/5.0</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Total Reviews:</span>
-              <span className="value">{overall.totalReviews}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Staff Evaluated:</span>
-              <span className="value">{byStaff.length}</span>
-            </div>
-          </div>
-        </div>
-        
-        <div className="report-charts-grid">
-          <div className="chart-container">
-            <h4>Staff Rating Distribution</h4>
-            <ResponsiveContainer width="100%" height={300}>
-              <PieChart>
-                <Pie
-                  data={ratingDistribution.filter(item => item.value > 0)}
-                  cx="50%"
-                  cy="50%"
-                  outerRadius={100}
-                  fill="#8884d8"
-                  dataKey="value"
-                  nameKey="name"
-                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
-                >
-                  {ratingDistribution.map((entry, index) => (
-                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
-                  ))}
-                </Pie>
-                <Tooltip formatter={(value) => `${value} staff`} />
-              </PieChart>
-            </ResponsiveContainer>
-          </div>
-          
-          <div className="chart-container">
-            <h4>Staff Performance Ratings</h4>
-            <ResponsiveContainer width="100%" height={300}>
-              <BarChart data={staffRatings.slice(0, 10)}>
-                <CartesianGrid strokeDasharray="3 3" />
-                <XAxis dataKey="name" />
-                <YAxis domain={[0, 5]} />
-                <Tooltip formatter={(value) => `${value.toFixed(2)}/5.0`} />
-                <Bar dataKey="rating" name="Rating" fill="#8884d8" />
-              </BarChart>
-            </ResponsiveContainer>
-          </div>
-        </div>
-        
-        <div className="report-table">
-          <h4>Staff Performance Details</h4>
-          <table className="data-table">
-            <thead>
-              <tr>
-                <th>Staff Name</th>
-                <th>Email</th>
-                <th>Average Rating</th>
-                <th>Total Reviews</th>
-              </tr>
-            </thead>
-            <tbody>
-              {byStaff.map((staff, index) => (
-                <tr key={index}>
-                  <td>{staff.staffName}</td>
-                  <td>{staff.staffEmail}</td>
-                  <td>
-                    <span className={`rating rating-${Math.floor(staff.averageRating)}`}>
-                      {staff.averageRating.toFixed(2)}/5.0
-                    </span>
-                  </td>
-                  <td>{staff.reviewCount}</td>
-                </tr>
-              ))}
-            </tbody>
-          </table>
-        </div>
-      </div>
-    );
-  };
-  
-  const renderDetailedReport = (data) => {
-    if (!data || !data.staffReports || data.staffReports.length === 0) {
-      return <p>No performance data available for the selected period.</p>;
-    }
-    
-    const { periodInfo, staffReports } = data;
-    
-    return (
-      <div className="report-content">
-        <div className="report-summary">
-          <h4>Performance Period Summary</h4>
-          <div className="summary-grid">
-            <div className="summary-item">
-              <span className="label">Start Date:</span>
-              <span className="value">{new Date(periodInfo.startDate).toLocaleDateString()}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">End Date:</span>
-              <span className="value">{new Date(periodInfo.endDate).toLocaleDateString()}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Total Reviews:</span>
-              <span className="value">{periodInfo.totalReviews}</span>
-            </div>
-            <div className="summary-item">
-              <span className="label">Staff Members:</span>
-              <span className="value">{staffReports.length}</span>
-            </div>
-          </div>
-        </div>
-        
-        {staffReports.map((staffReport, index) => (
-          <div key={index} className="staff-report-section">
-            <h4>{staffReport.staffInfo.name}</h4>
-            <div className="summary-grid mini">
-              <div className="summary-item">
-                <span className="label">Average Rating:</span>
-                <span className="value">{staffReport.summary.averageRating.toFixed(2)}/5.0</span>
-              </div>
-              <div className="summary-item">
-                <span className="label">Total Reviews:</span>
-                <span className="value">{staffReport.summary.totalReviews}</span>
-              </div>
-              <div className="summary-item">
-                <span className="label">Email:</span>
-                <span className="value">{staffReport.staffInfo.email}</span>
-              </div>
-            </div>
-            
-            <h5>Rating Distribution</h5>
-            <div className="rating-bars">
-              {Object.entries(staffReport.summary.ratingDistribution)
-                .sort(([a], [b]) => parseInt(b) - parseInt(a))
-                .map(([rating, count]) => (
-                  <div key={rating} className="rating-bar-container">
-                    <span className="rating-label">{rating} ★</span>
-                    <div className="rating-bar">
-                      <div 
-                        className="rating-bar-fill" 
-                        style={{
-                          width: `${(count / staffReport.summary.totalReviews) * 100}%`,
-                          backgroundColor: rating >= 4 ? '#4caf50' : rating >= 3 ? '#ffeb3b' : '#f44336'
-                        }}
-                      ></div>
-                    </div>
-                    <span className="rating-count">{count}</span>
-                  </div>
-                ))}
-            </div>
-            
-            {staffReport.reviews.length > 0 && (
-              <>
-                <h5>Recent Performance Reviews</h5>
-                <table className="data-table mini">
-                  <thead>
-                    <tr>
-                      <th>Date</th>
-                      <th>Reviewer</th>
-                      <th>Rating</th>
-                      <th>Comments</th>
-                    </tr>
-                  </thead>
-                  <tbody>
-                    {staffReport.reviews.slice(0, 5).map((review, idx) => (
-                      <tr key={idx}>
-                        <td>{new Date(review.reviewDate).toLocaleDateString()}</td>
-                        <td>{review.reviewer.name}</td>
-                        <td className={`rating rating-${Math.floor(review.rating)}`}>
-                          {review.rating.toFixed(1)}/5.0
-                        </td>
-                        <td>{review.comments || '-'}</td>
-                      </tr>
-                    ))}
-                  </tbody>
-                </table>
-              </>
-            )}
-          </div>
-        ))}
-
-      </div>
-    );
-  };
-  
-  const renderReportData = () => {
-    if (!reportData) return null;
-    
-    switch (reportType) {
-      case 'summary':
-        return renderPerformanceSummary(reportData);
-      case 'detailed':
-        return renderDetailedReport(reportData);
-      default:
-        return <pre>{JSON.stringify(reportData, null, 2)}</pre>;
-    }
-  };
-
-  return (
-    <div className="performance-reports-page dashboard-content">
-      <h2>Performance Reports</h2>
-
-      <div className="report-controls">
-        <div className="form-group">
-          <label htmlFor="reportType">Report Type:</label>
-          <select id="reportType" value={reportType} onChange={(e) => setReportType(e.target.value)}>
-            <option value="summary">General Summary</option>
-            <option value="detailed">Detailed Performance</option>
-          </select>
-        </div>
-        
-        {reportType === 'summary' ? (
-          <div className="form-group">
-            <label htmlFor="period">Period:</label>
-            <select id="period" value={period} onChange={(e) => setPeriod(e.target.value)}>
-              <option value="month">Last Month</option>
-              <option value="quarter">Last Quarter</option>
-              <option value="year">Last Year</option>
-            </select>
-          </div>
-        ) : (
-          <>
-            <div className="form-group">
-              <label htmlFor="startDate">Start Date:</label>
-              <input 
-                type="date" 
-                id="startDate" 
-                value={startDate} 
-                onChange={(e) => setStartDate(e.target.value)}
-                max={endDate || undefined}
-              />
-            </div>
-            <div className="form-group">
-              <label htmlFor="endDate">End Date:</label>
-              <input 
-                type="date" 
-                id="endDate" 
-                value={endDate} 
-                onChange={(e) => setEndDate(e.target.value)} 
-                min={startDate || undefined}
-              />
-            </div>
-          </>
-        )}
-        
-        {staffList.length > 0 && (
-          <div className="form-group">
-            <label htmlFor="staffId">Staff Member:</label>
-            <select id="staffId" value={staffId} onChange={(e) => setStaffId(e.target.value)}>
-              <option value="">All Staff</option>
-              {staffList.map(staff => (
-                <option key={staff._id} value={staff._id}>
-                  {staff.name}
-                </option>
-              ))}
-            </select>
-          </div>
-        )}
-        
-        <button 
-          className="btn primary" 
-          onClick={handleGenerateReport} 
-          disabled={loading || (reportType === 'detailed' && (!startDate || !endDate))}
-        >
-          {loading ? 'Generating...' : 'Generate Report'}
-        </button>
-        
-        <div className="export-section"> {/* Wrap button and progress bar */}
-          <button 
-            className="btn secondary" 
-            onClick={handleExportReport} 
-            disabled={exportLoading}
-          >
-            {exportLoading ? 'Exporting...' : 'Export PDF Report'}
-          </button>
-          {exportLoading && <LinearProgress style={{ marginTop: '8px' }} />} {/* Add progress bar */}
-        </div>
-      </div>
-
-      {error && <div className="error-message">{error}</div>}
-
-      <div className="report-output">
-        <h3>{reportType === 'summary' ? 'Performance Summary' : 'Detailed Performance Report'}</h3>
-        {loading && <p className="loading-message">Loading report data...</p>}
-        {!loading && reportData && renderReportData()}
-        {!loading && !reportData && !error && <p>Select parameters and generate a report.</p>}
-      </div>
-    </div>
-  );
-};
-
-export default PerformanceReportsPage;
\ No newline at end of file
diff --git a/frontend/src/pages/statistics/StatisticsPage.css b/frontend/src/pages/statistics/StatisticsPage.css
deleted file mode 100644
index 9ce8446..0000000
--- a/frontend/src/pages/statistics/StatisticsPage.css
+++ /dev/null
@@ -1,40 +0,0 @@
-/* frontend/src/pages/statistics/StatisticsPage.css */
-
-/* Ensure charts are responsive and maintain aspect ratio */
-.recharts-responsive-container {
-    width: 100% !important; /* Override default inline style if necessary */
-    height: 250px !important; /* Fixed height for consistency, adjust as needed */
-}
-
-/* Style for KPI cards */
-.kpi-card {
-    text-align: center;
-}
-
-/* Add some padding within paper components */
-.MuiPaper-root {
-    padding: 16px; /* Adjust padding as needed */
-}
-
-/* Style for the filter bar */
-.filter-bar {
-    margin-bottom: 24px;
-    display: flex;
-    gap: 16px;
-    align-items: center;
-    flex-wrap: wrap; /* Allow filters to wrap on smaller screens */
-}
-
-/* Ensure date pickers have appropriate width */
-.filter-bar .MuiFormControl-root {
-    min-width: 150px;
-}
-
-/* Adjust chart label sizes if needed */
-.recharts-text.recharts-label {
-    font-size: 0.8rem;
-}
-
-.recharts-legend-item-text {
-    font-size: 0.9rem;
-}
diff --git a/frontend/src/pages/statistics/StatisticsPage.jsx b/frontend/src/pages/statistics/StatisticsPage.jsx
deleted file mode 100644
index 8934fff..0000000
--- a/frontend/src/pages/statistics/StatisticsPage.jsx
+++ /dev/null
@@ -1,420 +0,0 @@
-import React, { useState, useEffect, useCallback } from 'react';
-import { 
-    Container, 
-    Grid, 
-    Paper, 
-    Typography, 
-    CircularProgress, 
-    Alert, 
-    Box, 
-    Card, 
-    CardContent, 
-    Select, 
-    MenuItem, 
-    FormControl, 
-    InputLabel, 
-    Button, 
-    TextField, 
-    Stack // Import Stack for custom legends
-} from '@mui/material';
-import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
-import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
-import { 
-    ResponsiveContainer, 
-    LineChart, 
-    Line, 
-    PieChart, 
-    Pie, 
-    Cell, 
-    XAxis, 
-    YAxis, 
-    CartesianGrid, 
-    Tooltip 
-} from 'recharts';
-import statisticsApi from '../../services/statisticsApi';
-import { format, parseISO } from 'date-fns';
-import './StatisticsPage.css'; // Import custom CSS
-
-const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF', '#FF1919'];
-
-// Custom Legend Component
-const CustomLegend = ({ data, colors }) => (
-    <Stack direction="row" spacing={2} justifyContent="center" mt={2} flexWrap="wrap">
-        {data.map((entry, index) => (
-            <Stack direction="row" spacing={1} key={`legend-${index}`} alignItems="center">
-                <Box sx={{ width: 10, height: 10, borderRadius: '50%', backgroundColor: colors[index % colors.length] }} />
-                <Typography variant="caption">{entry.name}</Typography>
-            </Stack>
-        ))}
-    </Stack>
-);
-
-// Custom Legend for Line Chart
-const CustomLineLegend = ({ name, color }) => (
-    <Stack direction="row" spacing={2} justifyContent="center" mt={2}>
-        <Stack direction="row" spacing={1} alignItems="center">
-            <Box sx={{ width: 10, height: 10, backgroundColor: color }} /> 
-            <Typography variant="caption">{name}</Typography>
-        </Stack>
-    </Stack>
-);
-
-const StatisticsPage = () => {
-    const [statsData, setStatsData] = useState(null);
-    const [loading, setLoading] = useState(true);
-    const [error, setError] = useState(null);
-    const [selectedRange, setSelectedRange] = useState('this_month');
-    const [startDate, setStartDate] = useState(null);
-    const [endDate, setEndDate] = useState(null);
-
-    const fetchStatistics = useCallback(async () => {
-        setLoading(true);
-        setError(null);
-        try {
-            const params = {};
-            if (selectedRange === 'custom' && startDate && endDate) {
-                params.startDate = format(startDate, 'yyyy-MM-dd');
-                params.endDate = format(endDate, 'yyyy-MM-dd');
-            } else if (selectedRange !== 'custom') {
-                params.range = selectedRange;
-            }
-            
-            const data = await statisticsApi.getStatistics(params);
-            setStatsData(data);
-        } catch (err) {
-            setError(err.message || 'Failed to load statistics.');
-            setStatsData(null); // Clear data on error
-        } finally {
-            setLoading(false);
-        }
-    }, [selectedRange, startDate, endDate]);
-
-    useEffect(() => {
-        fetchStatistics();
-    }, [fetchStatistics]);
-
-    const handleRangeChange = (event) => {
-        setSelectedRange(event.target.value);
-        // Reset custom dates if a predefined range is selected
-        if (event.target.value !== 'custom') {
-            setStartDate(null);
-            setEndDate(null);
-        }
-    };
-
-    const handleApplyCustomRange = () => {
-        if (startDate && endDate && startDate <= endDate) {
-            fetchStatistics();
-        }
-    };
-
-    // --- Helper Functions for Chart Data Formatting ---
-    const formatUsersByRoleData = (data) => {
-        return data?.map(item => ({ 
-            name: item.role.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase()), // Format role name
-            value: item.count 
-        })) || [];
-    };
-
-    const formatNewUserTrendData = (data) => {
-        return data?.map(item => ({ date: item.date, count: item.count })) || [];
-    };
-
-    const formatPlanPopularityData = (data) => {
-        return data?.map(item => ({ name: item.planName, value: item.count })) || [];
-    };
-
-    const formatPaymentStatusData = (data) => {
-        return data?.map(item => ({ name: item.status, value: item.count })) || [];
-    };
-
-    const formatComplaintOverviewData = (data) => {
-        return data?.map(item => ({ name: item.status, value: item.count })) || [];
-    };
-
-    // --- Prepare data for charts ---
-    const usersByRoleData = formatUsersByRoleData(statsData?.usersByRole);
-    const newUserTrendData = formatNewUserTrendData(statsData?.newUserTrend);
-    const planPopularityData = formatPlanPopularityData(statsData?.planPopularity);
-    const paymentStatusData = formatPaymentStatusData(statsData?.paymentStatus);
-    const complaintOverviewData = formatComplaintOverviewData(statsData?.complaintOverview);
-
-    // --- Render Logic ---
-    if (loading) {
-        return (
-            <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
-                <Box display="flex" justifyContent="center" alignItems="center" minHeight="50vh">
-                    <CircularProgress />
-                </Box>
-            </Container>
-        );
-    }
-
-    if (error) {
-        return (
-            <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
-                <Alert severity="error">{error}</Alert>
-            </Container>
-        );
-    }
-
-    return (
-        <LocalizationProvider dateAdapter={AdapterDateFns}>
-            <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
-                <Typography variant="h4" gutterBottom component="div">
-                    System Statistics
-                </Typography>
-
-                {/* Filter Bar */}
-                <Paper sx={{ p: 2, mb: 3, display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap' }}>
-                    <FormControl sx={{ minWidth: 150 }}>
-                        <InputLabel id="range-select-label">Date Range</InputLabel>
-                        <Select
-                            labelId="range-select-label"
-                            value={selectedRange}
-                            label="Date Range"
-                            onChange={handleRangeChange}
-                        >
-                            <MenuItem value="today">Today</MenuItem>
-                            <MenuItem value="this_month">This Month</MenuItem>
-                            <MenuItem value="last_3_months">Last 3 Months</MenuItem>
-                            <MenuItem value="this_year">This Year</MenuItem>
-                            <MenuItem value="custom">Custom</MenuItem>
-                        </Select>
-                    </FormControl>
-
-                    {selectedRange === 'custom' && (
-                        <>
-                            <DatePicker
-                                label="Start Date"
-                                value={startDate}
-                                onChange={(newValue) => setStartDate(newValue)}
-                                renderInput={(params) => <TextField {...params} sx={{ width: 180 }} />}
-                                maxDate={endDate || new Date()} // Prevent start date after end date
-                            />
-                            <DatePicker
-                                label="End Date"
-                                value={endDate}
-                                onChange={(newValue) => setEndDate(newValue)}
-                                renderInput={(params) => <TextField {...params} sx={{ width: 180 }} />}
-                                minDate={startDate} // Prevent end date before start date
-                                maxDate={new Date()} // Prevent future dates
-                            />
-                            <Button 
-                                variant="contained" 
-                                onClick={handleApplyCustomRange} 
-                                disabled={!startDate || !endDate || startDate > endDate}
-                            >
-                                Apply
-                            </Button>
-                        </>
-                    )}
-                    {statsData?.dateRange && (
-                        <Typography variant="caption" sx={{ ml: 'auto' }}>
-                            Displaying data from {format(parseISO(statsData.dateRange.startDate), 'PP')} to {format(parseISO(statsData.dateRange.endDate), 'PP')}
-                        </Typography>
-                    )}
-                </Paper>
-
-                {/* Key Metric Cards */} 
-                <Grid container spacing={3} sx={{ mb: 3 }}>
-                    <Grid item xs={12} sm={6} md={3}>
-                        <Card>
-                            <CardContent>
-                                <Typography color="textSecondary" gutterBottom>Total Revenue</Typography>
-                                <Typography variant="h5">${statsData?.totalRevenue?.toFixed(2) ?? '0.00'}</Typography>
-                            </CardContent>
-                        </Card>
-                    </Grid>
-                    <Grid item xs={12} sm={6} md={3}>
-                        <Card>
-                            <CardContent>
-                                <Typography color="textSecondary" gutterBottom>Total Expenses</Typography>
-                                <Typography variant="h5">${statsData?.totalExpenses?.toFixed(2) ?? '0.00'}</Typography>
-                            </CardContent>
-                        </Card>
-                    </Grid>
-                    <Grid item xs={12} sm={6} md={3}>
-                        <Card>
-                            <CardContent>
-                                <Typography color="textSecondary" gutterBottom>Net Profit/Loss</Typography>
-                                <Typography variant="h5" color={statsData?.netProfit >= 0 ? 'success.main' : 'error.main'}>
-                                    ${statsData?.netProfit?.toFixed(2) ?? '0.00'}
-                                </Typography>
-                            </CardContent>
-                        </Card>
-                    </Grid>
-                    <Grid item xs={12} sm={6} md={3}>
-                        <Card>
-                            <CardContent>
-                                <Typography color="textSecondary" gutterBottom>Active Subscriptions</Typography>
-                                <Typography variant="h5">{statsData?.activeSubscriptionsCount ?? 0}</Typography>
-                            </CardContent>
-                        </Card>
-                    </Grid>
-                </Grid>
-
-                {/* Chart Sections */} 
-                <Grid container spacing={3}>
-                    {/* User Statistics */} 
-                    <Grid item xs={12} md={6} lg={4}>
-                        <Paper sx={{ p: 2, height: 350, display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
-                            <Typography variant="h6" gutterBottom align="center">Users by Role</Typography>
-                            {usersByRoleData.length > 0 ? (
-                                <>
-                                    <ResponsiveContainer width="100%" height={200}> {/* Adjust height */} 
-                                        <PieChart>
-                                            <Pie
-                                                data={usersByRoleData}
-                                                cx="50%"
-                                                cy="100%" // Position center at bottom
-                                                startAngle={180}
-                                                endAngle={0}
-                                                innerRadius={60} // Make it a donut
-                                                outerRadius={100} // Adjust radius
-                                                fill="#8884d8"
-                                                paddingAngle={2}
-                                                dataKey="value"
-                                            >
-                                                {usersByRoleData.map((entry, index) => (
-                                                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
-                                                ))}
-                                            </Pie>
-                                            <Tooltip />
-                                        </PieChart>
-                                    </ResponsiveContainer>
-                                    <CustomLegend data={usersByRoleData} colors={COLORS} />
-                                </> 
-                            ) : (
-                                <Typography align="center" color="textSecondary">No data available</Typography>
-                            )}
-                        </Paper>
-                    </Grid>
-                    <Grid item xs={12} md={6} lg={8}>
-                        <Paper sx={{ p: 2, height: 350, display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
-                            <Typography variant="h6" gutterBottom align="center">New User Registrations</Typography>
-                            {newUserTrendData.length > 0 ? (
-                                <>
-                                    <ResponsiveContainer width="100%" height={250}> {/* Adjust height */} 
-                                        <LineChart data={newUserTrendData} margin={{ top: 5, right: 30, left: 0, bottom: 5 }}>
-                                            <CartesianGrid strokeDasharray="3 3" />
-                                            <XAxis dataKey="date" />
-                                            <YAxis allowDecimals={false} domain={[0, 'auto']} /> {/* Ensure Y axis starts at 0 */} 
-                                            <Tooltip />
-                                            <Line type="monotone" dataKey="count" stroke={COLORS[0]} activeDot={{ r: 8 }} name="New Users" />
-                                        </LineChart>
-                                    </ResponsiveContainer>
-                                    <CustomLineLegend name="New Users" color={COLORS[0]} />
-                                </>
-                            ) : (
-                                <Typography align="center" color="textSecondary">No data available</Typography>
-                            )}
-                        </Paper>
-                    </Grid>
-
-                    {/* Financial & Subscription Statistics */} 
-                    <Grid item xs={12} md={6} lg={4}>
-                        <Paper sx={{ p: 2, height: 350, display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
-                            <Typography variant="h6" gutterBottom align="center">Subscription Plan Popularity</Typography>
-                            {planPopularityData.length > 0 ? (
-                                <>
-                                    <ResponsiveContainer width="100%" height={250}> {/* Adjust height */} 
-                                        <PieChart>
-                                            <Pie
-                                                data={planPopularityData}
-                                                cx="50%"
-                                                cy="50%"
-                                                labelLine={false}
-                                                outerRadius={100} // Adjust radius
-                                                fill="#82ca9d"
-                                                dataKey="value"
-                                                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
-                                            >
-                                                {planPopularityData.map((entry, index) => (
-                                                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
-                                                ))}
-                                            </Pie>
-                                            <Tooltip />
-                                        </PieChart>
-                                    </ResponsiveContainer>
-                                    <CustomLegend data={planPopularityData} colors={COLORS} />
-                                </>
-                            ) : (
-                                <Typography align="center" color="textSecondary">No data available</Typography>
-                            )}
-                        </Paper>
-                    </Grid>
-                     <Grid item xs={12} md={6} lg={4}>
-                        <Paper sx={{ p: 2, height: 350, display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
-                            <Typography variant="h6" gutterBottom align="center">Payment Status</Typography>
-                            {paymentStatusData.length > 0 ? (
-                                <>
-                                    <ResponsiveContainer width="100%" height={250}> {/* Adjust height */} 
-                                        <PieChart>
-                                            <Pie
-                                                data={paymentStatusData}
-                                                cx="50%"
-                                                cy="50%"
-                                                labelLine={false}
-                                                outerRadius={100} // Adjust radius
-                                                fill="#ffc658"
-                                                dataKey="value"
-                                                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
-                                            >
-                                                {paymentStatusData.map((entry, index) => (
-                                                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
-                                                ))}
-                                            </Pie>
-                                            <Tooltip />
-                                        </PieChart>
-                                    </ResponsiveContainer>
-                                    <CustomLegend data={paymentStatusData} colors={COLORS} />
-                                </>
-                            ) : (
-                                <Typography align="center" color="textSecondary">No data available</Typography>
-                            )}
-                        </Paper>
-                    </Grid>
-
-                    {/* Operational Statistics */} 
-                    <Grid item xs={12} md={6} lg={4}>
-                        <Paper sx={{ p: 2, height: 350, display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
-                            <Typography variant="h6" gutterBottom align="center">Complaint Status</Typography>
-                            {complaintOverviewData.length > 0 ? (
-                                <>
-                                    <ResponsiveContainer width="100%" height={200}> {/* Adjust height */} 
-                                        <PieChart>
-                                            <Pie
-                                                data={complaintOverviewData}
-                                                cx="50%"
-                                                cy="100%" // Position center at bottom
-                                                startAngle={180}
-                                                endAngle={0}
-                                                innerRadius={60} // Make it a donut
-                                                outerRadius={100} // Adjust radius
-                                                fill="#ff8042"
-                                                paddingAngle={2}
-                                                dataKey="value"
-                                            >
-                                                {complaintOverviewData.map((entry, index) => (
-                                                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
-                                                ))}
-                                            </Pie>
-                                            <Tooltip />
-                                        </PieChart>
-                                    </ResponsiveContainer>
-                                    <CustomLegend data={complaintOverviewData} colors={COLORS} />
-                                </>
-                            ) : (
-                                <Typography align="center" color="textSecondary">No data available</Typography>
-                            )}
-                        </Paper>
-                    </Grid>
-
-                </Grid>
-            </Container>
-        </LocalizationProvider>
-    );
-};
-
-export default StatisticsPage;
diff --git a/frontend/src/pages/subscription/SubscriptionPlansPage.css b/frontend/src/pages/subscription/SubscriptionPlansPage.css
deleted file mode 100644
index 0b1777f..0000000
--- a/frontend/src/pages/subscription/SubscriptionPlansPage.css
+++ /dev/null
@@ -1,127 +0,0 @@
-.subscription-plans-page {
-  max-width: 1200px;
-  margin: 0 auto;
-  padding: 20px;
-}
-
-.page-header {
-  text-align: center;
-  margin-bottom: 40px;
-}
-
-.page-header h1 {
-  font-size: 36px;
-  color: #2c3e50;
-  margin-bottom: 10px;
-}
-
-.header-description {
-  font-size: 18px;
-  color: #7f8c8d;
-  max-width: 600px;
-  margin: 0 auto;
-}
-
-.subscription-info {
-  margin-top: 60px;
-  padding: 40px 0;
-  background-color: #f9f9f9;
-  border-radius: 8px;
-}
-
-.subscription-info h3 {
-  text-align: center;
-  color: #2c3e50;
-  font-size: 24px;
-  margin-bottom: 30px;
-}
-
-.info-grid {
-  display: grid;
-  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
-  gap: 30px;
-  padding: 0 20px;
-}
-
-.info-card {
-  background-color: #ffffff;
-  padding: 30px;
-  border-radius: 8px;
-  text-align: center;
-  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
-  transition: transform 0.3s ease;
-}
-
-.info-card:hover {
-  transform: translateY(-10px);
-}
-
-.info-icon {
-  font-size: 32px;
-  color: #27ae60;
-  margin-bottom: 20px;
-}
-
-.info-card h4 {
-  color: #2c3e50;
-  font-size: 20px;
-  margin-bottom: 15px;
-}
-
-.info-card p {
-  color: #7f8c8d;
-  line-height: 1.6;
-}
-
-.subscription-faq {
-  margin-top: 60px;
-  padding: 20px;
-}
-
-.subscription-faq h3 {
-  text-align: center;
-  color: #2c3e50;
-  font-size: 24px;
-  margin-bottom: 30px;
-}
-
-.faq-item {
-  margin-bottom: 25px;
-  padding-bottom: 25px;
-  border-bottom: 1px solid #ecf0f1;
-}
-
-.faq-item:last-child {
-  border-bottom: none;
-}
-
-.faq-item h4 {
-  color: #2c3e50;
-  font-size: 18px;
-  margin-bottom: 10px;
-  cursor: pointer;
-}
-
-.faq-item p {
-  color: #7f8c8d;
-  line-height: 1.6;
-}
-
-@media (max-width: 768px) {
-  .page-header h1 {
-    font-size: 28px;
-  }
-  
-  .header-description {
-    font-size: 16px;
-  }
-  
-  .info-grid {
-    grid-template-columns: 1fr;
-  }
-  
-  .subscription-info,
-  .subscription-faq {
-    margin-top: 40px;
-  }
-}
\ No newline at end of file
diff --git a/frontend/src/pages/subscription/SubscriptionPlansPage.jsx b/frontend/src/pages/subscription/SubscriptionPlansPage.jsx
deleted file mode 100644
index f2aff92..0000000
--- a/frontend/src/pages/subscription/SubscriptionPlansPage.jsx
+++ /dev/null
@@ -1,98 +0,0 @@
-import React, { useContext, useEffect } from 'react';
-import { useNavigate } from 'react-router-dom';
-import AuthContext from '../../contexts/AuthContext';
-import CustomerSubscriptionPlans from '../../components/financial/CustomerSubscriptionPlans';
-import DashboardLayout from '../../components/layouts/DashboardLayout';
-import './SubscriptionPlansPage.css';
-
-/**
- * Page component for displaying subscription plans to customers
- * Uses the CustomerSubscriptionPlans component wrapped in dashboard layout
- */
-const SubscriptionPlansPage = () => {
-  const { user, isAuthenticated } = useContext(AuthContext);
-  const navigate = useNavigate();
-  
-  // Redirect to login if not authenticated
-  useEffect(() => {
-    if (!isAuthenticated) {
-      navigate('/auth/login', { 
-        state: { from: '/subscription-plans', message: 'Please log in to view subscription plans' } 
-      });
-    }
-  }, [isAuthenticated, navigate]);
-  
-  if (!isAuthenticated) {
-    return null; // Don't render anything during redirect
-  }
-  
-  return (
-    <DashboardLayout>
-      <div className="subscription-plans-page">
-        <div className="page-header">
-          <h1>Subscription Plans</h1>
-          <p className="header-description">
-            Choose the perfect subscription plan for your waste management needs
-          </p>
-        </div>
-        
-        <CustomerSubscriptionPlans />
-        
-        <div className="subscription-info">
-          <h3>Why Subscribe?</h3>
-          <div className="info-grid">
-            <div className="info-card">
-              <div className="info-icon">
-                <i className="fas fa-recycle"></i>
-              </div>
-              <h4>Eco-Friendly Waste Management</h4>
-              <p>Our smart waste management solutions help reduce environmental impact through efficient recycling.</p>
-            </div>
-            
-            <div className="info-card">
-              <div className="info-icon">
-                <i className="fas fa-chart-line"></i>
-              </div>
-              <h4>Advanced Analytics</h4>
-              <p>Get insights into your waste patterns and optimize your waste management processes.</p>
-            </div>
-            
-            <div className="info-card">
-              <div className="info-icon">
-                <i className="fas fa-clock"></i>
-              </div>
-              <h4>Time-Saving Solutions</h4>
-              <p>Automated scheduling and smart bin technology save time and streamline operations.</p>
-            </div>
-          </div>
-        </div>
-        
-        <div className="subscription-faq">
-          <h3>Frequently Asked Questions</h3>
-          
-          <div className="faq-item">
-            <h4>How do I change my subscription plan?</h4>
-            <p>You can upgrade or downgrade your subscription at any time from your account management page.</p>
-          </div>
-          
-          <div className="faq-item">
-            <h4>Is there a contract period?</h4>
-            <p>Our subscriptions are flexible. You can cancel at any time, but we do not offer partial refunds for unused time.</p>
-          </div>
-          
-          <div className="faq-item">
-            <h4>How is billing handled?</h4>
-            <p>Billing occurs at the start of each subscription period. You can view your billing history in your account dashboard.</p>
-          </div>
-          
-          <div className="faq-item">
-            <h4>What payment methods do you accept?</h4>
-            <p>We accept major credit cards and bank transfers for all subscription plans.</p>
-          </div>
-        </div>
-      </div>
-    </DashboardLayout>
-  );
-};
-
-export default SubscriptionPlansPage;
\ No newline at end of file
diff --git a/frontend/src/pages/subscriptions/UserSubscriptionsPage.jsx b/frontend/src/pages/subscriptions/UserSubscriptionsPage.jsx
deleted file mode 100644
index 21c4f04..0000000
--- a/frontend/src/pages/subscriptions/UserSubscriptionsPage.jsx
+++ /dev/null
@@ -1,163 +0,0 @@
-import React, { useState, useEffect, useCallback } from 'react';
-import { useAuth } from '../../contexts/AuthContext';
-import userSubscriptionApi from '../../services/userSubscriptionApi';
-import CustomerSubscriptionPlans from '../../components/financial/CustomerSubscriptionPlans';
-import '../../components/financial/CustomerSubscriptionPlans.css';
-
-/**
- * Page component for users to view and manage their subscriptions
- */
-const UserSubscriptionsPage = () => {
-  const { user } = useAuth();
-  const [activeSubscription, setActiveSubscription] = useState(null);
-  const [subscriptionHistory, setSubscriptionHistory] = useState([]);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState('');
-
-  // Function to fetch user subscriptions
-  const fetchSubscriptions = useCallback(async () => {
-    if (!user?._id) return;
-    
-    setLoading(true);
-    try {
-      const response = await userSubscriptionApi.getUserSubscriptions(user._id);
-      
-      // Separate active subscription from history
-      const activeSubscription = response.data.find(sub => sub.status === 'active');
-      const history = response.data.filter(sub => sub.status !== 'active');
-      
-      setActiveSubscription(activeSubscription || null);
-      setSubscriptionHistory(history);
-      setError('');
-    } catch (err) {
-      console.error('Error fetching subscriptions:', err);
-      setError('Failed to load subscription information. Please try again later.');
-    } finally {
-      setLoading(false);
-    }
-  }, [user?._id]);
-
-  // Function to toggle auto-renewal for a subscription
-  const handleToggleAutoRenew = async (subscriptionId, currentAutoRenewState) => {
-    try {
-      await userSubscriptionApi.toggleAutoRenew(subscriptionId, !currentAutoRenewState);
-      // Refresh subscriptions to show the updated state
-      fetchSubscriptions();
-      return true;
-    } catch (err) {
-      console.error('Error toggling auto-renew:', err);
-      setError('Failed to update auto-renewal setting. Please try again later.');
-      return false;
-    }
-  };
-
-  // Function to handle subscription cancellation
-  const handleCancelSubscription = async (subscriptionId) => {
-    // Confirm cancellation
-    if (!window.confirm('Are you sure you want to cancel your subscription? This cannot be undone.')) {
-      return false;
-    }
-    
-    try {
-      await userSubscriptionApi.cancelSubscription(subscriptionId);
-      fetchSubscriptions();
-      return true;
-    } catch (err) {
-      console.error('Error cancelling subscription:', err);
-      setError('Failed to cancel subscription. Please try again later.');
-      return false;
-    }
-  };
-
-  // Load subscriptions on component mount
-  useEffect(() => {
-    fetchSubscriptions();
-  }, [fetchSubscriptions]);
-
-  // Function to format date
-  const formatDate = (dateString) => {
-    return new Date(dateString).toLocaleDateString();
-  };
-
-  return (
-    <div className="dashboard-content">
-      <h2>My Subscriptions</h2>
-      
-      {error && <div className="error-message">{error}</div>}
-      
-      {loading ? (
-        <p>Loading subscription information...</p>
-      ) : (
-        <>
-          {activeSubscription ? (
-            <div className="current-subscription">
-              <h3>Current Subscription</h3>
-              <div className="subscription-card active">
-                <h4>{activeSubscription.subscriptionPlan?.name || 'Active Plan'}</h4>
-                <div className="subscription-details">
-                  <p><strong>Status:</strong> {activeSubscription.status}</p>
-                  <p><strong>Start Date:</strong> {formatDate(activeSubscription.startDate)}</p>
-                  <p><strong>Next Billing:</strong> {formatDate(activeSubscription.nextBillingDate)}</p>
-                  <p><strong>End Date:</strong> {formatDate(activeSubscription.endDate)}</p>
-                  <p><strong>Auto Renew:</strong> {activeSubscription.autoRenew ? 'Yes' : 'No'}</p>
-                </div>
-                <div className="subscription-actions">
-                  <button 
-                    className="btn toggle-btn"
-                    onClick={() => handleToggleAutoRenew(
-                      activeSubscription._id, 
-                      activeSubscription.autoRenew
-                    )}
-                  >
-                    {activeSubscription.autoRenew ? 'Disable Auto-Renew' : 'Enable Auto-Renew'}
-                  </button>
-                  <button 
-                    className="btn cancel-btn"
-                    onClick={() => handleCancelSubscription(activeSubscription._id)}
-                  >
-                    Cancel Subscription
-                  </button>
-                </div>
-              </div>
-            </div>
-          ) : (
-            <div className="no-subscription">
-              <p>You don't have an active subscription. Choose a plan below to subscribe.</p>
-            </div>
-          )}
-
-          {subscriptionHistory.length > 0 && (
-            <div className="subscription-history">
-              <h3>Subscription History</h3>
-              <table className="history-table">
-                <thead>
-                  <tr>
-                    <th>Plan</th>
-                    <th>Status</th>
-                    <th>Start Date</th>
-                    <th>End Date</th>
-                  </tr>
-                </thead>
-                <tbody>
-                  {subscriptionHistory.map(sub => (
-                    <tr key={sub._id}>
-                      <td>{sub.subscriptionPlan?.name || 'Unknown Plan'}</td>
-                      <td>{sub.status}</td>
-                      <td>{formatDate(sub.startDate)}</td>
-                      <td>{formatDate(sub.endDate)}</td>
-                    </tr>
-                  ))}
-                </tbody>
-              </table>
-            </div>
-          )}
-          
-          <h3>Available Plans</h3>
-          <CustomerSubscriptionPlans onSubscriptionUpdate={fetchSubscriptions} />
-        </>
-      )}
-    </div>
-  );
-};
-
-export default UserSubscriptionsPage;
\ No newline at end of file
diff --git a/frontend/src/services/adminService.js b/frontend/src/services/adminService.js
deleted file mode 100644
index fa1ba39..0000000
--- a/frontend/src/services/adminService.js
+++ /dev/null
@@ -1,77 +0,0 @@
-import axiosInstance from './api'; // Corrected import path
-
-/**
- * Get all users with pagination and optional filters.
- * @param {object} params - Query parameters (e.g., { page: 1, limit: 10, role: 'customer' })
- * @returns {Promise<object>} - Promise resolving to the API response data (users, pagination info)
- */
-export const getAllUsers = async (params = {}) => {
-  try {
-    const response = await axiosInstance.get('/users', { params });
-    return response.data;
-  } catch (error) {
-    console.error('Error fetching users:', error.response?.data || error.message);
-    throw error.response?.data || new Error('Failed to fetch users');
-  }
-};
-
-/**
- * Create a new user (Admin only).
- * @param {object} userData - User data (name, email, password, role, etc.)
- * @returns {Promise<object>} - Promise resolving to the newly created user data
- */
-export const createUser = async (userData) => {
-  try {
-    const response = await axiosInstance.post('/users', userData);
-    return response.data;
-  } catch (error) {
-    console.error('Error creating user:', error.response?.data || error.message);
-    throw error.response?.data || new Error('Failed to create user');
-  }
-};
-
-/**
- * Get a specific user by ID (Admin only).
- * @param {string} id - The ID of the user.
- * @returns {Promise<object>} - Promise resolving to the user data.
- */
-export const getUserById = async (id) => {
-  try {
-    const response = await axiosInstance.get(`/users/${id}`);
-    return response.data;
-  } catch (error) {
-    console.error(`Error fetching user ${id}:`, error.response?.data || error.message);
-    throw error.response?.data || new Error('Failed to fetch user');
-  }
-};
-
-/**
- * Update a user by ID (Admin only).
- * @param {string} id - The ID of the user to update.
- * @param {object} userData - The updated user data.
- * @returns {Promise<object>} - Promise resolving to the updated user data.
- */
-export const updateUser = async (id, userData) => {
-  try {
-    const response = await axiosInstance.put(`/users/${id}`, userData);
-    return response.data;
-  } catch (error) {
-    console.error(`Error updating user ${id}:`, error.response?.data || error.message);
-    throw error.response?.data || new Error('Failed to update user');
-  }
-};
-
-/**
- * Delete a user by ID (Admin only).
- * @param {string} id - The ID of the user to delete.
- * @returns {Promise<object>} - Promise resolving to the success message.
- */
-export const deleteUser = async (id) => {
-  try {
-    const response = await axiosInstance.delete(`/users/${id}`);
-    return response.data; // Should contain { message: 'User removed successfully' }
-  } catch (error) {
-    console.error(`Error deleting user ${id}:`, error.response?.data || error.message);
-    throw error.response?.data || new Error('Failed to delete user');
-  }
-};
diff --git a/frontend/src/services/api.js b/frontend/src/services/api.js
deleted file mode 100644
index 3d248d5..0000000
--- a/frontend/src/services/api.js
+++ /dev/null
@@ -1,36 +0,0 @@
-import axios from 'axios';
-import { getAuthToken } from './authService'; // Import getAuthToken
-
-const api = axios.create({
-  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:5000/api',
-  headers: {
-    'Content-Type': 'application/json'
-  }
-});
-
-// Add request interceptor to attach the auth token to every request
-api.interceptors.request.use(
-  (config) => {
-    const token = getAuthToken(); // Use getAuthToken
-    if (token) {
-      config.headers.Authorization = `Bearer ${token}`;
-    }
-    return config;
-  },
-  (error) => Promise.reject(error)
-);
-
-// Add response interceptor for error handling
-api.interceptors.response.use(
-  (response) => response,
-  (error) => {
-    // Handle session expiration
-    if (error.response && error.response.status === 401) {
-      localStorage.removeItem('token');
-      window.location.href = '/login';
-    }
-    return Promise.reject(error);
-  }
-);
-
-export default api;
\ No newline at end of file
diff --git a/frontend/src/services/attendanceApi.js b/frontend/src/services/attendanceApi.js
deleted file mode 100644
index 79d553b..0000000
--- a/frontend/src/services/attendanceApi.js
+++ /dev/null
@@ -1,63 +0,0 @@
-import api from './api';
-
-const attendanceApi = {
-  // Staff endpoints
-  checkIn: () => api.post('/attendance/check-in'),
-  checkOut: () => api.put('/attendance/check-out'),
-  getMyAttendance: (startDate, endDate) => {
-    let url = '/attendance';
-    if (startDate && endDate) {
-      url += `?startDate=${startDate}&endDate=${endDate}`;
-    }
-    return api.get(url);
-  },
-  
-  // Admin endpoints
-  getAllAttendance: (params) => {
-    let url = '/attendance/all';
-    const queryParams = [];
-    
-    if (params?.startDate) queryParams.push(`startDate=${params.startDate}`);
-    if (params?.endDate) queryParams.push(`endDate=${params.endDate}`);
-    if (params?.staffId) queryParams.push(`staffId=${params.staffId}`);
-    
-    if (queryParams.length > 0) {
-      url += `?${queryParams.join('&')}`;
-    }
-    
-    return api.get(url);
-  },
-  updateAttendance: (id, data) => api.put(`/attendance/${id}`, data),
-  getAttendanceSummary: (month, year) => {
-    let url = '/attendance/summary';
-    if (month && year) {
-      url += `?month=${month}&year=${year}`;
-    }
-    return api.get(url);
-  },
-  
-  exportAttendanceReport: (month, year) => {
-    let url = '/attendance/reports/export';
-    if (month && year) {
-      url += `?month=${month}&year=${year}`;
-    }
-    return api.get(url, { responseType: 'blob' }); // Important to set responseType to blob for PDF
-  },
-  
-  getDetailedAttendanceReport: (startDate, endDate, staffId) => {
-    let url = '/attendance/reports/detailed';
-    const queryParams = [];
-    
-    if (startDate) queryParams.push(`startDate=${startDate}`);
-    if (endDate) queryParams.push(`endDate=${endDate}`);
-    if (staffId) queryParams.push(`staffId=${staffId}`);
-    
-    if (queryParams.length > 0) {
-      url += `?${queryParams.join('&')}`;
-    }
-    
-    return api.get(url);
-  }
-};
-
-export default attendanceApi;
\ No newline at end of file
diff --git a/frontend/src/services/authService.js b/frontend/src/services/authService.js
deleted file mode 100644
index e4639e6..0000000
--- a/frontend/src/services/authService.js
+++ /dev/null
@@ -1,85 +0,0 @@
-// frontend/src/services/authService.js
-import axios from 'axios';
-
-const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';
-const TOKEN_KEY = 'authToken';
-const USER_KEY = 'user';
-
-/**
- * Store authentication token in localStorage
- * @param {string} token - JWT token
- */
-export const setAuthToken = (token) => {
-  if (token) {
-    localStorage.setItem(TOKEN_KEY, token);
-    setAuthHeader(token);
-  } else {
-    localStorage.removeItem(TOKEN_KEY);
-    delete axios.defaults.headers.common['Authorization'];
-  }
-};
-
-/**
- * Set the Authorization header for all axios requests
- * @param {string} token - JWT token
- */
-export const setAuthHeader = (token) => {
-  if (token) {
-    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
-  } else {
-    delete axios.defaults.headers.common['Authorization'];
-  }
-};
-
-/**
- * Get authentication token from localStorage
- * @returns {string|null} - JWT token or null if not found
- */
-export const getAuthToken = () => {
-  return localStorage.getItem(TOKEN_KEY);
-};
-
-/**
- * Store user information in localStorage
- * @param {Object} user - User object
- */
-export const setUser = (user) => {
-  if (user) {
-    localStorage.setItem(USER_KEY, JSON.stringify(user));
-  } else {
-    localStorage.removeItem(USER_KEY);
-  }
-};
-
-/**
- * Get user information from localStorage
- * @returns {Object|null} - User object or null if not found
- */
-export const getUser = () => {
-  const user = localStorage.getItem(USER_KEY);
-  return user ? JSON.parse(user) : null;
-};
-
-/**
- * Check if user is authenticated
- * @returns {boolean} - True if user is authenticated
- */
-export const isAuthenticated = () => {
-  const token = getAuthToken();
-  return !!token;
-};
-
-/**
- * Remove auth token and user data from localStorage
- */
-export const logout = () => {
-  localStorage.removeItem(TOKEN_KEY);
-  localStorage.removeItem(USER_KEY);
-  delete axios.defaults.headers.common['Authorization'];
-};
-
-// Initialize auth header on app startup
-const token = getAuthToken();
-if (token) {
-  setAuthHeader(token);
-}
\ No newline at end of file
diff --git a/frontend/src/services/budgetApi.js b/frontend/src/services/budgetApi.js
deleted file mode 100644
index 9fb1276..0000000
--- a/frontend/src/services/budgetApi.js
+++ /dev/null
@@ -1,117 +0,0 @@
-// frontend/src/services/budgetApi.js
-import axios from 'axios';
-import { getAuthToken } from './authService'; // Assuming authService handles token retrieval
-
-const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api'; // Adjust if your env variable is different
-
-const budgetApi = axios.create({
-    baseURL: `${API_URL}/budgets`,
-});
-
-// Add a request interceptor to include the auth token
-budgetApi.interceptors.request.use(
-    (config) => {
-        const token = getAuthToken();
-        if (token) {
-            config.headers['Authorization'] = `Bearer ${token}`;
-        }
-        return config;
-    },
-    (error) => {
-        return Promise.reject(error);
-    }
-);
-
-/**
- * Creates a new budget allocation.
- * @param {object} budgetData - The budget data (category, periodType, periodStartDate, periodEndDate, allocatedAmount, notes).
- * @returns {Promise<object>} The created budget object.
- */
-export const createBudget = async (budgetData) => {
-    try {
-        const response = await budgetApi.post('/', budgetData);
-        return response.data;
-    } catch (error) {
-        console.error('Error creating budget:', error.response?.data || error.message);
-        throw error.response?.data || new Error('Failed to create budget');
-    }
-};
-
-/**
- * Fetches budget allocations with optional filtering and pagination.
- * @param {object} params - Query parameters (category, periodType, startDate, endDate, page, limit).
- * @returns {Promise<object>} The response containing budget data (e.g., { docs: [], totalDocs, limit, page, totalPages }).
- */
-export const getBudgets = async (params = {}) => {
-    try {
-        const response = await budgetApi.get('/', { params });
-        return response.data; // Assuming backend returns pagination structure
-    } catch (error) {
-        console.error('Error fetching budgets:', error.response?.data || error.message);
-        throw error.response?.data || new Error('Failed to fetch budgets');
-    }
-};
-
-/**
- * Fetches a specific budget allocation by its ID.
- * @param {string} id - The ID of the budget.
- * @returns {Promise<object>} The budget object.
- */
-export const getBudgetById = async (id) => {
-    try {
-        const response = await budgetApi.get(`/${id}`);
-        return response.data;
-    } catch (error) {
-        console.error(`Error fetching budget ${id}:`, error.response?.data || error.message);
-        throw error.response?.data || new Error('Failed to fetch budget');
-    }
-};
-
-/**
- * Updates an existing budget allocation.
- * @param {string} id - The ID of the budget to update.
- * @param {object} budgetData - The updated budget data.
- * @returns {Promise<object>} The updated budget object.
- */
-export const updateBudget = async (id, budgetData) => {
-    try {
-        const response = await budgetApi.put(`/${id}`, budgetData);
-        return response.data;
-    } catch (error) {
-        console.error(`Error updating budget ${id}:`, error.response?.data || error.message);
-        throw error.response?.data || new Error('Failed to update budget');
-    }
-};
-
-/**
- * Deletes a budget allocation.
- * @param {string} id - The ID of the budget to delete.
- * @returns {Promise<object>} The success message.
- */
-export const deleteBudget = async (id) => {
-    try {
-        const response = await budgetApi.delete(`/${id}`);
-        return response.data;
-    } catch (error) {
-        console.error(`Error deleting budget ${id}:`, error.response?.data || error.message);
-        throw error.response?.data || new Error('Failed to delete budget');
-    }
-};
-
-/**
- * Fetches the budget summary (allocated vs. actual) for a given period.
- * @param {string} startDate - The start date (YYYY-MM-DD).
- * @param {string} endDate - The end date (YYYY-MM-DD).
- * @returns {Promise<object>} The summary data (e.g., { summary: [...] }).
- */
-export const getBudgetSummary = async (startDate, endDate) => {
-    try {
-        const response = await budgetApi.get('/summary', {
-            params: { startDate, endDate }
-        });
-        return response.data;
-    } catch (error) {
-        console.error('Error fetching budget summary:', error.response?.data || error.message);
-        throw error.response?.data || new Error('Failed to fetch budget summary');
-    }
-};
diff --git a/frontend/src/services/complaintApi.js b/frontend/src/services/complaintApi.js
deleted file mode 100644
index 817119b..0000000
--- a/frontend/src/services/complaintApi.js
+++ /dev/null
@@ -1,27 +0,0 @@
-import api from './api';
-
-const complaintApi = {
-  // Submit a new complaint
-  submitComplaint: (data) => api.post('/complaints', data),
-
-  // Get complaints submitted by the current user
-  getMyComplaints: () => api.get('/complaints/my-complaints'),
-
-  // Get a specific complaint by ID (for owner or admin)
-  getComplaintById: (id) => api.get(`/complaints/${id}`),
-
-  // --- Admin Endpoints ---
-  // Get all complaints
-  getAllComplaints: (filters = {}) => api.get('/complaints', { params: filters }), // Add filters later if needed
-
-  // Update complaint status
-  updateStatus: (id, status) => api.patch(`/complaints/${id}/status`, { status }),
-
-  // Assign complaint to an admin/staff
-  assignComplaint: (id, adminId) => api.patch(`/complaints/${id}/assign`, { adminId }),
-
-  // Add resolution notes
-  addResolution: (id, resolutionNotes) => api.patch(`/complaints/${id}/resolve`, { resolutionNotes }),
-};
-
-export default complaintApi;
\ No newline at end of file
diff --git a/frontend/src/services/dashboardService.js b/frontend/src/services/dashboardService.js
deleted file mode 100644
index 3bef7b6..0000000
--- a/frontend/src/services/dashboardService.js
+++ /dev/null
@@ -1,57 +0,0 @@
-import axios from 'axios';
-import { getAuthToken } from './authService'; // Import getAuthToken
-
-const API_URL = import.meta.env.VITE_API_URL;
-
-// Helper function to get the auth header
-const getAuthHeader = () => {
-  const token = getAuthToken(); // Use getAuthToken to retrieve the token
-  return {
-    headers: {
-      // Ensure token exists before adding the header
-      ...(token && { Authorization: `Bearer ${token}` }) 
-    }
-  };
-};
-
-/**
- * Service for dashboard-related API calls
- */
-const dashboardService = {
-  /**
-   * Get financial manager main dashboard data
-   * @returns {Promise} - Promise object with the dashboard data
-   */
-  getFinancialManagerDashboard: async () => {
-    try {
-      const response = await axios.get(
-        `${API_URL}/dashboard/financial-manager-main`,
-        getAuthHeader()
-      );
-      return response.data;
-    } catch (error) {
-      console.error('Error fetching financial manager dashboard data:', error);
-      throw error;
-    }
-  },
-  
-  /**
-   * Get data for specialized financial dashboards (revenue, expenses, etc)
-   * @param {string} dashboardType - The type of financial dashboard
-   * @returns {Promise} - Promise object with the dashboard data
-   */
-  getSpecializedDashboard: async (dashboardType) => {
-    try {
-      const response = await axios.get(
-        `${API_URL}/dashboard/${dashboardType}`,
-        getAuthHeader()
-      );
-      return response.data;
-    } catch (error) {
-      console.error(`Error fetching ${dashboardType} dashboard data:`, error);
-      throw error;
-    }
-  }
-};
-
-export default dashboardService;
\ No newline at end of file
diff --git a/frontend/src/services/financialApi.js b/frontend/src/services/financialApi.js
deleted file mode 100644
index 005bd17..0000000
--- a/frontend/src/services/financialApi.js
+++ /dev/null
@@ -1,23 +0,0 @@
-import api from './api';
-
-const financialApi = {
-  getDashboardData: (range = 'month') => api.get(`/financials/dashboard?range=${range}`),
-  
-  // Report endpoints
-  getProfitLossReport: (params) => api.get('/financials/reports/profit-loss', { params }),
-  getRevenueByCustomerReport: (params) => api.get('/financials/reports/revenue-by-customer', { params }),
-  getExpenseDetailsReport: (params) => api.get('/financials/reports/expense-details', { params }),
-  
-  // Export report as PDF
-  exportReport: (dateRange) => api.get(`/financials/reports/export?range=${dateRange}`, { 
-    responseType: 'blob' 
-  }),
-  
-  // Subscription management
-  getSubscriptionPlans: () => api.get('/subscription-plans'),
-  getUserSubscriptions: () => api.get('/user-subscriptions/me'),
-  updateUserSubscription: (subscriptionId, data) => api.put(`/user-subscriptions/${subscriptionId}`, data),
-  createUserSubscription: (data) => api.post('/user-subscriptions', data)
-};
-
-export default financialApi;
diff --git a/frontend/src/services/mfaApi.js b/frontend/src/services/mfaApi.js
deleted file mode 100644
index fe94444..0000000
--- a/frontend/src/services/mfaApi.js
+++ /dev/null
@@ -1,59 +0,0 @@
-// frontend/src/services/mfaApi.js
-import api from './api';
-
-/**
- * Generate MFA Secret
- * @returns {Promise<Object>} Response with QR code and secret
- */
-const generateSecret = async () => {
-  return await api.post('/mfa/generate');
-};
-
-/**
- * Enable MFA
- * @param {string} token - Verification token from authenticator app
- * @param {string} secret - Secret generated from generateSecret
- * @returns {Promise<Object>} Response with recovery codes
- */
-const enableMFA = async (token, secret) => {
-  return await api.post('/mfa/enable', { token, secret });
-};
-
-/**
- * Disable MFA
- * @param {string} password - User's current password for verification
- * @returns {Promise<Object>} Success message
- */
-const disableMFA = async (password) => {
-  return await api.post('/mfa/disable', { password });
-};
-
-/**
- * Verify MFA token during login
- * @param {string} userId - User's ID (received during login)
- * @param {string} token - Verification token from authenticator app
- * @returns {Promise<Object>} Response with user data and JWT token
- */
-const verifyMFA = async (userId, token) => {
-  return await api.post('/mfa/verify', { userId, token });
-};
-
-/**
- * Use recovery code when MFA device is not available
- * @param {string} userId - User's ID (received during login)
- * @param {string} recoveryCode - Recovery code from saved codes
- * @returns {Promise<Object>} Response with user data and JWT token
- */
-const useRecoveryCode = async (userId, recoveryCode) => {
-  return await api.post('/mfa/recover', { userId, recoveryCode });
-};
-
-const mfaApi = {
-  generateSecret,
-  enableMFA,
-  disableMFA,
-  verifyMFA,
-  useRecoveryCode
-};
-
-export default mfaApi;
\ No newline at end of file
diff --git a/frontend/src/services/paymentApi.js b/frontend/src/services/paymentApi.js
deleted file mode 100644
index ad5416d..0000000
--- a/frontend/src/services/paymentApi.js
+++ /dev/null
@@ -1,91 +0,0 @@
-import api from './api';
-
-/**
- * Service for interacting with payment-related endpoints
- */
-const paymentApi = {
-  /**
-   * Initiates a payment for a subscription
-   * @param {Object} paymentData - Payment data
-   * @param {string} paymentData.userId - ID of the user making payment
-   * @param {string} paymentData.planId - ID of the subscription plan
-   * @param {number} paymentData.amount - Payment amount
-   * @param {string} paymentData.currency - Currency code (default: USD)
-   * @returns {Promise<Object>} - Client secret for Stripe processing
-   */
-  initiatePayment: async (paymentData) => {
-    try {
-      const response = await api.post('/financials/payments/initiate', paymentData);
-      return response.data;
-    } catch (error) {
-      console.error('Payment initiation error:', error);
-      throw error;
-    }
-  },
-
-  /**
-   * Get all payments for a user (or all payments for admin/financial_manager)
-   * @param {Object} filters - Filter criteria
-   * @param {number} filters.page - Page number for pagination
-   * @param {number} filters.limit - Number of items per page
-   * @param {string} filters.status - Filter by payment status
-   * @returns {Promise<Object>} - Paginated payment data
-   */
-  getPayments: async (filters = {}) => {
-    try {
-      const response = await api.get('/financials/payments', { params: filters });
-      return response.data;
-    } catch (error) {
-      console.error('Error fetching payments:', error);
-      throw error;
-    }
-  },
-
-  /**
-   * Get a specific payment by ID
-   * @param {string} paymentId - ID of the payment to retrieve
-   * @returns {Promise<Object>} - Payment details
-   */
-  getPaymentById: async (paymentId) => {
-    try {
-      const response = await api.get(`/financials/payments/${paymentId}`);
-      return response.data;
-    } catch (error) {
-      console.error(`Error fetching payment ${paymentId}:`, error);
-      throw error;
-    }
-  },
-
-  /**
-   * Update payment status (admin/financial_manager only)
-   * @param {string} paymentId - ID of the payment to update
-   * @param {string} status - New payment status
-   * @returns {Promise<Object>} - Updated payment
-   */
-  updatePaymentStatus: async (paymentId, status) => {
-    try {
-      const response = await api.patch(`/financials/payments/${paymentId}/status`, { status });
-      return response.data;
-    } catch (error) {
-      console.error(`Error updating payment ${paymentId} status:`, error);
-      throw error;
-    }
-  },
-  
-  /**
-   * Record a manual payment (admin/financial_manager only)
-   * @param {Object} paymentData - Manual payment data
-   * @returns {Promise<Object>} - Created payment
-   */
-  recordManualPayment: async (paymentData) => {
-    try {
-      const response = await api.post('/financials/payments', paymentData);
-      return response.data;
-    } catch (error) {
-      console.error('Error recording manual payment:', error);
-      throw error;
-    }
-  }
-};
-
-export default paymentApi;
\ No newline at end of file
diff --git a/frontend/src/services/payrollApi.js b/frontend/src/services/payrollApi.js
deleted file mode 100644
index fbc8d65..0000000
--- a/frontend/src/services/payrollApi.js
+++ /dev/null
@@ -1,21 +0,0 @@
-import api from './api';
-
-const payrollApi = {
-  // Generate payroll for a period (Admin/FM)
-  generatePayroll: (periodStart, periodEnd) =>
-    api.post('/payroll/generate', { periodStart, periodEnd }),
-
-  // Get payroll history for a specific staff member (Admin/FM or Staff Owner)
-  getStaffPayrollHistory: (staffId) =>
-    api.get(`/payroll/staff/${staffId}`),
-
-  // Get details of a specific payroll log (Admin/FM or Staff Owner)
-  getPayrollLogById: (logId) =>
-    api.get(`/payroll/${logId}`),
-
-  // Mark payroll as paid (Admin/FM)
-  markAsPaid: (logId, paymentDetails) =>
-    api.patch(`/payroll/${logId}/mark-paid`, paymentDetails), // paymentDetails = { paymentDate, transactionRef }
-};
-
-export default payrollApi;
\ No newline at end of file
diff --git a/frontend/src/services/performanceApi.js b/frontend/src/services/performanceApi.js
deleted file mode 100644
index bf8b12d..0000000
--- a/frontend/src/services/performanceApi.js
+++ /dev/null
@@ -1,52 +0,0 @@
-import api from './api';
-
-const performanceApi = {
-  // Staff endpoints
-  getMyReviews: () => api.get('/performance/my-reviews'),
-  
-  // Admin endpoints
-  createReview: (data) => api.post('/performance', data),
-  getAllReviews: (staffId) => {
-    let url = '/performance';
-    if (staffId) {
-      url += `?staffId=${staffId}`;
-    }
-    return api.get(url);
-  },
-  getReviewById: (id) => api.get(`/performance/${id}`),
-  updateReview: (id, data) => api.put(`/performance/${id}`, data),
-  deleteReview: (id) => api.delete(`/performance/${id}`),
-  getPerformanceSummary: () => api.get('/performance/summary'),
-  
-  // Report endpoints
-  exportPerformanceReport: (period, staffId) => {
-    let url = '/performance/reports/export';
-    const params = [];
-    
-    if (period) params.push(`period=${period}`);
-    if (staffId) params.push(`staffId=${staffId}`);
-    
-    if (params.length > 0) {
-      url += `?${params.join('&')}`;
-    }
-    
-    return api.get(url, { responseType: 'blob' }); // Important to set responseType to blob for PDF
-  },
-  
-  getDetailedPerformanceReport: (startDate, endDate, staffId) => {
-    let url = '/performance/reports/detailed';
-    const params = [];
-    
-    if (startDate) params.push(`startDate=${startDate}`);
-    if (endDate) params.push(`endDate=${endDate}`);
-    if (staffId) params.push(`staffId=${staffId}`);
-    
-    if (params.length > 0) {
-      url += `?${params.join('&')}`;
-    }
-    
-    return api.get(url);
-  }
-};
-
-export default performanceApi;
\ No newline at end of file
diff --git a/frontend/src/services/profileApi.js b/frontend/src/services/profileApi.js
deleted file mode 100644
index 303efd1..0000000
--- a/frontend/src/services/profileApi.js
+++ /dev/null
@@ -1,29 +0,0 @@
-import api from './api';
-
-const profileApi = {
-  // Get current user profile
-  getProfile: () => api.get('/users/profile'),
-  
-  // Update user profile
-  updateProfile: (userData) => api.put('/users/profile', userData),
-  
-  // Delete user account
-  deleteAccount: () => api.delete('/users/profile'),
-  
-  // Change password
-  changePassword: (passwordData) => api.put('/users/profile', { password: passwordData.newPassword }),
-  
-  // Document operations
-  getDocuments: () => api.get('/documents'),
-  uploadDocument: (formData) => {
-    return api.post('/documents/upload', formData, {
-      headers: {
-        'Content-Type': 'multipart/form-data'
-      }
-    });
-  },
-  getDocument: (id) => api.get(`/documents/${id}`),
-  deleteDocument: (id) => api.delete(`/documents/${id}`)
-};
-
-export default profileApi;
\ No newline at end of file
diff --git a/frontend/src/services/settingsApi.js b/frontend/src/services/settingsApi.js
deleted file mode 100644
index 099edd1..0000000
--- a/frontend/src/services/settingsApi.js
+++ /dev/null
@@ -1,25 +0,0 @@
-import api from './api'; // Your configured axios instance
-
-const settingsApi = {
-    getSettings: async () => {
-        try {
-            const response = await api.get('/settings');
-            return response.data;
-        } catch (error) {
-            console.error('Error fetching settings:', error.response?.data || error.message);
-            throw error.response?.data || new Error('Failed to fetch settings');
-        }
-    },
-
-    updateSettings: async (settingsData) => {
-        try {
-            const response = await api.put('/settings', settingsData);
-            return response.data;
-        } catch (error) {
-            console.error('Error updating settings:', error.response?.data || error.message);
-            throw error.response?.data || new Error('Failed to update settings');
-        }
-    }
-};
-
-export default settingsApi;
\ No newline at end of file
diff --git a/frontend/src/services/statisticsApi.js b/frontend/src/services/statisticsApi.js
deleted file mode 100644
index 3c99081..0000000
--- a/frontend/src/services/statisticsApi.js
+++ /dev/null
@@ -1,21 +0,0 @@
-import api from './api';
-
-const getStatistics = async (params = {}) => {
-    try {
-        // Ensure params are correctly formatted for query strings
-        const queryParams = new URLSearchParams(params).toString();
-        const response = await api.get(`/statistics?${queryParams}`);
-        // Assuming the backend returns { status: 'success', data: {...} }
-        if (response.data && response.data.status === 'success') {
-            return response.data.data;
-        } else {
-            throw new Error(response.data?.message || 'Failed to fetch statistics data');
-        }
-    } catch (error) {
-        console.error('Error fetching statistics:', error.response?.data || error.message);
-        // Rethrow a more specific error or the original error message
-        throw new Error(error.response?.data?.message || error.message || 'Failed to fetch statistics');
-    }
-};
-
-export default { getStatistics };
diff --git a/frontend/src/services/subscriptionPlansApi.js b/frontend/src/services/subscriptionPlansApi.js
deleted file mode 100644
index 87848ba..0000000
--- a/frontend/src/services/subscriptionPlansApi.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import api from './api';
-
-// Subscription Plans API
-export const subscriptionPlansApi = {
-  getAll: () => api.get('/subscription-plans'),
-  getById: (id) => api.get(`/subscription-plans/${id}`),
-  create: (planData) => api.post('/subscription-plans', planData),
-  update: (id, planData) => api.put(`/subscription-plans/${id}`, planData),
-  delete: (id) => api.delete(`/subscription-plans/${id}`)
-};
-
-export default subscriptionPlansApi; // Default export might be more conventional
diff --git a/frontend/src/services/userApi.js b/frontend/src/services/userApi.js
deleted file mode 100644
index b6cb2db..0000000
--- a/frontend/src/services/userApi.js
+++ /dev/null
@@ -1,70 +0,0 @@
-import api from './api';
-
-/**
- * Service for user-related API calls
- */
-const userApi = {
-  /**
-   * Get the current user's profile
-   * @returns {Promise} Promise with user profile data
-   */
-  getProfile: async () => {
-    const response = await api.get('/users/profile');
-    return response.data;
-  },
-  
-  /**
-   * Update the current user's profile
-   * @param {Object} profileData - User profile data to update
-   * @returns {Promise} Promise with updated user profile data
-   */
-  updateProfile: async (profileData) => {
-    const response = await api.put('/users/profile', profileData);
-    return response.data;
-  },
-  
-  /**
-   * Change the user's password
-   * @param {Object} passwordData - Object containing old and new password
-   * @returns {Promise} Promise with success message
-   */
-  changePassword: async (passwordData) => {
-    const response = await api.post('/users/change-password', passwordData);
-    return response.data;
-  },
-  
-  /**
-   * Upload a profile picture
-   * @param {FormData} formData - Form data containing the image file
-   * @returns {Promise} Promise with image URL
-   */
-  uploadProfilePicture: async (formData) => {
-    const response = await api.post('/users/profile-picture', formData, {
-      headers: {
-        'Content-Type': 'multipart/form-data'
-      }
-    });
-    return response.data;
-  },
-  
-  /**
-   * Get user notification preferences
-   * @returns {Promise} Promise with notification preferences
-   */
-  getNotificationPreferences: async () => {
-    const response = await api.get('/users/notification-preferences');
-    return response.data;
-  },
-  
-  /**
-   * Update user notification preferences
-   * @param {Object} preferences - Notification preference settings
-   * @returns {Promise} Promise with updated preferences
-   */
-  updateNotificationPreferences: async (preferences) => {
-    const response = await api.put('/users/notification-preferences', preferences);
-    return response.data;
-  }
-};
-
-export default userApi;
\ No newline at end of file
diff --git a/frontend/src/services/userSubscriptionApi.js b/frontend/src/services/userSubscriptionApi.js
deleted file mode 100644
index 157585f..0000000
--- a/frontend/src/services/userSubscriptionApi.js
+++ /dev/null
@@ -1,114 +0,0 @@
-import api from './api';
-
-/**
- * Service for interacting with user subscription endpoints
- */
-const userSubscriptionApi = {
-  /**
-   * Get all subscriptions for a user
-   * @param {string} userId - ID of the user 
-   * @returns {Promise<Object>} - User's subscriptions
-   */
-  getUserSubscriptions: async (userId) => {
-    try {
-      const response = await api.get(`/user-subscriptions/user/${userId}`);
-      return response;
-    } catch (error) {
-      console.error('Error fetching user subscriptions:', error);
-      throw error;
-    }
-  },
-  
-  /**
-   * Get subscription details by ID
-   * @param {string} subscriptionId - ID of the subscription
-   * @returns {Promise<Object>} - Subscription details
-   */
-  getSubscriptionById: async (subscriptionId) => {
-    try {
-      const response = await api.get(`/user-subscriptions/${subscriptionId}`);
-      return response;
-    } catch (error) {
-      console.error('Error fetching subscription details:', error);
-      throw error;
-    }
-  },
-  
-  /**
-   * Create a new subscription for a user
-   * @param {Object} subscriptionData - Subscription data
-   * @returns {Promise<Object>} - Created subscription
-   */
-  createUserSubscription: async (subscriptionData) => {
-    try {
-      const response = await api.post('/user-subscriptions', subscriptionData);
-      return response;
-    } catch (error) {
-      console.error('Error creating user subscription:', error);
-      throw error;
-    }
-  },
-  
-  /**
-   * Update a subscription (status, autoRenew, etc.)
-   * @param {string} subscriptionId - ID of the subscription to update
-   * @param {Object} updateData - Data to update
-   * @returns {Promise<Object>} - Updated subscription
-   */
-  updateSubscription: async (subscriptionId, updateData) => {
-    try {
-      const response = await api.put(`/user-subscriptions/${subscriptionId}`, updateData);
-      return response;
-    } catch (error) {
-      console.error('Error updating subscription:', error);
-      throw error;
-    }
-  },
-  
-  /**
-   * Cancel a subscription
-   * @param {string} subscriptionId - ID of the subscription to cancel
-   * @returns {Promise<Object>} - Response with message
-   */
-  cancelSubscription: async (subscriptionId) => {
-    try {
-      const response = await api.delete(`/user-subscriptions/${subscriptionId}`);
-      return response;
-    } catch (error) {
-      console.error('Error canceling subscription:', error);
-      throw error;
-    }
-  },
-  
-  /**
-   * Toggle auto-renewal for a subscription
-   * @param {string} subscriptionId - ID of the subscription
-   * @param {boolean} autoRenew - Auto renew setting
-   * @returns {Promise<Object>} - Updated subscription
-   */
-  toggleAutoRenew: async (subscriptionId, autoRenew) => {
-    try {
-      const response = await api.put(`/user-subscriptions/${subscriptionId}`, { autoRenew });
-      return response;
-    } catch (error) {
-      console.error('Error toggling auto-renew:', error);
-      throw error;
-    }
-  },
-  
-  /**
-   * Get all active subscriptions (admin only)
-   * @returns {Promise<Object>} - List of active subscriptions
-   */
-  getAllActiveSubscriptions: async () => {
-    try {
-      const response = await api.get('/user-subscriptions');
-      return response;
-    } catch (error) {
-      console.error('Error fetching active subscriptions:', error);
-      throw error;
-    }
-  },
-};
-
-export default userSubscriptionApi;
\ No newline at end of file
diff --git a/frontend/src/styles/App.css b/frontend/src/styles/App.css
new file mode 100644
index 0000000..a889d59
--- /dev/null
+++ b/frontend/src/styles/App.css
@@ -0,0 +1,59 @@
+#root {
+    max-width: 1280px;
+    margin: 0 auto;
+    padding: 2rem;
+    text-align: center;
+  }
+  
+  .logo {
+    height: 6em;
+    padding: 1.5em;
+    will-change: filter;
+    transition: filter 300ms;
+  }
+  .logo:hover {
+    filter: drop-shadow(0 0 2em #646cffaa);
+  }
+  .logo.react:hover {
+    filter: drop-shadow(0 0 2em #61dafbaa);
+  }
+  
+  @keyframes logo-spin {
+    from {
+      transform: rotate(0deg);
+    }
+    to {
+      transform: rotate(360deg);
+    }
+  }
+  
+  @media (prefers-reduced-motion: no-preference) {
+    a:nth-of-type(2) .logo {
+      animation: logo-spin infinite 20s linear;
+    }
+  }
+  
+  .card {
+    padding: 2em;
+  }
+  
+  .read-the-docs {
+    color: #888;
+  }
+  
+  nav {
+    background-color: #2a2a2a;
+    padding: 10px;
+    text-align: center;
+  }
+  
+  nav a {
+    color: #ffffff;
+    margin: 0 10px;
+    text-decoration: none;
+  }
+  
+  nav a:hover {
+    color: #4caf50;
+  }
+  
\ No newline at end of file
diff --git a/frontend/src/styles/custom.css b/frontend/src/styles/custom.css
new file mode 100644
index 0000000..321e3df
--- /dev/null
+++ b/frontend/src/styles/custom.css
@@ -0,0 +1,343 @@
+/* Global styles */
+body {
+  background-color: #f3f3f3; /* Dark teal background for professional look */
+  color: #e0e0e0; /* Light gray text for readability */
+  font-family: 'Roboto', Arial, sans-serif; /* Modern font */
+  margin: 0;
+  padding: 20px;
+  line-height: 1.6;
+}
+
+/* Navigation bar styles */
+nav {
+  background-color: #677b8f; /* Dark blue for nav bar */
+  padding: 15px;
+  text-align: center;
+  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3); /* Subtle shadow for depth */
+}
+
+nav a {
+  color: #ecf0f1; /* Light text for nav links */
+  margin: 0 15px;
+  text-decoration: none;
+  font-weight: 500;
+  transition: color 0.3s ease; /* Smooth color transition on hover */
+}
+
+nav a:hover {
+  color: #3498db; /* Blue on hover for interactivity */
+}
+
+/* Headings */
+h1, h2, h3 {
+  color: #202222; /* Light heading color */
+  font-weight: 600;
+  margin-bottom: 20px;
+}
+
+h1 {
+  font-size: 2.5rem;
+  text-align: center;
+}
+
+h2 {
+  font-size: 1.8rem;
+}
+
+h3 {
+  font-size: 1.5rem;
+}
+
+/* Container for content */
+div {
+  max-width: 1200px;
+  margin: 0 auto; /* Center content */
+}
+
+/* Form styles */
+form {
+  background-color: #5e7d9b; /* Dark blue background for form */
+  padding: 20px;
+  border-radius: 8px;
+  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */
+  margin: 20px 0;
+}
+
+form div {
+  margin-bottom: 20px;
+}
+
+form label {
+  display: block;
+  font-weight: 500;
+  margin-bottom: 8px;
+  color: #ecf0f1;
+}
+
+form input,
+form select {
+  width: 100%;
+  max-width: 350px;
+  padding: 10px;
+  background-color: #34495e; /* Slightly lighter dark blue for inputs */
+  border: 1px solid #4a6a8a; /* Subtle border */
+  color: #e0e0e0;
+  border-radius: 5px;
+  font-size: 1rem;
+  transition: border-color 0.3s ease, background-color 0.3s ease; /* Smooth transitions */
+}
+
+form input:focus,
+form select:focus {
+  outline: none;
+  border-color: #3498db; /* Blue border on focus */
+  background-color: #3e5a78; /* Slightly lighter background on focus */
+}
+
+/* Error messages */
+form .error {
+  color: #e74c3c; /* Red for error messages */
+  font-size: 0.9rem;
+  margin-top: 5px;
+  display: block;
+}
+
+/* Buttons */
+form button {
+  background-color: #3498db; /* Blue for primary buttons */
+  color: #fff;
+  padding: 10px 25px;
+  border: none;
+  border-radius: 5px;
+  cursor: pointer;
+  font-size: 1rem;
+  font-weight: 500;
+  transition: background-color 0.3s ease, transform 0.1s ease; /* Smooth transitions */
+}
+
+form button:hover {
+  background-color: #2980b9; /* Darker blue on hover */
+  transform: translateY(-2px); /* Slight lift effect on hover */
+}
+
+form button:active {
+  transform: translateY(0); /* Reset lift on click */
+}
+
+/* Cancel button styles */
+form button[type="button"] {
+  background-color: #e74c3c; /* Red for cancel button */
+  color: #fff;
+  margin-left: 10px;
+}
+
+form button[type="button"]:hover {
+  background-color: #c0392b; /* Darker red on hover */
+}
+
+/* Table styles */
+table {
+  width: 100%;
+  max-width: 1200px;
+  border-collapse: separate;
+  border-spacing: 0;
+  margin-top: 20px;
+  background-color: #2c3e50; /* Dark blue background for table */
+  border-radius: 8px;
+  overflow: hidden; /* For rounded corners */
+  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); /* Subtle shadow */
+}
+
+table th,
+table td {
+  padding: 12px 15px;
+  text-align: left;
+  border-bottom: 1px solid #4a6a8a; /* Subtle border between rows */
+}
+
+table th {
+  background-color: #34495e; /* Slightly lighter dark blue for headers */
+  color: #ecf0f1;
+  font-weight: 600;
+  text-transform: uppercase;
+  font-size: 0.9rem;
+}
+
+table td {
+  color: #e0e0e0;
+  font-size: 0.95rem;
+}
+
+/* Table row hover effect */
+table tbody tr {
+  transition: background-color 0.3s ease; /* Smooth transition for hover */
+}
+
+table tbody tr:hover {
+  background-color: #3e5a78; /* Slightly lighter background on hover */
+}
+
+/* Table buttons */
+table button {
+  background-color: #3498db; /* Blue for edit button */
+  color: #fff;
+  padding: 8px 15px;
+  border: none;
+  border-radius: 5px;
+  cursor: pointer;
+  font-size: 0.9rem;
+  margin-right: 10px;
+  transition: background-color 0.3s ease, transform 0.1s ease;
+}
+
+table button:hover {
+  background-color: #2980b9; /* Darker blue on hover */
+  transform: translateY(-2px);
+}
+
+table button:active {
+  transform: translateY(0);
+}
+
+/* Delete button */
+table button:last-child {
+  background-color: #e74c3c; /* Red for delete button */
+}
+
+table button:last-child:hover {
+  background-color: #c0392b; /* Darker red on hover */
+}
+
+/* Map container for ResourceManagement */
+.map-container {
+  margin: 20px 0;
+  border-radius: 8px;
+  overflow: hidden;
+  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
+}
+
+/* Responsive design */
+@media (max-width: 768px) {
+  form input,
+  form select {
+    max-width: 100%;
+  }
+
+  table {
+    font-size: 0.9rem;
+  }
+
+  table th,
+  table td {
+    padding: 8px 10px;
+  }
+
+  table button {
+    padding: 6px 10px;
+    font-size: 0.8rem;
+  }
+}
+/* Card container styles */
+.card-container {
+  display: flex;
+  justify-content: space-between;
+  flex-wrap: wrap;
+  gap: 20px;
+  margin-top: 30px;
+}
+
+/* Card styles */
+.card {
+  background-color: rgba(61, 126, 163, 0.7); /* Dark blue background for cards */
+  border-radius: 10px;
+  padding: 20px;
+  flex: 1;
+  min-width: 200px;
+  max-width: 220px; /* Adjusted width to fit 4 cards per row */
+  text-align: center;
+  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); /* Subtle shadow */
+  transition: transform 0.3s ease, box-shadow 0.3s ease; /* Smooth transitions */
+}
+
+.card:hover {
+  transform: translateY(-5px); /* Lift effect on hover */
+  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3); /* Stronger shadow on hover */
+}
+
+.card h3 {
+  font-size: 1.2rem;
+  margin-bottom: 20px;
+  color: #ecf0f1;
+}
+
+/* Card button styles */
+.card-button {
+  background-color: #7f8c8d; /* Gray for view buttons */
+  color: #fff;
+  padding: 10px 20px;
+  border: none;
+  border-radius: 5px;
+  cursor: pointer;
+  font-size: 1rem;
+  font-weight: 500;
+  transition: background-color 0.3s ease, transform 0.1s ease;
+}
+
+.card-button:hover {
+  background-color: #95a5a6; /* Lighter gray on hover */
+  transform: translateY(-2px);
+}
+
+.card-button:active {
+  transform: translateY(0);
+}
+
+/* Responsive design for cards */
+@media (max-width: 1024px) {
+  .card {
+    min-width: 45%; /* 2 cards per row on medium screens */
+    max-width: 45%;
+  }
+}
+
+@media (max-width: 768px) {
+  .card {
+    min-width: 100%; /* 1 card per row on small screens */
+    max-width: 100%;
+  }
+}
+/* Search container styles */
+.search-container {
+  margin: 20px 0;
+  text-align: left;
+}
+
+/* Search bar styles */
+.search-bar {
+  width: 100%;
+  max-width: 400px;
+  padding: 10px;
+  background-color: #34495e; /* Dark blue background */
+  border: 1px solid #4a6a8a; /* Subtle border */
+  color: #e0e0e0; /* Light text */
+  border-radius: 5px;
+  font-size: 1rem;
+  transition: border-color 0.3s ease, background-color 0.3s ease;
+}
+
+.search-bar:focus {
+  outline: none;
+  border-color: #3498db; /* Blue border on focus */
+  background-color: #3e5a78; /* Slightly lighter background on focus */
+}
+
+.search-bar::placeholder {
+  color: #95a5a6; /* Light gray placeholder text */
+}
+
+/* Responsive design for search bar */
+@media (max-width: 768px) {
+  .search-bar {
+    max-width: 100%;
+  }
+}
\ No newline at end of file
diff --git a/frontend/src/theme.js b/frontend/src/theme.js
deleted file mode 100644
index 9c7210c..0000000
--- a/frontend/src/theme.js
+++ /dev/null
@@ -1,161 +0,0 @@
-/**
- * Application theme configuration for consistent styling
- * This theme can be used with any UI library or with custom CSS
- */
-
-const theme = {
-  // Color palette
-  colors: {
-    primary: {
-      main: '#4caf50',
-      light: '#80e27e',
-      dark: '#087f23',
-      contrastText: '#ffffff'
-    },
-    secondary: {
-      main: '#2196f3',
-      light: '#6ec6ff',
-      dark: '#0069c0',
-      contrastText: '#ffffff'
-    },
-    error: {
-      main: '#f44336',
-      light: '#ff7961',
-      dark: '#ba000d',
-      contrastText: '#ffffff'
-    },
-    warning: {
-      main: '#ff9800',
-      light: '#ffc947',
-      dark: '#c66900',
-      contrastText: '#000000'
-    },
-    success: {
-      main: '#4caf50',
-      light: '#80e27e',
-      dark: '#087f23',
-      contrastText: '#ffffff'
-    },
-    info: {
-      main: '#2196f3',
-      light: '#64b5f6',
-      dark: '#0d47a1',
-      contrastText: '#ffffff'
-    },
-    background: {
-      default: '#f5f5f5',
-      paper: '#ffffff',
-      dark: '#121212'
-    },
-    text: {
-      primary: '#212121',
-      secondary: '#757575',
-      disabled: '#9e9e9e',
-      hint: '#9e9e9e'
-    },
-    divider: '#e0e0e0',
-  },
-  
-  // Typography
-  typography: {
-    fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
-    fontSize: 16,
-    fontWeightLight: 300,
-    fontWeightRegular: 400,
-    fontWeightMedium: 500,
-    fontWeightBold: 700,
-    h1: {
-      fontSize: '2.5rem',
-      fontWeight: 500,
-    },
-    h2: {
-      fontSize: '2rem',
-      fontWeight: 500,
-    },
-    h3: {
-      fontSize: '1.75rem',
-      fontWeight: 500,
-    },
-    h4: {
-      fontSize: '1.5rem',
-      fontWeight: 500,
-    },
-    h5: {
-      fontSize: '1.25rem',
-      fontWeight: 500,
-    },
-    h6: {
-      fontSize: '1rem',
-      fontWeight: 500,
-    },
-    body1: {
-      fontSize: '1rem',
-    },
-    body2: {
-      fontSize: '0.875rem',
-    },
-    button: {
-      fontSize: '0.875rem',
-      textTransform: 'uppercase',
-      fontWeight: 500,
-    },
-  },
-  
-  // Spacing
-  spacing: {
-    unit: 8, // Base unit in px
-    xs: '4px',
-    sm: '8px',
-    md: '16px',
-    lg: '24px',
-    xl: '32px',
-    xxl: '48px',
-  },
-  
-  // Borders & Shadows
-  shape: {
-    borderRadius: '4px',
-    borderRadiusLarge: '8px',
-    borderWidth: '1px',
-  },
-  
-  shadows: {
-    small: '0 2px 4px rgba(0,0,0,0.1)',
-    medium: '0 4px 8px rgba(0,0,0,0.12)',
-    large: '0 8px 16px rgba(0,0,0,0.14)',
-  },
-  
-  // Transitions
-  transitions: {
-    duration: {
-      short: '150ms',
-      standard: '300ms',
-      long: '500ms',
-    },
-    easing: {
-      easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
-      easeOut: 'cubic-bezier(0, 0, 0.2, 1)',
-      easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
-    },
-  },
-  
-  // Breakpoints (for responsive design)
-  breakpoints: {
-    xs: '0px',
-    sm: '600px',
-    md: '960px',
-    lg: '1280px',
-    xl: '1920px',
-  },
-  
-  // Z-index values
-  zIndex: {
-    appBar: 1100,
-    drawer: 1200,
-    modal: 1300,
-    snackbar: 1400,
-    tooltip: 1500,
-  }
-};
-
-export default theme;
\ No newline at end of file
diff --git a/frontend/src/variables.css b/frontend/src/variables.css
deleted file mode 100644
index 598f997..0000000
--- a/frontend/src/variables.css
+++ /dev/null
@@ -1,161 +0,0 @@
--/* 
- * SmartBin Global CSS Variables
- * These variables ensure consistent styling across the application
- * and complement the Material UI theme
- */
-
-:root {
-  /* Color palette - matches MUI theme */
-  --primary-color: #3e4b2e;
-  --primary-light: #5e7245;
-  --primary-dark: #2c3720;
-  --secondary-color: #5e6472;
-  --secondary-light: #7d8490;
-  --secondary-dark: #424854;
-  
-  /* Status colors */
-  --success-color: #198754;
-  --success-light: #d1e7dd;
-  --error-color: #dc3545;
-  --error-light: #f8d7da;
-  --warning-color: #ffc107;
-  --warning-light: #fff3cd;
-  --info-color: #0dcaf0;
-  --info-light: #cff4fc;
-  
-  /* Text colors */
-  --text-primary: #212529;
-  --text-secondary: #6c757d;
-  --text-light: #999999;
-  --text-white: #ffffff;
-  
-  /* Background colors */
-  --bg-default: #f8f9fa;
-  --bg-paper: #ffffff;
-  --bg-light: #f5f5f5;
-  --bg-dark: #212529;
-  
-  /* Border colors */
-  --border-color: #dee2e6;
-  --border-light: #f0f0f0;
-  
-  /* Spacing */
-  --space-xs: 4px;
-  --space-sm: 8px;
-  --space-md: 16px;
-  --space-lg: 24px;
-  --space-xl: 32px;
-  --space-xxl: 48px;
-  
-  /* Border radius */
-  --border-radius-sm: 4px;
-  --border-radius-md: 6px;
-  --border-radius-lg: 8px;
-  --border-radius-xl: 12px;
-  --border-radius-pill: 50px;
-  
-  /* Shadows */
-  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
-  --shadow-md: 0 2px 4px rgba(0, 0, 0, 0.1);
-  --shadow-lg: 0 4px 8px rgba(0, 0, 0, 0.12);
-  --shadow-xl: 0 8px 16px rgba(0, 0, 0, 0.14);
-  
-  /* Typography */
-  --font-family: 'Roboto', 'Arial', sans-serif;
-  --font-size-xs: 0.75rem;    /* 12px */
-  --font-size-sm: 0.875rem;   /* 14px */
-  --font-size-md: 1rem;       /* 16px */
-  --font-size-lg: 1.25rem;    /* 20px */
-  --font-size-xl: 1.5rem;     /* 24px */
-  --font-size-xxl: 2rem;      /* 32px */
-  
-  --font-weight-light: 300;
-  --font-weight-regular: 400;
-  --font-weight-medium: 500;
-  --font-weight-bold: 600;
-  --font-weight-extrabold: 700;
-  
-  /* Z-index */
-  --z-index-dropdown: 1000;
-  --z-index-sticky: 1020;
-  --z-index-fixed: 1030;
-  --z-index-modal-backdrop: 1040;
-  --z-index-modal: 1050;
-  --z-index-popover: 1060;
-  --z-index-tooltip: 1070;
-  
-  /* Transitions */
-  --transition-speed-fast: 150ms;
-  --transition-speed-normal: 300ms;
-  --transition-speed-slow: 500ms;
-  --transition-ease: cubic-bezier(0.4, 0, 0.2, 1);
-  
-  /* Container widths */
-  --container-sm: 540px;
-  --container-md: 720px;
-  --container-lg: 960px;
-  --container-xl: 1140px;
-  
-  /* Common component-specific variables */
-  --header-height: 70px;
-  --sidebar-width: 260px;
-  --sidebar-collapsed-width: 72px;
-  --card-padding: 20px;
-  --input-height: 40px;
-  --button-height: 38px;
-}
-
-/* Dark mode theme - to be implemented later if needed */
-.dark-theme {
-  --bg-default: #121212;
-  --bg-paper: #1e1e1e;
-  --bg-light: #2c2c2c;
-  --text-primary: #e0e0e0;
-  --text-secondary: #a0a0a0;
-  --border-color: #333333;
-  --border-light: #333333;
-}
-
-/* Utility classes */
-.text-primary { color: var(--primary-color); }
-.text-secondary { color: var(--secondary-color); }
-.text-success { color: var(--success-color); }
-.text-error { color: var(--error-color); }
-.text-warning { color: var(--warning-color); }
-.text-info { color: var(--info-color); }
-
-.bg-primary { background-color: var(--primary-color); }
-.bg-secondary { background-color: var(--secondary-color); }
-.bg-success { background-color: var(--success-light); }
-.bg-error { background-color: var(--error-light); }
-.bg-warning { background-color: var(--warning-light); }
-.bg-info { background-color: var(--info-light); }
-
-/* Status badge styles */
-.badge {
-  display: inline-block;
-  padding: 0.25em 0.6em;
-  font-size: var(--font-size-xs);
-  font-weight: var(--font-weight-medium);
-  border-radius: var(--border-radius-pill);
-}
-
-.badge-success {
-  background-color: var(--success-light);
-  color: var(--success-color);
-}
-
-.badge-error {
-  background-color: var(--error-light);
-  color: var(--error-color);
-}
-
-.badge-warning {
-  background-color: var(--warning-light);
-  color: var(--warning-color);
-}
-
-.badge-info {
-  background-color: var(--info-light);
-  color: var(--info-color);
-}
\ No newline at end of file
diff --git a/frontend/styles/themeStyles.css b/frontend/styles/themeStyles.css
deleted file mode 100644
index 73370f1..0000000
--- a/frontend/styles/themeStyles.css
+++ /dev/null
@@ -1,183 +0,0 @@
-/* Theme styles for SmartBin application */
-
-:root {
-  /* Primary colors */
-  --primary-color: #4ea14a;
-  --primary-light: #73c56d;
-  --primary-dark: #3c8a38;
-  
-  /* Secondary colors */
-  --secondary-color: #88afa1;
-  --secondary-light: #a8cfc1;
-  --secondary-dark: #6b9b8d;
-  
-  /* Accent colors */
-  --accent-color: #b4c3a2;
-  
-  /* Text colors */
-  --text-primary: #333333;
-  --text-secondary: #666666;
-  --text-disabled: #999999;
-  --text-white: #ffffff;
-  
-  /* Background colors */
-  --bg-default: #f9f9f9;
-  --bg-paper: #ffffff;
-  --bg-light: #f5f5f5;
-  --bg-dark: #121212;
-  
-  /* State colors */
-  --error-color: #d32f2f;
-  --warning-color: #f57c00;
-  --info-color: #0288d1;
-  --success-color: #388e3c;
-}
-
-/* Theme-specific element styling */
-.theme-container {
-  background-color: var(--bg-default);
-  color: var(--text-primary);
-}
-
-.theme-card {
-  background-color: var(--bg-paper);
-  border-radius: 8px;
-  padding: 1.5rem;
-  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
-}
-
-.theme-header {
-  background-color: var(--primary-color);
-  color: var(--text-white);
-  padding: 1rem;
-}
-
-.theme-footer {
-  background-color: var(--bg-light);
-  padding: 1.5rem;
-  margin-top: 2rem;
-  border-top: 1px solid rgba(0, 0, 0, 0.1);
-}
-
-/* Theme buttons */
-.theme-btn-primary {
-  background-color: var(--primary-color);
-  color: white;
-  border: none;
-  padding: 0.6rem 1.2rem;
-  border-radius: 4px;
-  cursor: pointer;
-  font-weight: 500;
-  transition: background-color 0.3s;
-}
-
-.theme-btn-primary:hover {
-  background-color: var(--primary-dark);
-}
-
-.theme-btn-secondary {
-  background-color: var(--secondary-color);
-  color: white;
-  border: none;
-  padding: 0.6rem 1.2rem;
-  border-radius: 4px;
-  cursor: pointer;
-  font-weight: 500;
-  transition: background-color 0.3s;
-}
-
-.theme-btn-secondary:hover {
-  background-color: var(--secondary-dark);
-}
-
-.theme-btn-outline {
-  background-color: transparent;
-  color: var(--primary-color);
-  border: 1px solid var(--primary-color);
-  padding: 0.6rem 1.2rem;
-  border-radius: 4px;
-  cursor: pointer;
-  font-weight: 500;
-  transition: all 0.3s;
-}
-
-.theme-btn-outline:hover {
-  background-color: var(--primary-light);
-  color: white;
-}
-
-/* Theme text styles */
-.theme-title {
-  color: var(--primary-dark);
-  font-weight: 600;
-  margin-bottom: 1rem;
-}
-
-.theme-subtitle {
-  color: var(--secondary-dark);
-  font-weight: 500;
-  margin-bottom: 0.75rem;
-}
-
-.theme-text-accent {
-  color: var(--accent-color);
-}
-
-.theme-text-error {
-  color: var(--error-color);
-}
-
-.theme-text-success {
-  color: var(--success-color);
-}
-
-/* Theme-specific layouts */
-.theme-grid {
-  display: grid;
-  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
-  gap: 1.5rem;
-}
-
-.theme-flex-center {
-  display: flex;
-  justify-content: center;
-  align-items: center;
-}
-
-.theme-form-group {
-  margin-bottom: 1.5rem;
-}
-
-.theme-form-control {
-  width: 100%;
-  padding: 0.75rem;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 1rem;
-  transition: border-color 0.3s;
-}
-
-.theme-form-control:focus {
-  border-color: var(--primary-color);
-  outline: none;
-}
-
-/* Dark theme overrides - will be applied when dark mode is enabled */
-[data-theme="dark"] {
-  --bg-default: #121212;
-  --bg-paper: #1e1e1e;
-  --bg-light: #2c2c2c;
-  --text-primary: #e0e0e0;
-  --text-secondary: #b0b0b0;
-}
-
-/* Responsive adjustments */
-@media (max-width: 768px) {
-  .theme-card {
-    padding: 1rem;
-  }
-  
-  .theme-grid {
-    grid-template-columns: 1fr;
-  }
-}
\ No newline at end of file
diff --git a/frontend/vite.config.js b/frontend/vite.config.js
deleted file mode 100644
index 8b0f57b..0000000
--- a/frontend/vite.config.js
+++ /dev/null
@@ -1,7 +0,0 @@
-import { defineConfig } from 'vite'
-import react from '@vitejs/plugin-react'
-
-// https://vite.dev/config/
-export default defineConfig({
-  plugins: [react()],
-})
diff --git a/frontend/vite.config.ts b/frontend/vite.config.ts
new file mode 100644
index 0000000..7f3eac3
--- /dev/null
+++ b/frontend/vite.config.ts
@@ -0,0 +1,10 @@
+import { defineConfig } from 'vite';
+import react from '@vitejs/plugin-react';
+
+export default defineConfig({
+  plugins: [react()],
+  server: {
+    port: 5173,
+    open: true
+  }
+});
\ No newline at end of file
diff --git a/frontend_config_dump.txt b/frontend_config_dump.txt
deleted file mode 100644
index d649127..0000000
--- a/frontend_config_dump.txt
+++ /dev/null
@@ -1,1096 +0,0 @@
---- File: .\frontend\package.json ---
-
-{
-  "name": "frontend",
-  "private": true,
-  "version": "0.0.0",
-  "type": "module",
-  "scripts": {
-    "dev": "vite",
-    "build": "vite build",
-    "lint": "eslint .",
-    "preview": "vite preview"
-  },
-  "dependencies": {
-    "@emotion/react": "^11.14.0",
-    "@emotion/styled": "^11.14.0",
-    "@fortawesome/fontawesome-svg-core": "^6.7.2",
-    "@fortawesome/free-brands-svg-icons": "^6.7.2",
-    "@fortawesome/free-solid-svg-icons": "^6.7.2",
-    "@fortawesome/react-fontawesome": "^0.2.2",
-    "@hookform/resolvers": "^5.0.1",
-    "@mui/icons-material": "^7.0.2",
-    "@mui/material": "^7.0.2",
-    "@mui/x-date-pickers": "^8.1.0",
-    "@radix-ui/react-accordion": "^1.2.8",
-    "@radix-ui/react-alert-dialog": "^1.1.11",
-    "@radix-ui/react-avatar": "^1.1.7",
-    "@radix-ui/react-checkbox": "^1.2.3",
-    "@radix-ui/react-dialog": "^1.1.11",
-    "@radix-ui/react-dropdown-menu": "^2.1.12",
-    "@radix-ui/react-hover-card": "^1.1.11",
-    "@radix-ui/react-label": "^2.1.4",
-    "@radix-ui/react-popover": "^1.1.11",
-    "@radix-ui/react-progress": "^1.1.4",
-    "@radix-ui/react-select": "^2.2.2",
-    "@radix-ui/react-separator": "^1.1.4",
-    "@radix-ui/react-slider": "^1.3.2",
-    "@radix-ui/react-slot": "^1.2.0",
-    "@radix-ui/react-switch": "^1.2.2",
-    "@radix-ui/react-tabs": "^1.1.9",
-    "@radix-ui/react-tooltip": "^1.2.4",
-    "@stripe/react-stripe-js": "^3.6.0",
-    "@stripe/stripe-js": "^2.4.0",
-    "axios": "^1.8.4",
-    "chart.js": "^4.4.9",
-    "class-variance-authority": "^0.7.1",
-    "clsx": "^2.1.1",
-    "jspdf": "^3.0.1",
-    "jspdf-autotable": "^5.0.2",
-    "next-themes": "^0.4.6",
-    "react": "^19.0.0",
-    "react-chartjs-2": "^5.3.0",
-    "react-day-picker": "^8.10.1",
-    "react-dom": "^19.0.0",
-    "react-hook-form": "^7.56.1",
-    "react-router-dom": "^7.4.0",
-    "react-transition-group": "^4.4.5",
-    "recharts": "^2.15.3",
-    "sonner": "^2.0.3",
-    "tailwind-merge": "^3.2.0",
-    "zod": "^3.24.3"
-  },
-  "devDependencies": {
-    "@eslint/js": "^9.21.0",
-    "@shadcn/ui": "^0.0.4",
-    "@tailwindcss/forms": "^0.5.10",
-    "@tailwindcss/postcss": "^4.1.5",
-    "@tailwindcss/vite": "^4.1.5",
-    "@types/react": "^19.0.10",
-    "@types/react-dom": "^19.0.4",
-    "@vitejs/plugin-react": "^4.3.4",
-    "autoprefixer": "^10.4.21",
-    "date-fns": "^3.6.0",
-    "eslint": "^9.21.0",
-    "eslint-plugin-react-hooks": "^5.1.0",
-    "eslint-plugin-react-refresh": "^0.4.19",
-    "globals": "^15.15.0",
-    "lucide-react": "^0.503.0",
-    "postcss": "^8.5.3",
-    "shadcn-ui": "^0.9.5",
-    "tailwindcss": "^4.1.5",
-    "tailwindcss-animate": "^1.0.7",
-    "tw-animate-css": "^1.2.8",
-    "vite": "^6.2.0"
-  }
-}
-
-
---- End File: .\frontend\package.json ---
-
-
---- File: .\frontend\tailwind.config.js ---
-
-/** @type {import('tailwindcss').Config} */
-export default {
-  darkMode: ["class"],
-  content: [
-    "./index.html",
-    "./src/**/*.{js,ts,jsx,tsx}",
-  ],
-  prefix: "",
-  theme: {
-    container: {
-      center: true,
-      padding: "2rem",
-      screens: {
-        "2xl": "1400px",
-      },
-    },
-    extend: {
-      colors: {
-        border: "var(--border)",
-        input: "var(--input)",
-        ring: "var(--ring)",
-        background: "var(--background)",
-        foreground: "var(--foreground)",
-        primary: {
-          DEFAULT: "var(--primary)",
-          foreground: "var(--primary-foreground)",
-        },
-        secondary: {
-          DEFAULT: "var(--secondary)",
-          foreground: "var(--secondary-foreground)",
-        },
-        destructive: {
-          DEFAULT: "var(--destructive)",
-          foreground: "var(--destructive-foreground)",
-        },
-        muted: {
-          DEFAULT: "var(--muted)",
-          foreground: "var(--muted-foreground)",
-        },
-        accent: {
-          DEFAULT: "var(--accent)",
-          foreground: "var(--accent-foreground)",
-        },
-        popover: {
-          DEFAULT: "var(--popover)",
-          foreground: "var(--popover-foreground)",
-        },
-        card: {
-          DEFAULT: "var(--card)",
-          foreground: "var(--card-foreground)",
-        },
-      },
-      borderRadius: {
-        lg: "var(--radius)",
-        md: "calc(var(--radius) - 2px)",
-        sm: "calc(var(--radius) - 4px)",
-      },
-      keyframes: {
-        "accordion-down": {
-          from: { height: 0 },
-          to: { height: "var(--radix-accordion-content-height)" },
-        },
-        "accordion-up": {
-          from: { height: "var(--radix-accordion-content-height)" },
-          to: { height: 0 },
-        },
-      },
-      animation: {
-        "accordion-down": "accordion-down 0.2s ease-out",
-        "accordion-up": "accordion-up 0.2s ease-out",
-      },
-    },
-  },
-  plugins: [require("tailwindcss-animate")],
-}
-
---- End File: .\frontend\tailwind.config.js ---
-
-
---- File: .\frontend\postcss.config.cjs ---
-
-module.exports = {
-  plugins: {
-    '@tailwindcss/postcss': {}, // Use the correct Tailwind CSS PostCSS plugin
-    autoprefixer: {},
-  },
-}
-
---- End File: .\frontend\postcss.config.cjs ---
-
-
---- File: .\frontend\vite.config.js ---
-
-import { defineConfig } from 'vite'
-import react from '@vitejs/plugin-react'
-import path from 'path'
-
-// https://vite.dev/config/
-export default defineConfig({
-  plugins: [react()],
-  resolve: {
-    alias: {
-      '@': path.resolve(__dirname, './src'),
-    },
-  },
-})
-
-
---- End File: .\frontend\vite.config.js ---
-
-
---- File: .\frontend\src\index.css ---
-
-/* Import global CSS variables and theme styles */
-@import url('./variables.css');
-@import url('../styles/themeStyles.css');
-@import "tw-animate-css";
-
-/* Import Tailwind directives */
-@tailwind base;
-@tailwind components;
-@tailwind utilities;
-
-/* Base styles and resets */
-@custom-variant dark (&:is(.dark *));
-
-* {
-  margin: 0;
-  padding: 0;
-  box-sizing: border-box;
-}
-
-html {
-  font-size: 16px;
-  scroll-behavior: smooth;
-}
-
-body {
-  font-family: var(--font-family);
-  line-height: 1.5;
-  font-weight: var(--font-weight-regular);
-  color: var(--text-primary);
-  background-color: var(--bg-default);
-  min-height: 100vh;
-  min-width: 320px;
-
-  font-synthesis: none;
-  text-rendering: optimizeLegibility;
-  -webkit-font-smoothing: antialiased;
-  -moz-osx-font-smoothing: grayscale;
-}
-
-/* Typography */
-h1, h2, h3, h4, h5, h6 {
-  margin-bottom: 0.5em;
-  font-weight: var(--font-weight-medium);
-  line-height: 1.2;
-  color: var(--text-primary);
-}
-
-h1 {
-  font-size: var(--font-size-xxl);
-}
-
-h2 {
-  font-size: var(--font-size-xl);
-}
-
-h3 {
-  font-size: var(--font-size-lg);
-}
-
-p {
-  margin-bottom: 1rem;
-}
-
-a {
-  color: var(--primary-color);
-  text-decoration: none;
-  transition: color var(--transition-speed-fast) ease;
-}
-
-a:hover {
-  color: var(--primary-dark);
-  text-decoration: underline;
-}
-
-/* Focus styling for accessibility */
-:focus {
-  outline: 2px solid var(--primary-color);
-  outline-offset: 2px;
-}
-
-/* Button styling */
-button {
-  cursor: pointer;
-  font-family: var(--font-family);
-  font-weight: var(--font-weight-medium);
-  border-radius: var(--border-radius-md);
-  border: 1px solid transparent;
-  padding: 0.6em 1.2em;
-  font-size: var(--font-size-md);
-  background-color: var(--bg-light);
-  transition: all var(--transition-speed-normal) var(--transition-ease);
-}
-
-button:hover {
-  transform: translateY(-2px);
-  box-shadow: var(--shadow-sm);
-}
-
-button:active {
-  transform: translateY(0);
-}
-
-button:disabled {
-  opacity: 0.6;
-  cursor: not-allowed;
-}
-
-/* Form controls */
-input, select, textarea {
-  font-family: var(--font-family);
-  font-size: var(--font-size-md);
-  padding: 0.5rem 0.75rem;
-  border: 1px solid var(--border-color);
-  border-radius: var(--border-radius-sm);
-  background-color: var(--bg-paper);
-  transition: border-color var(--transition-speed-fast) ease;
-}
-
-input:focus, select:focus, textarea:focus {
-  outline: none;
-  border-color: var(--primary-color);
-  box-shadow: 0 0 0 2px rgba(62, 75, 46, 0.1);
-}
-
-/* Common component styles */
-.card {
-  background-color: var(--bg-paper);
-  border-radius: var(--border-radius-lg);
-  padding: var(--card-padding);
-  box-shadow: var(--shadow-md);
-  transition: all var(--transition-speed-normal) ease;
-}
-
-.card-hover:hover {
-  transform: translateY(-4px);
-  box-shadow: var(--shadow-lg);
-}
-
-/* Page transitions */
-.page-transition {
-  opacity: 1;
-  transition: var(--transition-speed-normal) var(--transition-ease);
-  transition-property: opacity, transform;
-}
-
-.page-transition.fadeIn {
-  opacity: 1;
-  transform: translateY(0) scale(1);
-}
-
-.page-transition.fadeOut {
-  opacity: 0;
-  transform: translateY(20px) scale(0.98);
-}
-
-/* Loading indicator */
-.loading-indicator {
-  width: 40px;
-  height: 40px;
-  border: 3px solid var(--border-light);
-  border-radius: 50%;
-  border-top-color: var(--primary-color);
-  animation: spin 1s ease-in-out infinite;
-  margin: 40px auto;
-}
-
-@keyframes spin {
-  to { transform: rotate(360deg); }
-}
-
-/* Animations */
-@keyframes pulse-light {
-  0% { box-shadow: 0 0 0 0 rgba(62, 75, 46, 0.4); }
-  70% { box-shadow: 0 0 0 10px rgba(62, 75, 46, 0); }
-  100% { box-shadow: 0 0 0 0 rgba(62, 75, 46, 0); }
-}
-
-@keyframes fade-in {
-  from { opacity: 0; }
-  to { opacity: 1; }
-}
-
-@keyframes slide-in {
-  from { transform: translateY(-20px); opacity: 0; }
-  to { transform: translateY(0); opacity: 1; }
-}
-
-/* Common utility classes */
-.text-center { text-align: center; }
-.text-right { text-align: right; }
-.text-left { text-align: left; }
-
-.mb-0 { margin-bottom: 0; }
-.mb-1 { margin-bottom: var(--space-sm); }
-.mb-2 { margin-bottom: var(--space-md); }
-.mb-3 { margin-bottom: var(--space-lg); }
-
-.mt-0 { margin-top: 0; }
-.mt-1 { margin-top: var(--space-sm); }
-.mt-2 { margin-top: var(--space-md); }
-.mt-3 { margin-top: var(--space-lg); }
-
-.p-0 { padding: 0; }
-.p-1 { padding: var(--space-sm); }
-.p-2 { padding: var(--space-md); }
-.p-3 { padding: var(--space-lg); }
-
-.w-100 { width: 100%; }
-.h-100 { height: 100%; }
-
-.d-flex { display: flex; }
-.flex-column { flex-direction: column; }
-.justify-content-between { justify-content: space-between; }
-.align-items-center { align-items: center; }
-.flex-wrap { flex-wrap: wrap; }
-
-/* Dark mode - to be implemented fully later if needed */
-@media (prefers-color-scheme: dark) {
-  :root {
-    color-scheme: dark;
-  }
-
-  body {
-    color: var(--text-white);
-    background-color: var(--bg-dark);
-  }
-
-  button {
-    background-color: #2c2c2c;
-    color: var(--text-white);
-  }
-}
-
-@theme inline {
-  --radius-sm: calc(var(--radius) - 4px);
-  --radius-md: calc(var(--radius) - 2px);
-  --radius-lg: var(--radius);
-  --radius-xl: calc(var(--radius) + 4px);
-  --color-background: var(--background);
-  --color-foreground: var(--foreground);
-  --color-card: var(--card);
-  --color-card-foreground: var(--card-foreground);
-  --color-popover: var(--popover);
-  --color-popover-foreground: var(--popover-foreground);
-  --color-primary: var(--primary);
-  --color-primary-foreground: var(--primary-foreground);
-  --color-secondary: var(--secondary);
-  --color-secondary-foreground: var(--secondary-foreground);
-  --color-muted: var(--muted);
-  --color-muted-foreground: var(--muted-foreground);
-  --color-accent: var(--accent);
-  --color-accent-foreground: var(--accent-foreground);
-  --color-destructive: var(--destructive);
-  --color-border: var(--border);
-  --color-input: var(--input);
-  --color-ring: var(--ring);
-  --color-chart-1: var(--chart-1);
-  --color-chart-2: var(--chart-2);
-  --color-chart-3: var(--chart-3);
-  --color-chart-4: var(--chart-4);
-  --color-chart-5: var(--chart-5);
-  --color-sidebar: var(--sidebar);
-  --color-sidebar-foreground: var(--sidebar-foreground);
-  --color-sidebar-primary: var(--sidebar-primary);
-  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
-  --color-sidebar-accent: var(--sidebar-accent);
-  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
-  --color-sidebar-border: var(--sidebar-border);
-  --color-sidebar-ring: var(--sidebar-ring);
-}
-
-:root {
-  --radius: 0.625rem;
-  --background: oklch(1 0 0);
-  --foreground: oklch(0.141 0.005 285.823);
-  --card: oklch(1 0 0);
-  --card-foreground: oklch(0.141 0.005 285.823);
-  --popover: oklch(1 0 0);
-  --popover-foreground: oklch(0.141 0.005 285.823);
-  --primary: oklch(0.21 0.006 285.885);
-  --primary-foreground: oklch(0.985 0 0);
-  --secondary: oklch(0.967 0.001 286.375);
-  --secondary-foreground: oklch(0.21 0.006 285.885);
-  --muted: oklch(0.967 0.001 286.375);
-  --muted-foreground: oklch(0.552 0.016 285.938);
-  --accent: oklch(0.967 0.001 286.375);
-  --accent-foreground: oklch(0.21 0.006 285.885);
-  --destructive: oklch(0.577 0.245 27.325);
-  --border: oklch(0.92 0.004 286.32);
-  --input: oklch(0.92 0.004 286.32);
-  --ring: oklch(0.705 0.015 286.067);
-  --chart-1: oklch(0.646 0.222 41.116);
-  --chart-2: oklch(0.6 0.118 184.704);
-  --chart-3: oklch(0.398 0.07 227.392);
-  --chart-4: oklch(0.828 0.189 84.429);
-  --chart-5: oklch(0.769 0.188 70.08);
-  --sidebar: oklch(0.985 0 0);
-  --sidebar-foreground: oklch(0.141 0.005 285.823);
-  --sidebar-primary: oklch(0.21 0.006 285.885);
-  --sidebar-primary-foreground: oklch(0.985 0 0);
-  --sidebar-accent: oklch(0.967 0.001 286.375);
-  --sidebar-accent-foreground: oklch(0.21 0.006 285.885);
-  --sidebar-border: oklch(0.92 0.004 286.32);
-  --sidebar-ring: oklch(0.705 0.015 286.067);
-}
-
-.dark {
-  --background: oklch(0.141 0.005 285.823);
-  --foreground: oklch(0.985 0 0);
-  --card: oklch(0.21 0.006 285.885);
-  --card-foreground: oklch(0.985 0 0);
-  --popover: oklch(0.21 0.006 285.885);
-  --popover-foreground: oklch(0.985 0 0);
-  --primary: oklch(0.92 0.004 286.32);
-  --primary-foreground: oklch(0.21 0.006 285.885);
-  --secondary: oklch(0.274 0.006 286.033);
-  --secondary-foreground: oklch(0.985 0 0);
-  --muted: oklch(0.274 0.006 286.033);
-  --muted-foreground: oklch(0.705 0.015 286.067);
-  --accent: oklch(0.274 0.006 286.033);
-  --accent-foreground: oklch(0.985 0 0);
-  --destructive: oklch(0.704 0.191 22.216);
-  --border: oklch(1 0 0 / 10%);
-  --input: oklch(1 0 0 / 15%);
-  --ring: oklch(0.552 0.016 285.938);
-  --chart-1: oklch(0.488 0.243 264.376);
-  --chart-2: oklch(0.696 0.17 162.48);
-  --chart-3: oklch(0.769 0.188 70.08);
-  --chart-4: oklch(0.627 0.265 303.9);
-  --chart-5: oklch(0.645 0.246 16.439);
-  --sidebar: oklch(0.21 0.006 285.885);
-  --sidebar-foreground: oklch(0.985 0 0);
-  --sidebar-primary: oklch(0.488 0.243 264.376);
-  --sidebar-primary-foreground: oklch(0.985 0 0);
-  --sidebar-accent: oklch(0.274 0.006 286.033);
-  --sidebar-accent-foreground: oklch(0.985 0 0);
-  --sidebar-border: oklch(1 0 0 / 10%);
-  --sidebar-ring: oklch(0.552 0.016 285.938);
-}
-
-@layer base {
-  * {
-    @apply border-border outline-ring/50;
-  }
-  body {
-    @apply bg-background text-foreground;
-  }
-}
-
-
---- End File: .\frontend\src\index.css ---
-
-
---- File: .\frontend\src\main.jsx ---
-
-import { StrictMode } from 'react'
-import { createRoot } from 'react-dom/client'
-import { AuthProvider } from './contexts/AuthContext'
-import './index.css'
-import App from './App.jsx'
-
-createRoot(document.getElementById('root')).render(
-  <StrictMode>
-    <AuthProvider>
-      <App />
-    </AuthProvider>
-  </StrictMode>,
-)
-
-
---- End File: .\frontend\src\main.jsx ---
-
-
---- File: .\frontend\src\App.jsx ---
-
-// src/App.jsx
-import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';
-import { AuthProvider, useAuth } from './contexts/AuthContext';
-import { useState, useEffect, useRef } from 'react';
-import { ThemeProvider } from '@mui/material/styles';
-import CssBaseline from '@mui/material/CssBaseline';
-import muiTheme from './muiTheme';
-import LandingPage from './pages/LandingPage';
-import Login from './pages/auth/Login';
-import Register from './pages/auth/Register';
-import DashboardLayout from './components/layouts/DashboardLayout';
-import ProfilePage from './pages/profile/ProfilePage';
-import SubscriptionPlansPage from './pages/subscription/SubscriptionPlansPage';
-import PaymentDemonstrationPage from './components/financial/PaymentDemonstrationPage';
-import ShadcnExperimentPage from './pages/experimental/ShadcnExperimentPage';
-import AceternityExperimentPage from './pages/experimental/AceternityExperimentPage';
-import './App.css';
-
-// Loading Indicator component
-const LoadingSpinner = () => {
-  return <div className="loading-indicator"></div>;
-};
-
-// Protected route component with enhanced loading state
-const ProtectedRoute = ({ children }) => {
-  const { user, loading } = useAuth();
-  const [isLoading, setIsLoading] = useState(true);
-  
-  useEffect(() => {
-    // Simulate a minimum loading time for better UX
-    const timer = setTimeout(() => {
-      setIsLoading(false);
-    }, 600);
-    
-    return () => clearTimeout(timer);
-  }, []);
-
-  // Show enhanced loading state
-  if (loading || isLoading) return <LoadingSpinner />;
-
-  // Redirect to login if not authenticated
-  if (!user) return <Navigate to="/login" />;
-
-  return children;
-};
-
-// Custom hook for animating page transitions
-const usePageTransition = () => {
-  const [displayLocation, setDisplayLocation] = useState(null);
-  const [transitionStage, setTransitionStage] = useState("fadeIn");
-  const location = useLocation();
-
-  useEffect(() => {
-    if (location !== displayLocation) {
-      setTransitionStage("fadeOut");
-    }
-  }, [location, displayLocation]);
-
-  useEffect(() => {
-    if (transitionStage === "fadeOut") {
-      const timeout = setTimeout(() => {
-        setTransitionStage("fadeIn");
-        setDisplayLocation(location);
-      }, 50); // Reduced from 300ms to 50ms for snappier navigation
-      
-      return () => clearTimeout(timeout);
-    }
-  }, [transitionStage, location, displayLocation]);
-
-  return { transitionStage, displayLocation: displayLocation || location };
-};
-
-function AppContent() {
-  const { transitionStage, displayLocation } = usePageTransition();
-  
-  return (
-    <div className={`page-transition ${transitionStage}`}>
-      <Routes location={displayLocation}>
-        {/* Public routes */}
-        <Route path="/" element={<LandingPage />} />
-        <Route path="/login" element={<Login />} />
-        <Route path="/register" element={<Register />} />
-        
-        {/* Experimental UI pages - public for easy access */}
-        <Route path="/shadcn-experiment" element={<ShadcnExperimentPage />} />
-        <Route path="/aceternity-experiment" element={<AceternityExperimentPage />} />
-        
-        {/* Payment demonstration - made public for easy testing */}
-        <Route path="/payment-demo" element={<PaymentDemonstrationPage />} />
-        
-        {/* Subscription route */}
-        <Route path="/subscription-plans" element={
-          <ProtectedRoute>
-            <SubscriptionPlansPage />
-          </ProtectedRoute>
-        } />
-        
-        {/* Protected routes - all dashboard routes should be nested here */}
-        <Route path="/dashboard/*" element={
-          <ProtectedRoute>
-            <DashboardLayout />
-          </ProtectedRoute>
-        } />
-      </Routes>
-    </div>
-  );
-}
-
-function App() {
-  return (
-    <AuthProvider>
-      <ThemeProvider theme={muiTheme}>
-        <CssBaseline />
-        <Router>
-          <AppContent />
-        </Router>
-      </ThemeProvider>
-    </AuthProvider>
-  );
-}
-
-export default App;
-
-
---- End File: .\frontend\src\App.jsx ---
-
-
---- File: .\frontend\src\pages\experimental\ShadcnExperimentPage.jsx ---
-
-// frontend/src/pages/experimental/ShadcnExperimentPage.jsx
-import React, { useState } from 'react';
-import { 
-  Box, 
-  Button as MuiButton, 
-  TextField, 
-  Card as MuiCard, 
-  CardContent, 
-  Typography, 
-  Switch as MuiSwitch,
-  Snackbar,
-  Alert,
-  Paper,
-  Dialog as MuiDialog,
-  DialogTitle as MuiDialogTitle,
-  DialogContent as MuiDialogContent,
-  DialogActions as MuiDialogActions,
-  Tab,
-  Tabs
-} from '@mui/material';
-
-// Import shadcn/ui components
-import { Button } from "@/components/ui/button";
-import { Card, CardContent as ShadcnCardContent, CardHeader, CardTitle } from "@/components/ui/card";
-import { Switch } from "@/components/ui/switch";
-import { Progress } from "@/components/ui/progress";
-import { Skeleton } from "@/components/ui/skeleton";
-import ReusableDialog from "@/components/ui/ReusableDialog";
-import FormExample from "@/components/ui/FormExample";
-import showToast from "@/components/ui/ToastNotification";
-import { Toaster } from "@/components/ui/sonner";
-import UserDataDisplay from "@/components/ui/UserDataDisplay";
-
-// CSS for shadcn-like styling
-import './ShadcnExperimentPage.css';  // Re-enable the CSS import
-
-/**
- * This is an experimental page for testing shadcn/ui components
- * alongside our existing Material UI components
- */
-const ShadcnExperimentPage = () => {
-  const [count, setCount] = useState(0);
-  const [inputValue, setInputValue] = useState('');
-  const [switchValue, setSwitchValue] = useState(false);
-  const [snackbarOpen, setSnackbarOpen] = useState(false);
-  const [progressValue, setProgressValue] = useState(33);
-  const [muiDialogOpen, setMuiDialogOpen] = useState(false);
-  const [shadcnDialogOpen, setShadcnDialogOpen] = useState(false);
-  const [currentTab, setCurrentTab] = useState(0);
-
-  const handleIncrement = () => {
-    setCount(count + 1);
-    // Increment progress as well to demonstrate dynamic updates
-    setProgressValue((prev) => Math.min(prev + 10, 100));
-  };
-
-  const handleShowSnackbar = () => {
-    setSnackbarOpen(true);
-  };
-
-  const handleShowShadcnToast = (type) => {
-    switch (type) {
-      case 'success':
-        showToast.success('Operation completed successfully!');
-        break;
-      case 'error':
-        showToast.error('An error occurred while processing your request.');
-        break;
-      case 'info':
-        showToast.info('Here is some information you might find useful.');
-        break;
-      case 'warning':
-        showToast.warning('Be careful with this action.');
-        break;
-      case 'promise':
-        showToast.promise(
-          new Promise((resolve, reject) => {
-            setTimeout(() => {
-              // 80% chance of success
-              if (Math.random() > 0.2) {
-                resolve({ data: 'Success data' });
-              } else {
-                reject(new Error('Sample error'));
-              }
-            }, 2000);
-          }),
-          {
-            loading: 'Loading data...',
-            success: 'Data loaded successfully!',
-            error: 'Failed to load data'
-          }
-        );
-        break;
-      default:
-        showToast.success('Notification from shadcn/ui!');
-    }
-  };
-
-  const handleCloseSnackbar = () => {
-    setSnackbarOpen(false);
-  };
-
-  const handleTabChange = (event, newValue) => {
-    setCurrentTab(newValue);
-  };
-
-  const handleFormSubmit = (data) => {
-    console.log('Form submitted:', data);
-    showToast.success('Form submitted successfully!');
-  };
-
-  return (
-    <Box sx={{ p: 4, maxWidth: 1200, mx: 'auto' }}>
-      {/* Sonner Toaster Component - Should be included once per application */}
-      <Toaster position="bottom-right" />
-      
-      <Paper sx={{ p: 3, mb: 4 }}>
-        <Typography variant="h4" gutterBottom>
-          Shadcn/UI Experiment Page
-        </Typography>
-        <Typography variant="body1" paragraph>
-          This page demonstrates real shadcn/ui components alongside our existing Material UI components.
-          You can see the differences in design language and functionality between the two libraries.
-        </Typography>
-
-        <Tabs value={currentTab} onChange={handleTabChange} sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
-          <Tab label="Basic Components" />
-          <Tab label="Form Example" />
-          <Tab label="Toast Notifications" />
-          <Tab label="User Data Display" />
-        </Tabs>
-      </Paper>
-
-      {currentTab === 0 && (
-        <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 4 }}>
-          {/* Material UI Components */}
-          <MuiCard variant="outlined" sx={{ height: '100%' }}>
-            <CardContent>
-              <Typography variant="h5" color="primary" gutterBottom>
-                Material UI Components (Current)
-              </Typography>
-              
-              <Box sx={{ mb: 3 }}>
-                <Typography variant="subtitle1" gutterBottom>Buttons</Typography>
-                <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
-                  <MuiButton variant="contained" color="primary">Primary</MuiButton>
-                  <MuiButton variant="outlined" color="primary">Secondary</MuiButton>
-                  <MuiButton variant="text">Text</MuiButton>
-                </Box>
-              </Box>
-              
-              <Box sx={{ mb: 3 }}>
-                <Typography variant="subtitle1" gutterBottom>Input</Typography>
-                <TextField 
-                  label="Material UI Input" 
-                  variant="outlined" 
-                  fullWidth 
-                  value={inputValue}
-                  onChange={(e) => setInputValue(e.target.value)}
-                  sx={{ mb: 2 }}
-                />
-              </Box>
-              
-              <Box sx={{ mb: 3 }}>
-                <Typography variant="subtitle1" gutterBottom>Counter</Typography>
-                <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
-                  <MuiButton variant="contained" onClick={handleIncrement}>
-                    Count: {count}
-                  </MuiButton>
-                </Box>
-              </Box>
-              
-              <Box sx={{ mb: 3 }}>
-                <Typography variant="subtitle1" gutterBottom>Switch</Typography>
-                <MuiSwitch 
-                  checked={switchValue} 
-                  onChange={() => setSwitchValue(!switchValue)} 
-                />
-                <Typography variant="body2" component="span" sx={{ ml: 1 }}>
-                  {switchValue ? 'On' : 'Off'}
-                </Typography>
-              </Box>
-              
-              <Box sx={{ mb: 3 }}>
-                <Typography variant="subtitle1" gutterBottom>Dialog</Typography>
-                <MuiButton variant="contained" color="primary" onClick={() => setMuiDialogOpen(true)}>
-                  Open Dialog
-                </MuiButton>
-                <MuiDialog open={muiDialogOpen} onClose={() => setMuiDialogOpen(false)}>
-                  <MuiDialogTitle>Material UI Dialog</MuiDialogTitle>
-                  <MuiDialogContent>
-                    <Typography>This is a standard Material UI dialog component.</Typography>
-                  </MuiDialogContent>
-                  <MuiDialogActions>
-                    <MuiButton onClick={() => setMuiDialogOpen(false)}>Close</MuiButton>
-                  </MuiDialogActions>
-                </MuiDialog>
-              </Box>
-              
-              <Box>
-                <Typography variant="subtitle1" gutterBottom>Notification</Typography>
-                <MuiButton variant="contained" color="secondary" onClick={handleShowSnackbar}>
-                  Show Notification
-                </MuiButton>
-              </Box>
-            </CardContent>
-          </MuiCard>
-
-          {/* Real Shadcn UI Components */}
-          <Card className="w-full">
-            <CardHeader>
-              <CardTitle>Shadcn UI Components (Real)</CardTitle>
-            </CardHeader>
-            <ShadcnCardContent>
-              <div className="space-y-6">
-                <div className="space-y-2">
-                  <h3 className="text-sm font-medium">Buttons</h3>
-                  <div className="flex gap-2 flex-wrap">
-                    <Button>Primary</Button>
-                    <Button variant="outline">Secondary</Button>
-                    <Button variant="ghost">Text</Button>
-                  </div>
-                </div>
-                
-                <div className="space-y-2">
-                  <h3 className="text-sm font-medium">Counter</h3>
-                  <Button onClick={handleIncrement}>
-                    Count: {count}
-                  </Button>
-                </div>
-                
-                <div className="space-y-2">
-                  <h3 className="text-sm font-medium">Switch</h3>
-                  <div className="flex items-center gap-2">
-                    <Switch 
-                      checked={switchValue}
-                      onCheckedChange={setSwitchValue}
-                    />
-                    <span className="text-sm">{switchValue ? 'On' : 'Off'}</span>
-                  </div>
-                </div>
-                
-                <div className="space-y-2">
-                  <h3 className="text-sm font-medium">Progress</h3>
-                  <Progress value={progressValue} className="w-full" />
-                  <div className="text-xs text-right text-muted-foreground">
-                    {progressValue}%
-                  </div>
-                </div>
-                
-                <div className="space-y-2">
-                  <h3 className="text-sm font-medium">Dialog</h3>
-                  <Button onClick={() => setShadcnDialogOpen(true)}>
-                    Open Dialog
-                  </Button>
-                  <ReusableDialog
-                    open={shadcnDialogOpen}
-                    onOpenChange={setShadcnDialogOpen}
-                    title="Shadcn UI Dialog"
-                    description="This is our custom reusable dialog component built with shadcn/ui."
-                  >
-                    <p className="text-sm text-muted-foreground">
-                      The dialog component is fully accessible and customizable. It handles focus
-                      management, keyboard interactions, and proper ARIA attributes automatically.
-                    </p>
-                  </ReusableDialog>
-                </div>
-                
-                <div className="space-y-2">
-                  <h3 className="text-sm font-medium">Skeleton</h3>
-                  <div className="space-y-2">
-                    <Skeleton className="h-4 w-[250px]" />
-                    <Skeleton className="h-4 w-[200px]" />
-                    <Skeleton className="h-4 w-[150px]" />
-                  </div>
-                </div>
-                
-                <div className="space-y-2">
-                  <h3 className="text-sm font-medium">Notification</h3>
-                  <Button variant="secondary" onClick={() => handleShowShadcnToast('success')}>
-                    Show Toast
-                  </Button>
-                </div>
-              </div>
-            </ShadcnCardContent>
-          </Card>
-        </Box>
-      )}
-
-      {currentTab === 1 && (
-        <Box sx={{ p: 2 }}>
-          <Typography variant="h5" gutterBottom sx={{ mb: 3 }}>
-            Shadcn/UI Form Example
-          </Typography>
-          <Typography variant="body1" paragraph>
-            This example demonstrates a complete form built with shadcn/ui components,
-            including React Hook Form integration and Zod validation.
-          </Typography>
-          
-          <FormExample onSubmit={handleFormSubmit} />
-        </Box>
-      )}
-
-      {currentTab === 2 && (
-        <Box sx={{ p: 2 }}>
-          <Typography variant="h5" gutterBottom sx={{ mb: 3 }}>
-            Toast Notifications
-          </Typography>
-          <Typography variant="body1" paragraph>
-            These are shadcn/ui toast notifications using the Sonner library. They provide a modern, 
-            accessible way to show notifications to users.
-          </Typography>
-          
-          <Card className="w-full p-6">
-            <CardHeader>
-              <CardTitle>Toast Notification Examples</CardTitle>
-            </CardHeader>
-            <ShadcnCardContent>
-              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
-                <div className="space-y-2">
-                  <h3 className="text-sm font-medium">Basic Toasts</h3>
-                  <div className="flex flex-col gap-2">
-                    <Button variant="default" onClick={() => handleShowShadcnToast('success')}>
-                      Success Toast
-                    </Button>
-                    <Button variant="destructive" onClick={() => handleShowShadcnToast('error')}>
-                      Error Toast
-                    </Button>
-                    <Button variant="outline" onClick={() => handleShowShadcnToast('info')}>
-                      Info Toast
-                    </Button>
-                    <Button variant="secondary" onClick={() => handleShowShadcnToast('warning')}>
-                      Warning Toast
-                    </Button>
-                  </div>
-                </div>
-                
-                <div className="space-y-2">
-                  <h3 className="text-sm font-medium">Advanced Toasts</h3>
-                  <div className="flex flex-col gap-2">
-                    <Button onClick={() => handleShowShadcnToast('promise')}>
-                      Promise Toast
-                    </Button>
-                  </div>
-                </div>
-              </div>
-            </ShadcnCardContent>
-          </Card>
-        </Box>
-      )}
-
-      {currentTab === 3 && (
-        <Box sx={{ p: 2 }}>
-          <Typography variant="h5" gutterBottom sx={{ mb: 3 }}>
-            Advanced Component Example: User Data Display
-          </Typography>
-          <Typography variant="body1" paragraph>
-            This example demonstrates multiple shadcn/ui components working together to create a 
-            comprehensive user management interface. It combines Tabs, Table, Card, Accordion, 
-            HoverCard, and Avatar components.
-          </Typography>
-          
-          <UserDataDisplay />
-        </Box>
-      )}
-
-      {/* MUI Snackbar for notifications */}
-      <Snackbar 
-        open={snackbarOpen} 
-        autoHideDuration={4000} 
-        onClose={handleCloseSnackbar}
-        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
-      >
-        <Alert onClose={handleCloseSnackbar} severity="success">
-          This is a Material UI notification message!
-        </Alert>
-      </Snackbar>
-    </Box>
-  );
-};
-
-export default ShadcnExperimentPage;
-
---- End File: .\frontend\src\pages\experimental\ShadcnExperimentPage.jsx ---
-
-
diff --git a/git-diff-for-diary.txt b/git-diff-for-diary.txt
deleted file mode 100644
index e69de29..0000000
diff --git a/package-lock.json b/package-lock.json
index 2223bc2..172c673 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -1,617 +1,145 @@
 {
-  "name": "SmartBin",
-  "lockfileVersion": 3,
-  "requires": true,
-  "packages": {
-    "": {
-      "name": "SmartBin",
-      "dependencies": {
-        "date-fns": "^4.1.0",
-        "mongoose-aggregate-paginate-v2": "^1.1.4",
-        "qrcode": "^1.5.4",
-        "speakeasy": "^2.0.0"
-      },
-      "devDependencies": {
-        "concurrently": "^8.2.2"
-      }
-    },
-    "node_modules/@babel/runtime": {
-      "version": "7.27.0",
-      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.27.0.tgz",
-      "integrity": "sha512-VtPOkrdPHZsKc/clNqyi9WUA8TINkZ4cGk63UUE3u4pmB2k+ZMQRDuIOagv8UVd6j7k0T3+RRIb7beKTebNbcw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "regenerator-runtime": "^0.14.0"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
-    "node_modules/ansi-regex": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
-      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/base32.js": {
-      "version": "0.0.1",
-      "resolved": "https://registry.npmjs.org/base32.js/-/base32.js-0.0.1.tgz",
-      "integrity": "sha512-EGHIRiegFa62/SsA1J+Xs2tIzludPdzM064N9wjbiEgHnGnJ1V0WEpA4pEwCYT5nDvZk3ubf0shqaCS7k6xeUQ==",
-      "license": "MIT"
-    },
-    "node_modules/camelcase": {
-      "version": "5.3.1",
-      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
-      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/chalk/node_modules/supports-color": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
-      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "has-flag": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/cliui": {
-      "version": "6.0.0",
-      "resolved": "https://registry.npmjs.org/cliui/-/cliui-6.0.0.tgz",
-      "integrity": "sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==",
-      "license": "ISC",
-      "dependencies": {
-        "string-width": "^4.2.0",
-        "strip-ansi": "^6.0.0",
-        "wrap-ansi": "^6.2.0"
-      }
-    },
-    "node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
-      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
-      "license": "MIT",
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/color-name": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
-      "license": "MIT"
-    },
-    "node_modules/concurrently": {
-      "version": "8.2.2",
-      "resolved": "https://registry.npmjs.org/concurrently/-/concurrently-8.2.2.tgz",
-      "integrity": "sha512-1dP4gpXFhei8IOtlXRE/T/4H88ElHgTiUzh71YUmtjTEHMSRS2Z/fgOxHSxxusGHogsRfxNq1vyAwxSC+EVyDg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "chalk": "^4.1.2",
-        "date-fns": "^2.30.0",
-        "lodash": "^4.17.21",
-        "rxjs": "^7.8.1",
-        "shell-quote": "^1.8.1",
-        "spawn-command": "0.0.2",
-        "supports-color": "^8.1.1",
-        "tree-kill": "^1.2.2",
-        "yargs": "^17.7.2"
-      },
-      "bin": {
-        "conc": "dist/bin/concurrently.js",
-        "concurrently": "dist/bin/concurrently.js"
-      },
-      "engines": {
-        "node": "^14.13.0 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/open-cli-tools/concurrently?sponsor=1"
-      }
-    },
-    "node_modules/concurrently/node_modules/cliui": {
-      "version": "8.0.1",
-      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
-      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "string-width": "^4.2.0",
-        "strip-ansi": "^6.0.1",
-        "wrap-ansi": "^7.0.0"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/concurrently/node_modules/date-fns": {
-      "version": "2.30.0",
-      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-2.30.0.tgz",
-      "integrity": "sha512-fnULvOpxnC5/Vg3NCiWelDsLiUc9bRwAPs/+LfTLNvetFCtCTN+yQz15C/fs4AwX1R9K5GLtLfn8QW+dWisaAw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/runtime": "^7.21.0"
-      },
-      "engines": {
-        "node": ">=0.11"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/date-fns"
-      }
-    },
-    "node_modules/concurrently/node_modules/wrap-ansi": {
-      "version": "7.0.0",
-      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
-      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.0.0",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
-      }
-    },
-    "node_modules/concurrently/node_modules/y18n": {
-      "version": "5.0.8",
-      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
-      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
-      "dev": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/concurrently/node_modules/yargs": {
-      "version": "17.7.2",
-      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
-      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "cliui": "^8.0.1",
-        "escalade": "^3.1.1",
-        "get-caller-file": "^2.0.5",
-        "require-directory": "^2.1.1",
-        "string-width": "^4.2.3",
-        "y18n": "^5.0.5",
-        "yargs-parser": "^21.1.1"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/concurrently/node_modules/yargs-parser": {
-      "version": "21.1.1",
-      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
-      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
-      "dev": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/date-fns": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
-      "integrity": "sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==",
-      "license": "MIT",
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/kossnocorp"
-      }
-    },
-    "node_modules/decamelize": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
-      "integrity": "sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/dijkstrajs": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/dijkstrajs/-/dijkstrajs-1.0.3.tgz",
-      "integrity": "sha512-qiSlmBq9+BCdCA/L46dw8Uy93mloxsPSbwnm5yrKn2vMPiy8KyAskTF6zuV/j5BMsmOGZDPs7KjU+mjb670kfA==",
-      "license": "MIT"
-    },
-    "node_modules/emoji-regex": {
-      "version": "8.0.0",
-      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
-      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
-      "license": "MIT"
-    },
-    "node_modules/escalade": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
-      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/find-up": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
-      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
-      "license": "MIT",
-      "dependencies": {
-        "locate-path": "^5.0.0",
-        "path-exists": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/get-caller-file": {
-      "version": "2.0.5",
-      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
-      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
-      "license": "ISC",
-      "engines": {
-        "node": "6.* || 8.* || >= 10.*"
-      }
-    },
-    "node_modules/has-flag": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
-      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/is-fullwidth-code-point": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
-      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/locate-path": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
-      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
-      "license": "MIT",
-      "dependencies": {
-        "p-locate": "^4.1.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/lodash": {
-      "version": "4.17.21",
-      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
-      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/mongoose-aggregate-paginate-v2": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/mongoose-aggregate-paginate-v2/-/mongoose-aggregate-paginate-v2-1.1.4.tgz",
-      "integrity": "sha512-CdQIar3wlS7g0H6JjSJIZzvzz05vFc+Xy9SosJmj46l3xIomgl3ZjDn/n4vDpEei9RBawgUk5zGTIP6fMKdMdA==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=4.0.0"
-      }
-    },
-    "node_modules/p-limit": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
-      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
-      "license": "MIT",
-      "dependencies": {
-        "p-try": "^2.0.0"
-      },
-      "engines": {
-        "node": ">=6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/p-locate": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
-      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
-      "license": "MIT",
-      "dependencies": {
-        "p-limit": "^2.2.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/p-try": {
-      "version": "2.2.0",
-      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
-      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/path-exists": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
-      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/pngjs": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/pngjs/-/pngjs-5.0.0.tgz",
-      "integrity": "sha512-40QW5YalBNfQo5yRYmiw7Yz6TKKVr3h6970B2YE+3fQpsWcrbj1PzJgxeJ19DRQjhMbKPIuMY8rFaXc8moolVw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=10.13.0"
-      }
-    },
-    "node_modules/qrcode": {
-      "version": "1.5.4",
-      "resolved": "https://registry.npmjs.org/qrcode/-/qrcode-1.5.4.tgz",
-      "integrity": "sha512-1ca71Zgiu6ORjHqFBDpnSMTR2ReToX4l1Au1VFLyVeBTFavzQnv5JxMFr3ukHVKpSrSA2MCk0lNJSykjUfz7Zg==",
-      "license": "MIT",
-      "dependencies": {
-        "dijkstrajs": "^1.0.1",
-        "pngjs": "^5.0.0",
-        "yargs": "^15.3.1"
-      },
-      "bin": {
-        "qrcode": "bin/qrcode"
-      },
-      "engines": {
-        "node": ">=10.13.0"
-      }
-    },
-    "node_modules/regenerator-runtime": {
-      "version": "0.14.1",
-      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
-      "integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/require-directory": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
-      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/require-main-filename": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/require-main-filename/-/require-main-filename-2.0.0.tgz",
-      "integrity": "sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==",
-      "license": "ISC"
-    },
-    "node_modules/rxjs": {
-      "version": "7.8.2",
-      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-7.8.2.tgz",
-      "integrity": "sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==",
-      "dev": true,
-      "license": "Apache-2.0",
-      "dependencies": {
-        "tslib": "^2.1.0"
-      }
-    },
-    "node_modules/set-blocking": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
-      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==",
-      "license": "ISC"
-    },
-    "node_modules/shell-quote": {
-      "version": "1.8.2",
-      "resolved": "https://registry.npmjs.org/shell-quote/-/shell-quote-1.8.2.tgz",
-      "integrity": "sha512-AzqKpGKjrj7EM6rKVQEPpB288oCfnrEIuyoT9cyF4nmGa7V8Zk6f7RRqYisX8X9m+Q7bd632aZW4ky7EhbQztA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/spawn-command": {
-      "version": "0.0.2",
-      "resolved": "https://registry.npmjs.org/spawn-command/-/spawn-command-0.0.2.tgz",
-      "integrity": "sha512-zC8zGoGkmc8J9ndvml8Xksr1Amk9qBujgbF0JAIWO7kXr43w0h/0GJNM/Vustixu+YE8N/MTrQ7N31FvHUACxQ==",
-      "dev": true
-    },
-    "node_modules/speakeasy": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/speakeasy/-/speakeasy-2.0.0.tgz",
-      "integrity": "sha512-lW2A2s5LKi8rwu77ewisuUOtlCydF/hmQSOJjpTqTj1gZLkNgTaYnyvfxy2WBr4T/h+9c4g8HIITfj83OkFQFw==",
-      "license": "MIT",
-      "dependencies": {
-        "base32.js": "0.0.1"
-      },
-      "engines": {
-        "node": ">= 0.10.0"
-      }
-    },
-    "node_modules/string-width": {
-      "version": "4.2.3",
-      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
-      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
-      "license": "MIT",
-      "dependencies": {
-        "emoji-regex": "^8.0.0",
-        "is-fullwidth-code-point": "^3.0.0",
-        "strip-ansi": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/strip-ansi": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
-      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
-      "license": "MIT",
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/supports-color": {
-      "version": "8.1.1",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
-      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "has-flag": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/supports-color?sponsor=1"
-      }
-    },
-    "node_modules/tree-kill": {
-      "version": "1.2.2",
-      "resolved": "https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.2.tgz",
-      "integrity": "sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==",
-      "dev": true,
-      "license": "MIT",
-      "bin": {
-        "tree-kill": "cli.js"
-      }
-    },
-    "node_modules/tslib": {
-      "version": "2.8.1",
-      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
-      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
-      "dev": true,
-      "license": "0BSD"
-    },
-    "node_modules/which-module": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/which-module/-/which-module-2.0.1.tgz",
-      "integrity": "sha512-iBdZ57RDvnOR9AGBhML2vFZf7h8vmBjhoaZqODJBFWHVtKkDmKuHai3cx5PgVMrX5YDNp27AofYbAwctSS+vhQ==",
-      "license": "ISC"
-    },
-    "node_modules/wrap-ansi": {
-      "version": "6.2.0",
-      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
-      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.0.0",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/y18n": {
-      "version": "4.0.3",
-      "resolved": "https://registry.npmjs.org/y18n/-/y18n-4.0.3.tgz",
-      "integrity": "sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ==",
-      "license": "ISC"
-    },
-    "node_modules/yargs": {
-      "version": "15.4.1",
-      "resolved": "https://registry.npmjs.org/yargs/-/yargs-15.4.1.tgz",
-      "integrity": "sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==",
-      "license": "MIT",
-      "dependencies": {
-        "cliui": "^6.0.0",
-        "decamelize": "^1.2.0",
-        "find-up": "^4.1.0",
-        "get-caller-file": "^2.0.1",
-        "require-directory": "^2.1.1",
-        "require-main-filename": "^2.0.0",
-        "set-blocking": "^2.0.0",
-        "string-width": "^4.2.0",
-        "which-module": "^2.0.0",
-        "y18n": "^4.0.0",
-        "yargs-parser": "^18.1.2"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/yargs-parser": {
-      "version": "18.1.3",
-      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-18.1.3.tgz",
-      "integrity": "sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==",
-      "license": "ISC",
-      "dependencies": {
-        "camelcase": "^5.0.0",
-        "decamelize": "^1.2.0"
-      },
-      "engines": {
-        "node": ">=6"
-      }
+    "name": "smartbin",
+    "version": "1.0.0",
+    "lockfileVersion": 3,
+    "requires": true,
+    "packages": {
+        "": {
+            "name": "smartbin",
+            "version": "1.0.0",
+            "dependencies": {
+                "@react-google-maps/api": "^2.20.6"
+            }
+        },
+        "node_modules/@googlemaps/js-api-loader": {
+            "version": "1.16.8",
+            "resolved": "https://registry.npmjs.org/@googlemaps/js-api-loader/-/js-api-loader-1.16.8.tgz",
+            "integrity": "sha512-CROqqwfKotdO6EBjZO/gQGVTbeDps5V7Mt9+8+5Q+jTg5CRMi3Ii/L9PmV3USROrt2uWxtGzJHORmByxyo9pSQ==",
+            "license": "Apache-2.0"
+        },
+        "node_modules/@googlemaps/markerclusterer": {
+            "version": "2.5.3",
+            "resolved": "https://registry.npmjs.org/@googlemaps/markerclusterer/-/markerclusterer-2.5.3.tgz",
+            "integrity": "sha512-x7lX0R5yYOoiNectr10wLgCBasNcXFHiADIBdmn7jQllF2B5ENQw5XtZK+hIw4xnV0Df0xhN4LN98XqA5jaiOw==",
+            "license": "Apache-2.0",
+            "dependencies": {
+                "fast-deep-equal": "^3.1.3",
+                "supercluster": "^8.0.1"
+            }
+        },
+        "node_modules/@react-google-maps/api": {
+            "version": "2.20.6",
+            "resolved": "https://registry.npmjs.org/@react-google-maps/api/-/api-2.20.6.tgz",
+            "integrity": "sha512-frxkSHWbd36ayyxrEVopSCDSgJUT1tVKXvQld2IyzU3UnDuqqNA3AZE4/fCdqQb2/zBQx3nrWnZB1wBXDcrjcw==",
+            "license": "MIT",
+            "dependencies": {
+                "@googlemaps/js-api-loader": "1.16.8",
+                "@googlemaps/markerclusterer": "2.5.3",
+                "@react-google-maps/infobox": "2.20.0",
+                "@react-google-maps/marker-clusterer": "2.20.0",
+                "@types/google.maps": "3.58.1",
+                "invariant": "2.2.4"
+            },
+            "peerDependencies": {
+                "react": "^16.8 || ^17 || ^18 || ^19",
+                "react-dom": "^16.8 || ^17 || ^18 || ^19"
+            }
+        },
+        "node_modules/@react-google-maps/infobox": {
+            "version": "2.20.0",
+            "resolved": "https://registry.npmjs.org/@react-google-maps/infobox/-/infobox-2.20.0.tgz",
+            "integrity": "sha512-03PJHjohhaVLkX6+NHhlr8CIlvUxWaXhryqDjyaZ8iIqqix/nV8GFdz9O3m5OsjtxtNho09F/15j14yV0nuyLQ==",
+            "license": "MIT"
+        },
+        "node_modules/@react-google-maps/marker-clusterer": {
+            "version": "2.20.0",
+            "resolved": "https://registry.npmjs.org/@react-google-maps/marker-clusterer/-/marker-clusterer-2.20.0.tgz",
+            "integrity": "sha512-tieX9Va5w1yP88vMgfH1pHTacDQ9TgDTjox3tLlisKDXRQWdjw+QeVVghhf5XqqIxXHgPdcGwBvKY6UP+SIvLw==",
+            "license": "MIT"
+        },
+        "node_modules/@types/google.maps": {
+            "version": "3.58.1",
+            "resolved": "https://registry.npmjs.org/@types/google.maps/-/google.maps-3.58.1.tgz",
+            "integrity": "sha512-X9QTSvGJ0nCfMzYOnaVs/k6/4L+7F5uCS+4iUmkLEls6J9S/Phv+m/i3mDeyc49ZBgwab3EFO1HEoBY7k98EGQ==",
+            "license": "MIT"
+        },
+        "node_modules/fast-deep-equal": {
+            "version": "3.1.3",
+            "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
+            "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
+            "license": "MIT"
+        },
+        "node_modules/invariant": {
+            "version": "2.2.4",
+            "resolved": "https://registry.npmjs.org/invariant/-/invariant-2.2.4.tgz",
+            "integrity": "sha512-phJfQVBuaJM5raOpJjSfkiD6BpbCE4Ns//LaXl6wGYtUBY83nWS6Rf9tXm2e8VaK60JEjYldbPif/A2B1C2gNA==",
+            "license": "MIT",
+            "dependencies": {
+                "loose-envify": "^1.0.0"
+            }
+        },
+        "node_modules/js-tokens": {
+            "version": "4.0.0",
+            "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
+            "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
+            "license": "MIT"
+        },
+        "node_modules/kdbush": {
+            "version": "4.0.2",
+            "resolved": "https://registry.npmjs.org/kdbush/-/kdbush-4.0.2.tgz",
+            "integrity": "sha512-WbCVYJ27Sz8zi9Q7Q0xHC+05iwkm3Znipc2XTlrnJbsHMYktW4hPhXUE8Ys1engBrvffoSCqbil1JQAa7clRpA==",
+            "license": "ISC"
+        },
+        "node_modules/loose-envify": {
+            "version": "1.4.0",
+            "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
+            "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
+            "license": "MIT",
+            "dependencies": {
+                "js-tokens": "^3.0.0 || ^4.0.0"
+            },
+            "bin": {
+                "loose-envify": "cli.js"
+            }
+        },
+        "node_modules/react": {
+            "version": "19.0.0",
+            "resolved": "https://registry.npmjs.org/react/-/react-19.0.0.tgz",
+            "integrity": "sha512-V8AVnmPIICiWpGfm6GLzCR/W5FXLchHop40W4nXBmdlEceh16rCN8O8LNWm5bh5XUX91fh7KpA+W0TgMKmgTpQ==",
+            "license": "MIT",
+            "peer": true,
+            "engines": {
+                "node": ">=0.10.0"
+            }
+        },
+        "node_modules/react-dom": {
+            "version": "19.0.0",
+            "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.0.0.tgz",
+            "integrity": "sha512-4GV5sHFG0e/0AD4X+ySy6UJd3jVl1iNsNHdpad0qhABJ11twS3TTBnseqsKurKcsNqCEFeGL3uLpVChpIO3QfQ==",
+            "license": "MIT",
+            "peer": true,
+            "dependencies": {
+                "scheduler": "^0.25.0"
+            },
+            "peerDependencies": {
+                "react": "^19.0.0"
+            }
+        },
+        "node_modules/scheduler": {
+            "version": "0.25.0",
+            "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.25.0.tgz",
+            "integrity": "sha512-xFVuu11jh+xcO7JOAGJNOXld8/TcEHK/4CituBUeUb5hqxJLj9YuemAEuvm9gQ/+pgXYfbQuqAkiYu+u7YEsNA==",
+            "license": "MIT",
+            "peer": true
+        },
+        "node_modules/supercluster": {
+            "version": "8.0.1",
+            "resolved": "https://registry.npmjs.org/supercluster/-/supercluster-8.0.1.tgz",
+            "integrity": "sha512-IiOea5kJ9iqzD2t7QJq/cREyLHTtSmUT6gQsweojg9WH2sYJqZK9SswTu6jrscO6D1G5v5vYZ9ru/eq85lXeZQ==",
+            "license": "ISC",
+            "dependencies": {
+                "kdbush": "^4.0.2"
+            }
+        }
     }
-  }
 }
diff --git a/package.json b/package.json
index 7498180..c7d9a6f 100644
--- a/package.json
+++ b/package.json
@@ -1,16 +1,11 @@
 {
-  "scripts": {
-    "start": "concurrently \"cd backend && npm run start\" \"cd frontend && npm run dev\"",
-    "dev": "concurrently \"cd backend && npm run dev\" \"cd frontend && npm run dev\"",
-    "install-all": "npm install && cd backend && npm install && cd ../frontend && npm install"
-  },
-  "dependencies": {
-    "date-fns": "^4.1.0",
-    "mongoose-aggregate-paginate-v2": "^1.1.4",
-    "qrcode": "^1.5.4",
-    "speakeasy": "^2.0.0"
-  },
-  "devDependencies": {
-    "concurrently": "^8.2.2"
-  }
+    "name": "smartbin",
+    "version": "1.0.0",
+    "scripts": {
+        "start": "cd backend && npm start",
+        "dev": "cd frontend && npm run dev"
+    },
+    "dependencies": {
+        "@react-google-maps/api": "^2.20.6"
+    }
 }
diff --git a/prompts.md b/prompts.md
deleted file mode 100644
index bf174c6..0000000
--- a/prompts.md
+++ /dev/null
@@ -1,70 +0,0 @@
-http://localhost:5173/dashboard/profile
-
-in the profile section can you improve the ui of this https://dribbble.com/shots/4580878-Dashboard-light-version
-
-while keeping all the functionality of the current profile section
-
-http://localhost:5173/dashboard/budget-allocation this is empty why is that . is it implemented but not working or is it not implemented at all.
-
-
-==========================================================================================================================================================================================================================================
-
-when logged in as a staff member 
-
-and click on my profile in the sidebar i get logged in as the financial manager which i was logged in as before.
-
-in a incognito window when i log in as staff member and click on my profile in the sidebar i go back to the login page.
-
-===========================================================================================================================================================================================================================================
-
-whe i am logged in as a staff member and click complaints it properly loads the complaints page. but there is status filter we can select stuff like all status new inprogress resolved closed
-
-but those text are white so i cant see them 
-
-same for the type filter.
-
-============================================================================================================================================================================================================================================
-
-when i am logged in as a staff member and click on dashboard in the sidebar it oads the dashboard page but in the staff dashboard in attendence section there is a button that says "Clock out" but it doesnt seem to do anything 
-
-=============================================================================================================================================================================================================================================
-
-when i am logged in as a staff member and click on dashboard in the sidebar it oads the dashboard page but in the staff dashboard in attendence section there is a button that says "Clock out" but it doesnt seem to do anything
-
-when i am logged in as a staff member and click dashboard in the sidebar it loads the staff dashboard page but in the staff dashboard in tasks there is a button called "View Tasks"
-
-that doesnt seem to do anything when i click on it. 
-
-==============================================================================================================================================================================================================================================
-
-when i am logged in as a staff member and click on dashboard in the sidebar it loads the dashboard page but in the staff dashboard in tasks there is a button called "View Tasks" that doesn’t seem to do anything when I click on it.
-
-
-==============================================================================================================================================================================================================================================
-
-
-why did you install something in the backend/backend folder that folder should be deleted there is no use for $
-
-is there a use for that file 
-
-===============================================================================================================================================================================================================================================
-
-when i am logged in as a staff member and click on dashboard in the sidebar it loads the dashboard page but in the staff dashboard in tasks there is a button called "view payslips"
-that doesn’t seem to do anything when I click on it.
-
-================================================================================================================================================================================================================================================
-
-when i am logged in as a staff member and click attendence it goes to http://localhost:5173/dashboard/attendance but there is nothing in there 
-
-==============================================================================================================================================================================================================================================
-
-when i am logged in as a staff member and click on attendence it goes to http://localhost:5173/dashboard/attendance but there is nothing in there 
-
-when i am logged in as a staff member and click on my payslips it goes to http://localhost:5173/dashboard/payslips and shows my payslips Loading your payslips... but nothing loads
-
-
-when i am logged in as a staff member and click on perfomance it goes to http://localhost:5173/dashboard/performance but there is nothing in there 
-
-
-
-==============================================================================================================================================================================================================================================
