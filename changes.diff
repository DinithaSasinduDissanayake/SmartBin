diff --git a/.gitignore b/.gitignore
index 0ecc0f4..752f6a7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,154 +1,88 @@
-# Logs
-logs
+# Logs & Runtime Data
+logs/
 *.log
-npm-debug.log*
-yarn-debug.log*
-yarn-error.log*
-lerna-debug.log*
-.pnpm-debug.log*
-
-# Diagnostic reports (https://nodejs.org/api/report.html)
-report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
-
-# Runtime data
-pids
+*-debug.log*
+*-error.log*
+pids/
 *.pid
 *.seed
 *.pid.lock
+report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json
 
-# Directory for instrumented libs generated by jscoverage/JSCover
-lib-cov
-
-# Coverage directory used by tools like istanbul
-coverage
-*.lcov
-
-# nyc test coverage
-.nyc_output
-
-# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
-.grunt
-
-# Bower dependency directory (https://bower.io/)
-bower_components
-
-# node-waf configuration
-.lock-wscript
-
-# Compiled binary addons (https://nodejs.org/api/addons.html)
-build/Release
-
-# Dependency directories
+# Dependency Directories & Lockfiles
 node_modules/
+/frontend/node_modules/
+/backend/node_modules/
 jspm_packages/
-
-# Snowpack dependency directory (https://snowpack.dev/)
 web_modules/
+bower_components/
+.yarn-integrity
+.lock-wscript
+*.tgz
 
-# TypeScript cache
-*.tsbuildinfo
-
-# Optional npm cache directory
-.npm
+# Build Outputs & Artifacts
+build/
+dist/
+out/
+.next/
+.nuxt/
+.vuepress/dist/
+**/.vitepress/dist/
+.docusaurus/
+.serverless/
+.fusebox/
+lib-cov/
+/frontend/build/
+/frontend/coverage/
+/backend/dist/
+all_code.txt
+all_diffs_from_last_commit.patch
+uncommitted-changes.patch
 
-# Optional eslint cache
+# Caches
+.cache/
+.parcel-cache/
+*.tsbuildinfo
+.npm/
 .eslintcache
-
-# Optional stylelint cache
 .stylelintcache
-
-# Microbundle cache
 .rpt2_cache/
-.rts2_cache_cjs/
-.rts2_cache_es/
-.rts2_cache_umd/
+.rts2_cache*/
+.temp/
+**/.vitepress/cache/
 
-# Optional REPL history
+# Tooling & IDE specific
+.nyc_output/
+coverage/
+*.lcov
+.grunt/
 .node_repl_history
-
-# Output of 'npm pack'
-*.tgz
-
-# Yarn Integrity file
-.yarn-integrity
-
-# dotenv environment variable files
-.env
-.env.development.local
-.env.test.local
-.env.production.local
-.env.local
-
-# parcel-bundler cache (https://parceljs.org/)
-.cache
-.parcel-cache
-
-# Next.js build output
-.next
-out
-
-# Nuxt.js build / generate output
-.nuxt
-dist
-
-# Gatsby files
-.cache/
-# Comment in the public line in if your project uses Gatsby and not Next.js
-# https://nextjs.org/blog/next-9-1#public-directory-support
-# public
-
-# vuepress build output
-.vuepress/dist
-
-# vuepress v2.x temp and cache directory
-.temp
-.cache
-
-# vitepress build output
-**/.vitepress/dist
-
-# vitepress cache directory
-**/.vitepress/cache
-
-# Docusaurus cache and generated files
-.docusaurus
-
-# Serverless directories
-.serverless/
-
-# FuseBox cache
-.fusebox/
-
-# DynamoDB Local files
 .dynamodb/
-
-# TernJS port file
 .tern-port
+.qodo
 
-# Stores VSCode versions used for testing VSCode extensions
+# IDE settings (keep shared ones)
 .vscode/*
 !.vscode/extensions.json
 !.vscode/settings.json
 .idea/
 
-# Mac files
+# OS generated files
 .DS_Store
 
-# Project-specific build directories
-/frontend/build/
-/backend/dist/
+# Environment Variables
+.env*
+!.env.example # Often useful to keep example env files
 
-# React testing
-/frontend/coverage
-
-# Backup and Documentation
-Financial Backup/
+# Backup and Documentation (specific ignores)
+Financial\ Backup/ # Escaped space for clarity
 LLMPrompts.md
 LLM_Prompts.md
-uncommitted-changes.patch
-.qodo
-
-# Additional files to ignore
-all_code.txt
 CollectAllCode.ps1
-all_diffs_from_last_commit.patch
+
+# Yarn v2+
+.yarn/cache
+.yarn/unplugged
+.yarn/build-state.yml
+.yarn/install-state.gz
+.pnp.*
diff --git a/all_the_backend_code.txt b/all_the_backend_code.txt
deleted file mode 100644
index 75f701a..0000000
--- a/all_the_backend_code.txt
+++ /dev/null
@@ -1,3137 +0,0 @@
-// File: c:\y2s2ITP\SmartBin\backend\package.json
-{
-  "name": "backend",
-  "version": "1.0.0",
-  "main": "index.js",
-  "directories": {
-    "test": "tests"
-  },
-  "scripts": {
-    "test": "jest",
-    "start": "node src/server.js",
-    "dev": "nodemon src/server.js"
-  },
-  "keywords": [],
-  "author": "",
-  "license": "ISC",
-  "description": "",
-  "dependencies": {
-    "bcrypt": "^5.1.1",
-    "bcryptjs": "^3.0.2",
-    "compression": "^1.8.0",
-    "cors": "^2.8.5",
-    "dotenv": "^16.4.7",
-    "express": "^4.21.2",
-    "express-validator": "^7.2.1",
-    "helmet": "^8.0.0",
-    "jsonwebtoken": "^9.0.2",
-    "mongoose": "^8.12.1",
-    "morgan": "^1.10.0",
-    "multer": "^1.4.5-lts.2"
-  },
-  "devDependencies": {
-    "eslint": "^9.22.0",
-    "jest": "^29.7.0",
-    "nodemon": "^3.1.9",
-    "supertest": "^7.0.0"
-  }
-}
-
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\server.js
-// In src/server.js
-const express = require('express');
-const mongoose = require('mongoose');
-const cors = require('cors');
-const helmet = require('helmet');
-const morgan = require('morgan');
-require('dotenv').config();
-const path = require('path');
-const fs = require('fs');
-
-const app = express();
-
-// Middleware
-app.use(helmet());
-app.use(cors());
-app.use(express.json());
-app.use(morgan('dev'));
-
-// Import routes
-const authRoutes = require('./routes/authRoutes');
-const userRoutes = require('./routes/userRoutes');
-const subscriptionPlanRoutes = require('./routes/subscriptionPlanRoutes');
-const documentRoutes = require('./routes/documentRoutes');
-const attendanceRoutes = require('./routes/attendanceRoutes');
-const performanceRoutes = require('./routes/performanceRoutes');
-const financialRoutes = require('./routes/financialRoutes'); // Import financial routes
-const userSubscriptionRoutes = require('./routes/userSubscriptionRoutes'); // Import user subscription routes
-
-// Use routes
-app.use('/api/auth', authRoutes);
-app.use('/api/users', userRoutes);
-app.use('/api/subscription-plans', subscriptionPlanRoutes);
-app.use('/api/documents', documentRoutes);
-app.use('/api/attendance', attendanceRoutes);
-app.use('/api/performance', performanceRoutes);
-app.use('/api/financials', financialRoutes); // Use financial routes
-app.use('/api/user-subscriptions', userSubscriptionRoutes); // Mount user subscription routes
-
-// Basic route for testing
-app.get('/', (req, res) => {
-  res.json({ message: 'SmartBin API is running' });
-});
-
-// Ensure you have this directory for uploads
-const uploadDir = path.join(__dirname, '../uploads/documents');
-if (!fs.existsSync(uploadDir)) {
-  fs.mkdirSync(uploadDir, { recursive: true });
-}
-
-// Make the uploads directory accessible
-app.use('/uploads', express.static(path.join(__dirname, '../uploads')));
-
-// Connect to MongoDB
-const MONGODB_URI = process.env.MONGODB_URI;
-mongoose
-  .connect(MONGODB_URI)
-  .then(() => console.log('Connected to MongoDB'))
-  .catch((err) => console.error('MongoDB connection error:', err));
-
-// Global Error Handler
-app.use((err, req, res, next) => {
-  console.error(err.stack);
-  res.status(500).send('Something broke!');
-});
-
-// Start server
-const PORT = process.env.PORT || 5000;
-app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\controllers\attendanceController.js
-const Attendance = require('../models/Attendance');
-const User = require('../models/User');
-
-// @desc    Record check-in for staff
-// @route   POST /api/attendance/check-in
-// @access  Private/Staff
-exports.checkIn = async (req, res) => {
-  try {
-    // Check if user is staff
-    if (req.user.role !== 'staff' && req.user.role !== 'admin') {
-      return res.status(403).json({ message: 'Only staff can check in' });
-    }
-    
-    // Check if already checked in today
-    const today = new Date();
-    today.setHours(0, 0, 0, 0);
-    
-    const tomorrow = new Date(today);
-    tomorrow.setDate(tomorrow.getDate() + 1);
-    
-    const existingRecord = await Attendance.findOne({
-      staff: req.user.id,
-      date: {
-        $gte: today,
-        $lt: tomorrow
-      }
-    });
-    
-    if (existingRecord && !existingRecord.checkOutTime) {
-      return res.status(400).json({ message: 'You are already checked in' });
-    }
-    
-    // Create new attendance record
-    const attendance = new Attendance({
-      staff: req.user.id,
-      checkInTime: new Date(),
-      date: new Date()
-    });
-    
-    await attendance.save();
-    
-    res.status(201).json(attendance);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Record check-out for staff
-// @route   PUT /api/attendance/check-out
-// @access  Private/Staff
-exports.checkOut = async (req, res) => {
-  try {
-    // Check if user is staff
-    if (req.user.role !== 'staff' && req.user.role !== 'admin') {
-      return res.status(403).json({ message: 'Only staff can check out' });
-    }
-    
-    // Find today's check-in record
-    const today = new Date();
-    today.setHours(0, 0, 0, 0);
-    
-    const tomorrow = new Date(today);
-    tomorrow.setDate(tomorrow.getDate() + 1);
-    
-    const record = await Attendance.findOne({
-      staff: req.user.id,
-      date: {
-        $gte: today,
-        $lt: tomorrow
-      },
-      checkOutTime: { $exists: false }
-    });
-    
-    if (!record) {
-      return res.status(400).json({ message: 'No active check-in found for today' });
-    }
-    
-    // Update checkout time
-    record.checkOutTime = new Date();
-    
-    await record.save();
-    
-    res.json(record);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Get staff attendance by date range
-// @route   GET /api/attendance
-// @access  Private/Staff
-exports.getMyAttendance = async (req, res) => {
-  try {
-    const { startDate, endDate } = req.query;
-    
-    let query = { staff: req.user.id };
-    
-    if (startDate && endDate) {
-      query.date = {
-        $gte: new Date(startDate),
-        $lte: new Date(endDate)
-      };
-    }
-    
-    const attendance = await Attendance.find(query).sort({ date: -1 });
-    
-    res.json(attendance);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Get all staff attendance (for admin)
-// @route   GET /api/attendance/all
-// @access  Private/Admin
-exports.getAllAttendance = async (req, res) => {
-  try {
-    const { startDate, endDate, staffId } = req.query;
-    
-    let query = {};
-    
-    if (staffId) {
-      query.staff = staffId;
-    }
-    
-    if (startDate && endDate) {
-      query.date = {
-        $gte: new Date(startDate),
-        $lte: new Date(endDate)
-      };
-    }
-    
-    const attendance = await Attendance.find(query)
-      .populate('staff', 'name email')
-      .sort({ date: -1 });
-    
-    res.json(attendance);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Update attendance record (for admin)
-// @route   PUT /api/attendance/:id
-// @access  Private/Admin
-exports.updateAttendance = async (req, res) => {
-  try {
-    const { checkInTime, checkOutTime, status, notes } = req.body;
-    
-    const attendance = await Attendance.findById(req.params.id);
-    
-    if (!attendance) {
-      return res.status(404).json({ message: 'Attendance record not found' });
-    }
-    
-    // Update fields
-    if (checkInTime) attendance.checkInTime = checkInTime;
-    if (checkOutTime) attendance.checkOutTime = checkOutTime;
-    if (status) attendance.status = status;
-    if (notes !== undefined) attendance.notes = notes;
-    
-    await attendance.save();
-    
-    res.json(attendance);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Get staff attendance summary
-// @route   GET /api/attendance/summary
-// @access  Private/Admin
-exports.getAttendanceSummary = async (req, res) => {
-  try {
-    const { month, year } = req.query;
-    
-    // Default to current month if not specified
-    const currentDate = new Date();
-    const targetMonth = month ? parseInt(month) - 1 : currentDate.getMonth();
-    const targetYear = year ? parseInt(year) : currentDate.getFullYear();
-    
-    const startDate = new Date(targetYear, targetMonth, 1);
-    const endDate = new Date(targetYear, targetMonth + 1, 0);
-    
-    // Get all staff members
-    const staffMembers = await User.find({ role: 'staff' }, '_id name email');
-    
-    // Get attendance for each staff
-    const summaries = [];
-    
-    for (const staff of staffMembers) {
-      const records = await Attendance.find({
-        staff: staff._id,
-        date: {
-          $gte: startDate,
-          $lte: endDate
-        }
-      });
-      
-      // Calculate stats
-      let totalHours = 0;
-      let presentDays = 0;
-      let absentDays = 0;
-      let lateDays = 0;
-      
-      records.forEach(record => {
-        totalHours += record.totalHours || 0;
-        
-        if (record.status === 'Present') presentDays++;
-        else if (record.status === 'Absent') absentDays++;
-        else if (record.status === 'Late') lateDays++;
-      });
-      
-      summaries.push({
-        staff: {
-          _id: staff._id,
-          name: staff.name,
-          email: staff.email
-        },
-        summary: {
-          totalHours,
-          presentDays,
-          absentDays,
-          lateDays,
-          totalRecords: records.length
-        }
-      });
-    }
-    
-    res.json(summaries);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\controllers\authController.js
-// backend/src/controllers/authController.js
-const User = require('../models/User');
-const jwt = require('jsonwebtoken');
-const bcrypt = require('bcryptjs'); // Add bcrypt import
-
-// Generate JWT token
-const generateToken = (id) => {
-  return jwt.sign({ id }, process.env.JWT_SECRET, {
-    expiresIn: process.env.JWT_EXPIRE || '30d'
-  });
-};
-
-// @desc    Register user
-// @route   POST /api/auth/register
-// @access  Public
-exports.registerUser = async (req, res) => {
-  try {
-    const { name, email, password } = req.body;
-    
-    // Check if user exists
-    const userExists = await User.findOne({ email });
-
-    if (userExists) {
-      return res.status(400).json({ message: 'User already exists' });
-    }
-
-    // Create user with default role
-    const user = await User.create({
-      name,
-      email,
-      password,
-      // No need to specify role - it will use the default from the model
-    });
-
-    if (user) {
-      res.status(201).json({
-        _id: user._id,
-        name: user.name,
-        email: user.email,
-        role: user.role,
-        token: generateToken(user._id)
-      });
-    } else {
-      res.status(400).json({ message: 'Invalid user data' });
-    }
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Login user
-// @route   POST /api/auth/login
-// @access  Public
-exports.loginUser = async (req, res) => {
-  try {
-    console.log('Login attempt received');
-    
-    const { email, password } = req.body;
-    
-    // IMPORTANT CHANGE: Add .select('+password') to include the password field
-    const user = await User.findOne({ 
-      email: { $regex: new RegExp(`^${email}$`, 'i') } 
-    }).select('+password');
-    
-    if (!user) {
-      console.log(`User not found: ${email}`);
-      return res.status(401).json({ message: 'Invalid credentials' });
-    }
-    
-    console.log(`User found: ${user.email}, role: ${user.role}`);
-    
-    // Use the model's matchPassword method instead of direct bcrypt
-    const isMatch = await user.matchPassword(password);
-    console.log(`Password match result: ${isMatch}`);
-    
-    if (!isMatch) {
-      return res.status(401).json({ message: 'Invalid credentials' });
-    }
-    
-    // Generate token and send response
-    const token = generateToken(user._id);
-    
-    res.json({
-      _id: user._id,
-      name: user.name,
-      email: user.email,
-      role: user.role,
-      token
-    });
-  } catch (error) {
-    console.error('Login error:', error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Get current logged in user
-// @route   GET /api/auth/me
-// @access  Private
-exports.getMe = async (req, res) => {
-  try {
-    const user = await User.findById(req.user.id);
-    
-    res.json({
-      _id: user._id,
-      name: user.name,
-      email: user.email,
-      role: user.role
-    });
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\controllers\documentController.js
-const Document = require('../models/Document');
-const User = require('../models/User');
-const path = require('path');
-const fs = require('fs');
-
-// @desc    Upload new document
-// @route   POST /api/documents/upload
-// @access  Private
-exports.uploadDocument = async (req, res) => {
-  try {
-    if (!req.file) {
-      return res.status(400).json({ message: 'No file uploaded' });
-    }
-    
-    // Create new document
-    const document = await Document.create({
-      user: req.user.id,
-      name: req.body.name || req.file.originalname,
-      type: req.body.type || 'Other',
-      filePath: req.file.path,
-      mimeType: req.file.mimetype,
-      size: req.file.size
-    });
-    
-    res.status(201).json(document);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Get all user documents
-// @route   GET /api/documents
-// @access  Private
-exports.getUserDocuments = async (req, res) => {
-  try {
-    const documents = await Document.find({ user: req.user.id });
-    res.json(documents);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Get document by ID
-// @route   GET /api/documents/:id
-// @access  Private
-exports.getDocumentById = async (req, res) => {
-  try {
-    const document = await Document.findById(req.params.id);
-    
-    if (!document) {
-      return res.status(404).json({ message: 'Document not found' });
-    }
-    
-    // Check if the document belongs to the user
-    if (document.user.toString() !== req.user.id && req.user.role !== 'admin') {
-      return res.status(403).json({ message: 'Not authorized to access this document' });
-    }
-    
-    res.json(document);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Delete document
-// @route   DELETE /api/documents/:id
-// @access  Private
-exports.deleteDocument = async (req, res) => {
-  try {
-    const document = await Document.findById(req.params.id);
-    
-    if (!document) {
-      return res.status(404).json({ message: 'Document not found' });
-    }
-    
-    // Check if the document belongs to the user
-    if (document.user.toString() !== req.user.id && req.user.role !== 'admin') {
-      return res.status(403).json({ message: 'Not authorized to delete this document' });
-    }
-    
-    // Delete file from storage
-    if (fs.existsSync(document.filePath)) {
-      fs.unlinkSync(document.filePath);
-    }
-    
-    // Delete document from database
-    await document.deleteOne();
-    
-    res.json({ message: 'Document deleted successfully' });
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Verify document (admin only)
-// @route   PUT /api/documents/:id/verify
-// @access  Private/Admin
-exports.verifyDocument = async (req, res) => {
-  try {
-    const document = await Document.findById(req.params.id);
-    
-    if (!document) {
-      return res.status(404).json({ message: 'Document not found' });
-    }
-    
-    document.verificationStatus = req.body.status || 'Verified';
-    document.verificationDate = Date.now();
-    document.verificationNotes = req.body.notes || '';
-    
-    const updatedDocument = await document.save();
-    
-    res.json(updatedDocument);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\controllers\financialController.js
-const SubscriptionPlan = require('../models/SubscriptionPlan');
-const Payment = require('../models/Payment');
-const Expense = require('../models/Expense');
-const UserSubscription = require('../models/UserSubscription');
-const User = require('../models/User');
-
-// Helper function to add months
-const addMonths = (date, months) => {
-    const d = new Date(date);
-    d.setMonth(d.getMonth() + months);
-    // Handle edge case where the day doesn't exist in the target month
-    if (d.getDate() < date.getDate()) {
-        d.setDate(0); // Go to the last day of the previous month
-    }
-    return d;
-};
-
-// Helper function to get number of days in a period
-const getDaysInPeriod = (start, end) => {
-    return Math.ceil((end - start) / (1000 * 60 * 60 * 24));
-};
-
-exports.getDashboardData = async (req, res) => {
-    try {
-        // Get date range from query parameter (default: month)
-        const dateRange = req.query.range || 'month';
-        
-        // Calculate date ranges based on the parameter
-        const currentDate = new Date();
-        let startDate;
-        let previousStartDate, previousEndDate;
-        let numberOfDaysInPeriod;
-
-        switch (dateRange) {
-            case 'year':
-                startDate = new Date(currentDate.getFullYear(), 0, 1); // Jan 1 of current year
-                previousStartDate = new Date(currentDate.getFullYear() - 1, 0, 1);
-                previousEndDate = new Date(currentDate.getFullYear() - 1, 11, 31);
-                numberOfDaysInPeriod = getDaysInPeriod(startDate, currentDate); // Days so far this year
-                break;
-            case 'last3months':
-                // Calculate start date as 3 months ago from current date
-                startDate = new Date(currentDate);
-                startDate.setMonth(currentDate.getMonth() - 2, 1); // First day of the month 2 months ago
-                
-                // Calculate previous period (3 months before the current 3-month period)
-                previousStartDate = new Date(startDate);
-                previousStartDate.setMonth(startDate.getMonth() - 3);
-                previousEndDate = new Date(startDate.getTime() - 1); // Day before start date
-                
-                numberOfDaysInPeriod = getDaysInPeriod(startDate, currentDate);
-                break;
-            case 'month':
-            default:
-                startDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1); // 1st of current month
-                previousStartDate = addMonths(startDate, -1);
-                previousEndDate = new Date(startDate.getTime() - 1); // End of previous month
-                numberOfDaysInPeriod = currentDate.getDate(); // Days so far this month
-                break;
-        }
-        const yearStartDate = new Date(currentDate.getFullYear(), 0, 1);
-        
-        // 1. Count Active Subscriptions (Total, not period-specific)
-        const activeSubscriptions = await UserSubscription.countDocuments({ 
-            status: 'active' 
-        });
-
-        // Count New Subscriptions in the period
-        const newSubscriptions = await UserSubscription.countDocuments({
-            startDate: { $gte: startDate, $lte: currentDate }
-        });
-
-        // Count Cancellations in the period 
-        const cancellations = await UserSubscription.countDocuments({
-            status: 'cancelled',
-            updatedAt: { $gte: startDate, $lte: currentDate }
-        });
-        
-        // 2. Calculate Revenue
-        // Current period revenue
-        const periodRevenueResult = await Payment.aggregate([
-            { $match: { status: 'completed', paymentDate: { $gte: startDate, $lte: currentDate } } },
-            { $group: { _id: null, total: { $sum: "$amount" } } }
-        ]);
-        const periodRevenue = periodRevenueResult.length > 0 ? periodRevenueResult[0].total : 0;
-
-        // Previous period revenue
-        const previousPeriodRevenueResult = await Payment.aggregate([
-            { $match: { status: 'completed', paymentDate: { $gte: previousStartDate, $lte: previousEndDate } } },
-            { $group: { _id: null, total: { $sum: "$amount" } } }
-        ]);
-        const previousPeriodRevenue = previousPeriodRevenueResult.length > 0 ? previousPeriodRevenueResult[0].total : 0;
-
-        // Calculate Revenue Growth Percentage
-        let revenueGrowthPercentage = 0;
-        if (previousPeriodRevenue > 0) {
-            revenueGrowthPercentage = ((periodRevenue - previousPeriodRevenue) / previousPeriodRevenue) * 100;
-        } else if (periodRevenue > 0) {
-            revenueGrowthPercentage = 100; // Growth is 100% if previous was 0 and current is positive
-        }
-
-        // Calculate Average Daily Revenue
-        const averageDailyRevenue = numberOfDaysInPeriod > 0 ? periodRevenue / numberOfDaysInPeriod : 0;
-
-        // Year-to-date revenue
-        const yearToDateRevenueResult = await Payment.aggregate([
-            { $match: { status: 'completed', paymentDate: { $gte: yearStartDate, $lte: currentDate } } },
-            { $group: { _id: null, total: { $sum: "$amount" } } }
-        ]);
-        const yearToDateRevenue = yearToDateRevenueResult.length > 0 ? yearToDateRevenueResult[0].total : 0;
-
-        // Total revenue from subscriptions only
-        const subscriptionRevenueResult = await Payment.aggregate([
-            { $match: { status: 'completed', subscriptionPlan: { $ne: null }, paymentDate: { $gte: startDate, $lte: currentDate } } },
-            { $group: { _id: null, total: { $sum: "$amount" } } }
-        ]);
-        const subscriptionRevenue = subscriptionRevenueResult.length > 0 ? subscriptionRevenueResult[0].total : 0;
-
-        // 3. Calculate Expenses
-        // Current period expenses
-        const periodExpensesResult = await Expense.aggregate([
-            { $match: { status: 'approved', date: { $gte: startDate, $lte: currentDate } } },
-            { $group: { _id: null, total: { $sum: "$amount" } } }
-        ]);
-        const periodExpenses = periodExpensesResult.length > 0 ? periodExpensesResult[0].total : 0;
-
-        // Year-to-date expenses
-        const yearToDateExpensesResult = await Expense.aggregate([
-            { $match: { status: 'approved', date: { $gte: yearStartDate, $lte: currentDate } } },
-            { $group: { _id: null, total: { $sum: "$amount" } } }
-        ]);
-        const yearToDateExpenses = yearToDateExpensesResult.length > 0 ? yearToDateExpensesResult[0].total : 0;
-
-        // 4. Outstanding Payments (pending or failed)
-        const outstandingPayments = await Payment.aggregate([
-            { $match: { status: { $in: ['pending', 'failed'] } } },
-            { $group: { _id: null, total: { $sum: "$amount" } } }
-        ]);
-        
-        // 5. Recent Transactions (within the period)
-        const recentPayments = await Payment.find({ paymentDate: { $gte: startDate, $lte: currentDate } })
-            .sort({ paymentDate: -1 })
-            .limit(5)
-            .populate('user', 'name')
-            .populate('subscriptionPlan', 'name duration');
-            
-        const recentExpenses = await Expense.find({ date: { $gte: startDate, $lte: currentDate } })
-            .sort({ date: -1 })
-            .limit(5);
-        
-        // 6. Revenue by Subscription Plan
-        const revenueByPlan = await Payment.aggregate([
-            { $match: { status: 'completed', subscriptionPlan: { $ne: null }, paymentDate: { $gte: startDate, $lte: currentDate } } },
-            { $lookup: { from: 'subscriptionplans', localField: 'subscriptionPlan', foreignField: '_id', as: 'planDetails' } },
-            { $unwind: '$planDetails' },
-            { $group: { _id: '$planDetails.name', revenue: { $sum: "$amount" }, count: { $sum: 1 } } },
-            { $project: { plan: '$_id', revenue: 1, count: 1, _id: 0 } }
-        ]);
-        
-        // 7. Expense breakdown by category (for the period)
-        const expensesByCategory = await Expense.aggregate([
-            { $match: { status: 'approved', date: { $gte: startDate, $lte: currentDate } } },
-            { $group: { _id: '$category', total: { $sum: "$amount" }, count: { $sum: 1 } } },
-            { $project: { category: '$_id', total: 1, count: 1, _id: 0 } },
-            { $sort: { total: -1 } }
-        ]);
-
-        // Find Largest Expense Category
-        const largestExpenseCategory = expensesByCategory.length > 0 
-            ? { category: expensesByCategory[0].category, total: expensesByCategory[0].total } 
-            : { category: 'N/A', total: 0 };
-
-        // 8 & 9. Dynamic revenue and expense trends based on selected range
-        let revenueTrend, expenseTrend;
-        if (dateRange === 'month') {
-            // Daily trend for current month
-            revenueTrend = await Payment.aggregate([
-                { $match: { status: 'completed', paymentDate: { $gte: startDate, $lte: currentDate } } },
-                { $group: { _id: { day: { $dayOfMonth: '$paymentDate' } }, total: { $sum: '$amount' } } },
-                { $sort: { '_id.day': 1 } },
-                { $project: { month: { $toString: '$_id.day' }, total: 1, _id: 0 } }
-            ]);
-            expenseTrend = await Expense.aggregate([
-                { $match: { status: 'approved', date: { $gte: startDate, $lte: currentDate } } },
-                { $group: { _id: { day: { $dayOfMonth: '$date' } }, total: { $sum: '$amount' } } },
-                { $sort: { '_id.day': 1 } },
-                { $project: { month: { $toString: '$_id.day' }, total: 1, _id: 0 } }
-            ]);
-        } else {
-            // Monthly trend for quarter or year
-            const monthNames = [ '', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ];
-            revenueTrend = await Payment.aggregate([
-                { $match: { status: 'completed', paymentDate: { $gte: startDate, $lte: currentDate } } },
-                { $group: { _id: { year: { $year: '$paymentDate' }, month: { $month: '$paymentDate' } }, total: { $sum: '$amount' } } },
-                { $sort: { '_id.year': 1, '_id.month': 1 } },
-                { $project: { month: { $concat: [ { $arrayElemAt: [ monthNames, '$_id.month' ] }, '-', { $toString: '$_id.year' } ] }, total: 1, _id: 0 } }
-            ]);
-            expenseTrend = await Expense.aggregate([
-                { $match: { status: 'approved', date: { $gte: startDate, $lte: currentDate } } },
-                { $group: { _id: { year: { $year: '$date' }, month: { $month: '$date' } }, total: { $sum: '$amount' } } },
-                { $sort: { '_id.year': 1, '_id.month': 1 } },
-                { $project: { month: { $concat: [ { $arrayElemAt: [ monthNames, '$_id.month' ] }, '-', { $toString: '$_id.year' } ] }, total: 1, _id: 0 } }
-            ]);
-        }
-        
-        // 10. Subscription plans data
-        const subscriptionPlansData = await SubscriptionPlan.find().sort({ price: 1 });
-        
-        // Compile all data
-        const dashboardData = {
-            activeSubscriptions,
-            newSubscriptions,
-            cancellations,
-            totalRevenue: {
-                period: periodRevenue,
-                year: yearToDateRevenue,
-                subscriptions: subscriptionRevenue
-            },
-            totalExpenses: {
-                period: periodExpenses,
-                year: yearToDateExpenses
-            },
-            outstandingPayments: outstandingPayments.length > 0 ? outstandingPayments[0].total : 0,
-            revenueGrowthPercentage,
-            averageDailyRevenue,
-            largestExpenseCategory,
-            recentTransactions: {
-                payments: recentPayments.map(payment => ({
-                    id: payment._id,
-                    date: payment.paymentDate,
-                    customer: payment.user ? payment.user.name : 'Unknown',
-                    description: payment.description,
-                    amount: payment.amount,
-                    status: payment.status,
-                    paymentMethod: payment.paymentMethod
-                })),
-                expenses: recentExpenses.map(expense => ({
-                    id: expense._id,
-                    date: expense.date,
-                    category: expense.category,
-                    description: expense.description,
-                    amount: expense.amount,
-                    status: expense.status
-                }))
-            },
-            revenueByPlan,
-            expensesByCategory,
-            trends: {
-                revenue: revenueTrend,
-                expenses: expenseTrend
-            },
-            subscriptionPlans: subscriptionPlansData.map(plan => ({
-                id: plan._id,
-                name: plan.name,
-                price: plan.price,
-                subscriberCount: plan.subscriberCount,
-                description: plan.description,
-                duration: plan.duration
-            })),
-            dateRange: {
-                start: startDate,
-                end: currentDate,
-                type: dateRange,
-                daysInPeriod: numberOfDaysInPeriod
-            }
-        };
-
-        res.status(200).json(dashboardData);
-
-    } catch (error) {
-        console.error('Error fetching financial dashboard data:', error);
-        res.status(500).json({ message: 'Error fetching dashboard data', error: error.message });
-    }
-};
-
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\controllers\performanceController.js
-const Performance = require('../models/Performance');
-const User = require('../models/User');
-
-// @desc    Create new performance review
-// @route   POST /api/performance
-// @access  Private/Admin
-exports.createPerformanceReview = async (req, res) => {
-  try {
-    const { 
-      staffId, 
-      startDate, 
-      endDate, 
-      metrics, 
-      feedback, 
-      goals 
-    } = req.body;
-    
-    // Check if staff exists
-    const staff = await User.findById(staffId);
-    
-    if (!staff || staff.role !== 'staff') {
-      return res.status(400).json({ message: 'Invalid staff member' });
-    }
-    
-    // Create new performance review
-    const review = new Performance({
-      staff: staffId,
-      reviewPeriod: {
-        startDate,
-        endDate
-      },
-      metrics,
-      feedback,
-      goals,
-      reviewer: req.user.id
-    });
-    
-    await review.save();
-    
-    res.status(201).json(review);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Get all performance reviews
-// @route   GET /api/performance
-// @access  Private/Admin
-exports.getPerformanceReviews = async (req, res) => {
-  try {
-    const { staffId } = req.query;
-    
-    let query = {};
-    
-    if (staffId) {
-      query.staff = staffId;
-    }
-    
-    const reviews = await Performance.find(query)
-      .populate('staff', 'name email')
-      .populate('reviewer', 'name')
-      .sort({ createdAt: -1 });
-    
-    res.json(reviews);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Get performance review by ID
-// @route   GET /api/performance/:id
-// @access  Private
-exports.getPerformanceReviewById = async (req, res) => {
-  try {
-    const review = await Performance.findById(req.params.id)
-      .populate('staff', 'name email')
-      .populate('reviewer', 'name');
-    
-    if (!review) {
-      return res.status(404).json({ message: 'Performance review not found' });
-    }
-    
-    // Allow access if user is the reviewer, the staff being reviewed, or admin
-    if (
-      req.user.role !== 'admin' && 
-      review.reviewer.toString() !== req.user.id && 
-      review.staff._id.toString() !== req.user.id
-    ) {
-      return res.status(403).json({ message: 'Not authorized to access this review' });
-    }
-    
-    res.json(review);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Update performance review
-// @route   PUT /api/performance/:id
-// @access  Private/Admin
-exports.updatePerformanceReview = async (req, res) => {
-  try {
-    const { 
-      metrics, 
-      feedback, 
-      goals 
-    } = req.body;
-    
-    const review = await Performance.findById(req.params.id);
-    
-    if (!review) {
-      return res.status(404).json({ message: 'Performance review not found' });
-    }
-    
-    // Update fields
-    if (metrics) review.metrics = metrics;
-    if (feedback !== undefined) review.feedback = feedback;
-    if (goals) review.goals = goals;
-    
-    await review.save();
-    
-    res.json(review);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Delete performance review
-// @route   DELETE /api/performance/:id
-// @access  Private/Admin
-exports.deletePerformanceReview = async (req, res) => {
-  try {
-    const review = await Performance.findById(req.params.id);
-    
-    if (!review) {
-      return res.status(404).json({ message: 'Performance review not found' });
-    }
-    
-    await review.deleteOne();
-    
-    res.json({ message: 'Performance review removed' });
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Get staff member's performance reviews
-// @route   GET /api/performance/my-reviews
-// @access  Private/Staff
-exports.getMyPerformanceReviews = async (req, res) => {
-  try {
-    const reviews = await Performance.find({ staff: req.user.id })
-      .populate('reviewer', 'name')
-      .sort({ createdAt: -1 });
-    
-    res.json(reviews);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Get performance summary by staff
-// @route   GET /api/performance/summary
-// @access  Private/Admin
-exports.getPerformanceSummary = async (req, res) => {
-  try {
-    // Get all staff members
-    const staffMembers = await User.find({ role: 'staff' }, '_id name email');
-    
-    // Get average performance for each staff
-    const summaries = [];
-    
-    for (const staff of staffMembers) {
-      const reviews = await Performance.find({ staff: staff._id });
-      
-      if (reviews.length === 0) {
-        summaries.push({
-          staff: {
-            _id: staff._id,
-            name: staff.name,
-            email: staff.email
-          },
-          averageRating: 0,
-          reviewCount: 0
-        });
-        continue;
-      }
-      
-      // Calculate average rating
-      const totalRating = reviews.reduce((acc, review) => acc + review.overallRating, 0);
-      const averageRating = parseFloat((totalRating / reviews.length).toFixed(1));
-      
-      summaries.push({
-        staff: {
-          _id: staff._id,
-          name: staff.name,
-          email: staff.email
-        },
-        averageRating,
-        reviewCount: reviews.length
-      });
-    }
-    
-    res.json(summaries);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\controllers\SubscriptionPlanController.js
-const SubscriptionPlan = require('../models/SubscriptionPlan');
-
-// @desc    Get all subscription plans
-// @route   GET /api/subscription-plans
-// @access  Private/financial_manager
-exports.getSubscriptionPlans = async (req, res) => {
-  try {
-    const subscriptionPlans = await SubscriptionPlan.find().sort({ createdAt: -1 });
-    res.json(subscriptionPlans);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Get subscription plan by ID
-// @route   GET /api/subscription-plans/:id
-// @access  Private/financial_manager
-exports.getSubscriptionPlanById = async (req, res) => {
-  try {
-    const subscriptionPlan = await SubscriptionPlan.findById(req.params.id);
-    
-    if (!subscriptionPlan) {
-      return res.status(404).json({ message: 'Subscription plan not found' });
-    }
-    
-    res.json(subscriptionPlan);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Create new subscription plan
-// @route   POST /api/subscription-plans
-// @access  Private/financial_manager
-exports.createSubscriptionPlan = async (req, res) => {
-  try {
-    const { name, price, subscriberCount, description, duration } = req.body;
-    
-    // Check if plan with the same name already exists
-    const existingPlan = await SubscriptionPlan.findOne({ name });
-    if (existingPlan) {
-      return res.status(400).json({ message: 'A plan with this name already exists' });
-    }
-    
-    const subscriptionPlan = await SubscriptionPlan.create({
-      name,
-      price,
-      subscriberCount,
-      description,
-      duration
-    });
-    
-    res.status(201).json(subscriptionPlan);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ 
-      message: 'Server error',
-      error: error.message 
-    });
-  }
-};
-
-// @desc    Update subscription plan
-// @route   PUT /api/subscription-plans/:id
-// @access  Private/financial_manager
-exports.updateSubscriptionPlan = async (req, res) => {
-  try {
-    const { name, price, subscriberCount, description, duration } = req.body;
-    
-    // Check if plan exists
-    let subscriptionPlan = await SubscriptionPlan.findById(req.params.id);
-    
-    if (!subscriptionPlan) {
-      return res.status(404).json({ message: 'Subscription plan not found' });
-    }
-    
-    // Check if we're trying to update to a name that already exists (except for this plan)
-    if (name !== subscriptionPlan.name) {
-      const existingPlan = await SubscriptionPlan.findOne({ name });
-      if (existingPlan) {
-        return res.status(400).json({ message: 'A plan with this name already exists' });
-      }
-    }
-    
-    // Update the plan
-    subscriptionPlan = await SubscriptionPlan.findByIdAndUpdate(
-      req.params.id,
-      { name, price, subscriberCount, description, duration },
-      { new: true, runValidators: true }
-    );
-    
-    res.json(subscriptionPlan);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Delete subscription plan
-// @route   DELETE /api/subscription-plans/:id
-// @access  Private/financial_manager
-exports.deleteSubscriptionPlan = async (req, res) => {
-  try {
-    const subscriptionPlan = await SubscriptionPlan.findById(req.params.id);
-    
-    if (!subscriptionPlan) {
-      return res.status(404).json({ message: 'Subscription plan not found' });
-    }
-    
-    await subscriptionPlan.deleteOne();
-    
-    res.json({ message: 'Subscription plan removed' });
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\controllers\userController.js
-// backend/src/controllers/userController.js
-const User = require('../models/User');
-const Document = require('../models/Document');
-const fs = require('fs');
-const path = require('path');
-
-// @desc    Get all users
-// @route   GET /api/users
-// @access  Private/Admin
-exports.getUsers = async (req, res) => {
-  try {
-    const users = await User.find();
-    res.json(users);
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Get user by ID
-// @route   GET /api/users/:id
-// @access  Private/Admin
-exports.getUserById = async (req, res) => {
-  try {
-    const user = await User.findById(req.params.id);
-    
-    if (user) {
-      res.json(user);
-    } else {
-      res.status(404).json({ message: 'User not found' });
-    }
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Get current user profile
-// @route   GET /api/users/profile
-// @access  Private
-exports.getUserProfile = async (req, res) => {
-  try {
-    const user = await User.findById(req.user.id);
-    
-    if (!user) {
-      return res.status(404).json({ message: 'User not found' });
-    }
-    
-    // Get user documents if any
-    const documents = await Document.find({ user: req.user.id });
-    
-    res.json({
-      _id: user._id,
-      name: user.name,
-      email: user.email,
-      role: user.role,
-      createdAt: user.createdAt,
-      documents: documents
-    });
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Update user profile
-// @route   PUT /api/users/profile
-// @access  Private
-exports.updateUserProfile = async (req, res) => {
-  try {
-    const user = await User.findById(req.user.id);
-    
-    if (!user) {
-      return res.status(404).json({ message: 'User not found' });
-    }
-    
-    // Update basic info
-    if (req.body.name) user.name = req.body.name;
-    if (req.body.email) user.email = req.body.email;
-    
-    // Update password if provided
-    if (req.body.password) {
-      user.password = req.body.password;
-    }
-    
-    const updatedUser = await user.save();
-    
-    res.json({
-      _id: updatedUser._id,
-      name: updatedUser.name,
-      email: updatedUser.email,
-      role: updatedUser.role
-    });
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Delete user account
-// @route   DELETE /api/users/profile
-// @access  Private
-exports.deleteUserProfile = async (req, res) => {
-  try {
-    const user = await User.findById(req.user.id);
-    
-    if (!user) {
-      return res.status(404).json({ message: 'User not found' });
-    }
-    
-    if (user.role === 'staff') {
-      return res.status(403).json({ message: 'Staff accounts cannot be deleted through this endpoint' });
-    }
-    
-    // Delete user documents first
-    await Document.deleteMany({ user: req.user.id });
-    
-    // Now delete the user
-    await user.deleteOne();
-    
-    res.json({ message: 'User account deleted successfully' });
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-// @desc    Delete user
-// @route   DELETE /api/users/:id
-// @access  Private/Admin
-exports.deleteUser = async (req, res) => {
-  try {
-    const user = await User.findById(req.params.id);
-    
-    if (user) {
-      await user.deleteOne();
-      res.json({ message: 'User removed' });
-    } else {
-      res.status(404).json({ message: 'User not found' });
-    }
-  } catch (error) {
-    console.error(error);
-    res.status(500).json({ message: 'Server error' });
-  }
-};
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\controllers\UserSubscriptionController.js
-const UserSubscription = require('../models/UserSubscription');
-const SubscriptionPlan = require('../models/SubscriptionPlan');
-const User = require('../models/User');
-const mongoose = require('mongoose');
-
-// Helper function to add months to a date
-const addMonths = (date, months) => {
-  const result = new Date(date);
-  result.setMonth(result.getMonth() + months);
-  // Handle edge cases like Feb 29th
-  if (result.getDate() < date.getDate()) {
-    result.setDate(0); // Go to the last day of the previous month
-  }
-  return result;
-};
-
-// @desc    Create a new subscription for a user
-// @route   POST /api/user-subscriptions
-// @access  Private/financial_manager/admin
-exports.createUserSubscription = async (req, res) => {
-  const { userId, planId, startDate: customStartDate } = req.body;
-
-  // Basic validation
-  if (!userId || !planId) {
-    return res.status(400).json({ message: 'User ID and Plan ID are required' });
-  }
-  if (!mongoose.Types.ObjectId.isValid(userId) || !mongoose.Types.ObjectId.isValid(planId)) {
-    return res.status(400).json({ message: 'Invalid User ID or Plan ID format' });
-  }
-
-  try {
-    // Check if user and plan exist
-    const user = await User.findById(userId);
-    const plan = await SubscriptionPlan.findById(planId);
-
-    if (!user) {
-      return res.status(404).json({ message: 'User not found' });
-    }
-    if (!plan) {
-      return res.status(404).json({ message: 'Subscription plan not found' });
-    }
-
-    // Check if user already has an active subscription (optional, depends on business logic)
-    // const existingActiveSubscription = await UserSubscription.findOne({ user: userId, status: 'active' });
-    // if (existingActiveSubscription) {
-    //   return res.status(400).json({ message: 'User already has an active subscription' });
-    // }
-
-    // Determine start date
-    const startDate = customStartDate ? new Date(customStartDate) : new Date();
-    if (isNaN(startDate.getTime())) {
-        return res.status(400).json({ message: 'Invalid start date provided' });
-    }
-
-    // Calculate end date and next billing date based on plan duration
-    let durationMonths = 1; // Default to Monthly
-    switch (plan.duration) {
-      case 'Quarterly':
-        durationMonths = 3;
-        break;
-      case 'Semi-Annual':
-        durationMonths = 6;
-        break;
-      case 'Annual':
-        durationMonths = 12;
-        break;
-      // Default case 'Monthly' already set
-    }
-
-    const endDate = addMonths(startDate, durationMonths);
-    const nextBillingDate = new Date(endDate); // First billing is at the end of the first period
-
-    // Create the subscription
-    const newSubscription = new UserSubscription({
-      user: userId,
-      subscriptionPlan: planId,
-      startDate,
-      endDate,
-      status: 'active', // Default to active
-      autoRenew: true, // Default to auto-renew true, can be changed later
-      lastBillingDate: startDate, // Initial billing date is the start date
-      nextBillingDate,
-    });
-
-    await newSubscription.save();
-
-    // Optionally, increment subscriber count on the plan
-    await SubscriptionPlan.findByIdAndUpdate(planId, { $inc: { subscriberCount: 1 } });
-
-    res.status(201).json(newSubscription);
-
-  } catch (error) {
-    console.error('Error creating user subscription:', error);
-    // Handle potential duplicate key errors if unique indexes are added later
-    if (error.code === 11000) {
-        return res.status(400).json({ message: 'Duplicate subscription detected.' });
-    }
-    res.status(500).json({ message: 'Server error while creating subscription' });
-  }
-};
-
-// @desc    Get all subscriptions for a specific user
-// @route   GET /api/user-subscriptions/user/:userId
-// @access  Private/financial_manager/admin/owner
-exports.getUserSubscriptions = async (req, res) => {
-  const requestedUserId = req.params.userId;
-  const loggedInUserId = req.user.id;
-  const loggedInUserRole = req.user.role;
-
-  // Validate userId format
-  if (!mongoose.Types.ObjectId.isValid(requestedUserId)) {
-    return res.status(400).json({ message: 'Invalid User ID format' });
-  }
-
-  // Check permissions: Allow if admin, financial manager, or the user is requesting their own subscriptions
-  if (loggedInUserRole !== 'admin' && loggedInUserRole !== 'financial_manager' && loggedInUserId !== requestedUserId) {
-    return res.status(403).json({ message: 'Not authorized to access these subscriptions' });
-  }
-
-  try {
-    const subscriptions = await UserSubscription.find({ user: requestedUserId })
-                                              .populate('subscriptionPlan', 'name price duration') // Populate plan details
-                                              .populate('user', 'username email'); // Populate basic user details
-
-    if (!subscriptions || subscriptions.length === 0) {
-      // It's not an error if a user has no subscriptions, return empty array
-      return res.status(200).json([]); 
-    }
-
-    res.status(200).json(subscriptions);
-
-  } catch (error) {
-    console.error('Error fetching user subscriptions:', error);
-    res.status(500).json({ message: 'Server error while fetching subscriptions' });
-  }
-};
-
-// @desc    Get a single subscription by ID
-// @route   GET /api/user-subscriptions/:id
-// @access  Private/financial_manager/admin/owner
-exports.getUserSubscriptionById = async (req, res) => {
-  const subscriptionId = req.params.id;
-  const loggedInUserId = req.user.id;
-  const loggedInUserRole = req.user.role;
-
-  // Validate subscriptionId format
-  if (!mongoose.Types.ObjectId.isValid(subscriptionId)) {
-    return res.status(400).json({ message: 'Invalid Subscription ID format' });
-  }
-
-  try {
-    const subscription = await UserSubscription.findById(subscriptionId)
-                                              .populate('subscriptionPlan', 'name price duration description')
-                                              .populate('user', 'username email');
-
-    if (!subscription) {
-      return res.status(404).json({ message: 'Subscription not found' });
-    }
-
-    // Check permissions: Allow if admin, financial manager, or the owner of the subscription
-    if (loggedInUserRole !== 'admin' && loggedInUserRole !== 'financial_manager' && subscription.user._id.toString() !== loggedInUserId) {
-      return res.status(403).json({ message: 'Not authorized to access this subscription' });
-    }
-
-    res.status(200).json(subscription);
-
-  } catch (error) {
-    console.error('Error fetching subscription by ID:', error);
-    res.status(500).json({ message: 'Server error while fetching subscription' });
-  }
-};
-
-// @desc    Update a subscription (e.g., status, autoRenew)
-// @route   PUT /api/user-subscriptions/:id
-// @access  Private/financial_manager/admin
-exports.updateUserSubscription = async (req, res) => {
-  const subscriptionId = req.params.id;
-  const { status, autoRenew } = req.body;
-
-  // Validate subscriptionId format
-  if (!mongoose.Types.ObjectId.isValid(subscriptionId)) {
-    return res.status(400).json({ message: 'Invalid Subscription ID format' });
-  }
-
-  // Validate incoming data (basic example)
-  const allowedStatuses = ['active', 'expired', 'cancelled', 'pending'];
-  if (status && !allowedStatuses.includes(status)) {
-    return res.status(400).json({ message: 'Invalid status value' });
-  }
-  if (autoRenew !== undefined && typeof autoRenew !== 'boolean') {
-    return res.status(400).json({ message: 'Invalid autoRenew value, must be true or false' });
-  }
-
-  try {
-    const subscription = await UserSubscription.findById(subscriptionId);
-
-    if (!subscription) {
-      return res.status(404).json({ message: 'Subscription not found' });
-    }
-
-    // Update fields if they are provided in the request body
-    if (status !== undefined) {
-      subscription.status = status;
-    }
-    if (autoRenew !== undefined) {
-      subscription.autoRenew = autoRenew;
-    }
-    // Add logic here if other fields like endDate need adjustment based on status change
-
-    const updatedSubscription = await subscription.save();
-
-    res.status(200).json(updatedSubscription);
-
-  } catch (error) {
-    console.error('Error updating subscription:', error);
-    res.status(500).json({ message: 'Server error while updating subscription' });
-  }
-};
-
-// @desc    Cancel (mark as cancelled) a subscription
-// @route   DELETE /api/user-subscriptions/:id
-// @access  Private/financial_manager/admin
-exports.cancelUserSubscription = async (req, res) => {
-  const subscriptionId = req.params.id;
-
-  // Validate subscriptionId format
-  if (!mongoose.Types.ObjectId.isValid(subscriptionId)) {
-    return res.status(400).json({ message: 'Invalid Subscription ID format' });
-  }
-
-  try {
-    const subscription = await UserSubscription.findById(subscriptionId);
-
-    if (!subscription) {
-      return res.status(404).json({ message: 'Subscription not found' });
-    }
-
-    // Prevent cancelling already cancelled subscriptions (optional)
-    if (subscription.status === 'cancelled') {
-        return res.status(400).json({ message: 'Subscription is already cancelled' });
-    }
-
-    const previousStatus = subscription.status;
-    subscription.status = 'cancelled';
-    subscription.autoRenew = false; // Ensure auto-renew is off
-    // Optionally set endDate to now if cancelling prematurely
-    // subscription.endDate = new Date(); 
-
-    await subscription.save();
-
-    // Decrement subscriber count only if it was previously active
-    if (previousStatus === 'active') {
-        await SubscriptionPlan.findByIdAndUpdate(subscription.subscriptionPlan, { $inc: { subscriberCount: -1 } });
-    }
-
-    res.status(200).json({ message: 'Subscription cancelled successfully' });
-
-  } catch (error) {
-    console.error('Error cancelling subscription:', error);
-    res.status(500).json({ message: 'Server error while cancelling subscription' });
-  }
-};
-
-// @desc    Get all active subscriptions (for admin/financial manager overview)
-// @route   GET /api/user-subscriptions
-// @access  Private/financial_manager/admin
-exports.getAllActiveSubscriptions = async (req, res) => {
-  try {
-    const activeSubscriptions = await UserSubscription.find({ status: 'active' })
-                                                    .populate('user', 'username email')
-                                                    .populate('subscriptionPlan', 'name price')
-                                                    .sort({ nextBillingDate: 1 }); // Sort by next billing date
-
-    res.status(200).json(activeSubscriptions);
-
-  } catch (error) {
-    console.error('Error fetching all active subscriptions:', error);
-    res.status(500).json({ message: 'Server error while fetching active subscriptions' });
-  }
-};
-
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\middleware\authMiddleware.js
-// backend/src/middleware/authMiddleware.js
-const jwt = require('jsonwebtoken');
-const User = require('../models/User');
-
-// Protect routes
-exports.protect = async (req, res, next) => {
-  let token;
-  
-  // Check for token in headers
-  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
-    try {
-      // Get token from header
-      token = req.headers.authorization.split(' ')[1];
-      
-      // Verify token
-      const decoded = jwt.verify(token, process.env.JWT_SECRET);
-      
-      // Get user from the token
-      req.user = await User.findById(decoded.id).select('-password');
-      
-      next();
-    } catch (error) {
-      console.error(error);
-      res.status(401).json({ message: 'Not authorized, token failed' });
-    }
-  }
-  
-  if (!token) {
-    res.status(401).json({ message: 'Not authorized, no token' });
-  }
-};
-
-// Role authorization
-exports.authorize = (...roles) => {
-  return (req, res, next) => {
-    if (!req.user || !roles.includes(req.user.role)) {
-      return res.status(403).json({
-        message: `Role ${req.user ? req.user.role : 'undefined'} is not authorized to access this resource`
-      });
-    }
-    next();
-  };
-};
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\middleware\roleMiddleware.js
-// Middleware factory to check if user has one of the allowed roles
-const roleMiddleware = (allowedRoles) => {
-  return (req, res, next) => {
-    // Ensure req.user exists (should be set by authMiddleware)
-    if (!req.user || !req.user.role) {
-      return res.status(401).json({ message: 'Authentication required or user role not found' });
-    }
-
-    const userRole = req.user.role;
-
-    // Check if the user's role is included in the allowed roles
-    // Convert allowedRoles to lowercase for case-insensitive comparison if needed,
-    // or ensure consistency in role naming (e.g., 'financial_manager' vs 'Financial Manager')
-    // Assuming roles in the database match the strings in allowedRoles exactly for now.
-    if (allowedRoles.includes(userRole)) {
-      next(); // User has the required role, proceed to the next middleware/controller
-    } else {
-      console.warn(`Role access denied for user ${req.user.id} with role '${userRole}'. Required: ${allowedRoles.join(' or ')}`);
-      return res.status(403).json({ message: 'Forbidden: Insufficient permissions' });
-    }
-  };
-};
-
-// Export the middleware factory function as the default export
-module.exports = roleMiddleware;
-
-// Example refactor for isFinancialManager middleware using the new roleMiddleware
-exports.isFinancialManager = roleMiddleware(['financial_manager', 'admin']);
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\models\Attendance.js
-const mongoose = require('mongoose');
-
-const attendanceSchema = new mongoose.Schema({
-  staff: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  checkInTime: {
-    type: Date,
-    required: true
-  },
-  checkOutTime: {
-    type: Date
-  },
-  totalHours: {
-    type: Number,
-    default: 0
-  },
-  status: {
-    type: String,
-    enum: ['Present', 'Absent', 'Late', 'Half-day', 'On Leave'],
-    default: 'Present'
-  },
-  notes: {
-    type: String
-  },
-  date: {
-    type: Date,
-    default: Date.now
-  }
-});
-
-// Calculate total hours when checkout is recorded
-attendanceSchema.pre('save', function(next) {
-  if (this.checkInTime && this.checkOutTime) {
-    const checkInTime = new Date(this.checkInTime);
-    const checkOutTime = new Date(this.checkOutTime);
-    
-    // Calculate hours difference
-    const diff = (checkOutTime - checkInTime) / (1000 * 60 * 60);
-    this.totalHours = parseFloat(diff.toFixed(2));
-  }
-  next();
-});
-
-module.exports = mongoose.model('Attendance', attendanceSchema);
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\models\Document.js
-const mongoose = require('mongoose');
-
-const documentSchema = new mongoose.Schema({
-  user: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  name: {
-    type: String,
-    required: [true, 'Document name is required'],
-    trim: true
-  },
-  type: {
-    type: String,
-    required: [true, 'Document type is required'],
-    enum: ['ID Card', 'Utility Bill', 'Driver License', 'Passport', 'Other'],
-    default: 'Other'
-  },
-  filePath: {
-    type: String,
-    required: [true, 'File path is required']
-  },
-  mimeType: {
-    type: String,
-    required: [true, 'File type is required']
-  },
-  size: {
-    type: Number,
-    required: [true, 'File size is required']
-  },
-  uploadedAt: {
-    type: Date,
-    default: Date.now
-  },
-  verificationStatus: {
-    type: String,
-    enum: ['Pending', 'Verified', 'Rejected'],
-    default: 'Pending'
-  },
-  verificationDate: {
-    type: Date
-  },
-  verificationNotes: {
-    type: String
-  }
-});
-
-module.exports = mongoose.model('Document', documentSchema);
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\models\Expense.js
-const mongoose = require('mongoose');
-
-const expenseSchema = new mongoose.Schema({
-  category: {
-    type: String,
-    enum: ['fuel', 'maintenance', 'salaries', 'utilities', 'equipment', 'office', 'rent', 'marketing', 'insurance', 'taxes', 'other'],
-    required: true
-  },
-  amount: {
-    type: Number,
-    required: [true, 'Expense amount is required']
-  },
-  description: {
-    type: String,
-    required: [true, 'Description is required']
-  },
-  date: {
-    type: Date,
-    default: Date.now
-  },
-  createdBy: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  receipt: {
-    type: String, // URL to uploaded receipt image
-    default: null
-  },
-  status: {
-    type: String,
-    enum: ['pending', 'approved', 'rejected'],
-    default: 'approved'
-  },
-  paymentMethod: {
-    type: String,
-    enum: ['cash', 'credit_card', 'bank_transfer', 'company_account', 'other'],
-    default: 'company_account'
-  },
-  tags: [String]
-});
-
-// Add indexes for faster querying
-expenseSchema.index({ date: -1 });
-expenseSchema.index({ category: 1 });
-expenseSchema.index({ createdBy: 1 });
-
-module.exports = mongoose.model('Expense', expenseSchema);
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\models\Payment.js
-const mongoose = require('mongoose');
-
-const paymentSchema = new mongoose.Schema({
-  user: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  amount: {
-    type: Number,
-    required: [true, 'Payment amount is required'],
-  },
-  description: {
-    type: String,
-    required: [true, 'Description is required']
-  },
-  paymentDate: {
-    type: Date,
-    default: Date.now
-  },
-  status: {
-    type: String,
-    enum: ['pending', 'completed', 'failed', 'refunded'],
-    default: 'completed'
-  },
-  paymentMethod: {
-    type: String,
-    enum: ['credit_card', 'debit_card', 'bank_transfer', 'cash', 'paypal', 'other'],
-    default: 'credit_card'
-  },
-  subscriptionPlan: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'SubscriptionPlan',
-    required: false
-  },
-  invoiceNumber: {
-    type: String,
-    unique: true,
-    default: () => 'INV-' + Math.floor(100000 + Math.random() * 900000)
-  },
-  transactionId: String
-});
-
-// Add indexes for faster querying
-paymentSchema.index({ paymentDate: -1 });
-paymentSchema.index({ status: 1 });
-paymentSchema.index({ user: 1 });
-
-module.exports = mongoose.model('Payment', paymentSchema);
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\models\Performance.js
-const mongoose = require('mongoose');
-
-const performanceSchema = new mongoose.Schema({
-  staff: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  reviewPeriod: {
-    startDate: {
-      type: Date,
-      required: true
-    },
-    endDate: {
-      type: Date,
-      required: true
-    }
-  },
-  metrics: {
-    productivity: {
-      type: Number,
-      min: 0,
-      max: 10,
-      default: 0
-    },
-    quality: {
-      type: Number,
-      min: 0,
-      max: 10,
-      default: 0
-    },
-    reliability: {
-      type: Number,
-      min: 0,
-      max: 10,
-      default: 0
-    },
-    communication: {
-      type: Number,
-      min: 0,
-      max: 10,
-      default: 0
-    },
-    initiative: {
-      type: Number,
-      min: 0,
-      max: 10,
-      default: 0
-    }
-  },
-  overallRating: {
-    type: Number,
-    min: 0,
-    max: 10,
-    default: 0
-  },
-  feedback: {
-    type: String
-  },
-  goals: [String],
-  reviewer: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  createdAt: {
-    type: Date,
-    default: Date.now
-  },
-  updatedAt: {
-    type: Date,
-    default: Date.now
-  }
-});
-
-// Calculate overall rating from individual metrics
-performanceSchema.pre('save', function(next) {
-  const metrics = this.metrics;
-  const totalScore = metrics.productivity + metrics.quality + 
-    metrics.reliability + metrics.communication + metrics.initiative;
-  
-  this.overallRating = parseFloat((totalScore / 5).toFixed(1));
-  this.updatedAt = Date.now();
-  next();
-});
-
-module.exports = mongoose.model('Performance', performanceSchema);
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\models\SubscriptionPlan.js
-const mongoose = require('mongoose');
-
-const subscriptionPlanSchema = new mongoose.Schema({
-  name: {
-    type: String,
-    required: [true, 'Plan name is required'],
-    trim: true,
-    unique: true
-  },
-  price: {
-    type: Number, // Changed from String to Number
-    required: [true, 'Price is required'],
-    min: [0, 'Price cannot be negative'] // Added validation for non-negative price
-  },
-  subscriberCount: {
-    type: Number,
-    default: 0
-  },
-  description: {
-    type: String,
-    default: 'This subscription plan includes basic waste collection services, weekly pickup, and access to the SmartBin mobile app.'
-  },
-  duration: {
-    type: String,
-    enum: ['Monthly', 'Quarterly', 'Semi-Annual', 'Annual'],
-    default: 'Monthly'
-  },
-  createdAt: {
-    type: Date,
-    default: Date.now
-  }
-});
-
-module.exports = mongoose.model('SubscriptionPlan', subscriptionPlanSchema);
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\models\User.js
-const mongoose = require('mongoose');
-const bcrypt = require('bcryptjs');
-
-const userSchema =  new mongoose.Schema({
-  name: {
-    type: String,
-    required: [true, 'Please Enter Your Name'],
-    trim: true,
-  },
-  email: {
-    type: String,
-    required: [true, 'Please Enter Your Email'],
-    unique: true,
-    match: [/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/, 'Please enter a valid email']
-  },
-  password: {
-    type: String,
-    required: [true, 'Please Enter Your Password'],
-    minlength: 8,
-    select: false
-  },
-  role: {
-    type: String,
-    enum: ['Resident/Garbage_Buyer', 'staff', 'admin', 'financial_manager'],
-    default: 'Resident/Garbage_Buyer'
-  },
-  createdAt: {
-    type: Date,
-    default: Date.now
-  }
-});
-
-//Encrypting Password Before Saving
-userSchema.pre('save', async function(next){
-  if(!this.isModified('password')){
-    next();
-  }
-
-  const salt = await bcrypt.genSalt(10);
-  this.password = await bcrypt.hash(this.password, salt);
-});
-
-// Match user entered password to hashed password in database
-userSchema.methods.matchPassword = async function(enteredPassword) {
-  return await bcrypt.compare(enteredPassword, this.password);
-};
-
-module.exports = mongoose.model('User', userSchema);
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\models\UserSubscription.js
-const mongoose = require('mongoose');
-
-const userSubscriptionSchema = new mongoose.Schema({
-  user: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'User',
-    required: true
-  },
-  subscriptionPlan: {
-    type: mongoose.Schema.Types.ObjectId,
-    ref: 'SubscriptionPlan',
-    required: true
-  },
-  startDate: {
-    type: Date,
-    default: Date.now
-  },
-  endDate: {
-    type: Date,
-    required: true
-  },
-  status: {
-    type: String,
-    enum: ['active', 'expired', 'cancelled', 'pending'],
-    default: 'active'
-  },
-  autoRenew: {
-    type: Boolean,
-    default: true
-  },
-  lastBillingDate: {
-    type: Date,
-    default: Date.now
-  },
-  nextBillingDate: {
-    type: Date,
-    required: true
-  }
-});
-
-// Add indexes for faster querying
-userSubscriptionSchema.index({ user: 1 });
-userSubscriptionSchema.index({ status: 1 });
-userSubscriptionSchema.index({ nextBillingDate: 1 });
-
-module.exports = mongoose.model('UserSubscription', userSubscriptionSchema);
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\routes\attendanceRoutes.js
-const express = require('express');
-const router = express.Router();
-const { 
-  checkIn, 
-  checkOut, 
-  getMyAttendance, 
-  getAllAttendance, 
-  updateAttendance,
-  getAttendanceSummary
-} = require('../controllers/attendanceController');
-const { protect, authorize } = require('../middleware/authMiddleware');
-
-// All routes are protected
-router.use(protect);
-
-// Staff routes
-router.post('/check-in', checkIn);
-router.put('/check-out', checkOut);
-router.get('/', getMyAttendance);
-
-// Admin routes
-router.get('/all', authorize('admin'), getAllAttendance);
-router.put('/:id', authorize('admin'), updateAttendance);
-router.get('/summary', authorize('admin'), getAttendanceSummary);
-
-module.exports = router;
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\routes\authRoutes.js
-const express = require('express');
-const router = express.Router();
-const { registerUser, loginUser, getMe } = require('../controllers/authController');
-const { protect } = require('../middleware/authMiddleware');
-
-// User registration and login routes
-router.post('/register', registerUser);
-router.post('/login', loginUser);
-router.get('/me', protect, getMe);
-
-module.exports = router;
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\routes\documentRoutes.js
-const express = require('express');
-const router = express.Router();
-const { 
-  uploadDocument, 
-  getUserDocuments, 
-  getDocumentById, 
-  deleteDocument, 
-  verifyDocument 
-} = require('../controllers/documentController');
-const { protect, authorize } = require('../middleware/authMiddleware');
-const multer = require('multer');
-const path = require('path');
-
-// Configure multer for file uploads
-const storage = multer.diskStorage({
-  destination: function(req, file, cb) {
-    cb(null, 'uploads/documents/');
-  },
-  filename: function(req, file, cb) {
-    cb(null, `${req.user.id}-${Date.now()}${path.extname(file.originalname)}`);
-  }
-});
-
-// Check file type
-const fileFilter = (req, file, cb) => {
-  const allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'];
-  
-  if (allowedTypes.includes(file.mimetype)) {
-    cb(null, true);
-  } else {
-    cb(new Error('Invalid file type. Only JPEG, PNG and PDF allowed'), false);
-  }
-};
-
-const upload = multer({ 
-  storage,
-  fileFilter,
-  limits: { fileSize: 5 * 1024 * 1024 } // 5MB max size
-});
-
-// All routes are protected with authentication
-router.use(protect);
-
-// Routes for documents
-router.route('/')
-  .get(getUserDocuments);
-
-router.route('/upload')
-  .post(upload.single('document'), uploadDocument);
-
-router.route('/:id')
-  .get(getDocumentById)
-  .delete(deleteDocument);
-
-// Admin only routes
-router.route('/:id/verify')
-  .put(authorize('admin'), verifyDocument);
-
-module.exports = router;
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\routes\financialRoutes.js
-const express = require('express');
-const financialController = require('../controllers/financialController');
-const authMiddleware = require('../middleware/authMiddleware');
-const roleMiddleware = require('../middleware/roleMiddleware');
-
-const router = express.Router();
-
-// GET /api/financials/dashboard - Protected for Financial Manager and Admin
-router.get(
-    '/dashboard',
-    authMiddleware.protect, // Use the protect method, not the entire middleware object
-    roleMiddleware(['financial_manager', 'admin']), // Ensure user has the correct role
-    financialController.getDashboardData
-);
-
-// Add other financial routes here (e.g., expenses, invoices)
-
-
-module.exports = router;
-
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\routes\performanceRoutes.js
-const express = require('express');
-const router = express.Router();
-const { 
-  createPerformanceReview, 
-  getPerformanceReviews, 
-  getPerformanceReviewById, 
-  updatePerformanceReview, 
-  deletePerformanceReview,
-  getMyPerformanceReviews,
-  getPerformanceSummary
-} = require('../controllers/performanceController');
-const { protect, authorize } = require('../middleware/authMiddleware');
-
-// All routes are protected
-router.use(protect);
-
-// Staff routes
-router.get('/my-reviews', getMyPerformanceReviews);
-
-// Admin routes
-router.route('/')
-  .post(authorize('admin'), createPerformanceReview)
-  .get(authorize('admin'), getPerformanceReviews);
-
-router.get('/summary', authorize('admin'), getPerformanceSummary);
-
-router.route('/:id')
-  .get(getPerformanceReviewById) // Access controlled in controller
-  .put(authorize('admin'), updatePerformanceReview)
-  .delete(authorize('admin'), deletePerformanceReview);
-
-module.exports = router;
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\routes\subscriptionPlanRoutes.js
-const express = require('express');
-const router = express.Router();
-const authMiddleware = require('../middleware/authMiddleware');
-const roleMiddleware = require('../middleware/roleMiddleware');
-const subscriptionPlanController = require('../controllers/SubscriptionPlanController');
-
-// GET all subscription plans (public)
-router.get('/', subscriptionPlanController.getSubscriptionPlans);
-
-// POST create a new subscription plan (Financial Manager or Admin only)
-router.post(
-    '/',
-    authMiddleware.protect,
-    roleMiddleware(['financial_manager', 'admin']),
-    subscriptionPlanController.createSubscriptionPlan
-);
-
-// GET a specific subscription plan by ID (public)
-router.get('/:id', subscriptionPlanController.getSubscriptionPlanById);
-
-// PUT update a subscription plan (Financial Manager or Admin only)
-router.put(
-    '/:id',
-    authMiddleware.protect,
-    roleMiddleware(['financial_manager', 'admin']),
-    subscriptionPlanController.updateSubscriptionPlan
-);
-
-// DELETE a subscription plan (Financial Manager or Admin only)
-router.delete(
-    '/:id',
-    authMiddleware.protect,
-    roleMiddleware(['financial_manager', 'admin']),
-    subscriptionPlanController.deleteSubscriptionPlan
-);
-
-module.exports = router;
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\routes\userRoutes.js
-// backend/src/routes/userRoutes.js
-const express = require('express');
-const router = express.Router();
-const { 
-  getUsers, 
-  getUserById, 
-  updateUserProfile, 
-  deleteUser,
-  getUserProfile,
-  deleteUserProfile
-} = require('../controllers/userController');
-const { protect, authorize } = require('../middleware/authMiddleware');
-
-// User profile routes - all users can access their own profile
-router.route('/profile')
-  .get(protect, getUserProfile)
-  .put(protect, updateUserProfile)
-  .delete(protect, deleteUserProfile);
-
-// Admin routes - only accessible by admins
-router.route('/')
-  .get(protect, authorize('admin'), getUsers);
-
-router.route('/:id')
-  .get(protect, authorize('admin'), getUserById)
-  .delete(protect, authorize('admin'), deleteUser);
-
-module.exports = router;
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\routes\userSubscriptionRoutes.js
-const express = require('express');
-const router = express.Router();
-const authMiddleware = require('../middleware/authMiddleware');
-const roleMiddleware = require('../middleware/roleMiddleware');
-const userSubscriptionController = require('../controllers/UserSubscriptionController');
-
-// Middleware for protecting routes
-const { protect } = authMiddleware;
-
-// Middleware for checking roles
-const requireAdminOrFinancialManager = roleMiddleware(['admin', 'financial_manager']);
-
-// Route to get all active subscriptions (Admin/Financial Manager only)
-router.get(
-    '/', 
-    protect, 
-    requireAdminOrFinancialManager, 
-    userSubscriptionController.getAllActiveSubscriptions
-);
-
-// Route to create a new subscription (Admin/Financial Manager only)
-router.post(
-    '/', 
-    protect, 
-    requireAdminOrFinancialManager, 
-    userSubscriptionController.createUserSubscription
-);
-
-// Route to get subscriptions for a specific user (Admin/Financial Manager or the user themselves)
-// TODO: Add logic in controller to check if req.user.id matches :userId for ownership check
-router.get(
-    '/user/:userId', 
-    protect, 
-    // roleMiddleware(['admin', 'financial_manager', 'Resident/Garbage_Buyer', 'staff']), // Allow users to see their own - needs controller logic
-    userSubscriptionController.getUserSubscriptions
-);
-
-// Route to get a single subscription by ID (Admin/Financial Manager or the user themselves)
-// TODO: Add logic in controller to check ownership
-router.get(
-    '/:id', 
-    protect, 
-    // roleMiddleware(['admin', 'financial_manager', 'Resident/Garbage_Buyer', 'staff']), // Allow users to see their own - needs controller logic
-    userSubscriptionController.getUserSubscriptionById
-);
-
-// Route to update a subscription (Admin/Financial Manager only)
-router.put(
-    '/:id', 
-    protect, 
-    requireAdminOrFinancialManager, 
-    userSubscriptionController.updateUserSubscription
-);
-
-// Route to cancel a subscription (Admin/Financial Manager only)
-router.delete(
-    '/:id', 
-    protect, 
-    requireAdminOrFinancialManager, 
-    userSubscriptionController.cancelUserSubscription
-);
-
-module.exports = router;
-
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\scripts\createTestUsers.js
-//
-// Required libraries
-const bcryptjs = require('bcryptjs');  // CHANGE: Use bcryptjs instead of bcrypt
-const mongoose = require('mongoose');   
-const User = require('../models/User');  
-const path = require('path');
-require('dotenv').config({ path: path.resolve(__dirname, '../../.env') });
-
-// Main function to create test users
-const createTestUsers = async () => {
-  try {
-    // Connect to MongoDB using .env file
-    console.log('Connecting to MongoDB...');
-    
-    // Get connection string from environment variable
-    const MONGODB_URI = process.env.MONGODB_URI;
-    
-    if (!MONGODB_URI) {
-      console.error('Error: MONGODB_URI environment variable not set.');
-      process.exit(1); // Exit if connection string is missing
-    }
-    
-    // Hide actual connection details when logging
-    console.log('Using MongoDB connection from environment');
-    await mongoose.connect(MONGODB_URI);
-    console.log('Connected to MongoDB successfully');
-
-    // Define test users with different roles
-    const testUsers = [
-      {
-        name: 'Admin User',
-        email: 'admin@smartbin.com',
-        password: 'Admin123!',
-        role: 'admin'
-      },
-      {
-        name: 'Staff Member',
-        email: 'staff@smartbin.com',
-        password: 'Staff123!',
-        role: 'staff'
-      },
-      {
-        name: 'Financial Manager',
-        email: 'finance@smartbin.com',
-        password: 'Finance123!',
-        role: 'financial_manager'
-      }
-    ];
-
-    // Process each test user
-    for (const user of testUsers) {
-      // Check if user already exists
-      const existingUser = await User.findOne({ email: user.email });
-      
-      if (existingUser) {
-        console.log(`User ${user.email} already exists. Updating role to ${user.role}`);
-        existingUser.role = user.role;
-        await existingUser.save();
-        continue;
-      }
-      
-      // Hash password for new user (USING BCRYPTJS!)
-      const salt = await bcryptjs.genSalt(10);
-      const hashedPassword = await bcryptjs.hash(user.password, salt);
-      
-      // Create new user
-      await User.create({
-        name: user.name,
-        email: user.email,
-        password: hashedPassword,
-        role: user.role
-      });
-      
-      console.log(`Created ${user.role} user: ${user.email}`);
-    }
-
-    console.log('Test users created successfully!');
-  } catch (error) {
-    console.error('Error creating test users:', error.message);
-  } finally {
-    // Always close the connection when done
-    if (mongoose.connection.readyState !== 0) {
-      await mongoose.connection.close();
-      console.log('Database connection closed');
-    }
-  }
-};
-
-// Run the function
-createTestUsers();
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\scripts\recreateUsers.js
-const mongoose = require('mongoose');
-const User = require('../models/User');
-require('dotenv').config({ path: '../../.env' });
-
-const recreateUsers = async () => {
-    try {
-      await mongoose.connect(process.env.MONGODB_URI || 'mongodb+srv://sasindu10:12345@smartbincluster.ij7fd.mongodb.net/smartbin?retryWrites=true&w=majority&appName=SmartBinCluster');
-      console.log('Connected to MongoDB');
-    
-    // Test users with plain-text passwords.
-    const testUsers = [
-      { name: 'Admin User', email: 'admin@smartbin.com', password: 'Admin123!', role: 'admin' },
-      { name: 'Staff Member', email: 'staff@smartbin.com', password: 'Staff123!', role: 'staff' },
-      { name: 'Financial Manager', email: 'finance@smartbin.com', password: 'Finance123!', role: 'financial_manager' }
-    ];
-    
-    // Delete any existing test users
-    for (const user of testUsers) {
-      await User.deleteOne({ email: user.email });
-      console.log(`Deleted user if exists: ${user.email}`);
-    }
-    
-    // Create new users (the pre-save hook will hash the passwords)
-    for (const user of testUsers) {
-      const newUser = await User.create(user);
-      console.log(`Recreated user: ${newUser.email}`);
-    }
-    
-  } catch (error) {
-    console.error('Error:', error.message);
-  } finally {
-    await mongoose.connection.close();
-    console.log('Database connection closed');
-  }
-};
-
-recreateUsers();
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\scripts\seedFinancialData.js
-/**
- * Seed Financial Data Script
- * 
- * This script populates the database with realistic financial data for the SmartBin application.
- * It creates:
- * 1. Subscription plans (if they don't exist)
- * 2. Subscription records for users
- * 3. Payment transactions
- * 4. Expense records
- * 
- * Use for development, testing, and demo purposes.
- */
-
-const mongoose = require('mongoose');
-const path = require('path');
-require('dotenv').config({ path: path.resolve(__dirname, '../../.env') });
-
-// Import models
-const User = require('../models/User');
-const SubscriptionPlan = require('../models/SubscriptionPlan');
-const UserSubscription = require('../models/UserSubscription');
-const Payment = require('../models/Payment');
-const Expense = require('../models/Expense');
-
-// Utility function to generate a random date between two dates
-const randomDate = (start, end) => {
-  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
-};
-
-// Utility function to generate random number between min and max
-const randomNumber = (min, max) => {
-  return Math.floor(Math.random() * (max - min + 1) + min);
-};
-
-// Utility function to get a random element from an array
-const randomElement = (array) => {
-  return array[Math.floor(Math.random() * array.length)];
-};
-
-// Utility function to add days to a date
-const addDays = (date, days) => {
-  const result = new Date(date);
-  result.setDate(result.getDate() + days);
-  return result;
-};
-
-// Utility function to add months to a date
-const addMonths = (date, months) => {
-  const result = new Date(date);
-  result.setMonth(result.getMonth() + months);
-  return result;
-};
-
-// Main seeding function
-const seedFinancialData = async () => {
-  try {
-    // Connect to MongoDB
-    console.log('Connecting to MongoDB...');
-    const MONGODB_URI = process.env.MONGODB_URI;
-    if (!MONGODB_URI) {
-      throw new Error("MONGODB_URI environment variable not set. Please check your .env file.");
-    }
-    
-    await mongoose.connect(MONGODB_URI);
-    console.log('MongoDB Connected');
-
-    // Get financial manager user (needed for expense creation)
-    const financialManager = await User.findOne({ role: 'financial_manager' });
-    if (!financialManager) {
-      console.log('No financial manager found. Please run createTestUsers.js first.');
-      return;
-    }
-
-    // Get all users (residents/customers)
-    const users = await User.find({ role: { $ne: 'admin', $ne: 'financial_manager', $ne: 'staff' } });
-    if (users.length === 0) {
-      // Create some test customer users if none exist
-      console.log('No customer users found. Creating some test customers...');
-      
-      const customerNames = [
-        'John Smith', 'Emma Wilson', 'Michael Brown', 'Sophia Davis', 
-        'William Johnson', 'Olivia Taylor', 'James Miller', 'Ava Anderson',
-        'Robert Thomas', 'Isabella Jackson', 'Daniel White', 'Mia Harris',
-        'David Martinez', 'Charlotte Thompson', 'Joseph Garcia', 'Amelia Robinson'
-      ];
-      
-      for (let i = 0; i < customerNames.length; i++) {
-        const newUser = new User({
-          name: customerNames[i],
-          email: customerNames[i].toLowerCase().replace(' ', '.') + '@example.com',
-          password: '$2a$10$XA9UJn3AJlszUVCjsxAN1uhkZ8qzBqOn9jBp0ZBOg5AfU9Hgu5P5W', // Password123!
-          role: 'Resident/Garbage_Buyer',
-          createdAt: randomDate(new Date(2024, 0, 1), new Date())
-        });
-        
-        await newUser.save();
-        console.log(`Created test customer: ${newUser.name}`);
-      }
-      
-      // Fetch the newly created users
-      users.push(...await User.find({ role: 'Resident/Garbage_Buyer' }));
-    }
-
-    // 1. Create subscription plans if they don't exist
-    console.log('Setting up subscription plans...');
-    
-    const subscriptionPlans = [
-      {
-        name: 'Basic',
-        price: '49.99',
-        description: 'Basic waste collection service with weekly pickup and app access.',
-        duration: 'Monthly'
-      },
-      {
-        name: 'Standard',
-        price: '79.99',
-        description: 'Enhanced service with twice-weekly pickup, recycling options, and advanced app features.',
-        duration: 'Monthly'
-      },
-      {
-        name: 'Premium',
-        price: '99.99',
-        description: 'Premium service with unlimited pickup, priority service, recycling and composting options, and full app features.',
-        duration: 'Monthly'
-      },
-      {
-        name: 'Business',
-        price: '199.99',
-        description: 'Comprehensive waste management solution for small to medium businesses with daily collection and dedicated support.',
-        duration: 'Monthly'
-      }
-    ];
-    
-    // Create plans if they don't exist
-    for (const plan of subscriptionPlans) {
-      const existingPlan = await SubscriptionPlan.findOne({ name: plan.name });
-      
-      if (existingPlan) {
-        console.log(`Subscription plan ${plan.name} already exists.`);
-      } else {
-        await SubscriptionPlan.create(plan);
-        console.log(`Created subscription plan: ${plan.name}`);
-      }
-    }
-    
-    // Get all plans after creation
-    const allPlans = await SubscriptionPlan.find({});
-    
-    // 2. Create user subscriptions
-    console.log('Creating user subscriptions...');
-    
-    // Get current date for subscription calculations
-    const currentDate = new Date(); // Use the actual current date
-    const sixMonthsAgo = new Date(currentDate.getFullYear(), currentDate.getMonth() - 6, currentDate.getDate());
-    
-    // Clear existing user subscriptions 
-    await UserSubscription.deleteMany({});
-    
-    // Create realistic distribution of plans among users
-    for (const user of users) {
-      // Randomly select a plan with weighted distribution
-      // Premium and Business plans are less common
-      const planWeights = [0.4, 0.3, 0.2, 0.1]; // Probabilities for Basic, Standard, Premium, Business
-      const randomValue = Math.random();
-      let cumulativeProbability = 0;
-      let selectedPlanIndex = 0;
-      
-      for (let i = 0; i < planWeights.length; i++) {
-        cumulativeProbability += planWeights[i];
-        if (randomValue <= cumulativeProbability) {
-          selectedPlanIndex = i;
-          break;
-        }
-      }
-      
-      const selectedPlan = allPlans[selectedPlanIndex];
-      
-      // Random start date between 6 months ago and now
-      const startDate = randomDate(sixMonthsAgo, currentDate);
-      
-      // Determine duration based on plan
-      let durationInMonths = 1; // Default monthly
-      
-      if (Math.random() > 0.7) {
-        // 30% chance of longer subscription
-        if (selectedPlan.duration === 'Monthly') {
-          // Some users choose longer terms for monthly plans
-          durationInMonths = randomElement([3, 6, 12]);
-        }
-      }
-      
-      // Calculate end and next billing dates
-      const endDate = addMonths(startDate, durationInMonths);
-      let nextBillingDate = new Date(startDate);
-      
-      // If the subscription would have already ended, create a renewed one
-      if (endDate < currentDate) {
-        // This is a renewal
-        const renewalCycles = Math.floor((currentDate - startDate) / (durationInMonths * 30 * 24 * 60 * 60 * 1000)) + 1;
-        nextBillingDate = addMonths(startDate, durationInMonths * renewalCycles);
-      }
-      
-      // Create the subscription
-      const subscription = new UserSubscription({
-        user: user._id,
-        subscriptionPlan: selectedPlan._id,
-        startDate,
-        endDate: addMonths(nextBillingDate, durationInMonths),
-        status: 'active',
-        autoRenew: Math.random() > 0.1, // 90% have auto-renew on
-        lastBillingDate: startDate,
-        nextBillingDate
-      });
-      
-      await subscription.save();
-      console.log(`Created subscription for user ${user.name}: ${selectedPlan.name} plan`);
-      
-      // Update subscription count on the plan
-      await SubscriptionPlan.findByIdAndUpdate(
-        selectedPlan._id, 
-        { $inc: { subscriberCount: 1 } }
-      );
-    }
-    
-    // 3. Create payment records
-    console.log('Generating payment history...');
-    
-    // Clear existing payments
-    await Payment.deleteMany({});
-    
-    // Get all active subscriptions
-    const activeSubscriptions = await UserSubscription.find({ status: 'active' })
-      .populate('user')
-      .populate('subscriptionPlan');
-    
-    // Generate payment history for each active subscription
-    for (const subscription of activeSubscriptions) {
-      // Calculate how many payment cycles have occurred up to the current date
-      const startDate = new Date(subscription.startDate);
-      // Ensure we cover cycles potentially ending *in* the current month
-      const monthsElapsed = Math.max(0, Math.floor((currentDate.getTime() - startDate.getTime()) / (30 * 24 * 60 * 60 * 1000))); // Approximate months
-      const paymentCyclesToGenerate = monthsElapsed + 1; // Generate for current cycle too
-
-      // Generate a payment for each billing cycle that has occurred or is current
-      for (let i = 0; i < paymentCyclesToGenerate; i++) {
-        const paymentDate = addMonths(startDate, i);
-
-        // Only create payments up to the current date
-        if (paymentDate > currentDate) continue;
-        
-        // Determine payment amount based on plan price
-        const price = parseFloat(subscription.subscriptionPlan.price);
-        if (isNaN(price)) {
-          console.error(`Invalid price for subscription plan: ${subscription.subscriptionPlan.name}`);
-          continue; // Skip this payment if the price is invalid
-        }
-        const amount = price;
-        
-        // Generate some overdue and pending payments (10% chance)
-        const status = Math.random() > 0.9 
-          ? randomElement(['pending', 'failed']) 
-          : 'completed';
-        
-        // Create payment record
-        const payment = new Payment({
-          user: subscription.user._id,
-          amount,
-          description: `${subscription.subscriptionPlan.name} Plan - ${subscription.subscriptionPlan.duration}`,
-          paymentDate,
-          status,
-          paymentMethod: randomElement(['credit_card', 'debit_card', 'bank_transfer', 'paypal']),
-          subscriptionPlan: subscription.subscriptionPlan._id
-        });
-        
-        await payment.save();
-      }
-      
-      console.log(`Created payment history for ${subscription.user.name}`);
-    }
-    
-    // Guarantee at least 3 completed payments for the current month
-    const currentMonthStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
-    const validPlans = allPlans.filter(p => !isNaN(parseFloat(p.price)));
-    for (let i = 0; i < 3; i++) {
-      const randomUser = randomElement(users);
-      const randomPlan = randomElement(validPlans);
-      if (!randomPlan) continue; // skip if no valid plan
-      const payment = new Payment({
-        user: randomUser._id,
-        amount: parseFloat(randomPlan.price),
-        description: `${randomPlan.name} Plan - ${randomPlan.duration}`,
-        paymentDate: addDays(currentMonthStart, Math.floor(Math.random() * (currentDate.getDate()))),
-        status: 'completed',
-        paymentMethod: randomElement(['credit_card', 'debit_card', 'bank_transfer', 'cash', 'paypal', 'other']),
-        subscriptionPlan: randomPlan._id
-      });
-      await payment.save();
-    }
-    
-    // 4. Create some one-time payments not related to subscriptions
-    console.log('Generating one-time payments...');
-
-    // Define default one-time payment descriptions
-    const oneTimePaymentDescriptions = [
-      'Service fee',
-      'Consultation fee',
-      'Setup fee',
-      'Installation fee',
-      'Penalty fee'
-    ];
-
-    // Generate a larger variety of one-time payments for diverse revenue streams
-    const oneTimePaymentCount = 100;
-    for (let i = 0; i < oneTimePaymentCount; i++) {
-      const randomUser = randomElement(users);
-      const paymentDate = randomDate(sixMonthsAgo, currentDate);
-      const amount = randomNumber(30, 500); // expanded range for larger payments
-      const oneTimeDescriptions = [
-        ...oneTimePaymentDescriptions,
-        'Emergency pickup service',
-        'Late payment fee',
-        'Bulk waste disposal fee',
-        'Additional recycling service'
-      ];
-      const payment = new Payment({
-        user: randomUser._id,
-        amount,
-        description: randomElement(oneTimeDescriptions),
-        paymentDate,
-        status: randomElement(['completed','completed','completed','pending','failed']),
-        paymentMethod: randomElement(['credit_card', 'debit_card', 'bank_transfer', 'cash', 'paypal', 'other']),
-        subscriptionPlan: null
-      });
-      
-      await payment.save();
-    }
-    
-    console.log('Created one-time payments');
-    
-    // 5. Create expense records
-    console.log('Generating expense records...');
-    
-    // Clear existing expenses
-    await Expense.deleteMany({});
-    
-    // Define expense categories and their relative frequencies and ranges
-    const expenseCategories = [
-      { category: 'fuel', frequency: 0.15, min: 200, max: 800 },
-      { category: 'maintenance', frequency: 0.15, min: 100, max: 1000 },
-      { category: 'salaries', frequency: 0.3, min: 1500, max: 5000 },
-      { category: 'utilities', frequency: 0.1, min: 300, max: 800 },
-      { category: 'equipment', frequency: 0.1, min: 200, max: 2000 },
-      { category: 'office', frequency: 0.05, min: 50, max: 300 },
-      { category: 'rent', frequency: 0.05, min: 1000, max: 3000 },
-      { category: 'marketing', frequency: 0.05, min: 200, max: 1500 },
-      { category: 'insurance', frequency: 0.03, min: 500, max: 2000 },
-      { category: 'taxes', frequency: 0.02, min: 500, max: 5000 },
-    ];
-    
-    // Expense descriptions for each category
-    const expenseDescriptions = {
-      fuel: ['Vehicle refueling', 'Truck fleet fuel', 'Collection vehicle diesel', 'Transportation fuel'],
-      maintenance: ['Vehicle maintenance', 'Equipment repair', 'Bin repair services', 'Facility maintenance', 'Machinery servicing'],
-      salaries: ['Staff payroll', 'Employee benefits', 'Contractor payments', 'Overtime payments', 'Management salaries'],
-      utilities: ['Electricity bill', 'Water services', 'Internet and phone', 'Gas bill', 'Waste facility utilities'],
-      equipment: ['New sorting equipment', 'Replacement bins', 'Office equipment', 'Safety equipment', 'Processing machinery'],
-      office: ['Office supplies', 'Stationery', 'Cleaning supplies', 'Break room supplies', 'Small equipment'],
-      rent: ['Office space rent', 'Warehouse rental', 'Storage facility', 'Equipment leasing', 'Temporary space rental'],
-      marketing: ['Promotional materials', 'Digital advertising', 'Community outreach', 'Website maintenance', 'Marketing campaign'],
-      insurance: ['Vehicle insurance', 'Liability coverage', 'Property insurance', 'Worker compensation', 'Business insurance'],
-      taxes: ['Property tax', 'Business tax payment', 'Regulatory fees', 'Environmental compliance fees', 'Local taxes']
-    };
-    
-    // Generate monthly expenses for each category for the past 12 months up to the current month
-    const firstExpenseMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() - 11, 1); // Start 11 months before
-
-    for (let monthOffset = 0; monthOffset <= 11; monthOffset++) {
-      const targetMonthDate = addMonths(firstExpenseMonth, monthOffset);
-      // Ensure we don't generate for future months beyond the current one
-      if (targetMonthDate.getFullYear() > currentDate.getFullYear() || 
-          (targetMonthDate.getFullYear() === currentDate.getFullYear() && targetMonthDate.getMonth() > currentDate.getMonth())) {
-          continue;
-      }
-
-      // For each expense category
-      for (const expenseCat of expenseCategories) {
-        // Create 2-5 expenses per category per month for richer data
-        const numExpenses = randomNumber(2, 5);
-
-        for (let i = 0; i < numExpenses; i++) {
-          // Generate a random date within the target month, but not exceeding the current date
-          const daysInMonth = new Date(targetMonthDate.getFullYear(), targetMonthDate.getMonth() + 1, 0).getDate();
-          const randomDay = randomNumber(1, daysInMonth);
-          let expenseDate = new Date(targetMonthDate.getFullYear(), targetMonthDate.getMonth(), randomDay);
-
-          // If this is the current month, ensure the date is not in the future
-          if (targetMonthDate.getFullYear() === currentDate.getFullYear() && targetMonthDate.getMonth() === currentDate.getMonth()) {
-            expenseDate.setDate(Math.min(randomDay, currentDate.getDate()));
-          }
-          
-          // Ensure expenseDate is not before sixMonthsAgo (optional, but keeps consistency)
-          if (expenseDate < sixMonthsAgo) expenseDate = new Date(sixMonthsAgo);
-
-          const amount = randomNumber(expenseCat.min, expenseCat.max);
-          const description = randomElement(expenseDescriptions[expenseCat.category]);
-          
-          const expense = new Expense({
-            category: expenseCat.category,
-            amount,
-            description: `${description} - ${expenseDate.toLocaleDateString('en-US', { month: 'long' })}`,
-            date: expenseDate,
-            createdBy: financialManager._id,
-            status: randomElement(['approved', 'approved', 'approved', 'approved', 'pending']), // 80% approved
-            paymentMethod: randomElement(['company_account', 'credit_card', 'bank_transfer'])
-          });
-          
-          await expense.save();
-        }
-      }
-      
-      console.log(`Created expenses for ${targetMonthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}`);
-    }
-    
-    // Guarantee at least 3 approved expenses for the current month
-    const expenseCategoriesList = ['fuel', 'maintenance', 'salaries', 'utilities', 'equipment', 'office', 'rent', 'marketing', 'insurance', 'taxes'];
-    for (let i = 0; i < 3; i++) {
-      const expense = new Expense({
-        category: randomElement(expenseCategoriesList),
-        amount: randomNumber(200, 2000),
-        description: `Seeded expense for dashboard (${i + 1})`,
-        date: addDays(currentMonthStart, Math.floor(Math.random() * (currentDate.getDate()))),
-        createdBy: financialManager._id,
-        status: 'approved',
-        paymentMethod: randomElement(['company_account', 'credit_card', 'bank_transfer'])
-      });
-      await expense.save();
-    }
-    
-    // Calculate and log summary statistics
-    const totalPayments = await Payment.countDocuments();
-    const totalExpenses = await Expense.countDocuments();
-    const activeSubscriptionsCount = await UserSubscription.countDocuments({ status: 'active' });
-    
-    console.log('\n=== Financial Data Seeding Complete ===');
-    console.log(`Created ${totalPayments} payment records`);
-    console.log(`Created ${totalExpenses} expense records`);
-    console.log(`Set up ${activeSubscriptionsCount} active subscriptions`);
-    console.log('\nYour dashboard should now be populated with realistic data!');
-    
-  } catch (error) {
-    console.error('Error seeding financial data:', error);
-  } finally {
-    // Close database connection
-    if (mongoose.connection.readyState !== 0) {
-      await mongoose.connection.close();
-      console.log('Database connection closed');
-    }
-  }
-};
-
-// Run the seeding function
-seedFinancialData();
-
-
-
-// File: C:\y2s2ITP\SmartBin\backend\src\scripts\verifyPasswords.js
-const mongoose = require('mongoose');
-const bcryptjs = require('bcryptjs');
-const User = require('../models/User');
-
-const verifyPasswords = async () => {
-  try {
-    // Connect to MongoDB
-    await mongoose.connect('mongodb+srv://sasindu10:12345@smartbincluster.ij7fd.mongodb.net/smartbin?retryWrites=true&w=majority&appName=SmartBinCluster');
-    console.log('Connected to MongoDB');
-    
-    // Test credentials
-    const testUsers = [
-      { email: 'admin@smartbin.com', password: 'Admin123!' },
-      { email: 'staff@smartbin.com', password: 'Staff123!' },
-      { email: 'finance@smartbin.com', password: 'Finance123!' }
-    ];
-    
-    for (const user of testUsers) {
-      // Find user and explicitly select password
-      const foundUser = await User.findOne({ email: user.email }).select('+password');
-      
-      if (!foundUser) {
-        console.log(`❌ User not found: ${user.email}`);
-        continue;
-      }
-      
-      console.log(`Found user: ${foundUser.email} (${foundUser.role})`);
-      console.log(`Password hash: ${foundUser.password ? foundUser.password.substring(0, 20) + '...' : 'NO PASSWORD FOUND'}`);
-      
-      // Direct bcryptjs comparison
-      if (foundUser.password) {
-        const passwordMatches = await bcryptjs.compare(user.password, foundUser.password);
-        console.log(`Password direct comparison: ${passwordMatches ? '✅ MATCH' : '❌ NO MATCH'}`);
-      } else {
-        console.log('⚠️ No password hash found for comparison');
-      }
-      
-      console.log('-------------------');
-    }
-    
-    mongoose.connection.close();
-  } catch (error) {
-    console.error('Error:', error);
-    mongoose.connection.close();
-  }
-};
-
-verifyPasswords();
-
-
-
diff --git a/all_the_frontend_code.txt b/all_the_frontend_code.txt
deleted file mode 100644
index c373fb6..0000000
--- a/all_the_frontend_code.txt
+++ /dev/null
@@ -1,5552 +0,0 @@
-// File: c:\y2s2ITP\SmartBin\frontend\package.json
-{
-  "name": "frontend",
-  "private": true,
-  "version": "0.0.0",
-  "type": "module",
-  "scripts": {
-    "dev": "vite",
-    "build": "vite build",
-    "lint": "eslint .",
-    "preview": "vite preview"
-  },
-  "dependencies": {
-    "axios": "^1.8.4",
-    "chart.js": "^4.4.9",
-    "react": "^19.0.0",
-    "react-chartjs-2": "^5.3.0",
-    "react-dom": "^19.0.0",
-    "react-router-dom": "^7.4.0"
-  },
-  "devDependencies": {
-    "@eslint/js": "^9.21.0",
-    "@types/react": "^19.0.10",
-    "@types/react-dom": "^19.0.4",
-    "@vitejs/plugin-react": "^4.3.4",
-    "eslint": "^9.21.0",
-    "eslint-plugin-react-hooks": "^5.1.0",
-    "eslint-plugin-react-refresh": "^0.4.19",
-    "globals": "^15.15.0",
-    "vite": "^6.2.0"
-  }
-}
-
-
-
-
-// File: c:\y2s2ITP\SmartBin\frontend\index.html
-<!doctype html>
-<html lang="en">
-  <head>
-    <meta charset="UTF-8" />
-    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
-    <title>SmartBin</title>
-  </head>
-  <body>
-    <div id="root"></div>
-    <script type="module" src="/src/main.jsx"></script>
-  </body>
-</html>
-
-
-
-
-// File: c:\y2s2ITP\SmartBin\frontend\vite.config.js
-import { defineConfig } from 'vite'
-import react from '@vitejs/plugin-react'
-
-// https://vite.dev/config/
-export default defineConfig({
-  plugins: [react()],
-})
-
-
-
-
-// File: c:\y2s2ITP\SmartBin\frontend\eslint.config.js
-import js from '@eslint/js'
-import globals from 'globals'
-import reactHooks from 'eslint-plugin-react-hooks'
-import reactRefresh from 'eslint-plugin-react-refresh'
-
-export default [
-  { ignores: ['dist'] },
-  {
-    files: ['**/*.{js,jsx}'],
-    languageOptions: {
-      ecmaVersion: 2020,
-      globals: globals.browser,
-      parserOptions: {
-        ecmaVersion: 'latest',
-        ecmaFeatures: { jsx: true },
-        sourceType: 'module',
-      },
-    },
-    plugins: {
-      'react-hooks': reactHooks,
-      'react-refresh': reactRefresh,
-    },
-    rules: {
-      ...js.configs.recommended.rules,
-      ...reactHooks.configs.recommended.rules,
-      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
-      'react-refresh/only-export-components': [
-        'warn',
-        { allowConstantExport: true },
-      ],
-    },
-  },
-]
-
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\dashboard\Header.css
-/* frontend/src/components/dashboard/Header.css */
-/* Dashboard Header - Reset and fix */
-.dashboard-header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  width: 100%;
-  height: 70px;
-  background-color: #3e4b2e; /* Updated to match sidebar color */
-  border-bottom: 1px solid #4a5a37;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-  padding: 0 25px;
-  box-sizing: border-box;
-  position: sticky;
-  top: 0;
-  z-index: 100;
-}
-
-/* Left side with title */
-.header-left {
-  display: flex;
-  align-items: center;
-}
-
-.header-left h2 {
-  margin: 0;
-  font-size: 1.2rem;
-  color: #ffffff; /* Updated for better contrast */
-}
-
-/* Right side with user info and logout */
-.header-right {
-  display: flex;
-  align-items: center;
-  margin-left: auto; /* This pushes it to the right */
-}
-
-/* User information container */
-.user-info {
-  display: flex;
-  flex-direction: column;
-  margin-right: 15px;
-  text-align: right;
-}
-
-/* Username display */
-.user-info span:first-child {
-  font-weight: 500;
-  color: #ffffff; /* Updated for better contrast */
-}
-
-/* User role display */
-.user-role {
-  font-size: 0.8rem;
-  color: #e0e0e0; /* Updated for better contrast */
-}
-
-/* Logout button */
-.logout-button {
-  padding: 6px 12px;
-  background-color: #4ea14a; /* Updated to match theme */
-  color: white;
-  border: none;
-  border-radius: 4px;
-  cursor: pointer;
-  transition: background-color 0.3s;
-}
-
-.logout-button:hover {
-  background-color: #3c8a38; /* Darker version for hover */
-}
-
-.user-menu {
-  display: flex;
-  align-items: center;
-}
-
-.user-menu .user-info {
-  margin-right: 15px;
-  text-align: right;
-}
-
-.user-menu .username {
-  font-weight: 500;
-  color: #ffffff; /* Updated for better contrast */
-}
-
-.user-menu .role {
-  font-size: 0.8rem;
-  color: #e0e0e0; /* Updated for better contrast */
-}
-
-.user-menu button {
-  background-color: #4ea14a; /* Updated to match theme */
-  color: white;
-  border: none;
-  padding: 8px 15px;
-  border-radius: 4px;
-  cursor: pointer;
-  transition: background-color 0.3s;
-}
-
-.user-menu button:hover {
-  background-color: #3c8a38; /* Darker version for hover */
-}
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\dashboard\Header.jsx
-// frontend/src/components/dashboard/Header.jsx
-import React from 'react';
-import { useAuth } from '../../contexts/AuthContext';
-import './Header.css';
-
-function Header() {
-  const { user, logout } = useAuth();
-
-  return (
-    <header className="dashboard-header">
-      <div className="header-left">
-        <h2>SmartBin Dashboard</h2>
-      </div>
-      
-      <div className="header-right">
-        <div className="user-info">
-          <span>{user?.name || 'User'}</span>
-          <span className="user-role">{user?.role || 'Guest'}</span>
-        </div>
-        <button onClick={logout} className="logout-button">Logout</button>
-      </div>
-    </header>
-  );
-}
-
-export default Header;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\dashboard\Sidebar.css
-/* Google Fonts - Poppins */
-@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap");
-
-* {
-    margin: 0;
-    padding: 0;
-    box-sizing: border-box;
-    font-family: "Poppins", sans-serif;
-}
-
-body {
-    min-height: 100%;
-    background: #f3f5f0;
-}
-
-nav .sidebar {
-    position: fixed;
-    top: 0;
-    left: 0;
-    height: 100%;
-    width: 260px;
-    padding: 20px 0;
-    background-color: #c3ceb6;
-    box-shadow: 0 5px 1px rgba(27, 27, 27, 0.1);
-    transition: all 0.4s ease;
-    text-decoration: none;
-}
-
-.sidebar .logo {
-    display: flex;
-    align-items: center;
-    margin: 0 24px 30px;
-    cursor: pointer;
-}
-
-.logo .logo-name {
-    color: #141a17;
-    font-size: 22px;
-    font-weight: 500;
-    margin-left: 20px;
-}
-
-.sidebar .sidebar-content {
-    display: flex;
-    height: 100%;
-    flex-direction: column;
-    justify-content: space-between;
-    padding: 30px 16px;
-}
-
-.sidebar-content .list {
-    list-style: none;
-    padding: 0;
-    margin: 0;
-}
-
-.sidebar-content .list-item {
-    list-style: none;
-    margin: 8px 0;
-    border-radius: 12px; 
-    width: 90%;
-    height: 50px;
-    border: 2px solid transparent;
-    cursor: pointer;
-}
-
-.sidebar-content .list-item a {
-    display: flex;
-    align-items: center;
-    padding: 14px 16px;
-    background-color: #88afa1;
-    border-radius: 12px;
-    height: 100%;
-    text-decoration: none;
-    transition: background-color 0.3s ease, transform 0.2s ease;
-}
-
-.sidebar-content .list-item:hover a {
-    background-color: rgb(130, 150, 106);
-    transform: scale(1.02);
-}
-
-/* Update the nav-icon style to make icons more visible */
-.nav-icon {
-    margin-right: 14px;
-    font-size: 20px;
-    color: #141a17; /* Dark color for visibility */
-    transition: color 0.3s ease;
-    display: inline-block; /* Ensure proper display */
-    width: 20px;
-    text-align: center;
-}
-
-/* Also ensure FontAwesome icons are properly sized and visible */
-.sidebar-content .list-item a .nav-icon {
-    display: inline-block;
-    width: 20px;
-    text-align: center;
-}
-
-/* Ensure active nav items show icons clearly */
-.sidebar-content .list-item a.active .nav-icon {
-    color: #141a17;
-}
-
-.link {
-    font-size: 16px;
-    color: #141a17;
-    font-weight: 400;
-}
-
-.sidebar-content .list-item:hover .nav-icon {
-    color: #141a17;
-}
-
-.bottom-content {
-    margin-top: auto;
-    padding-top: 20px;
-}
-
-.social-icons {
-    display: flex;
-    justify-content: space-between;
-    align-items: center;
-    margin: 10px 0 10px 10px;
-    padding-right: 30px;
-}
-
-.social-icons .icon {
-    font-size: 24px;
-    color: #4ea14a;
-    margin-right: 10px;
-    transition: color 0.3s ease;
-}
-
-/* Make social icons more visible too */
-.social-icons .icon svg {
-    width: 24px;
-    height: 24px;
-    display: inline-block;
-}
-
-.social-icons .icon svg path {
-    fill: #4ea14a !important;
-}
-
-.social-icons .icon:hover {
-    color: #141a17;
-}
-
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\dashboard\Sidebar.jsx
-// frontend/src/components/dashboard/Sidebar.jsx
-import React from 'react';
-import { Link, useLocation } from 'react-router-dom';
-import { useAuth } from '../../contexts/AuthContext';
-import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
-import { library } from '@fortawesome/fontawesome-svg-core';
-import { 
-  faFacebook, 
-  faInstagram, 
-  faTwitter
-} from "@fortawesome/free-brands-svg-icons";
-
-import {
-  faGaugeHigh,
-  faFileLines,
-  faMoneyBillTransfer,
-  faUser,
-  faCreditCard,
-  faChartLine,
-  faCalendarDays,
-  faMoneyBill,
-  faFileSignature,
-  faTruck,
-  faRecycle,
-  faScroll,
-  faUsers,
-  faCog,
-  faClipboardList,
-  faListCheck,
-  faTrophy
-} from "@fortawesome/free-solid-svg-icons";
-
-library.add(
-  faFacebook, 
-  faInstagram, 
-  faTwitter,
-  faGaugeHigh,
-  faFileLines,
-  faMoneyBillTransfer,
-  faUser,
-  faCreditCard,
-  faChartLine,
-  faCalendarDays,
-  faMoneyBill,
-  faFileSignature,
-  faTruck,
-  faRecycle,
-  faScroll,
-  faUsers,
-  faCog,
-  faClipboardList,
-  faListCheck,
-  faTrophy
-);
-
-import './Sidebar.css';
-
-function Sidebar() {
-  const { user } = useAuth();
-  const location = useLocation();
-
-  // Define navigation items with FontAwesome icons
-  const getNavItems = () => {
-    const commonItems = [
-      { path: '/dashboard', label: 'Dashboard', icon: faGaugeHigh },
-      { path: '/dashboard/profile', label: 'My Profile', icon: faUser },
-    ];
-
-    const roleSpecificItems = {
-      'Resident/Garbage_Buyer': [
-        { path: '/dashboard/collection-history', label: 'Collection History', icon: faCalendarDays },
-        { path: '/dashboard/financial-history', label: 'Financial History', icon: faMoneyBill },
-        { path: '/dashboard/complaints', label: 'Complaints', icon: faFileSignature },
-        { path: '/dashboard/pickup-requests', label: 'Pickup Requests', icon: faTruck },
-        { path: '/dashboard/available-garbage', label: 'Available Garbage', icon: faRecycle },
-        { path: '/dashboard/purchase-history', label: 'Purchase History', icon: faScroll },
-      ],
-      admin: [
-        { path: '/dashboard/users', label: 'User Management', icon: faUsers },
-        { path: '/dashboard/statistics', label: 'Statistics', icon: faChartLine },
-        { path: '/dashboard/settings', label: 'System Settings', icon: faCog },
-      ],
-      // Maintaining the database role name format (with underscore)
-      financial_manager: [
-        { path: '/dashboard/subscription-plans', label: 'Subscription Plans', icon: faFileLines },
-        { path: '/dashboard/budget-allocation', label: 'Budget Allocation', icon: faMoneyBillTransfer },
-        { path: '/dashboard/salary', label: 'Salary', icon: faUser },
-        { path: '/dashboard/payments', label: 'Payments', icon: faCreditCard },
-      ],
-      staff: [
-        { path: '/dashboard/attendance', label: 'Attendance', icon: faClipboardList },
-        { path: '/dashboard/tasks', label: 'Tasks', icon: faListCheck },
-        { path: '/dashboard/performance', label: 'Performance', icon: faTrophy },
-      ],
-    };
-
-    return [
-      ...commonItems,
-      ...(roleSpecificItems[user?.role] || []),
-    ];
-  };
-
-  const navItems = getNavItems();
-
-  return (
-    <nav>
-      <div className="sidebar">
-        <div className="logo">
-          <img src="#" alt="logo" className="logo-img" />
-          <span className="logo-name">SmartBin</span>
-        </div>
-        
-        <div className="sidebar-content">
-          <ul className="list">
-            {navItems.map((item) => (
-              <li key={item.path} className="list-item">
-                <Link 
-                  to={item.path} 
-                  className={`nav-link ${location.pathname === item.path ? 'active' : ''}`}
-                >
-                  <FontAwesomeIcon icon={item.icon} className="nav-icon" />
-                  <span className="link">{item.label}</span>
-                </Link>
-              </li>
-            ))}
-            {/* Removed duplicate conditional rendering block */}
-          </ul>
-          
-          <div className="bottom-content">
-            <div className="social-icons">
-              <a href="#" className="icon"><FontAwesomeIcon icon={faFacebook} /></a>
-              <a href="#" className="icon"><FontAwesomeIcon icon={faInstagram} /></a>
-              <a href="#" className="icon"><FontAwesomeIcon icon={faTwitter} /></a>
-            </div>
-          </div>
-        </div>
-      </div>
-    </nav>
-  );
-}
-
-export default Sidebar;
-
-
-
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\financial\FinancialDashboard.css
-.financial-dashboard {
-    padding: 20px;
-    background-color: #f5f7fa;
-    border-radius: 8px;
-    color: #333;
-}
-
-.dashboard-header {
-    display: flex;
-    justify-content: space-between;
-    align-items: center;
-    margin-bottom: 20px;
-}
-
-.dashboard-header h2 {
-    margin: 0;
-    font-size: 1.8rem;
-    color: #2c3e50;
-}
-
-.dashboard-controls {
-    display: flex;
-    gap: 15px;
-    align-items: center;
-}
-
-.date-range-selector {
-    display: flex;
-    align-items: center;
-    gap: 10px;
-}
-
-.date-range-selector label {
-    font-weight: 500;
-}
-
-.date-range-selector select {
-    padding: 8px 12px;
-    border: 1px solid #ddd;
-    border-radius: 4px;
-    background-color: white;
-    font-size: 0.9rem;
-}
-
-.export-btn {
-    padding: 8px 16px;
-    background-color: #3e4b2e;
-    color: white;
-    border: none;
-    border-radius: 4px;
-    cursor: pointer;
-    font-size: 0.9rem;
-    transition: background-color 0.2s;
-}
-
-.export-btn:hover {
-    background-color: #4a5a37;
-}
-
-.dashboard-tabs {
-    display: flex;
-    border-bottom: 1px solid #ddd;
-    margin-bottom: 20px;
-    overflow-x: auto;
-}
-
-.dashboard-tabs button {
-    padding: 10px 20px;
-    background: none;
-    border: none;
-    border-bottom: 2px solid transparent;
-    font-size: 1rem;
-    cursor: pointer;
-    transition: all 0.2s;
-    color: #777;
-    white-space: nowrap;
-}
-
-.dashboard-tabs button:hover {
-    color: #3e4b2e;
-}
-
-.dashboard-tabs button.active {
-    color: #3e4b2e;
-    border-bottom: 2px solid #3e4b2e;
-    font-weight: 500;
-}
-
-.dashboard-grid {
-    display: grid;
-    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
-    gap: 20px;
-    margin-bottom: 30px;
-}
-
-.dashboard-card {
-    background-color: white;
-    padding: 20px;
-    border-radius: 8px;
-    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-    text-align: center;
-    transition: transform 0.2s, box-shadow 0.2s;
-}
-
-.dashboard-card:hover {
-    transform: translateY(-5px);
-    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
-}
-
-.dashboard-card h3 {
-    margin-top: 0;
-    margin-bottom: 10px;
-    font-size: 1rem;
-    color: #555;
-}
-
-.dashboard-card p {
-    font-size: 1.8rem;
-    font-weight: bold;
-    color: #3e4b2e;
-    margin: 0;
-    margin-bottom: 5px;
-}
-
-.dashboard-card.highlight p {
-    color: #3498db;
-}
-
-.card-subtitle {
-    font-size: 0.8rem;
-    color: #777;
-}
-
-.dashboard-charts {
-    margin-bottom: 30px;
-}
-
-.chart-container {
-    background-color: white;
-    border-radius: 8px;
-    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-    padding: 20px;
-}
-
-.chart-container h3 {
-    margin-top: 0;
-    margin-bottom: 15px;
-    font-size: 1.1rem;
-    color: #2c3e50;
-}
-
-.chart-wrapper {
-    height: 300px;
-    position: relative;
-}
-
-.recent-transactions, .subscription-plans {
-    background-color: white;
-    border-radius: 8px;
-    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-    padding: 20px;
-    margin-bottom: 30px;
-}
-
-.recent-transactions h3, .subscription-plans h3 {
-    margin-top: 0;
-    margin-bottom: 15px;
-    font-size: 1.1rem;
-    color: #2c3e50;
-}
-
-.table-container {
-    overflow-x: auto;
-}
-
-.data-table {
-    width: 100%;
-    border-collapse: collapse;
-    font-size: 0.9rem;
-}
-
-.data-table th, .data-table td {
-    padding: 12px 15px;
-    text-align: left;
-    border-bottom: 1px solid #eee;
-}
-
-.data-table th {
-    background-color: #f8f9fa;
-    color: #555;
-    font-weight: 500;
-}
-
-.data-table tbody tr:hover {
-    background-color: #f5f5f5;
-}
-
-.status {
-    display: inline-block;
-    padding: 3px 8px;
-    border-radius: 12px;
-    font-size: 0.8rem;
-    text-transform: capitalize;
-}
-
-.status.completed {
-    background-color: #d4edda;
-    color: #155724;
-}
-
-.status.pending {
-    background-color: #fff3cd;
-    color: #856404;
-}
-
-.status.failed {
-    background-color: #f8d7da;
-    color: #721c24;
-}
-
-.view-all {
-    margin-top: 15px;
-    text-align: center;
-}
-
-.view-all-btn {
-    padding: 8px 16px;
-    background-color: transparent;
-    color: #3e4b2e;
-    border: 1px solid #3e4b2e;
-    border-radius: 4px;
-    cursor: pointer;
-    font-size: 0.9rem;
-    transition: all 0.2s;
-}
-
-.view-all-btn:hover {
-    background-color: #3e4b2e;
-    color: white;
-}
-
-.loading, .error {
-    padding: 20px;
-    text-align: center;
-    font-size: 1.1rem;
-    background-color: white;
-    border-radius: 8px;
-    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-.error {
-    color: #dc3545;
-}
-
-/* Add this after the .error style */
-
-.no-data-message {
-    height: 300px;
-    display: flex;
-    align-items: center;
-    justify-content: center;
-    background-color: #f9f9f9;
-    border-radius: 6px;
-    border: 1px dashed #ccc;
-}
-
-.no-data-message p {
-    font-size: 1.1rem;
-    color: #777;
-    text-align: center;
-    padding: 20px;
-}
-
-/* Responsive adjustments */
-@media (max-width: 768px) {
-    .dashboard-header {
-        flex-direction: column;
-        align-items: flex-start;
-        gap: 15px;
-    }
-    
-    .dashboard-grid {
-        grid-template-columns: 1fr;
-    }
-    
-    .dashboard-controls {
-        width: 100%;
-        flex-direction: column;
-        align-items: flex-start;
-    }
-    
-    .date-range-selector, .date-range-selector select {
-        width: 100%;
-    }
-    
-    .export-btn {
-        width: 100%;
-    }
-}
-
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\financial\FinancialDashboard.jsx
-import React, { useState, useEffect, useContext } from 'react';
-import AuthContext from '../../contexts/AuthContext';
-import api from '../../services/api';
-import { Line, Bar, Doughnut } from 'react-chartjs-2';
-import {
-  Chart as ChartJS,
-  CategoryScale,
-  LinearScale,
-  PointElement,
-  LineElement,
-  BarElement,
-  ArcElement,
-  Title,
-  Tooltip,
-  Legend,
-  Colors
-} from 'chart.js';
-import './FinancialDashboard.css';
-
-ChartJS.register(
-  CategoryScale,
-  LinearScale,
-  PointElement,
-  LineElement,
-  BarElement,
-  ArcElement,
-  Title,
-  Tooltip,
-  Legend,
-  Colors
-);
-
-const formatCurrency = (amount) => {
-  const numericAmount = Number(amount);
-  if (isNaN(numericAmount)) {
-    return '$0.00';
-  }
-  return new Intl.NumberFormat('en-US', {
-    style: 'currency',
-    currency: 'USD'
-  }).format(numericAmount);
-};
-
-const formatDate = (dateString) => {
-  if (!dateString) return 'N/A';
-  try {
-    return new Date(dateString).toLocaleDateString('en-US', {
-      year: 'numeric',
-      month: 'short',
-      day: 'numeric'
-    });
-  } catch (error) {
-    console.error("Error formatting date:", error);
-    return 'Invalid Date';
-  }
-};
-
-const FinancialDashboard = () => {
-  const [dashboardData, setDashboardData] = useState(null);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState(null);
-  const [dateRange, setDateRange] = useState('month');
-  const [activeTab, setActiveTab] = useState('overview');
-  const { user } = useContext(AuthContext);
-
-  useEffect(() => {
-    const fetchDashboardData = async () => {
-      if (!user || (user.role !== 'financial_manager' && user.role !== 'admin')) {
-        setError('Access Denied');
-        setLoading(false);
-        return;
-      }
-      try {
-        setLoading(true);
-        const response = await api.get(`/financials/dashboard?range=${dateRange}`);
-        setDashboardData(response.data);
-        setError(null);
-      } catch (err) {
-        console.error("Error fetching financial dashboard data:", err);
-        setError(err.response?.data?.message || 'Failed to fetch dashboard data');
-      } finally {
-        setLoading(false);
-      }
-    };
-
-    fetchDashboardData();
-  }, [user, dateRange]);
-
-  const prepareChartData = () => {
-    if (!dashboardData) {
-      return { revenueExpenseData: {}, planRevenueData: {}, expenseCategoryData: {}, planSubscriptionData: {} };
-    }
-
-    // Generate complete set of labels based on date range
-    let completeLabels = [];
-    let revenueTrendMap = new Map();
-    let expenseTrendMap = new Map();
-
-    // Convert existing data to maps for easy lookup
-    (dashboardData.trends?.revenue || []).forEach(item => revenueTrendMap.set(item.month, item.total));
-    (dashboardData.trends?.expenses || []).forEach(item => expenseTrendMap.set(item.month, item.total));
-
-    const today = new Date();
-    
-    // Generate complete set of labels based on dateRange
-    if (dateRange === 'month') {
-      // For month: days 1-current day of month
-      const daysInMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();
-      const currentDay = Math.min(today.getDate(), daysInMonth);
-      
-      for (let i = 1; i <= currentDay; i++) {
-        const dayStr = i.toString();
-        completeLabels.push(dayStr);
-        if (!revenueTrendMap.has(dayStr)) revenueTrendMap.set(dayStr, 0);
-        if (!expenseTrendMap.has(dayStr)) expenseTrendMap.set(dayStr, 0);
-      }
-    } else if (dateRange === 'last3months') {
-      // For last 3 months: get the previous 3 months including current
-      const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
-      const currentMonth = today.getMonth();
-      const currentYear = today.getFullYear();
-      
-      // Loop through the last 3 months (including current)
-      for (let i = 0; i < 3; i++) {
-        // Calculate month index (handling year wrap-around)
-        let monthIndex = currentMonth - 2 + i;
-        let year = currentYear;
-        
-        if (monthIndex < 0) {
-          monthIndex += 12;
-          year -= 1;
-        }
-        
-        const monthLabel = `${monthNames[monthIndex]}-${year}`;
-        completeLabels.push(monthLabel);
-        
-        // For all months, initialize with available data or 0
-        if (!revenueTrendMap.has(monthLabel)) revenueTrendMap.set(monthLabel, 0);
-        if (!expenseTrendMap.has(monthLabel)) expenseTrendMap.set(monthLabel, 0);
-      }
-    } else { // year
-      // For year: Jan-current month
-      const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
-      const year = today.getFullYear();
-      
-      for (let i = 0; i <= today.getMonth(); i++) {
-        const monthLabel = `${monthNames[i]}-${year}`;
-        completeLabels.push(monthLabel);
-        if (!revenueTrendMap.has(monthLabel)) revenueTrendMap.set(monthLabel, 0);
-        if (!expenseTrendMap.has(monthLabel)) expenseTrendMap.set(monthLabel, 0);
-      }
-    }
-
-    // Use our complete labels for the chart with values from maps (will be 0 for missing data)
-    const revenueExpenseData = {
-      labels: completeLabels,
-      datasets: [
-        {
-          label: 'Revenue',
-          data: completeLabels.map(label => revenueTrendMap.get(label)),
-          borderColor: 'rgba(75, 192, 192, 1)',
-          backgroundColor: 'rgba(75, 192, 192, 0.2)',
-          tension: 0.4,
-          spanGaps: true
-        },
-        {
-          label: 'Expenses',
-          data: completeLabels.map(label => expenseTrendMap.get(label)),
-          borderColor: 'rgba(255, 99, 132, 1)',
-          backgroundColor: 'rgba(255, 99, 132, 0.2)',
-          tension: 0.4,
-          spanGaps: true
-        }
-      ]
-    };
-
-    // Check if there's any non-null data to display
-    const allZeroValues = revenueExpenseData.datasets.every(dataset => 
-      dataset.data.every(value => value === 0 || value === null)
-    );
-
-    // For other chart data, keep the original logic
-    const planRevenueLabels = dashboardData.revenueByPlan?.map(item => item.plan) || [];
-    const planRevenueData = {
-      labels: planRevenueLabels,
-      datasets: [{
-        label: 'Revenue',
-        data: dashboardData.revenueByPlan?.map(item => item.revenue) || [],
-        borderWidth: 1
-      }]
-    };
-
-    const expenseCategoryLabels = dashboardData.expensesByCategory?.map(item => item.category) || [];
-    const expenseCategoryData = {
-      labels: expenseCategoryLabels,
-      datasets: [{
-        label: 'Expenses by Category',
-        data: dashboardData.expensesByCategory?.map(item => item.total) || [],
-        borderWidth: 1
-      }]
-    };
-
-    const planSubscriptionLabels = dashboardData.revenueByPlan?.map(item => item.plan) || [];
-    const planSubscriptionData = {
-      labels: planSubscriptionLabels,
-      datasets: [{
-        label: 'Subscriptions (by Revenue)',
-        data: dashboardData.revenueByPlan?.map(item => item.revenue) || [],
-        borderWidth: 1
-      }]
-    };
-
-    return { 
-      revenueExpenseData, 
-      planRevenueData, 
-      expenseCategoryData, 
-      planSubscriptionData, 
-      allZeroValues 
-    };
-  };
-
-  const { revenueExpenseData, planRevenueData, expenseCategoryData, planSubscriptionData, allZeroValues } = prepareChartData();
-
-  const commonChartOptions = {
-    responsive: true,
-    maintainAspectRatio: false,
-    plugins: {
-      legend: {
-        position: 'top',
-      },
-      title: {
-        display: true,
-      },
-      colors: {
-        enabled: true
-      }
-    },
-    scales: {
-      y: {
-        beginAtZero: true
-      }
-    }
-  };
-
-  // Get the appropriate chart title based on the selected date range
-  const getChartTitle = () => {
-    switch(dateRange) {
-      case 'month':
-        return 'Revenue vs Expenses Trend (This Month)';
-      case 'last3months':
-        return 'Revenue vs Expenses Trend (Last 3 Months)';
-      case 'year':
-        return 'Revenue vs Expenses Trend (Year to Date)';
-      default:
-        return 'Revenue vs Expenses Trend';
-    }
-  };
-
-  const lineChartOptions = { 
-    ...commonChartOptions, 
-    plugins: { 
-      ...commonChartOptions.plugins, 
-      title: { 
-        display: true, 
-        text: getChartTitle() 
-      } 
-    } 
-  };
-
-  const doughnutOptions = {
-    responsive: true,
-    maintainAspectRatio: false,
-    plugins: {
-      legend: { position: 'right' },
-      title: { display: true, text: 'Distribution' },
-      colors: { enabled: true }
-    }
-  };
-  const barChartOptions = { ...commonChartOptions, plugins: { ...commonChartOptions.plugins, legend: { display: false }, title: { display: true, text: 'Expenses by Category' } } };
-
-  if (loading) {
-    return <div className="loading">Loading Financial Dashboard...</div>;
-  }
-
-  if (error) {
-    return <div className="error">Error: {error}</div>;
-  }
-
-  if (!dashboardData) {
-    return <div className="loading">No data available.</div>;
-  }
-
-  const isEmptyData =
-    dashboardData.activeSubscriptions === 0 &&
-    (dashboardData.totalRevenue?.period || 0) === 0 &&
-    (dashboardData.totalExpenses?.period || 0) === 0 &&
-    (dashboardData.outstandingPayments || 0) === 0 &&
-    Array.isArray(dashboardData.revenueByPlan) && dashboardData.revenueByPlan.length === 0 &&
-    Array.isArray(dashboardData.expensesByCategory) && dashboardData.expensesByCategory.length === 0;
-
-  if (isEmptyData) {
-    return (
-      <div className="empty-state">
-        <p>No financial data available for this period.</p>
-      </div>
-    );
-  }
-
-  const renderPeriodSubtitle = () => (
-    <span className="card-subtitle">
-      {dateRange === 'month' ? 'This Month' :
-        dateRange === 'last3months' ? 'Last 3 Months' :
-          'This Year'}
-    </span>
-  );
-
-  return (
-    <div className="financial-dashboard">
-      <div className="dashboard-header">
-        <h2>Financial Dashboard</h2>
-        <div className="dashboard-controls">
-          <div className="date-range-selector">
-            <label htmlFor="date-range">Time Period:</label>
-            <select
-              id="date-range"
-              value={dateRange}
-              onChange={(e) => setDateRange(e.target.value)}
-            >
-              <option value="month">This Month</option>
-              <option value="last3months">Last 3 Months</option>
-              <option value="year">This Year</option>
-            </select>
-          </div>
-          <button
-            className="export-btn"
-            onClick={() => alert('Export functionality to be implemented')}
-          >
-            Export Report
-          </button>
-        </div>
-      </div>
-
-      <div className="dashboard-tabs">
-        <button
-          className={activeTab === 'overview' ? 'active' : ''}
-          onClick={() => setActiveTab('overview')}
-        >
-          Overview
-        </button>
-        <button
-          className={activeTab === 'revenue' ? 'active' : ''}
-          onClick={() => setActiveTab('revenue')}
-        >
-          Revenue
-        </button>
-        <button
-          className={activeTab === 'expenses' ? 'active' : ''}
-          onClick={() => setActiveTab('expenses')}
-        >
-          Expenses
-        </button>
-        <button
-          className={activeTab === 'subscriptions' ? 'active' : ''}
-          onClick={() => setActiveTab('subscriptions')}
-        >
-          Subscriptions
-        </button>
-      </div>
-
-      {activeTab === 'overview' && (
-        <>
-          <div className="dashboard-grid">
-            <div className="dashboard-card highlight">
-              <h3>Total Revenue</h3>
-              <p>{formatCurrency(dashboardData.totalRevenue?.period || 0)}</p>
-              {renderPeriodSubtitle()}
-            </div>
-            <div className="dashboard-card highlight">
-              <h3>Total Expenses</h3>
-              <p>{formatCurrency(dashboardData.totalExpenses?.period || 0)}</p>
-              {renderPeriodSubtitle()}
-            </div>
-            <div className="dashboard-card highlight">
-              <h3>Net Profit</h3>
-              <p>{formatCurrency((dashboardData.totalRevenue?.period || 0) - (dashboardData.totalExpenses?.period || 0))}</p>
-              {renderPeriodSubtitle()}
-            </div>
-            <div className="dashboard-card">
-              <h3>Active Subscriptions</h3>
-              <p>{dashboardData.activeSubscriptions || 0}</p>
-              <span className="card-subtitle">Total Active</span>
-            </div>
-            <div className="dashboard-card">
-              <h3>Outstanding Payments</h3>
-              <p>{formatCurrency(dashboardData.outstandingPayments || 0)}</p>
-              <span className="card-subtitle">Pending Collection</span>
-            </div>
-            <div className="dashboard-card">
-              <h3>Subscription Revenue</h3>
-              <p>{formatCurrency(dashboardData.totalRevenue?.subscriptions || 0)}</p>
-              {renderPeriodSubtitle()}
-            </div>
-          </div>
-
-          <div className="dashboard-charts">
-            <div className="chart-container">
-              {allZeroValues ? (
-                <div className="no-data-message">
-                  <p>No revenue or expense data available for {dateRange === 'month' ? 'this month' : dateRange === 'last3months' ? 'last 3 months' : 'this year'}.</p>
-                </div>
-              ) : (
-                <div className="chart-wrapper">
-                  <Line
-                    data={revenueExpenseData}
-                    options={lineChartOptions}
-                  />
-                </div>
-              )}
-            </div>
-          </div>
-        </>
-      )}
-
-      {activeTab === 'revenue' && (
-        <>
-          <div className="dashboard-grid">
-            <div className="dashboard-card highlight">
-              <h3>Total Revenue</h3>
-              <p>{formatCurrency(dashboardData.totalRevenue?.period || 0)}</p>
-              {renderPeriodSubtitle()}
-            </div>
-            <div className="dashboard-card">
-              <h3>Revenue Growth</h3>
-              <p>{(dashboardData.revenueGrowthPercentage || 0).toFixed(1)}%</p>
-              <span className="card-subtitle">From Previous Period</span>
-            </div>
-            <div className="dashboard-card">
-              <h3>Average Revenue</h3>
-              <p>{formatCurrency(dashboardData.averageDailyRevenue || 0)}</p>
-              <span className="card-subtitle">Per Day (in Period)</span>
-            </div>
-          </div>
-
-          <div className="dashboard-charts">
-            <div className="chart-container">
-              <h3>Revenue by Subscription Plan</h3>
-              <div className="chart-wrapper">
-                <Doughnut
-                  data={planRevenueData}
-                  options={{ ...doughnutOptions, plugins: { ...doughnutOptions.plugins, title: { display: true, text: 'Revenue by Subscription Plan' } } }}
-                />
-              </div>
-            </div>
-          </div>
-
-          <div className="recent-transactions">
-            <h3>Recent Transactions</h3>
-            <div className="table-container">
-              <table className="data-table">
-                <thead>
-                  <tr>
-                    <th>Date</th>
-                    <th>Customer</th>
-                    <th>Description</th>
-                    <th>Amount</th>
-                    <th>Status</th>
-                  </tr>
-                </thead>
-                <tbody>
-                  {dashboardData.recentTransactions?.payments?.length > 0 ? (
-                    dashboardData.recentTransactions.payments.map((payment) => (
-                      <tr key={payment.id}>
-                        <td>{formatDate(payment.date)}</td>
-                        <td>{payment.customer || 'N/A'}</td>
-                        <td>{payment.description || 'N/A'}</td>
-                        <td>{formatCurrency(payment.amount)}</td>
-                        <td><span className={`status ${payment.status?.toLowerCase()}`}>{payment.status}</span></td>
-                      </tr>
-                    ))
-                  ) : (
-                    <tr><td colSpan="5">No recent payments found for this period.</td></tr>
-                  )}
-                </tbody>
-              </table>
-            </div>
-          </div>
-        </>
-      )}
-
-      {activeTab === 'expenses' && (
-        <>
-          <div className="dashboard-grid">
-            <div className="dashboard-card highlight">
-              <h3>Total Expenses</h3>
-              <p>{formatCurrency(dashboardData.totalExpenses?.period || 0)}</p>
-              {renderPeriodSubtitle()}
-            </div>
-            <div className="dashboard-card">
-              <h3>Largest Category</h3>
-              <p>{dashboardData.largestExpenseCategory?.category || 'N/A'}</p>
-              <span className="card-subtitle">{formatCurrency(dashboardData.largestExpenseCategory?.total || 0)}</span>
-            </div>
-            <div className="dashboard-card">
-              <h3>Budget Status</h3>
-              <p>N/A</p>
-              <span className="card-subtitle">Budget data needed</span>
-            </div>
-          </div>
-
-          <div className="dashboard-charts">
-            <div className="chart-container">
-              <h3>Expenses by Category</h3>
-              <div className="chart-wrapper">
-                <Bar
-                  data={expenseCategoryData}
-                  options={barChartOptions}
-                />
-              </div>
-            </div>
-          </div>
-
-          <div className="recent-transactions">
-            <h3>Recent Expenses</h3>
-            <div className="table-container">
-              <table className="data-table">
-                <thead>
-                  <tr>
-                    <th>Date</th>
-                    <th>Category</th>
-                    <th>Description</th>
-                    <th>Amount</th>
-                    <th>Status</th>
-                  </tr>
-                </thead>
-                <tbody>
-                  {dashboardData.recentTransactions?.expenses?.length > 0 ? (
-                    dashboardData.recentTransactions.expenses.map((expense) => (
-                      <tr key={expense.id}>
-                        <td>{formatDate(expense.date)}</td>
-                        <td>{expense.category}</td>
-                        <td>{expense.description || 'N/A'}</td>
-                        <td>{formatCurrency(expense.amount)}</td>
-                        <td><span className={`status ${expense.status?.toLowerCase()}`}>{expense.status}</span></td>
-                      </tr>
-                    ))
-                  ) : (
-                    <tr><td colSpan="5">No recent expenses found for this period.</td></tr>
-                  )}
-                </tbody>
-              </table>
-            </div>
-          </div>
-        </>
-      )}
-
-      {activeTab === 'subscriptions' && (
-        <>
-          <div className="dashboard-grid">
-            <div className="dashboard-card highlight">
-              <h3>Active Subscriptions</h3>
-              <p>{dashboardData.activeSubscriptions || 0}</p>
-              <span className="card-subtitle">Total</span>
-            </div>
-            <div className="dashboard-card">
-              <h3>New Subscriptions</h3>
-              <p>{dashboardData.newSubscriptions || 0}</p>
-              {renderPeriodSubtitle()}
-            </div>
-            <div className="dashboard-card">
-              <h3>Cancellations</h3>
-              <p>{dashboardData.cancellations || 0}</p>
-              {renderPeriodSubtitle()}
-            </div>
-          </div>
-
-          <div className="dashboard-charts">
-            <div className="chart-container">
-              <h3>Subscriptions by Plan</h3>
-              <div className="chart-wrapper">
-                <Doughnut
-                  data={planSubscriptionData}
-                  options={{ ...doughnutOptions, plugins: { ...doughnutOptions.plugins, title: { display: true, text: 'Subscriptions by Revenue' } } }}
-                />
-              </div>
-            </div>
-          </div>
-
-          <div className="subscription-plans">
-            <h3>Subscription Plans Overview</h3>
-            <div className="table-container">
-              <table className="data-table">
-                <thead>
-                  <tr>
-                    <th>Plan Name</th>
-                    <th>Price</th>
-                    <th>Billing</th>
-                    <th>Active Users</th>
-                  </tr>
-                </thead>
-                <tbody>
-                  {dashboardData.subscriptionPlans?.length > 0 ? (
-                    dashboardData.subscriptionPlans.map((plan) => (
-                      <tr key={plan.id}>
-                        <td>{plan.name}</td>
-                        <td>{formatCurrency(plan.price)}</td>
-                        <td>{plan.duration}</td>
-                        <td>{plan.subscriberCount}</td>
-                      </tr>
-                    ))
-                  ) : (
-                    <tr><td colSpan="4">No subscription plans found.</td></tr>
-                  )}
-                </tbody>
-              </table>
-            </div>
-            <div className="view-all">
-              <button className="view-all-btn" onClick={() => window.location.href = '/dashboard/subscription-plans'}>Manage Subscription Plans</button>
-            </div>
-          </div>
-        </>
-      )}
-    </div>
-  );
-};
-
-export default FinancialDashboard;
-
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\financial\SubscriptionPlans.css
-.subscription-container {
-    background-color: white;
-    border-radius: 8px;
-    padding: 20px;
-    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-    margin-bottom: 20px;
-    color: #333; /* Dark text color for the entire container */
-  }
-  
-  .subscription-container h2 {
-    text-align: left;
-    margin-bottom: 20px;
-    color: #333;
-  }
-  
-  .top-bar {
-    display: flex;
-    justify-content: space-between;
-    align-items: center;
-    margin-bottom: 20px;
-  }
-  
-  .search-box {
-    padding: 10px;
-    width: 60%;
-    border: 1px solid #d2ddc4;
-    border-radius: 5px;
-    font-size: 14px;
-  }
-  
-  .btn {
-    padding: 10px 20px;
-    margin-left: 10px;
-    border: none;
-    cursor: pointer;
-    border-radius: 4px;
-    font-size: 16px;
-    font-weight: 500;
-    transition: background-color 0.3s ease;
-  }
-  
-  .add-btn {
-    background: #4ea14a;
-    color: white;
-    font-weight: bold;
-  }
-  
-  .view-btn {
-    background: #88afa1;
-    color: white;
-  }
-  
-  .update-btn {
-    background: #88afa1;
-    color: white;
-  }
-  
-  .delete-btn {
-    background: #88afa1;
-    color: white;
-  }
-  
-  .add-btn:hover {
-    background: #3c8a38;
-  }
-  
-  .view-btn:hover, .update-btn:hover {
-    background: #6b9b8d;
-  }
-  
-  .delete-btn:hover {
-    background: #d9534f;
-    color: white;
-  }
-  
-  .btn:disabled {
-    background-color: #cccccc;
-    color: #666666;
-    cursor: not-allowed;
-  }
-  
-  .submit-btn:disabled {
-    background-color: #a0d09c;
-    color: white;
-  }
-  
-  .cancel-btn:disabled {
-    background-color: #adb5bd;
-    color: white;
-  }
-  
-  table {
-    width: 100%;
-    border-collapse: collapse;
-    margin-top: 10px;
-  }
-  
-  th, td {
-    border: 1px solid #ddd;
-    padding: 12px;
-    text-align: left;
-  }
-  
-  th {
-    background-color: #b4c3a2;
-    color: #141a17;
-    font-weight: 500;
-  }
-  
-  tr:nth-child(even) {
-    background-color: #f9f9f9;
-  }
-  
-  tr:hover {
-    background-color: #f1f7eb;
-  }
-  
-  .subscription-container table td {
-    color: #333; /* Explicit dark color for table cells */
-  }
-  
-  /* Plan Details Styles */
-  .plan-details {
-    background-color: #f9f9f9;
-    border-radius: 8px;
-    padding: 20px;
-    margin: 20px 0;
-    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
-  }
-  
-  .plan-details h3 {
-    margin-bottom: 20px;
-    color: #333;
-    border-bottom: 2px solid #4ea14a;
-    padding-bottom: 10px;
-  }
-  
-  .detail-row {
-    display: flex;
-    margin-bottom: 15px;
-  }
-  
-  .detail-label {
-    font-weight: bold;
-    width: 120px;
-    color: #555;
-  }
-  
-  .detail-value {
-    flex: 1;
-    color: #333;
-  }
-  
-  .close-btn {
-    background-color: #6c757d;
-    color: white;
-    margin-top: 15px;
-  }
-  
-  .close-btn:hover {
-    background-color: #5a6268;
-  }
-  
-  /* Form Styles */
-  .subscription-form {
-    background-color: #f9f9f9;
-    border-radius: 8px;
-    padding: 20px;
-    margin: 20px 0;
-    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
-  }
-  
-  .subscription-form h3 {
-    margin-bottom: 20px;
-    color: #333;
-    border-bottom: 2px solid #4ea14a;
-    padding-bottom: 10px;
-  }
-  
-  .form-group {
-    margin-bottom: 20px;
-  }
-  
-  .form-group label {
-    display: block;
-    margin-bottom: 5px;
-    font-weight: 500;
-    color: #444;
-  }
-  
-  .form-group input, 
-  .form-group select,
-  .form-group textarea {
-    width: 100%;
-    padding: 10px;
-    border: 1px solid #ddd;
-    border-radius: 4px;
-    font-size: 14px;
-    background-color: #ffffff;
-    color: #333;
-  }
-  
-  .form-group input:focus,
-  .form-group select:focus,
-  .form-group textarea:focus {
-    outline: none;
-    border-color: #4ea14a;
-  }
-  
-  .form-group textarea {
-    resize: vertical;
-  }
-  
-  .form-actions {
-    display: flex;
-    justify-content: flex-end;
-    margin-top: 20px;
-  }
-  
-  .submit-btn {
-    background-color: #4ea14a;
-    color: white;
-  }
-  
-  .submit-btn:hover {
-    background-color: #3c8a38;
-  }
-  
-  .cancel-btn {
-    background-color: #6c757d;
-    color: white;
-  }
-  
-  .cancel-btn:hover {
-    background-color: #5a6268;
-  }
-
-  /* Add to the end of your SubscriptionPlans.css file */
-.loading {
-  padding: 20px;
-  text-align: center;
-  color: #555;
-  font-size: 16px;
-}
-
-.error-message {
-  background-color: #f8d7da;
-  color: #721c24;
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid #f5c6cb;
-}
-
-.form-error {
-  background-color: #f8d7da;
-  color: #721c24;
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid #f5c6cb;
-}
-
-.no-plans {
-  text-align: center;
-  padding: 30px 0;
-  color: #666;
-  font-style: italic;
-}
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\financial\SubscriptionPlans.jsx
-import React, { useState, useEffect } from 'react';
-import { subscriptionPlansApi } from '../../services/api';
-import './SubscriptionPlans.css';
-
-const SubscriptionPlans = () => {
-  const [searchTerm, setSearchTerm] = useState('');
-  const [plans, setPlans] = useState([]);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState(null);
-  const [showAddForm, setShowAddForm] = useState(false);
-  const [showViewDetails, setShowViewDetails] = useState(false);
-  const [showUpdateForm, setShowUpdateForm] = useState(false);
-  const [currentPlan, setCurrentPlan] = useState(null);
-
-  // Fetch subscription plans
-  useEffect(() => {
-    fetchPlans();
-  }, []);
-
-  const fetchPlans = async () => {
-    try {
-      setLoading(true);
-      const response = await subscriptionPlansApi.getAll();
-      setPlans(response.data);
-      setError(null);
-    } catch (err) {
-      setError('Failed to fetch subscription plans. Please try again later.');
-      console.error('Error fetching plans:', err);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  // Filter plans based on search term
-  const filteredPlans = plans.filter((plan) =>
-    plan.name.toLowerCase().includes(searchTerm.toLowerCase())
-  );
-
-  const handleSearch = (e) => {
-    setSearchTerm(e.target.value);
-  };
-
-  const handleAddNew = () => {
-    setShowAddForm(true);
-    setShowViewDetails(false);
-    setShowUpdateForm(false);
-  };
-
-  const handleViewDetails = (plan) => {
-    setCurrentPlan(plan);
-    setShowViewDetails(true);
-    setShowAddForm(false);
-    setShowUpdateForm(false);
-  };
-
-  const handleUpdate = (plan) => {
-    setCurrentPlan(plan);
-    setShowUpdateForm(true);
-    setShowAddForm(false);
-    setShowViewDetails(false);
-  };
-
-  const handleDelete = async (id) => {
-    if (window.confirm('Are you sure you want to delete this subscription plan?')) {
-      try {
-        await subscriptionPlansApi.delete(id);
-        setPlans(plans.filter(plan => plan._id !== id));
-      } catch (err) {
-        setError('Failed to delete the plan. Please try again.');
-        console.error('Error deleting plan:', err);
-      }
-    }
-  };
-
-  const handleAddPlan = async (planData) => {
-    try {
-      const response = await subscriptionPlansApi.create(planData);
-      setPlans([...plans, response.data]);
-      setShowAddForm(false);
-      return true;
-    } catch (err) {
-      setError('Failed to add new plan. Please try again.');
-      console.error('Error adding plan:', err);
-      return false;
-    }
-  };
-
-  const handleUpdatePlan = async (planData) => {
-    try {
-      const response = await subscriptionPlansApi.update(planData._id, planData);
-      setPlans(plans.map(p => p._id === planData._id ? response.data : p));
-      setShowUpdateForm(false);
-      return true;
-    } catch (err) {
-      setError('Failed to update the plan. Please try again.');
-      console.error('Error updating plan:', err);
-      return false;
-    }
-  };
-
-  if (loading) {
-    return <div className="loading">Loading subscription plans...</div>;
-  }
-
-  return (
-    <div className="subscription-container">
-      <h2>Subscription Plans</h2>
-      
-      {error && <div className="error-message">{error}</div>}
-      
-      {/* Add form, view details, or update form */}
-      {showAddForm && (
-        <SubscriptionForm 
-          onClose={() => setShowAddForm(false)} 
-          onSubmit={handleAddPlan}
-        />
-      )}
-      
-      {showViewDetails && currentPlan && (
-        <PlanDetails 
-          plan={currentPlan} 
-          onClose={() => setShowViewDetails(false)} 
-        />
-      )}
-      
-      {showUpdateForm && currentPlan && (
-        <SubscriptionForm 
-          plan={currentPlan} 
-          onClose={() => setShowUpdateForm(false)} 
-          onSubmit={handleUpdatePlan}
-        />
-      )}
-      
-      {/* Main content */}
-      {!showAddForm && !showViewDetails && !showUpdateForm && (
-        <>
-          <div className="top-bar">
-            <input 
-              type="text" 
-              className="search-box" 
-              placeholder="Search Subscription..." 
-              value={searchTerm}
-              onChange={handleSearch}
-            />
-            <button className="btn add-btn" onClick={handleAddNew}>+ Add New Subscription</button>
-          </div>
-
-          {plans.length === 0 ? (
-            <div className="no-plans">No subscription plans found. Add a new plan to get started.</div>
-          ) : (
-            <table>
-              <thead>
-                <tr>
-                  <th>Name</th>
-                  <th>Price</th>
-                  <th>Count of Subscribers</th>
-                  <th>Action</th>
-                </tr>
-              </thead>
-              <tbody>
-                {filteredPlans.map((plan) => (
-                  <tr key={plan._id}>
-                    <td>{plan.name}</td>
-                    <td>{plan.price}</td>
-                    <td>{plan.subscriberCount}</td>
-                    <td>
-                      <button className="btn view-btn" onClick={() => handleViewDetails(plan)}>View More</button>
-                      <button className="btn update-btn" onClick={() => handleUpdate(plan)}>Update</button>
-                      <button className="btn delete-btn" onClick={() => handleDelete(plan._id)}>Delete</button>
-                    </td>
-                  </tr>
-                ))}
-              </tbody>
-            </table>
-          )}
-        </>
-      )}
-    </div>
-  );
-};
-
-// Component for viewing plan details
-const PlanDetails = ({ plan, onClose }) => {
-  return (
-    <div className="plan-details">
-      <h3>Plan Details</h3>
-      <div className="detail-row">
-        <span className="detail-label">Name:</span>
-        <span className="detail-value">{plan.name}</span>
-      </div>
-      <div className="detail-row">
-        <span className="detail-label">Price:</span>
-        <span className="detail-value">{plan.price}</span>
-      </div>
-      <div className="detail-row">
-        <span className="detail-label">Subscribers:</span>
-        <span className="detail-value">{plan.subscriberCount}</span>
-      </div>
-      <div className="detail-row">
-        <span className="detail-label">Description:</span>
-        <span className="detail-value">{plan.description}</span>
-      </div>
-      <div className="detail-row">
-        <span className="detail-label">Duration:</span>
-        <span className="detail-value">{plan.duration}</span>
-      </div>
-      <button className="btn close-btn" onClick={onClose}>Close</button>
-    </div>
-  );
-};
-
-// Component for adding/updating subscription plan
-const SubscriptionForm = ({ plan, onClose, onSubmit }) => {
-  const [formData, setFormData] = useState({
-    _id: plan?._id || '',
-    name: plan?.name || '',
-    price: plan?.price || '',
-    subscriberCount: plan?.subscriberCount || 0,
-    description: plan?.description || '',
-    duration: plan?.duration || 'Monthly'
-  });
-  const [submitting, setSubmitting] = useState(false);
-  const [formError, setFormError] = useState('');
-
-  const handleChange = (e) => {
-    const { name, value } = e.target;
-    setFormData({ ...formData, [name]: value });
-  };
-
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    setSubmitting(true);
-    setFormError('');
-    
-    try {
-      const success = await onSubmit(formData);
-      if (success) {
-        onClose();
-      }
-    } catch {
-      setFormError('An error occurred. Please try again.');
-    } finally {
-      setSubmitting(false);
-    }
-  };
-
-  return (
-    <div className="subscription-form">
-      <h3>{plan ? 'Update Subscription Plan' : 'Add New Subscription Plan'}</h3>
-      
-      {formError && <div className="form-error">{formError}</div>}
-      
-      <form onSubmit={handleSubmit}>
-        <div className="form-group">
-          <label htmlFor="name">Name</label>
-          <input 
-            type="text" 
-            id="name" 
-            name="name" 
-            value={formData.name} 
-            onChange={handleChange}
-            required
-            disabled={submitting}
-          />
-        </div>
-        <div className="form-group">
-          <label htmlFor="price">Price</label>
-          <input 
-            type="text" 
-            id="price" 
-            name="price" 
-            value={formData.price} 
-            onChange={handleChange}
-            required
-            disabled={submitting}
-          />
-        </div>
-        <div className="form-group">
-          <label htmlFor="subscriberCount">Subscribers</label>
-          <input 
-            type="number" 
-            id="subscriberCount" 
-            name="subscriberCount" 
-            value={formData.subscriberCount} 
-            onChange={handleChange}
-            required
-            min="0"
-            disabled={submitting}
-          />
-        </div>
-        <div className="form-group">
-          <label htmlFor="description">Description</label>
-          <textarea 
-            id="description" 
-            name="description" 
-            value={formData.description} 
-            onChange={handleChange}
-            rows="4"
-            disabled={submitting}
-          />
-        </div>
-        <div className="form-group">
-          <label htmlFor="duration">Duration</label>
-          <select 
-            id="duration" 
-            name="duration" 
-            value={formData.duration} 
-            onChange={handleChange}
-            disabled={submitting}
-          >
-            <option value="Monthly">Monthly</option>
-            <option value="Quarterly">Quarterly</option>
-            <option value="Semi-Annual">Semi-Annual</option>
-            <option value="Annual">Annual</option>
-          </select>
-        </div>
-        <div className="form-actions">
-          <button 
-            type="submit" 
-            className="btn submit-btn"
-            disabled={submitting}
-          >
-            {submitting ? 'Processing...' : (plan ? 'Update Plan' : 'Add Plan')}
-          </button>
-          <button 
-            type="button" 
-            className="btn cancel-btn" 
-            onClick={onClose}
-            disabled={submitting}
-          >
-            Cancel
-          </button>
-        </div>
-      </form>
-    </div>
-  );
-};
-
-export default SubscriptionPlans;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\layouts\DashboardLayout.css
-/* frontend/src/components/layouts/DashboardLayout.css */
-.dashboard-layout {
-  display: flex;
-  height: 100vh;
-  width: 100%;
-  overflow: hidden;
-}
-
-.dashboard-main {
-  flex: 1;
-  margin-left: 260px; /* Width of sidebar */
-  display: flex;
-  flex-direction: column;
-  width: calc(100% - 260px); /* Ensure proper width calculation */
-  overflow: hidden;
-}
-
-.dashboard-content-area {
-  flex: 1;
-  overflow-y: auto;
-  padding: 20px;
-  background-color: #eaefea;
-}
-
-/* Ensure only one component renders at a time */
-.dashboard-content {
-  background-color: white;
-  border-radius: 8px;
-  padding: 20px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-  margin-bottom: 20px;
-}
-
-/* Fix header placement */
-.dashboard-main header {
-  width: 100%;
-  z-index: 10;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-/* Make main content area take remaining height */
-.dashboard-main main {
-  flex: 1;
-}
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\layouts\DashboardLayout.jsx
-// frontend/src/components/layouts/DashboardLayout.jsx
-import React from 'react';
-import { Routes, Route, Link } from 'react-router-dom';
-import { useAuth } from '../../contexts/AuthContext';
-import Header from '../dashboard/Header';
-import Sidebar from '../dashboard/Sidebar';
-import SubscriptionPlans from '../financial/SubscriptionPlans';
-import FinancialDashboard from '../financial/FinancialDashboard';
-import ProfilePage from '../../pages/profile/ProfilePage';
-import './DashboardLayout.css';
-
-// Placeholder dashboard components for different roles
-const DashboardHome = ({ user }) => {
-  // If user is a financial manager, show financial dashboard
-  if (user?.role === 'financial_manager') {
-    return <FinancialDashboard />;
-  }
-  
-  // Default dashboard for other roles
-  return (
-    <div className="dashboard-content">
-      <h2>Dashboard Home</h2>
-      <p>Welcome to your dashboard!</p>
-    </div>
-  );
-};
-
-// Inline NotFound component
-const NotFoundPage = () => (
-  <div className="dashboard-content" style={{ textAlign: 'center', marginTop: '50px' }}>
-    <h1>404 - Page Not Found</h1>
-    <p>Sorry, the page you are looking for does not exist.</p>
-    <Link to="/dashboard">Go back to Dashboard</Link>
-  </div>
-);
-
-function DashboardLayout() {
-  const { user } = useAuth();
-
-  return (
-    <div className="dashboard-layout">
-      <Sidebar />
-      <div className="dashboard-main">
-        <Header />
-        <main className="dashboard-content-area">
-          <Routes>
-            {/* Pass user to DashboardHome so it can conditionally render */}
-            <Route path="/" element={<DashboardHome user={user} />} />
-            <Route path="/profile" element={<ProfilePage />} />
-            
-            {/* Resident/Garbage_Buyer routes */}
-            {user?.role === 'Resident/Garbage_Buyer' && (
-              <>
-                <Route path="/collection-history" element={<div className="dashboard-content"><h2>Collection History</h2></div>} />
-                <Route path="/financial-history" element={<div className="dashboard-content"><h2>Financial History</h2></div>} />
-                <Route path="/complaints" element={<div className="dashboard-content"><h2>Complaints</h2></div>} />
-                <Route path="/pickup-requests" element={<div className="dashboard-content"><h2>Pickup Requests</h2></div>} />
-                <Route path="/available-garbage" element={<div className="dashboard-content"><h2>Available Garbage</h2></div>} />
-                <Route path="/purchase-history" element={<div className="dashboard-content"><h2>Purchase History</h2></div>} />
-              </>
-            )}
-            
-            {/* Admin routes */}
-            {user?.role === 'admin' && (
-              <>
-                <Route path="/users" element={<div className="dashboard-content"><h2>User Management</h2></div>} />
-                <Route path="/statistics" element={<div className="dashboard-content"><h2>Statistics</h2></div>} />
-                <Route path="/settings" element={<div className="dashboard-content"><h2>System Settings</h2></div>} />
-                <Route path="/financial-overview" element={<FinancialDashboard />} /> {/* Add route for Admin */}
-              </>
-            )}
-            
-            {/* Financial manager routes */}
-            {user?.role === 'financial_manager' && (
-              <>
-                <Route path="/subscription-plans" element={<SubscriptionPlans />} />
-                <Route path="/budget-allocation" element={<div className="dashboard-content"><h2>Budget Allocation</h2></div>} />
-                <Route path="/salary" element={<div className="dashboard-content"><h2>Salary Management</h2></div>} />
-                <Route path="/payments" element={<div className="dashboard-content"><h2>Payments</h2></div>} />
-                <Route path="/financial-overview" element={<FinancialDashboard />} /> {/* Add route for Financial Manager */}
-              </>
-            )}
-            
-            {/* Staff routes */}
-            {user?.role === 'staff' && (
-              <>
-                <Route path="/attendance" element={<div className="dashboard-content"><h2>Attendance</h2></div>} />
-                <Route path="/tasks" element={<div className="dashboard-content"><h2>Tasks</h2></div>} />
-                <Route path="/performance" element={<div className="dashboard-content"><h2>Performance</h2></div>} />
-              </>
-            )}
-            
-            {/* Fallback route */}
-            <Route path="*" element={<NotFoundPage />} /> {/* Use the inline NotFound component */}
-          </Routes>
-        </main>
-      </div>
-    </div>
-  );
-}
-
-export default DashboardLayout;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\layouts\Sidebar.jsx
-// frontend/src/components/dashboard/Sidebar.jsx
-import React from 'react';
-import { Link, useLocation } from 'react-router-dom';
-import { useAuth } from '../../contexts/AuthContext';
-import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
-import { library } from '@fortawesome/fontawesome-svg-core';
-import { 
-  faFacebook, 
-  faInstagram, 
-  faTwitter
-} from "@fortawesome/free-brands-svg-icons";
-
-import {
-  faGaugeHigh,
-  faFileLines,
-  faMoneyBillTransfer,
-  faUser,
-  faCreditCard,
-  faChartLine,
-  faCalendarDays,
-  faMoneyBill,
-  faFileSignature,
-  faTruck,
-  faRecycle,
-  faScroll,
-  faUsers,
-  faCog,
-  faClipboardList,
-  faListCheck,
-  faTrophy,
-  faTachometerAlt // Added icon for financial overview
-} from "@fortawesome/free-solid-svg-icons";
-
-library.add(
-  faFacebook, 
-  faInstagram, 
-  faTwitter,
-  faGaugeHigh,
-  faFileLines,
-  faMoneyBillTransfer,
-  faUser,
-  faCreditCard,
-  faChartLine,
-  faCalendarDays,
-  faMoneyBill,
-  faFileSignature,
-  faTruck,
-  faRecycle,
-  faScroll,
-  faUsers,
-  faCog,
-  faClipboardList,
-  faListCheck,
-  faTrophy,
-  faTachometerAlt // Add the new icon to the library
-);
-
-import './Sidebar.css';
-
-function Sidebar() {
-  const { user } = useAuth();
-  const location = useLocation();
-
-  // Define navigation items with FontAwesome icons
-  const getNavItems = () => {
-    const commonItems = [
-      { path: '/dashboard', label: 'Dashboard', icon: faGaugeHigh },
-      { path: '/dashboard/profile', label: 'My Profile', icon: faUser },
-    ];
-
-    const roleSpecificItems = {
-      'Resident/Garbage_Buyer': [
-        { path: '/dashboard/collection-history', label: 'Collection History', icon: faCalendarDays },
-        { path: '/dashboard/financial-history', label: 'Financial History', icon: faMoneyBill },
-        { path: '/dashboard/complaints', label: 'Complaints', icon: faFileSignature },
-        { path: '/dashboard/pickup-requests', label: 'Pickup Requests', icon: faTruck },
-        { path: '/dashboard/available-garbage', label: 'Available Garbage', icon: faRecycle },
-        { path: '/dashboard/purchase-history', label: 'Purchase History', icon: faScroll },
-      ],
-      admin: [
-        { path: '/dashboard/financial-overview', label: 'Financial Overview', icon: faTachometerAlt }, // Add link for Admin
-        { path: '/dashboard/users', label: 'User Management', icon: faUsers },
-        { path: '/dashboard/statistics', label: 'Statistics', icon: faChartLine },
-        { path: '/dashboard/settings', label: 'System Settings', icon: faCog },
-      ],
-      // Maintaining the database role name format (with underscore)
-      financial_manager: [
-        { path: '/dashboard/financial-overview', label: 'Financial Overview', icon: faTachometerAlt }, // Add link for Financial Manager
-        { path: '/dashboard/subscription-plans', label: 'Subscription Plans', icon: faFileLines },
-        { path: '/dashboard/budget-allocation', label: 'Budget Allocation', icon: faMoneyBillTransfer },
-        { path: '/dashboard/salary', label: 'Salary', icon: faUser },
-        { path: '/dashboard/payments', label: 'Payments', icon: faCreditCard },
-      ],
-      staff: [
-        { path: '/dashboard/attendance', label: 'Attendance', icon: faClipboardList },
-        { path: '/dashboard/tasks', label: 'Tasks', icon: faListCheck },
-        { path: '/dashboard/performance', label: 'Performance', icon: faTrophy },
-      ],
-    };
-
-    return [
-      ...commonItems,
-      ...(roleSpecificItems[user?.role] || []),
-    ];
-  };
-
-  const navItems = getNavItems();
-
-  return (
-    <nav>
-      <div className="sidebar">
-        <div className="logo">
-          <img src="#" alt="logo" className="logo-img" />
-          <span className="logo-name">SmartBin</span>
-        </div>
-        
-        <div className="sidebar-content">
-          <ul className="list">
-            {navItems.map((item) => (
-              <li key={item.path} className="list-item">
-                <Link 
-                  to={item.path} 
-                  className={`nav-link ${location.pathname === item.path ? 'active' : ''}`}
-                >
-                  <FontAwesomeIcon icon={item.icon} className="nav-icon" />
-                  <span className="link">{item.label}</span>
-                </Link>
-              </li>
-            ))}
-          </ul>
-          
-          <div className="bottom-content">
-            <div className="social-icons">
-              <a href="#" className="icon"><FontAwesomeIcon icon={faFacebook} /></a>
-              <a href="#" className="icon"><FontAwesomeIcon icon={faInstagram} /></a>
-              <a href="#" className="icon"><FontAwesomeIcon icon={faTwitter} /></a>
-            </div>
-          </div>
-        </div>
-      </div>
-    </nav>
-  );
-}
-
-export default Sidebar;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\profile\DocumentUploadForm.jsx
-import React, { useState } from 'react';
-import profileApi from '../../services/profileApi';
-import './ProfileForms.css';
-
-const DocumentUploadForm = ({ documents = [], onUpload, loading }) => {
-  const [formData, setFormData] = useState({
-    name: '',
-    type: 'Other',
-    document: null
-  });
-  const [formError, setFormError] = useState('');
-  const [formSuccess, setFormSuccess] = useState('');
-  const [uploading, setUploading] = useState(false);
-  const [uploadProgress, setUploadProgress] = useState(0);
-
-  const handleChange = (e) => {
-    const { name, value, files } = e.target;
-    
-    if (name === 'document') {
-      setFormData({
-        ...formData,
-        document: files[0]
-      });
-    } else {
-      setFormData({
-        ...formData,
-        [name]: value
-      });
-    }
-    
-    // Clear messages when form is being edited
-    setFormError('');
-    setFormSuccess('');
-  };
-
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    setFormError('');
-    setFormSuccess('');
-    
-    // Validate form
-    if (!formData.name.trim()) {
-      setFormError('Document name is required');
-      return;
-    }
-    
-    if (!formData.document) {
-      setFormError('Please select a file to upload');
-      return;
-    }
-    
-    // Check file size (5MB max)
-    if (formData.document.size > 5 * 1024 * 1024) {
-      setFormError('File size exceeds 5MB limit');
-      return;
-    }
-    
-    // Check file type
-    const allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'];
-    if (!allowedTypes.includes(formData.document.type)) {
-      setFormError('Only JPEG, PNG and PDF files are allowed');
-      return;
-    }
-    
-    // Create form data for file upload
-    const uploadData = new FormData();
-    uploadData.append('name', formData.name);
-    uploadData.append('type', formData.type);
-    uploadData.append('document', formData.document);
-    
-    // Submit the form
-    setUploading(true);
-    
-    try {
-      const result = await onUpload(uploadData);
-      
-      if (result.success) {
-        setFormSuccess(result.message);
-        // Reset form
-        setFormData({
-          name: '',
-          type: 'Other',
-          document: null
-        });
-        // Reset file input
-        document.getElementById('document-file').value = '';
-      } else {
-        setFormError(result.message);
-      }
-    } catch (error) {
-      setFormError('An error occurred during upload');
-      console.error(error);
-    } finally {
-      setUploading(false);
-      setUploadProgress(0);
-    }
-  };
-
-  const handleDeleteDocument = async (id) => {
-    if (window.confirm('Are you sure you want to delete this document?')) {
-      try {
-        await profileApi.deleteDocument(id);
-        // Refresh documents list
-        const _response = await profileApi.getProfile();
-        // Update documents through parent component
-        onUpload(new FormData()); // Trigger a refresh
-        setFormSuccess('Document deleted successfully');
-      } catch (error) {
-        setFormError('Failed to delete document');
-        console.error('Error deleting document:', error);
-      }
-    }
-  };
-
-  return (
-    <div className="profile-form-container">
-      <h3>Upload Verification Documents</h3>
-      
-      {formError && <div className="form-error">{formError}</div>}
-      {formSuccess && <div className="form-success">{formSuccess}</div>}
-      
-      <form onSubmit={handleSubmit}>
-        <div className="form-group">
-          <label htmlFor="name">Document Name</label>
-          <input 
-            type="text" 
-            id="name" 
-            name="name" 
-            value={formData.name} 
-            onChange={handleChange}
-            disabled={loading || uploading}
-          />
-        </div>
-        
-        <div className="form-group">
-          <label htmlFor="type">Document Type</label>
-          <select 
-            id="type" 
-            name="type" 
-            value={formData.type} 
-            onChange={handleChange}
-            disabled={loading || uploading}
-          >
-            <option value="ID Card">ID Card</option>
-            <option value="Utility Bill">Utility Bill</option>
-            <option value="Driver License">Driver's License</option>
-            <option value="Passport">Passport</option>
-            <option value="Other">Other</option>
-          </select>
-        </div>
-        
-        <div className="form-group">
-          <label htmlFor="document-file">Select File</label>
-          <input 
-            type="file" 
-            id="document-file" 
-            name="document" 
-            onChange={handleChange}
-            disabled={loading || uploading}
-            accept=".jpg,.jpeg,.png,.pdf"
-          />
-          <small>Max file size: 5MB. Allowed formats: JPG, PNG, PDF</small>
-        </div>
-        
-        {uploading && (
-          <div className="upload-progress">
-            <div 
-              className="progress-bar" 
-              style={{ width: `${uploadProgress}%` }}
-            ></div>
-            <span>{uploadProgress}%</span>
-          </div>
-        )}
-        
-        <button 
-          type="submit" 
-          className="profile-form-button"
-          disabled={loading || uploading}
-        >
-          {uploading ? 'Uploading...' : 'Upload Document'}
-        </button>
-      </form>
-      
-      <div className="documents-list">
-        <h4>Your Documents</h4>
-        
-        {documents.length === 0 ? (
-          <p className="no-documents">You haven't uploaded any documents yet.</p>
-        ) : (
-          <table className="documents-table">
-            <thead>
-              <tr>
-                <th>Name</th>
-                <th>Type</th>
-                <th>Status</th>
-                <th>Uploaded</th>
-                <th>Actions</th>
-              </tr>
-            </thead>
-            <tbody>
-              {documents.map((doc) => (
-                <tr key={doc._id}>
-                  <td>{doc.name}</td>
-                  <td>{doc.type}</td>
-                  <td>
-                    <span className={`status-badge ${doc.verificationStatus.toLowerCase()}`}>
-                      {doc.verificationStatus}
-                    </span>
-                  </td>
-                  <td>{new Date(doc.uploadedAt).toLocaleDateString()}</td>
-                  <td>
-                    <button 
-                      className="document-action-btn view"
-                      // Use the full filePath relative to the /uploads route
-                      onClick={() => window.open(`/uploads/${doc.filePath}`, '_blank')} 
-                    >
-                      View
-                    </button>
-                    <button 
-                      className="document-action-btn delete"
-                      onClick={() => handleDeleteDocument(doc._id)}
-                      disabled={loading}
-                    >
-                      Delete
-                    </button>
-                  </td>
-                </tr>
-              ))}
-            </tbody>
-          </table>
-        )}
-      </div>
-    </div>
-  );
-};
-
-export default DocumentUploadForm;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\profile\PasswordChangeForm.jsx
-import React, { useState } from 'react';
-import './ProfileForms.css';
-
-const PasswordChangeForm = ({ onSubmit, loading }) => {
-  const [formData, setFormData] = useState({
-    currentPassword: '',
-    newPassword: '',
-    confirmPassword: ''
-  });
-  const [formError, setFormError] = useState('');
-  const [formSuccess, setFormSuccess] = useState('');
-
-  const handleChange = (e) => {
-    const { name, value } = e.target;
-    setFormData({ ...formData, [name]: value });
-    // Clear messages when form is being edited
-    setFormError('');
-    setFormSuccess('');
-  };
-
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    setFormError('');
-    setFormSuccess('');
-    
-    // Validate passwords
-    if (!formData.currentPassword) {
-      setFormError('Current password is required');
-      return;
-    }
-    
-    if (!formData.newPassword) {
-      setFormError('New password is required');
-      return;
-    }
-    
-    if (formData.newPassword.length < 8) {
-      setFormError('Password must be at least 8 characters long');
-      return;
-    }
-    
-    if (formData.newPassword !== formData.confirmPassword) {
-      setFormError('New passwords do not match');
-      return;
-    }
-    
-    // Submit the form
-    const result = await onSubmit(formData);
-    
-    if (result.success) {
-      setFormSuccess(result.message);
-      // Clear form after successful password change
-      setFormData({
-        currentPassword: '',
-        newPassword: '',
-        confirmPassword: ''
-      });
-    } else {
-      setFormError(result.message);
-    }
-  };
-
-  return (
-    <div className="profile-form-container">
-      <h3>Change Password</h3>
-      
-      {formError && <div className="form-error">{formError}</div>}
-      {formSuccess && <div className="form-success">{formSuccess}</div>}
-      
-      <form onSubmit={handleSubmit}>
-        <div className="form-group">
-          <label htmlFor="currentPassword">Current Password</label>
-          <input 
-            type="password" 
-            id="currentPassword" 
-            name="currentPassword" 
-            value={formData.currentPassword} 
-            onChange={handleChange}
-            disabled={loading}
-          />
-        </div>
-        
-        <div className="form-group">
-          <label htmlFor="newPassword">New Password</label>
-          <input 
-            type="password" 
-            id="newPassword" 
-            name="newPassword" 
-            value={formData.newPassword} 
-            onChange={handleChange}
-            disabled={loading}
-          />
-          <small>Must be at least 8 characters</small>
-        </div>
-        
-        <div className="form-group">
-          <label htmlFor="confirmPassword">Confirm New Password</label>
-          <input 
-            type="password" 
-            id="confirmPassword" 
-            name="confirmPassword" 
-            value={formData.confirmPassword} 
-            onChange={handleChange}
-            disabled={loading}
-          />
-        </div>
-        
-        <button 
-          type="submit" 
-          className="profile-form-button"
-          disabled={loading}
-        >
-          {loading ? 'Updating...' : 'Change Password'}
-        </button>
-      </form>
-    </div>
-  );
-};
-
-export default PasswordChangeForm;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\profile\ProfileForm.jsx
-import React, { useState, useEffect } from 'react';
-import './ProfileForms.css';
-
-const ProfileForm = ({ profileData, onSubmit, loading }) => {
-  const [formData, setFormData] = useState({
-    name: '',
-    email: ''
-  });
-  const [formError, setFormError] = useState('');
-  const [formSuccess, setFormSuccess] = useState('');
-
-  // Initialize form with profile data when it loads
-  useEffect(() => {
-    if (profileData) {
-      setFormData({
-        name: profileData.name || '',
-        email: profileData.email || ''
-      });
-    }
-  }, [profileData]);
-
-  const handleChange = (e) => {
-    const { name, value } = e.target;
-    setFormData({ ...formData, [name]: value });
-    // Clear messages when form is being edited
-    setFormError('');
-    setFormSuccess('');
-  };
-
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    setFormError('');
-    setFormSuccess('');
-    
-    // Basic validation
-    if (!formData.name.trim()) {
-      setFormError('Name is required');
-      return;
-    }
-    
-    if (!formData.email.trim()) {
-      setFormError('Email is required');
-      return;
-    }
-    
-    // Email validation
-    const emailRegex = /^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$/;
-    if (!emailRegex.test(formData.email)) {
-      setFormError('Please enter a valid email address');
-      return;
-    }
-    
-    // Submit the form
-    const result = await onSubmit(formData);
-    
-    if (result.success) {
-      setFormSuccess(result.message);
-    } else {
-      setFormError(result.message);
-    }
-  };
-
-  return (
-    <div className="profile-form-container">
-      <h3>Edit Profile Information</h3>
-      
-      {formError && <div className="form-error">{formError}</div>}
-      {formSuccess && <div className="form-success">{formSuccess}</div>}
-      
-      <form onSubmit={handleSubmit}>
-        <div className="form-group">
-          <label htmlFor="name">Full Name</label>
-          <input 
-            type="text" 
-            id="name" 
-            name="name" 
-            value={formData.name} 
-            onChange={handleChange}
-            disabled={loading}
-          />
-        </div>
-        
-        <div className="form-group">
-          <label htmlFor="email">Email Address</label>
-          <input 
-            type="email" 
-            id="email" 
-            name="email" 
-            value={formData.email} 
-            onChange={handleChange}
-            disabled={loading}
-          />
-        </div>
-        
-        <div className="form-group">
-          <label>Account Type</label>
-          <input 
-            type="text" 
-            value={profileData?.role || 'User'} 
-            disabled 
-            className="read-only"
-          />
-          <small>Account type cannot be changed</small>
-        </div>
-        
-        <div className="form-group">
-          <label>Member Since</label>
-          <input 
-            type="text" 
-            value={profileData?.createdAt 
-              ? new Date(profileData.createdAt).toLocaleDateString() 
-              : 'N/A'} 
-            disabled 
-            className="read-only"
-          />
-        </div>
-        
-        <button 
-          type="submit" 
-          className="profile-form-button"
-          disabled={loading}
-        >
-          {loading ? 'Saving...' : 'Save Changes'}
-        </button>
-      </form>
-    </div>
-  );
-};
-
-export default ProfileForm;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\profile\ProfileForms.css
-.profile-form-container {
-  width: 100%;
-}
-
-.profile-form-container h3 {
-  margin-bottom: 20px;
-  color: #333;
-  font-size: 1.2rem;
-}
-
-.form-group {
-  margin-bottom: 20px;
-}
-
-.form-group label {
-  display: block;
-  margin-bottom: 5px;
-  font-weight: 500;
-  color: #444;
-}
-
-.form-group input,
-.form-group select,
-.form-group textarea {
-  width: 100%;
-  padding: 10px;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 14px;
-  background-color: #ffffff; /* Light background color */
-  color: #333; /* Dark text color */
-}
-
-.form-group input::placeholder,
-.form-group select::placeholder,
-.form-group textarea::placeholder {
-  color: #999; /* Placeholder text color */
-}
-.form-group input:focus,
-.form-group select:focus,
-.form-group textarea:focus {
-  outline: none;
-  border-color: #4ea14a; /* Add focus border color */
-}
-
-.form-group small {
-  display: block;
-  margin-top: 5px;
-  color: #777;
-  font-size: 12px;
-}
-
-.read-only {
-  background-color: #f9f9f9;
-  color: #666;
-}
-
-.form-error {
-  background-color: #f8d7da;
-  color: #721c24;
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid #f5c6cb;
-}
-
-.form-success {
-  background-color: #d4edda;
-  color: #155724;
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid #c3e6cb;
-}
-
-.profile-form-button {
-  padding: 10px 20px;
-  background-color: #4ea14a;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  font-size: 16px;
-  cursor: pointer;
-  transition: background-color 0.3s;
-}
-
-.profile-form-button:hover {
-  background-color: #3c8a38;
-}
-
-.profile-form-button:disabled {
-  background-color: #a0d09c;
-  cursor: not-allowed;
-}
-
-/* Document Upload Form specific styles */
-.upload-progress {
-  height: 20px;
-  width: 100%;
-  background-color: #f0f0f0;
-  border-radius: 10px;
-  margin-bottom: 20px;
-  overflow: hidden;
-  position: relative;
-}
-
-.progress-bar {
-  height: 100%;
-  background-color: #4ea14a;
-  transition: width 0.3s ease;
-}
-
-.upload-progress span {
-  position: absolute;
-  top: 0;
-  left: 0;
-  width: 100%;
-  text-align: center;
-  line-height: 20px;
-  color: white;
-  font-size: 12px;
-  text-shadow: 0 0 2px rgba(0, 0, 0, 0.5);
-}
-
-.documents-list {
-  margin-top: 30px;
-}
-
-.documents-list h4 {
-  margin-bottom: 15px;
-  color: #333;
-}
-
-.no-documents {
-  color: #777;
-  font-style: italic;
-  text-align: center;
-  padding: 20px 0;
-}
-
-.documents-table {
-  width: 100%;
-  border-collapse: collapse;
-}
-
-.documents-table th,
-.documents-table td {
-  padding: 12px 15px;
-  text-align: left;
-  border-bottom: 1px solid #ddd;
-}
-
-.documents-table th {
-  background-color: #f5f5f5;
-  font-weight: 500;
-  color: #333;
-}
-
-.status-badge {
-  display: inline-block;
-  padding: 3px 8px;
-  border-radius: 12px;
-  font-size: 12px;
-  font-weight: 500;
-  text-align: center;
-}
-
-.status-badge.pending {
-  background-color: #fff3cd;
-  color: #856404;
-  border: 1px solid #ffeeba;
-}
-
-.status-badge.verified {
-  background-color: #d4edda;
-  color: #155724;
-  border: 1px solid #c3e6cb;
-}
-
-.status-badge.rejected {
-  background-color: #f8d7da;
-  color: #721c24;
-  border: 1px solid #f5c6cb;
-}
-
-.document-action-btn {
-  background: none;
-  border: none;
-  padding: 5px 10px;
-  margin-right: 5px;
-  border-radius: 4px;
-  cursor: pointer;
-  font-size: 12px;
-  font-weight: 500;
-  transition: all 0.2s;
-}
-
-.document-action-btn.view {
-  color: #2c6ecf;
-}
-
-.document-action-btn.view:hover {
-  background-color: #e8f0fe;
-}
-
-.document-action-btn.delete {
-  color: #dc3545;
-}
-
-.document-action-btn.delete:hover {
-  background-color: #f8d7da;
-}
-
-.document-action-btn:disabled {
-  opacity: 0.6;
-  cursor: not-allowed;
-}
-
-/* Responsive adjustments */
-@media (max-width: 768px) {
-  .documents-table {
-    font-size: 14px;
-  }
-  
-  .documents-table th,
-  .documents-table td {
-    padding: 8px 10px;
-  }
-  
-  .document-action-btn {
-    padding: 4px 8px;
-    font-size: 11px;
-  }
-}
-
-@media (max-width: 576px) {
-  .documents-table {
-    display: block;
-    overflow-x: auto;
-  }
-  
-  .profile-tabs {
-    flex-direction: column;
-  }
-  
-  .tab-button {
-    width: 100%;
-    text-align: center;
-  }
-}
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\staff\AttendanceTracker.jsx
-import React, { useState, useEffect } from 'react';
-import attendanceApi from '../../services/attendanceApi';
-import './StaffComponents.css';
-
-const AttendanceTracker = () => {
-  const [attendance, setAttendance] = useState([]);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState(null);
-  const [checkedIn, setCheckedIn] = useState(false);
-  const [dateRange, setDateRange] = useState({
-    startDate: new Date(new Date().setDate(1)).toISOString().split('T')[0],
-    endDate: new Date().toISOString().split('T')[0]
-  });
-
-  // Check if already checked in today
-  const checkStatus = async () => {
-    try {
-      const today = new Date().toISOString().split('T')[0];
-      const response = await attendanceApi.getMyAttendance(today, today);
-      
-      const todayRecord = response.data.find(record => {
-        const recordDate = new Date(record.date).toISOString().split('T')[0];
-        return recordDate === today;
-      });
-      
-      setCheckedIn(todayRecord && !todayRecord.checkOutTime);
-    } catch (err) {
-      console.error('Error checking status:', err);
-    }
-  };
-
-  // Fetch attendance data
-  const fetchAttendance = async () => {
-    try {
-      setLoading(true);
-      const response = await attendanceApi.getMyAttendance(
-        dateRange.startDate, 
-        dateRange.endDate
-      );
-      setAttendance(response.data);
-      setError(null);
-    } catch (err) {
-      setError('Failed to load attendance data');
-      console.error('Error fetching attendance:', err);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  useEffect(() => {
-    checkStatus();
-    fetchAttendance();
-  }, [dateRange]);
-
-  const handleCheckIn = async () => {
-    try {
-      await attendanceApi.checkIn();
-      setCheckedIn(true);
-      await fetchAttendance(); // Refresh data
-    } catch (err) {
-      setError(err.response?.data?.message || 'Failed to check in');
-    }
-  };
-
-  const handleCheckOut = async () => {
-    try {
-      await attendanceApi.checkOut();
-      setCheckedIn(false);
-      await fetchAttendance(); // Refresh data
-    } catch (err) {
-      setError(err.response?.data?.message || 'Failed to check out');
-    }
-  };
-
-  const handleDateChange = (e) => {
-    setDateRange({
-      ...dateRange,
-      [e.target.name]: e.target.value
-    });
-  };
-
-  // Calculate stats
-  const getStats = () => {
-    if (!attendance.length) return { total: 0, hours: 0 };
-    
-    const totalDays = attendance.length;
-    const totalHours = attendance.reduce((sum, record) => sum + (record.totalHours || 0), 0);
-    
-    return {
-      total: totalDays,
-      hours: totalHours.toFixed(1)
-    };
-  };
-
-  const stats = getStats();
-
-  return (
-    <div className="attendance-tracker">
-      <div className="tracker-header">
-        <h2>Attendance Tracker</h2>
-        <div className="attendance-actions">
-          {!checkedIn ? (
-            <button 
-              className="check-in-btn" 
-              onClick={handleCheckIn}
-            >
-              Check In
-            </button>
-          ) : (
-            <button 
-              className="check-out-btn" 
-              onClick={handleCheckOut}
-            >
-              Check Out
-            </button>
-          )}
-        </div>
-      </div>
-      
-      {error && <div className="error-message">{error}</div>}
-      
-      <div className="attendance-stats">
-        <div className="stat-box">
-          <span className="stat-label">Total Working Days</span>
-          <span className="stat-value">{stats.total}</span>
-        </div>
-        <div className="stat-box">
-          <span className="stat-label">Total Hours</span>
-          <span className="stat-value">{stats.hours}</span>
-        </div>
-      </div>
-      
-      <div className="date-filter">
-        <div className="filter-item">
-          <label>From:</label>
-          <input 
-            type="date" 
-            name="startDate" 
-            value={dateRange.startDate} 
-            onChange={handleDateChange}
-          />
-        </div>
-        <div className="filter-item">
-          <label>To:</label>
-          <input 
-            type="date" 
-            name="endDate" 
-            value={dateRange.endDate} 
-            onChange={handleDateChange}
-          />
-        </div>
-      </div>
-      
-      {loading ? (
-        <div className="loading">Loading attendance records...</div>
-      ) : attendance.length > 0 ? (
-        <table className="attendance-table">
-          <thead>
-            <tr>
-              <th>Date</th>
-              <th>Check In</th>
-              <th>Check Out</th>
-              <th>Hours</th>
-              <th>Status</th>
-            </tr>
-          </thead>
-          <tbody>
-            {attendance.map(record => (
-              <tr key={record._id}>
-                <td>{new Date(record.date).toLocaleDateString()}</td>
-                <td>{record.checkInTime ? new Date(record.checkInTime).toLocaleTimeString() : '-'}</td>
-                <td>{record.checkOutTime ? new Date(record.checkOutTime).toLocaleTimeString() : '-'}</td>
-                <td>{record.totalHours ? record.totalHours.toFixed(1) : '-'}</td>
-                <td><span className={`status-badge ${record.status.toLowerCase()}`}>{record.status}</span></td>
-              </tr>
-            ))}
-          </tbody>
-        </table>
-      ) : (
-        <div className="no-records">No attendance records found for the selected period.</div>
-      )}
-    </div>
-  );
-};
-
-export default AttendanceTracker;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\staff\PerformanceMetrics.jsx
-import React, { useState, useEffect } from 'react';
-import performanceApi from '../../services/performanceApi';
-import './StaffComponents.css';
-
-const PerformanceMetrics = () => {
-  const [reviews, setReviews] = useState([]);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState(null);
-  const [selectedReview, setSelectedReview] = useState(null);
-  const [showDetails, setShowDetails] = useState(false);
-
-  useEffect(() => {
-    const fetchPerformanceReviews = async () => {
-      try {
-        setLoading(true);
-        const response = await performanceApi.getMyReviews();
-        setReviews(response.data);
-        setError(null);
-      } catch (err) {
-        setError('Failed to load performance reviews');
-        console.error('Error fetching reviews:', err);
-      } finally {
-        setLoading(false);
-      }
-    };
-
-    fetchPerformanceReviews();
-  }, []);
-
-  const handleViewDetails = (review) => {
-    setSelectedReview(review);
-    setShowDetails(true);
-  };
-
-  const closeDetails = () => {
-    setShowDetails(false);
-    setSelectedReview(null);
-  };
-
-  // Calculate average rating
-  const getAverageRating = () => {
-    if (!reviews.length) return 0;
-    
-    const sum = reviews.reduce((acc, review) => acc + review.overallRating, 0);
-    return (sum / reviews.length).toFixed(1);
-  };
-
-  const averageRating = getAverageRating();
-
-  return (
-    <div className="performance-metrics">
-      <h2>Performance Metrics</h2>
-      
-      {error && <div className="error-message">{error}</div>}
-      
-      <div className="performance-summary">
-        <div className="rating-overview">
-          <div className="average-rating">
-            <span className="rating-label">Average Rating</span>
-            <span className="rating-value">{averageRating}</span>
-            <div className="rating-stars">
-              {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(star => (
-                <span 
-                  key={star} 
-                  className={`star ${star <= averageRating ? 'filled' : ''}`}
-                >
-                  ★
-                </span>
-              ))}
-            </div>
-          </div>
-          <div className="review-count">
-            <span className="count-label">Total Reviews</span>
-            <span className="count-value">{reviews.length}</span>
-          </div>
-        </div>
-      </div>
-      
-      {loading ? (
-        <div className="loading">Loading performance data...</div>
-      ) : reviews.length > 0 ? (
-        <div className="reviews-list">
-          <h3>Review History</h3>
-          <table className="reviews-table">
-            <thead>
-              <tr>
-                <th>Review Period</th>
-                <th>Rating</th>
-                <th>Reviewed By</th>
-                <th>Date</th>
-                <th>Actions</th>
-              </tr>
-            </thead>
-            <tbody>
-              {reviews.map(review => (
-                <tr key={review._id}>
-                  <td>
-                    {new Date(review.reviewPeriod.startDate).toLocaleDateString()} - 
-                    {new Date(review.reviewPeriod.endDate).toLocaleDateString()}
-                  </td>
-                  <td>
-                    <span className={`rating-badge rating-${Math.round(review.overallRating)}`}>
-                      {review.overallRating}
-                    </span>
-                  </td>
-                  <td>{review.reviewer.name}</td>
-                  <td>{new Date(review.createdAt).toLocaleDateString()}</td>
-                  <td>
-                    <button 
-                      className="view-details-btn"
-                      onClick={() => handleViewDetails(review)}
-                    >
-                      View Details
-                    </button>
-                  </td>
-                </tr>
-              ))}
-            </tbody>
-          </table>
-        </div>
-      ) : (
-        <div className="no-reviews">No performance reviews found.</div>
-      )}
-      
-      {showDetails && selectedReview && (
-        <div className="review-details-modal">
-          <div className="modal-content">
-            <span className="close-btn" onClick={closeDetails}>&times;</span>
-            <h3>Performance Review Details</h3>
-            
-            <div className="review-period">
-              <strong>Review Period:</strong> 
-              {new Date(selectedReview.reviewPeriod.startDate).toLocaleDateString()} - 
-              {new Date(selectedReview.reviewPeriod.endDate).toLocaleDateString()}
-            </div>
-            
-            <div className="metrics-section">
-              <h4>Performance Metrics</h4>
-              <div className="metrics-grid">
-                <div className="metric-item">
-                  <span className="metric-name">Productivity</span>
-                  <span className="metric-value">{selectedReview.metrics.productivity}</span>
-                </div>
-                <div className="metric-item">
-                  <span className="metric-name">Quality</span>
-                  <span className="metric-value">{selectedReview.metrics.quality}</span>
-                </div>
-                <div className="metric-item">
-                  <span className="metric-name">Reliability</span>
-                  <span className="metric-value">{selectedReview.metrics.reliability}</span>
-                </div>
-                <div className="metric-item">
-                  <span className="metric-name">Communication</span>
-                  <span className="metric-value">{selectedReview.metrics.communication}</span>
-                </div>
-                <div className="metric-item">
-                  <span className="metric-name">Initiative</span>
-                  <span className="metric-value">{selectedReview.metrics.initiative}</span>
-                </div>
-              </div>
-              <div className="overall-rating">
-                <strong>Overall Rating:</strong> 
-                <span className={`rating-badge rating-${Math.round(selectedReview.overallRating)}`}>
-                  {selectedReview.overallRating}
-                </span>
-              </div>
-            </div>
-            
-            <div className="feedback-section">
-              <h4>Feedback</h4>
-              <p>{selectedReview.feedback}</p>
-            </div>
-            
-            {selectedReview.goals && selectedReview.goals.length > 0 && (
-              <div className="goals-section">
-                <h4>Goals for Improvement</h4>
-                <ul>
-                  {selectedReview.goals.map((goal, index) => (
-                    <li key={index}>{goal}</li>
-                  ))}
-                </ul>
-              </div>
-            )}
-            
-            <button className="close-details-btn" onClick={closeDetails}>Close</button>
-          </div>
-        </div>
-      )}
-    </div>
-  );
-};
-
-export default PerformanceMetrics;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\components\staff\StaffComponents.css
-/* Common styles for staff components */
-.attendance-tracker,
-.performance-metrics {
-  background-color: white;
-  border-radius: 8px;
-  padding: 20px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-  margin-bottom: 20px;
-}
-
-.tracker-header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  margin-bottom: 20px;
-}
-
-.attendance-actions {
-  display: flex;
-  gap: 10px;
-}
-
-.check-in-btn,
-.check-out-btn {
-  padding: 10px 20px;
-  border: none;
-  border-radius: 4px;
-  font-weight: 500;
-  cursor: pointer;
-}
-
-.check-in-btn {
-  background-color: #4ea14a;
-  color: white;
-}
-
-.check-out-btn {
-  background-color: #e74c3c;
-  color: white;
-}
-
-.check-in-btn:hover {
-  background-color: #3c8a38;
-}
-
-.check-out-btn:hover {
-  background-color: #c0392b;
-}
-
-.attendance-stats {
-  display: flex;
-  gap: 20px;
-  margin-bottom: 20px;
-}
-
-.stat-box {
-  flex: 1;
-  background-color: #f5f5f5;
-  border-radius: 5px;
-  padding: 15px;
-  display: flex;
-  flex-direction: column;
-  align-items: center;
-}
-
-.stat-label {
-  font-size: 14px;
-  color: #666;
-  margin-bottom: 5px;
-}
-
-.stat-value {
-  font-size: 24px;
-  font-weight: bold;
-  color: #333;
-}
-
-.date-filter {
-  display: flex;
-  gap: 20px;
-  margin-bottom: 20px;
-}
-
-.filter-item {
-  display: flex;
-  align-items: center;
-  gap: 10px;
-}
-
-.filter-item label {
-  font-weight: 500;
-  color: #555;
-}
-
-.filter-item input {
-  padding: 8px;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-}
-
-.attendance-table,
-.reviews-table {
-  width: 100%;
-  border-collapse: collapse;
-  margin-top: 20px;
-}
-
-.attendance-table th,
-.attendance-table td,
-.reviews-table th,
-.reviews-table td {
-  padding: 12px 15px;
-  text-align: left;
-  border-bottom: 1px solid #ddd;
-}
-
-.attendance-table th,
-.reviews-table th {
-  background-color: #f5f5f5;
-  font-weight: 500;
-  color: #333;
-}
-
-.status-badge {
-  display: inline-block;
-  padding: 3px 8px;
-  border-radius: 12px;
-  font-size: 12px;
-  font-weight: 500;
-  text-align: center;
-}
-
-.status-badge.present {
-  background-color: #d4edda;
-  color: #155724;
-}
-
-.status-badge.absent {
-  background-color: #f8d7da;
-  color: #721c24;
-}
-
-.status-badge.late {
-  background-color: #fff3cd;
-  color: #856404;
-}
-
-.status-badge.half-day {
-  background-color: #e2f0fb;
-  color: #0c5460;
-}
-
-/* Performance Metrics Styles */
-.performance-summary {
-  background-color: #f8f9fa;
-  border-radius: 6px;
-  padding: 20px;
-  margin-bottom: 20px;
-}
-
-.rating-overview {
-  display: flex;
-  gap: 30px;
-  align-items: center;
-}
-
-.average-rating {
-  display: flex;
-  flex-direction: column;
-  align-items: center;
-}
-
-.rating-label, .count-label {
-  font-size: 14px;
-  color: #666;
-  margin-bottom: 5px;
-}
-
-.rating-value {
-  font-size: 36px;
-  font-weight: bold;
-  color: #333;
-  margin-bottom: 5px;
-}
-
-.rating-stars {
-  display: flex;
-}
-
-.star {
-  font-size: 20px;
-  color: #ddd;
-  margin: 0 1px;
-}
-
-.star.filled {
-  color: #f39c12;
-}
-
-.review-count {
-  display: flex;
-  flex-direction: column;
-  align-items: center;
-}
-
-.count-value {
-  font-size: 28px;
-  font-weight: bold;
-  color: #333;
-}
-
-.rating-badge {
-  display: inline-block;
-  padding: 4px 8px;
-  border-radius: 4px;
-  font-weight: bold;
-  text-align: center;
-}
-
-.rating-badge.rating-10, .rating-badge.rating-9 {
-  background-color: #28a745;
-  color: white;
-}
-
-.rating-badge.rating-8, .rating-badge.rating-7 {
-  background-color: #4ea14a;
-  color: white;
-}
-
-.rating-badge.rating-6, .rating-badge.rating-5 {
-  background-color: #ffc107;
-  color: #333;
-}
-
-.rating-badge.rating-4, .rating-badge.rating-3 {
-  background-color: #fd7e14;
-  color: white;
-}
-
-.rating-badge.rating-2, .rating-badge.rating-1 {
-  background-color: #dc3545;
-  color: white;
-}
-
-.view-details-btn {
-  background-color: #007bff;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  padding: 6px 12px;
-  cursor: pointer;
-  font-size: 14px;
-}
-
-.view-details-btn:hover {
-  background-color: #0069d9;
-}
-
-/* Modal styles */
-.review-details-modal {
-  position: fixed;
-  top: 0;
-  left: 0;
-  width: 100%;
-  height: 100%;
-  background-color: rgba(0, 0, 0, 0.5);
-  display: flex;
-  justify-content: center;
-  align-items: center;
-  z-index: 1000;
-}
-
-.modal-content {
-  background-color: white;
-  border-radius: 8px;
-  padding: 30px;
-  width: 80%;
-  max-width: 800px;
-  max-height: 90vh;
-  overflow-y: auto;
-  position: relative;
-}
-
-.close-btn {
-  position: absolute;
-  top: 15px;
-  right: 20px;
-  font-size: 24px;
-  cursor: pointer;
-  color: #888;
-}
-
-.close-btn:hover {
-  color: #333;
-}
-
-.review-period {
-  margin-bottom: 20px;
-}
-
-.metrics-section, .feedback-section, .goals-section {
-  margin-bottom: 25px;
-}
-
-.metrics-grid {
-  display: grid;
-  grid-template-columns: repeat(3, 1fr);
-  gap: 15px;
-  margin-top: 15px;
-}
-
-.metric-item {
-  background-color: #f8f9fa;
-  padding: 12px;
-  border-radius: 5px;
-  display: flex;
-  flex-direction: column;
-}
-
-.metric-name {
-  font-size: 14px;
-  color: #666;
-  margin-bottom: 5px;
-}
-
-.metric-value {
-  font-size: 18px;
-  font-weight: bold;
-  color: #333;
-}
-
-.overall-rating {
-  margin-top: 20px;
-  font-size: 16px;
-}
-
-.close-details-btn {
-  background-color: #6c757d;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  padding: 8px 16px;
-  cursor: pointer;
-  font-size: 16px;
-  margin-top: 10px;
-}
-
-.close-details-btn:hover {
-  background-color: #5a6268;
-}
-
-.loading, .no-reviews, .no-records, .error-message {
-  padding: 20px;
-  text-align: center;
-  color: #666;
-  background-color: #f8f9fa;
-  border-radius: 6px;
-  margin-top: 15px;
-}
-
-.error-message {
-  color: #721c24;
-  background-color: #f8d7da;
-}
-
-/* New styles */
-.staff-component {
-  background-color: white;
-  border-radius: 8px;
-  padding: 20px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-  margin-bottom: 20px;
-}
-
-.staff-component-header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  margin-bottom: 20px;
-  border-bottom: 1px solid #eee;
-  padding-bottom: 15px;
-}
-
-.staff-component-header h2 {
-  font-size: 1.4rem;
-  color: #333;
-  margin: 0;
-}
-
-/* Attendance Tracker specific styles */
-.attendance-card {
-  display: flex;
-  justify-content: space-between;
-  background-color: #f9f9f9;
-  border-radius: 8px;
-  padding: 15px;
-  margin-bottom: 15px;
-  transition: all 0.3s ease;
-}
-
-.attendance-card:hover {
-  background-color: #f0f0f0;
-  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
-}
-
-.attendance-details {
-  flex-grow: 1;
-}
-
-.attendance-date {
-  font-weight: 500;
-  color: #444;
-  margin-bottom: 5px;
-}
-
-.attendance-time {
-  display: flex;
-  color: #666;
-  font-size: 0.9rem;
-}
-
-.attendance-time span {
-  margin-right: 15px;
-}
-
-.attendance-status {
-  display: flex;
-  align-items: center;
-}
-
-.status-indicator {
-  display: inline-block;
-  width: 10px;
-  height: 10px;
-  border-radius: 50%;
-  margin-right: 5px;
-}
-
-.status-indicator.checked-in {
-  background-color: #28a745;
-}
-
-.status-indicator.checked-out {
-  background-color: #6c757d;
-}
-
-.attendance-actions {
-  display: flex;
-  align-items: center;
-}
-
-.attendance-action-btn {
-  padding: 8px 15px;
-  border: none;
-  border-radius: 4px;
-  font-size: 0.9rem;
-  cursor: pointer;
-  transition: background-color 0.2s;
-}
-
-.check-in-btn {
-  background-color: #28a745;
-  color: white;
-}
-
-.check-in-btn:hover {
-  background-color: #218838;
-}
-
-.check-out-btn {
-  background-color: #6c757d;
-  color: white;
-}
-
-.check-out-btn:hover {
-  background-color: #5a6268;
-}
-
-/* Performance metrics styles */
-.metrics-grid {
-  display: grid;
-  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
-  gap: 20px;
-  margin-bottom: 20px;
-}
-
-.metric-card {
-  background-color: #f9f9f9;
-  border-radius: 8px;
-  padding: 15px;
-  text-align: center;
-}
-
-.metric-value {
-  font-size: 2rem;
-  font-weight: 700;
-  color: #4ea14a;
-  margin: 10px 0;
-}
-
-.metric-label {
-  font-size: 0.9rem;
-  color: #666;
-}
-
-.performance-chart {
-  width: 100%;
-  height: 300px;
-  margin-top: 20px;
-}
-
-.rating-stars {
-  font-size: 1.5rem;
-  color: #ffc107;
-  margin: 10px 0;
-}
-
-.rating-label {
-  font-size: 0.9rem;
-  color: #666;
-  text-align: center;
-  margin-bottom: 20px;
-}
-
-/* Admin management styles */
-.staff-table {
-  width: 100%;
-  border-collapse: collapse;
-  margin-top: 15px;
-}
-
-.staff-table th, 
-.staff-table td {
-  padding: 12px 15px;
-  text-align: left;
-  border-bottom: 1px solid #ddd;
-}
-
-.staff-table thead th {
-  background-color: #f5f5f5;
-  color: #333;
-  font-weight: 500;
-}
-
-.staff-table tbody tr:hover {
-  background-color: #f9f9f9;
-}
-
-.staff-action-btn {
-  padding: 5px 10px;
-  margin-right: 5px;
-  border: none;
-  border-radius: 4px;
-  font-size: 0.85rem;
-  cursor: pointer;
-}
-
-.staff-action-btn.view {
-  background-color: #e3f2fd;
-  color: #0d6efd;
-}
-
-.staff-action-btn.edit {
-  background-color: #e8f5e9;
-  color: #28a745;
-}
-
-.staff-action-btn.delete {
-  background-color: #fbeae9;
-  color: #dc3545;
-}
-
-/* Responsive adjustments */
-@media (max-width: 768px) {
-  .metrics-grid {
-    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
-  }
-  
-  .staff-table {
-    font-size: 0.9rem;
-  }
-  
-  .staff-table th, 
-  .staff-table td {
-    padding: 10px;
-  }
-}
-
-@media (max-width: 576px) {
-  .metrics-grid {
-    grid-template-columns: 1fr;
-  }
-  
-  .staff-table {
-    display: block;
-    overflow-x: auto;
-  }
-}
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\contexts\AuthContext.jsx
-import React, { createContext, useState, useEffect, useContext } from 'react';
-import axios from 'axios';
-
-const AuthContext = createContext();
-
-export function AuthProvider({ children }) {
-  const [user, setUser] = useState(null);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState(null);
-
-  useEffect(() => {
-    // Check if user is logged in on page load
-    const checkUserLoggedIn = async () => {
-      try {
-        const token = localStorage.getItem('token');
-        if (token) {
-          // Set auth header
-          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
-          
-          // Get user data
-          const response = await axios.get('http://localhost:5000/api/auth/me');
-          setUser(response.data);
-        }
-      } catch (error) {
-        console.error('Authentication error:', error);
-        localStorage.removeItem('token');
-      } finally {
-        setLoading(false);
-      }
-    };
-
-    checkUserLoggedIn();
-  }, []);
-
-  // Register new user
-  const register = async (userData) => {
-    try {
-      const response = await axios.post('http://localhost:5000/api/auth/register', userData);
-      
-      // Save token and user data
-      localStorage.setItem('token', response.data.token);
-      setUser(response.data);
-      return response.data;
-    } catch (error) {
-      setError(error.response?.data?.message || 'Registration failed');
-      throw error;
-    }
-  };
-
-  // Login user
-  const login = async (email, password) => {
-    try {
-      const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });
-      
-      // Save token and user data
-      localStorage.setItem('token', response.data.token);
-      setUser(response.data);
-      return response.data;
-    } catch (error) {
-      setError(error.response?.data?.message || 'Login failed');
-      throw error;
-    }
-  };
-
-  // Logout user
-  const logout = () => {
-    localStorage.removeItem('token');
-    setUser(null);
-    // Any other cleanup needed
-    delete axios.defaults.headers.common['Authorization'];
-  };
-
-  return (
-    <AuthContext.Provider value={{ user, loading, error, register, login, logout }}>
-      {children}
-    </AuthContext.Provider>
-  );
-}
-
-// Custom hook to use auth context
-export function useAuth() {
-  return useContext(AuthContext);
-}
-
-export default AuthContext;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\pages\auth\Auth.css
-/* frontend/src/pages/auth/Auth.css */
-.auth-container {
-  display: flex;
-  justify-content: center;
-  align-items: center;
-  min-height: 100vh;
-  background-color: #f9f9f9;
-}
-
-.auth-form-container {
-  width: 100%;
-  max-width: 450px;
-  padding: 2rem;
-  background-color: white;
-  border-radius: 8px;
-  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
-}
-
-.auth-form-container h2 {
-  margin-bottom: 1.5rem;
-  text-align: center;
-  color: #333;
-}
-
-.form-group {
-  margin-bottom: 1.5rem;
-}
-
-.form-group label {
-  display: block;
-  margin-bottom: 0.5rem;
-  color: #555;
-  font-weight: 500;
-}
-
-.form-group input,
-.form-group select {
-  width: 100%;
-  padding: 0.75rem;
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 14px;
-  background-color: #ffffff; /* Light background color */
-  color: #333; /* Dark text color */
-}
-
-.form-group input::placeholder,
-.form-group select::placeholder {
-  color: #999; /* Placeholder text color */
-}
-
-.form-group input:focus,
-.form-group select:focus {
-  outline: none;
-  border-color: #4ea14a; /* Add focus border color */
-}
-
-.error-message {
-  background-color: #ffe6e6;
-  color: #e74c3c;
-  padding: 0.75rem;
-  margin-bottom: 1.5rem;
-  border-radius: 4px;
-  text-align: center;
-}
-
-.auth-button {
-  width: 100%;
-  padding: 0.75rem;
-  background-color: #4ea14a;
-  color: white;
-  border: none;
-  border-radius: 4px;
-  font-size: 1rem;
-  font-weight: bold;
-  cursor: pointer;
-  transition: background-color 0.3s;
-}
-
-.auth-button:hover {
-  background-color: #3c8a38;
-}
-
-.auth-footer {
-  margin-top: 1.5rem;
-  text-align: center;
-  color: #777;
-}
-
-.auth-footer a {
-  color: #4ea14a;
-  text-decoration: none;
-}
-
-.auth-footer a:hover {
-  text-decoration: underline;
-}
-
-/* Override autofill styles in Chrome/Safari */
-input:-webkit-autofill,
-input:-webkit-autofill:hover, 
-input:-webkit-autofill:focus,
-input:-webkit-autofill:active {
-    -webkit-box-shadow: 0 0 0 30px white inset !important;
-    -webkit-text-fill-color: #333 !important;
-    transition: background-color 5000s ease-in-out 0s;
-}
-
-/* For Firefox and other browsers */
-input:-moz-autofill,
-input:-moz-autofill:hover,
-input:-moz-autofill:focus,
-input:-moz-autofill:active {
-    background-color: white !important;
-    color: #333 !important;
-}
-
-.auth-error {
-  background-color: #f8d7da;
-  color: #721c24;
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid #f5c6cb;
-}
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\pages\auth\Login.jsx
-// src/pages/auth/Login.jsx
-import React, { useState } from 'react';
-import { useNavigate, Link } from 'react-router-dom';
-import { useAuth } from '../../contexts/AuthContext';
-import './Auth.css';
-
-function Login() {
-  const [formData, setFormData] = useState({
-    email: '',
-    password: ''
-  });
-  const [error, setError] = useState('');
-  const [loading, setLoading] = useState(false);
-  const navigate = useNavigate();
-  const { login } = useAuth();
-
-  const handleChange = (e) => {
-    setFormData({ ...formData, [e.target.name]: e.target.value });
-  };
-
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    setError('');
-    setLoading(true);
-
-    try {
-      await login(formData.email, formData.password);
-      navigate('/dashboard');
-    } catch (err) {
-      // Improved error handling
-      if (err.response) {
-        // The server responded with an error message
-        setError(err.response.data.message || 'Login failed. Please check your credentials.');
-      } else if (err.request) {
-        // The request was made but no response was received
-        setError('Network error. Please check your connection and try again.');
-      } else {
-        // Something else caused the error
-        setError('An unexpected error occurred. Please try again.');
-      }
-      console.error('Login error:', err);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  return (
-    <div className="auth-container">
-      <div className="auth-form-container">
-        <h2>Login to SmartBin</h2>
-        
-        {error && <div className="auth-error">{error}</div>}
-        
-        <form onSubmit={handleSubmit}>
-          <div className="form-group">
-            <label htmlFor="email">Email</label>
-            <input
-              type="email"
-              id="email"
-              name="email"
-              value={formData.email}
-              onChange={handleChange}
-              required
-            />
-          </div>
-          
-          <div className="form-group">
-            <label htmlFor="password">Password</label>
-            <input
-              type="password"
-              id="password"
-              name="password"
-              value={formData.password}
-              onChange={handleChange}
-              required
-            />
-          </div>
-          
-          <button 
-            type="submit" 
-            className="auth-button"
-            disabled={loading}
-          >
-            {loading ? 'Logging in...' : 'Login'}
-          </button>
-        </form>
-        
-        <div className="auth-footer">
-          Don't have an account? <Link to="/register">Sign up</Link>
-        </div>
-      </div>
-    </div>
-  );
-}
-
-export default Login;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\pages\auth\Register.jsx
-// frontend/src/pages/auth/Register.jsx
-import React, { useState } from 'react';
-import { Link, useNavigate } from 'react-router-dom';
-import { useAuth } from '../../contexts/AuthContext';
-import './Auth.css';
-
-const validatePhone = (phone) => {
-  const phoneRegex = /^(\+\d{1,3}[- ]?)?\d{10}$/;
-  return phoneRegex.test(phone);
-};
-
-const validateAddress = (address) => {
-  return address.trim().length >= 5; 
-};
-
-const validateEmail = (email) => {
-  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
-  return emailRegex.test(email);
-};
-
-function Register() {
-  const [formData, setFormData] = useState({
-    name: '',
-    email: '',
-    password: '',
-    address: '',
-    phone: '',
-  });
-  const [formError, setFormError] = useState('');
-  const { register } = useAuth();
-  const navigate = useNavigate();
-
-  const handleChange = (e) => {
-    setFormData({
-      ...formData,
-      [e.target.name]: e.target.value
-    });
-  };
-
-  const handleBlur = (e) => {
-    const { name, value } = e.target;
-    
-    if (name === 'email' && value && !validateEmail(value)) {
-      setFormError('Please enter a valid email address');
-    } else if (name === 'password' && value.length < 8) {
-      setFormError('Password must be at least 8 characters long');
-    } else if (name === 'phone' && value && !validatePhone(value)) {
-      setFormError('Please enter a valid phone number');
-    } else if (name === 'address' && value && !validateAddress(value)) {
-      setFormError('Address should be at least 5 characters long');
-    } else {
-      setFormError('');
-    }
-  };
-
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    setFormError('');
-    
-    // Validate email
-    if (!validateEmail(formData.email)) {
-      setFormError('Please enter a valid email address');
-      return;
-    }
-    
-    // Validate password
-    if (formData.password.length < 8) {
-      setFormError('Password must be at least 8 characters long');
-      return;
-    }
-    
-    // Validate phone
-    if (!validatePhone(formData.phone)) {
-      setFormError('Please enter a valid phone number');
-      return;
-    }
-    
-    // Validate address
-    if (!validateAddress(formData.address)) {
-      setFormError('Please enter a valid address (minimum 5 characters)');
-      return;
-    }
-    
-    try {
-      await register(formData);
-      navigate('/dashboard');
-    } catch (error) {
-      console.error(error);
-      setFormError(error.response?.data?.message || 'Registration failed. Please check your information.');
-    }
-  };
-
-  return (
-    <div className="auth-container">
-      <div className="auth-form-container">
-        <h2>Create an Account</h2>
-        
-        {formError && (
-          <div className="error-message" aria-live="assertive">{formError}</div>
-        )}
-        
-        <form onSubmit={handleSubmit}>
-          <div className="form-group">
-            <label htmlFor="name">Full Name</label>
-            <input
-              type="text"
-              id="name"
-              name="name"
-              value={formData.name}
-              onChange={handleChange}
-              required
-              aria-label="Full Name"
-            />
-          </div>
-          
-          <div className="form-group">
-            <label htmlFor="email">Email</label>
-            <input
-              type="email" 
-              id="email"
-              name="email"
-              value={formData.email}
-              onChange={handleChange}
-              onBlur={handleBlur}
-              required
-            />
-          </div>
-          
-          <div className="form-group">
-            <label htmlFor="password">Password</label>
-            <input
-              type="password"
-              id="password"
-              name="password"
-              value={formData.password}
-              onChange={handleChange}
-              onBlur={handleBlur}
-              required
-              minLength="8"
-              aria-label="Password"
-              aria-describedby="passwordHelp"
-            />
-            <small id="passwordHelp" className="form-text text-muted">Password must be at least 8 characters long and include numbers or symbols for better security.</small>
-          </div>
-
-          <div className="form-group">
-            <label htmlFor="address">Address</label>
-            <input
-              type="text"
-              id="address"
-              name="address"
-              value={formData.address}
-              onChange={handleChange}
-              onBlur={handleBlur}
-              required
-              aria-label="Address"
-            />
-          </div>
-
-          <div className="form-group">
-            <label htmlFor="phone">Phone Number</label>
-            <input
-              type="tel"
-              id="phone"
-              name="phone"
-              value={formData.phone}
-              onChange={handleChange}
-              onBlur={handleBlur}
-              required
-              aria-label="Phone Number"
-            />
-            <small className="form-text text-muted">
-              Enter a valid phone number with country code
-            </small>
-          </div>
-          
-          <button type="submit" className="auth-button">Register</button>
-        </form>
-        
-        <div className="auth-footer">
-          Already have an account? <Link to="/login">Login</Link>
-        </div>
-      </div>
-    </div>
-  );
-}
-
-export default Register;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\pages\profile\ProfilePage.css
-.profile-page {
-  width: 100%;
-  max-width: 800px;
-  margin: 0 auto;
-  padding: 20px;
-}
-
-.profile-page h2 {
-  margin-bottom: 20px;
-  color: #333;
-}
-
-.profile-loading {
-  text-align: center;
-  padding: 30px;
-  font-size: 16px;
-  color: #666;
-}
-
-.profile-error {
-  background-color: #f8d7da;
-  color: #721c24;
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid #f5c6cb;
-}
-
-.profile-tabs {
-  display: flex;
-  justify-content: space-between;
-  margin-bottom: 20px;
-  border-bottom: 1px solid #ddd;
-}
-
-.tab-button {
-  padding: 10px 20px;
-  background: #f8f8f8; /* Brighter background for inactive tabs */
-  border: none;
-  border-bottom: 3px solid transparent;
-  color: #555;
-  font-size: 16px;
-  cursor: pointer;
-  transition: all 0.3s;
-  margin-right: 10px; /* Add margin to create space between tabs */
-  box-shadow: 0 1px 3px rgba(0,0,0,0.05); /* Subtle shadow for depth */
-}
-
-.tab-button:hover {
-  color: #4ea14a;
-  background-color: #ffffff; /* Even brighter on hover */
-}
-
-.tab-button.active {
-  border-bottom: 3px solid #4ea14a;
-  color: #4ea14a;
-  font-weight: bold; /* Make the active tab text bold */
-  background-color: #ffffff; /* White background for active tab */
-  box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Slightly stronger shadow for active tab */
-}
-
-.profile-content {
-  background-color: white;
-  border-radius: 8px;
-  padding: 20px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-/* Update input field styles */
-.profile-form-container input,
-.profile-form-container select,
-.profile-form-container textarea {
-  background-color: #ffffff; /* Light background color */
-  color: #333; /* Dark text color */
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  padding: 10px;
-  font-size: 14px;
-}
-
-.profile-form-container input::placeholder,
-.profile-form-container select::placeholder,
-.profile-form-container textarea::placeholder {
-  color: #999; /* Placeholder text color */
-}
-
-.profile-form-container input:focus,
-.profile-form-container select:focus,
-.profile-form-container textarea:focus {
-  outline: none;
-  border-color: #4ea14a; /* Add focus border color */
-}
-
-/* Add this at the end of your file */
-
-.delete-account-section {
-  margin-top: 40px;
-  padding-top: 20px;
-  border-top: 1px solid #eee;
-}
-
-.delete-account-section h3 {
-  color: #dc3545;
-  margin-bottom: 10px;
-}
-
-.delete-account-section p {
-  color: #666;
-  margin-bottom: 15px;
-}
-
-.delete-account-button {
-  background-color: #dc3545;
-  color: white;
-  border: none;
-  padding: 10px 20px;
-  border-radius: 4px;
-  cursor: pointer;
-  font-size: 16px;
-  transition: background-color 0.3s;
-}
-
-.delete-account-button:hover {
-  background-color: #bd2130;
-}
-
-.delete-account-button:disabled {
-  background-color: #e4606d;
-  cursor: not-allowed;
-}
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\pages\profile\ProfilePage.jsx
-import React, { useState, useEffect } from 'react';
-import { useNavigate } from 'react-router-dom'; // Add this import
-import { useAuth } from '../../contexts/AuthContext';
-import ProfileForm from '../../components/profile/ProfileForm';
-import PasswordChangeForm from '../../components/profile/PasswordChangeForm';
-import DocumentUploadForm from '../../components/profile/DocumentUploadForm';
-import profileApi from '../../services/profileApi';
-import './ProfilePage.css';
-
-const ProfilePage = () => {
-  const [activeTab, setActiveTab] = useState('profile');
-  const [profileData, setProfileData] = useState(null);
-  const [loading, setLoading] = useState(true);
-  const [error, setError] = useState(null);
-  const { _user, logout } = useAuth(); // Get logout function
-  const navigate = useNavigate(); // Initialize navigate
-
-  useEffect(() => {
-    const fetchProfileData = async () => {
-      try {
-        setLoading(true);
-        const response = await profileApi.getProfile();
-        setProfileData(response.data);
-        setError(null);
-      } catch (err) {
-        setError('Failed to load profile data. Please try again later.');
-        console.error('Error fetching profile:', err);
-      } finally {
-        setLoading(false);
-      }
-    };
-
-    fetchProfileData();
-  }, []);
-
-  const handleProfileUpdate = async (updatedData) => {
-    try {
-      setLoading(true);
-      const response = await profileApi.updateProfile(updatedData);
-      setProfileData(response.data);
-      return { success: true, message: 'Profile updated successfully' };
-    } catch (err) {
-      console.error('Error updating profile:', err);
-      return { 
-        success: false, 
-        message: err.response?.data?.message || 'Failed to update profile' 
-      };
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  const handlePasswordChange = async (passwordData) => {
-    try {
-      setLoading(true);
-      await profileApi.changePassword(passwordData);
-      return { success: true, message: 'Password changed successfully' };
-    } catch (err) {
-      console.error('Error changing password:', err);
-      return { 
-        success: false, 
-        message: err.response?.data?.message || 'Failed to change password' 
-      };
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  const handleDocumentUpload = async (formData) => {
-    try {
-      setLoading(true);
-      await profileApi.uploadDocument(formData);
-      // Refresh profile data to get updated documents list
-      const response = await profileApi.getProfile();
-      setProfileData(response.data);
-      return { success: true, message: 'Document uploaded successfully' };
-    } catch (err) {
-      console.error('Error uploading document:', err);
-      return { 
-        success: false, 
-        message: err.response?.data?.message || 'Failed to upload document' 
-      };
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  const handleDeleteAccount = async () => {
-    // Confirmation dialog
-    const isConfirmed = window.confirm(
-      "Are you sure you want to delete your account? This action cannot be undone and all your data will be permanently deleted."
-    );
-    
-    if (!isConfirmed) return;
-    
-    try {
-      setLoading(true);
-      await profileApi.deleteAccount();
-      // Log user out after account deletion
-      logout();
-      // Redirect to homepage
-      navigate('/');
-    } catch (err) {
-      console.error('Error deleting account:', err);
-      setError(err.response?.data?.message || 'Failed to delete account. Please try again.');
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  if (loading && !profileData) {
-    return <div className="profile-loading">Loading profile information...</div>;
-  }
-
-  // Check if user is Resident/Garbage_Buyer to show delete option
-  const canDeleteAccount = profileData?.role === 'Resident/Garbage_Buyer';
-
-  return (
-    <div className="profile-page">
-      <h2>My Profile</h2>
-      {error && <div className="profile-error">{error}</div>}
-      
-      <div className="profile-tabs">
-        <button 
-          className={`tab-button ${activeTab === 'profile' ? 'active' : ''}`}
-          onClick={() => setActiveTab('profile')}
-        >
-          Profile Information
-        </button>
-        <button 
-          className={`tab-button ${activeTab === 'password' ? 'active' : ''}`}
-          onClick={() => setActiveTab('password')}
-        >
-          Change Password
-        </button>
-        <button 
-          className={`tab-button ${activeTab === 'documents' ? 'active' : ''}`}
-          onClick={() => setActiveTab('documents')}
-        >
-          Documents
-        </button>
-      </div>
-      
-      <div className="profile-content">
-        {activeTab === 'profile' && (
-          <ProfileForm 
-            profileData={profileData} 
-            onSubmit={handleProfileUpdate}
-            loading={loading}
-          />
-        )}
-        
-        {activeTab === 'password' && (
-          <PasswordChangeForm 
-            onSubmit={handlePasswordChange}
-            loading={loading}
-          />
-        )}
-        
-        {activeTab === 'documents' && (
-          <DocumentUploadForm 
-            documents={profileData?.documents || []}
-            onUpload={handleDocumentUpload}
-            loading={loading}
-          />
-        )}
-      </div>
-      
-      {canDeleteAccount && (
-        <div className="delete-account-section">
-          <h3>Delete Account</h3>
-          <p>Once you delete your account, there is no going back. Please be certain.</p>
-          <button 
-            className="delete-account-button"
-            onClick={handleDeleteAccount}
-            disabled={loading}
-          >
-            {loading ? 'Processing...' : 'Delete My Account'}
-          </button>
-        </div>
-      )}
-    </div>
-  );
-};
-
-export default ProfilePage;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\pages\LandingPage.css
-/* frontend/src/pages/LandingPage.css */
-.landing-page {
-  min-height: 100vh;
-  display: flex;
-  flex-direction: column;
-}
-
-.header {
-  display: flex;
-  justify-content: space-between;
-  align-items: center;
-  padding: 1rem 2rem;
-  background-color: #ffffff;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-}
-
-.logo {
-  font-size: 1.5rem;
-  font-weight: bold;
-  color: #2ecc71;
-}
-
-.hero {
-  flex: 1;
-  display: flex;
-  flex-direction: column;
-  justify-content: center;
-  align-items: center;
-  text-align: center;
-  padding: 2rem;
-  background-color: #f9f9f9;
-}
-
-.hero h1 {
-  font-size: 2.5rem;
-  margin-bottom: 1rem;
-  color: #333;
-}
-
-.hero p {
-  font-size: 1.2rem;
-  margin-bottom: 2rem;
-  color: #666;
-  max-width: 600px;
-}
-
-.get-started-button, .dashboard-button, .login-button {
-  display: inline-block;
-  padding: 0.75rem 1.5rem;
-  background-color: #2ecc71;
-  color: white;
-  text-decoration: none;
-  border-radius: 4px;
-  font-weight: bold;
-  transition: background-color 0.3s;
-}
-
-.login-button {
-  background-color: transparent;
-  color: #2ecc71;
-  border: 1px solid #2ecc71;
-}
-
-.get-started-button:hover, .dashboard-button:hover {
-  background-color: #27ae60;
-}
-
-.login-button:hover {
-  background-color: rgba(46, 204, 113, 0.1);
-}
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\pages\LandingPage.jsx
-import React from 'react';
-import { Link } from 'react-router-dom';
-import { useAuth } from '../contexts/AuthContext';
-import './LandingPage.css';
-
-function LandingPage() {
-  const { user } = useAuth();
-
-  return (
-    <div className="landing-page">
-      <header className="header">
-        <div className="logo">SmartBin</div>
-        <nav>
-          {user ? (
-            <Link to="/dashboard" className="dashboard-button">Dashboard</Link>
-          ) : (
-            <Link to="/login" className="login-button">Login</Link>
-          )}
-        </nav>
-      </header>
-
-      <section className="hero">
-        {!user ? (
-          <>
-            <h1>Smart Waste Management Solution</h1>
-            <p>Revolutionizing how we handle waste for a cleaner, greener future</p>
-            <Link to="/register" className="get-started-button">Get Started With Us</Link>
-          </>
-        ) : (
-          <>
-            <h1>Welcome back, {user.name}!</h1>
-            <p>Continue managing your waste efficiently with SmartBin</p>
-            <Link to="/dashboard" className="dashboard-button">Go to Dashboard</Link>
-          </>
-        )}
-      </section>
-      
-    </div>
-  );
-}
-
-export default LandingPage;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\pages\NotFound.jsx
-import React from 'react';
-import { Link } from 'react-router-dom';
-
-const NotFound = () => {
-  return (
-    <div style={{ textAlign: 'center', marginTop: '50px' }}>
-      <h1>404 - Page Not Found</h1>
-      <p>Sorry, the page you are looking for does not exist.</p>
-      <Link to="/">Go back to Home</Link>
-    </div>
-  );
-};
-
-export default NotFound;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\services\api.js
-import axios from 'axios';
-
-const api = axios.create({
-  baseURL: 'http://localhost:5000/api',
-  headers: {
-    'Content-Type': 'application/json'
-  }
-});
-
-// Add request interceptor to attach the auth token to every request
-api.interceptors.request.use(
-  (config) => {
-    const token = localStorage.getItem('token');
-    if (token) {
-      config.headers.Authorization = `Bearer ${token}`;
-    }
-    return config;
-  },
-  (error) => Promise.reject(error)
-);
-
-// Add response interceptor for error handling
-api.interceptors.response.use(
-  (response) => response,
-  (error) => {
-    // Handle session expiration
-    if (error.response && error.response.status === 401) {
-      localStorage.removeItem('token');
-      window.location.href = '/login';
-    }
-    return Promise.reject(error);
-  }
-);
-
-// Subscription Plans API
-export const subscriptionPlansApi = {
-  getAll: () => api.get('/subscription-plans'),
-  getById: (id) => api.get(`/subscription-plans/${id}`),
-  create: (planData) => api.post('/subscription-plans', planData),
-  update: (id, planData) => api.put(`/subscription-plans/${id}`, planData),
-  delete: (id) => api.delete(`/subscription-plans/${id}`)
-};
-
-export default api;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\services\attendanceApi.js
-import api from './api';
-
-const attendanceApi = {
-  // Staff endpoints
-  checkIn: () => api.post('/attendance/check-in'),
-  checkOut: () => api.put('/attendance/check-out'),
-  getMyAttendance: (startDate, endDate) => {
-    let url = '/attendance';
-    if (startDate && endDate) {
-      url += `?startDate=${startDate}&endDate=${endDate}`;
-    }
-    return api.get(url);
-  },
-  
-  // Admin endpoints
-  getAllAttendance: (params) => {
-    let url = '/attendance/all';
-    const queryParams = [];
-    
-    if (params?.startDate) queryParams.push(`startDate=${params.startDate}`);
-    if (params?.endDate) queryParams.push(`endDate=${params.endDate}`);
-    if (params?.staffId) queryParams.push(`staffId=${params.staffId}`);
-    
-    if (queryParams.length > 0) {
-      url += `?${queryParams.join('&')}`;
-    }
-    
-    return api.get(url);
-  },
-  updateAttendance: (id, data) => api.put(`/attendance/${id}`, data),
-  getAttendanceSummary: (month, year) => {
-    let url = '/attendance/summary';
-    if (month && year) {
-      url += `?month=${month}&year=${year}`;
-    }
-    return api.get(url);
-  }
-};
-
-export default attendanceApi;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\services\performanceApi.js
-import api from './api';
-
-const performanceApi = {
-  // Staff endpoints
-  getMyReviews: () => api.get('/performance/my-reviews'),
-  
-  // Admin endpoints
-  createReview: (data) => api.post('/performance', data),
-  getAllReviews: (staffId) => {
-    let url = '/performance';
-    if (staffId) {
-      url += `?staffId=${staffId}`;
-    }
-    return api.get(url);
-  },
-  getReviewById: (id) => api.get(`/performance/${id}`),
-  updateReview: (id, data) => api.put(`/performance/${id}`, data),
-  deleteReview: (id) => api.delete(`/performance/${id}`),
-  getPerformanceSummary: () => api.get('/performance/summary')
-};
-
-export default performanceApi;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\services\profileApi.js
-import api from './api';
-
-const profileApi = {
-  // Get current user profile
-  getProfile: () => api.get('/users/profile'),
-  
-  // Update user profile
-  updateProfile: (userData) => api.put('/users/profile', userData),
-  
-  // Delete user account
-  deleteAccount: () => api.delete('/users/profile'),
-  
-  // Change password
-  changePassword: (passwordData) => api.put('/users/profile', { password: passwordData.newPassword }),
-  
-  // Document operations
-  getDocuments: () => api.get('/documents'),
-  uploadDocument: (formData) => {
-    return api.post('/documents/upload', formData, {
-      headers: {
-        'Content-Type': 'multipart/form-data'
-      }
-    });
-  },
-  getDocument: (id) => api.get(`/documents/${id}`),
-  deleteDocument: (id) => api.delete(`/documents/${id}`)
-};
-
-export default profileApi;
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\utils\api.js
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\App.css
-/* Global resets */
-* {
-  margin: 0;
-  padding: 0;
-  box-sizing: border-box;
-}
-
-#root {
-  margin: 0;
-  padding: 0;
-  text-align: center;
-  height: 100vh;
-  width: 100%;
-}
-
-body {
-  font-family: 'Poppins', sans-serif;
-}
-
-.logo {
-  height: 6em;
-  padding: 1.5em;
-  will-change: filter;
-  transition: filter 300ms;
-}
-.logo:hover {
-  filter: drop-shadow(0 0 2em #646cffaa);
-}
-.logo.react:hover {
-  filter: drop-shadow(0 0 2em #61dafbaa);
-}
-
-@keyframes logo-spin {
-  from {
-    transform: rotate(0deg);
-  }
-  to {
-    transform: rotate(360deg);
-  }
-}
-
-@media (prefers-reduced-motion: no-preference) {
-  a:nth-of-type(2) .logo {
-    animation: logo-spin infinite 20s linear;
-  }
-}
-
-.card {
-  padding: 2em;
-}
-
-/* Global Form Styles */
-.form-group {
-  margin-bottom: 20px; /* Consistent margin */
-}
-
-.form-group label {
-  display: block;
-  margin-bottom: 5px;
-  font-weight: 500;
-  color: #444; /* Default label color */
-}
-
-.form-group input,
-.form-group select,
-.form-group textarea {
-  width: 100%;
-  padding: 10px; /* Consistent padding */
-  border: 1px solid #ddd;
-  border-radius: 4px;
-  font-size: 14px;
-  background-color: #ffffff; /* Ensure light background */
-  color: #333; /* Ensure dark text */
-  box-sizing: border-box; /* Add for consistency */
-}
-
-.form-group input::placeholder,
-.form-group select::placeholder,
-.form-group textarea::placeholder {
-  color: #999; /* Consistent placeholder color */
-}
-
-.form-group input:focus,
-.form-group select:focus,
-.form-group textarea:focus {
-  outline: none;
-  border-color: #4ea14a; /* Consistent focus color */
-}
-
-.form-group textarea {
-  resize: vertical; /* Allow vertical resize */
-}
-
-.form-group small {
-  display: block;
-  margin-top: 5px;
-  color: #777;
-  font-size: 12px;
-}
-
-/* Read-only style */
-.read-only {
-  background-color: #f9f9f9 !important; /* Use important to override potential conflicts */
-  color: #666 !important;
-  cursor: not-allowed;
-}
-
-/* Form Error/Success Messages (Basic Structure) */
-.form-message {
-  padding: 10px 15px;
-  margin-bottom: 20px;
-  border-radius: 4px;
-  border: 1px solid transparent;
-}
-
-.form-error {
-  background-color: #f8d7da;
-  color: #721c24;
-  border-color: #f5c6cb;
-}
-
-.form-success {
-  background-color: #d4edda;
-  color: #155724;
-  border-color: #c3e6cb;
-}
-
-.read-the-docs {
-  color: #888;
-}
-
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\App.jsx
-// src/App.jsx
-import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
-import { AuthProvider, useAuth } from './contexts/AuthContext';
-import LandingPage from './pages/LandingPage';
-import Login from './pages/auth/Login';
-import Register from './pages/auth/Register';
-import DashboardLayout from './components/layouts/DashboardLayout';
-import ProfilePage from './pages/profile/ProfilePage';
-import './App.css';
-
-// Protected route component
-const ProtectedRoute = ({ children }) => {
-  const { user, loading } = useAuth();
-
-  // Show loading state
-  if (loading) return <div>Loading...</div>;
-
-  // Redirect to login if not authenticated
-  if (!user) return <Navigate to="/login" />;
-
-  return children;
-};
-
-function AppContent() {
-  return (
-    <Router>
-      <Routes>
-        {/* Public routes */}
-        <Route path="/" element={<LandingPage />} />
-        <Route path="/login" element={<Login />} />
-        <Route path="/register" element={<Register />} />
-        
-        {/* Protected routes - all dashboard routes should be nested here */}
-        <Route path="/dashboard/*" element={
-          <ProtectedRoute>
-            <DashboardLayout />
-          </ProtectedRoute>
-        } />
-      </Routes>
-    </Router>
-  );
-}
-
-function App() {
-  return (
-    <AuthProvider>
-      <AppContent />
-    </AuthProvider>
-  );
-}
-
-export default App;
-
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\index.css
-:root {
-  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
-  line-height: 1.5;
-  font-weight: 400;
-
-  color-scheme: light dark;
-  color: rgba(255, 255, 255, 0.87);
-  background-color: #242424;
-
-  font-synthesis: none;
-  text-rendering: optimizeLegibility;
-  -webkit-font-smoothing: antialiased;
-  -moz-osx-font-smoothing: grayscale;
-}
-
-a {
-  font-weight: 500;
-  color: #646cff;
-  text-decoration: inherit;
-}
-a:hover {
-  color: #535bf2;
-}
-
-body {
-  margin: 0;
-  display: flex;
-  place-items: center;
-  min-width: 320px;
-  min-height: 100vh;
-}
-
-h1 {
-  font-size: 3.2em;
-  line-height: 1.1;
-}
-
-button {
-  border-radius: 8px;
-  border: 1px solid transparent;
-  padding: 0.6em 1.2em;
-  font-size: 1em;
-  font-weight: 500;
-  font-family: inherit;
-  background-color: #1a1a1a;
-  cursor: pointer;
-  transition: border-color 0.25s;
-}
-button:hover {
-  border-color: #646cff;
-}
-button:focus,
-button:focus-visible {
-  outline: 4px auto -webkit-focus-ring-color;
-}
-
-@media (prefers-color-scheme: light) {
-  :root {
-    color: #213547;
-    background-color: #ffffff;
-  }
-  a:hover {
-    color: #747bff;
-  }
-  button {
-    background-color: #f9f9f9;
-  }
-}
-
-
-
-
-// File: C:\y2s2ITP\SmartBin\frontend\src\main.jsx
-import { StrictMode } from 'react'
-import { createRoot } from 'react-dom/client'
-import { AuthProvider } from './contexts/AuthContext'
-import './index.css'
-import App from './App.jsx'
-
-createRoot(document.getElementById('root')).render(
-  <StrictMode>
-    <AuthProvider>
-      <App />
-    </AuthProvider>
-  </StrictMode>,
-)
-
-
-
-
diff --git a/backend/src/config/index.js b/backend/src/config/index.js
new file mode 100644
index 0000000..7320f66
--- /dev/null
+++ b/backend/src/config/index.js
@@ -0,0 +1,39 @@
+// backend/src/config/index.js
+require('dotenv').config(); // Load .env file contents into process.env
+
+// Define application configuration
+const config = {
+  // Server configuration
+  port: process.env.PORT || 5000,
+
+  // Database configuration
+  mongodbUri: process.env.MONGODB_URI,
+
+  // JWT configuration
+  jwtSecret: process.env.JWT_SECRET,
+  jwtExpire: process.env.JWT_EXPIRE || '30d', // Default expiration: 30 days
+
+  // User Roles
+  roles: ['Resident/Garbage_Buyer', 'staff', 'admin', 'financial_manager'],
+  defaultRole: 'Resident/Garbage_Buyer',
+
+  // Rate Limiting configuration
+  rateLimitWindowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS, 10) || 15 * 60 * 1000, // 15 minutes
+  rateLimitMax: parseInt(process.env.RATE_LIMIT_MAX, 10) || 100, // Max 100 requests per window
+
+  // Add other configurations as needed
+  // e.g., email service credentials, external API keys, etc.
+};
+
+// Validate essential configuration
+if (!config.mongodbUri) {
+  console.error('FATAL ERROR: MONGODB_URI is not defined in environment variables.');
+  process.exit(1); // Exit if essential config is missing
+}
+if (!config.jwtSecret) {
+  console.error('FATAL ERROR: JWT_SECRET is not defined in environment variables.');
+  process.exit(1); // Exit if essential config is missing
+}
+
+
+module.exports = config;
diff --git a/backend/src/controllers/attendanceController.js b/backend/src/controllers/attendanceController.js
index 05204c1..fadd2df 100644
--- a/backend/src/controllers/attendanceController.js
+++ b/backend/src/controllers/attendanceController.js
@@ -1,3 +1,4 @@
+const mongoose = require('mongoose'); // Import mongoose
 const Attendance = require('../models/Attendance');
 const User = require('../models/User');
 const NotFoundError = require('../errors/NotFoundError');
diff --git a/backend/src/controllers/authController.js b/backend/src/controllers/authController.js
index 3927665..97bc765 100644
--- a/backend/src/controllers/authController.js
+++ b/backend/src/controllers/authController.js
@@ -6,11 +6,13 @@ const BadRequestError = require('../errors/BadRequestError');
 const UnauthorizedError = require('../errors/UnauthorizedError');
 const ApiError = require('../errors/ApiError');
 const NotFoundError = require('../errors/NotFoundError');
+const config = require('../config'); // Import the centralized config
 
 // Generate JWT token
 const generateToken = (id) => {
-  return jwt.sign({ id }, process.env.JWT_SECRET, {
-    expiresIn: process.env.JWT_EXPIRE || '30d'
+  // Use config values and ensure they are strings
+  return jwt.sign({ id }, String(config.jwtSecret), {
+    expiresIn: String(config.jwtExpire)
   });
 };
 
@@ -55,13 +57,8 @@ exports.registerUser = async (req, res, next) => {
 
   } catch (error) {
     console.error('Registration error:', error);
-    // Pass specific errors (like BadRequestError) or a generic one
-    if (!(error instanceof ApiError)) {
-      // Mongoose validation errors are handled globally, pass others
-      next(new ApiError(500, 'Failed to register user'));
-    } else {
-      next(error);
-    }
+    // Simply pass the error to the global handler
+    next(error); 
   }
 };
 
@@ -105,12 +102,8 @@ exports.loginUser = async (req, res, next) => {
 
   } catch (error) {
     console.error('Login error:', error);
-    // Pass UnauthorizedError or a generic one
-    if (!(error instanceof ApiError)) {
-        next(new ApiError(500, 'Login failed'));
-    } else {
-        next(error);
-    }
+    // Simply pass the error to the global handler
+    next(error); 
   }
 };
 
diff --git a/backend/src/controllers/documentController.js b/backend/src/controllers/documentController.js
index 38df560..c674ad9 100644
--- a/backend/src/controllers/documentController.js
+++ b/backend/src/controllers/documentController.js
@@ -39,13 +39,8 @@ exports.uploadDocument = async (req, res, next) => {
     res.status(201).json(document);
   } catch (error) {
     console.error('Document upload error:', error);
-    // If it's a multer error or validation error, global handler might catch it.
-    // Pass other errors or a generic one.
-    if (!(error instanceof ApiError)) {
-        next(new ApiError(500, 'Failed to upload document'));
-    } else {
-        next(error);
-    }
+    // Simply pass the error to the global handler
+    next(error);
   }
 };
 
@@ -63,7 +58,8 @@ exports.getUserDocuments = async (req, res, next) => {
     res.json(documents);
   } catch (error) {
     console.error('Error fetching user documents:', error);
-    next(new ApiError(500, 'Failed to retrieve documents'));
+    // Simply pass the error to the global handler
+    next(error); 
   }
 };
 
diff --git a/backend/src/controllers/financialController.js b/backend/src/controllers/financialController.js
index b5e6cca..a5918c5 100644
--- a/backend/src/controllers/financialController.js
+++ b/backend/src/controllers/financialController.js
@@ -20,26 +20,38 @@ exports.getDashboardData = async (req, res, next) => {
     try {
         const { range = 'month' } = req.query; // Default to 'month'
         let startDate, endDate = new Date();
-
-        // Determine date range
+        let groupBy, labelFormatter;
+        // Determine date range and grouping
         switch (range) {
             case 'last3months':
                 startDate = new Date();
                 startDate.setMonth(startDate.getMonth() - 3);
-                startDate.setDate(1); // Start from the beginning of the month 3 months ago
+                startDate.setDate(1);
                 startDate.setHours(0, 0, 0, 0);
+                groupBy = { year: { $year: "$paymentDate" }, month: { $month: "$paymentDate" } };
+                labelFormatter = (g) => {
+                  const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
+                  return `${monthNames[g.month - 1]}-${g.year}`;
+                };
                 break;
             case 'year':
-                startDate = new Date(endDate.getFullYear(), 0, 1); // Start of current year
+                startDate = new Date(endDate.getFullYear(), 0, 1);
                 startDate.setHours(0, 0, 0, 0);
+                groupBy = { year: { $year: "$paymentDate" }, month: { $month: "$paymentDate" } };
+                labelFormatter = (g) => {
+                  const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
+                  return `${monthNames[g.month - 1]}-${g.year}`;
+                };
                 break;
             case 'month':
             default:
-                startDate = new Date(endDate.getFullYear(), endDate.getMonth(), 1); // Start of current month
+                startDate = new Date(endDate.getFullYear(), endDate.getMonth(), 1);
                 startDate.setHours(0, 0, 0, 0);
+                groupBy = { day: { $dayOfMonth: "$paymentDate" } };
+                labelFormatter = (g) => g.day.toString();
                 break;
         }
-        endDate.setHours(23, 59, 59, 999); // End of today
+        endDate.setHours(23, 59, 59, 999);
 
         // --- Aggregations ---
 
@@ -71,19 +83,39 @@ exports.getDashboardData = async (req, res, next) => {
             endDate: { $gte: new Date() } // Active if end date is in the future
         });
 
-        // 6. Revenue Breakdown by Plan (Optional - can be complex)
+        // Revenue trend
+        const revenueTrendRaw = await Payment.aggregate([
+            { $match: { paymentDate: { $gte: startDate, $lte: endDate }, status: 'completed' } },
+            { $group: { _id: groupBy, total: { $sum: '$amount' } } },
+            { $sort: { '_id.year': 1, '_id.month': 1, '_id.day': 1 } }
+        ]);
+        // Expense trend
+        let expenseGroupBy;
+        switch (range) {
+            case 'last3months':
+            case 'year':
+                expenseGroupBy = { year: { $year: "$date" }, month: { $month: "$date" } };
+                break;
+            case 'month':
+            default:
+                expenseGroupBy = { day: { $dayOfMonth: "$date" } };
+                break;
+        }
+        const expenseTrendRaw = await Expense.aggregate([
+            { $match: { date: { $gte: startDate, $lte: endDate } } },
+            { $group: { _id: expenseGroupBy, total: { $sum: '$amount' } } },
+            { $sort: { '_id.year': 1, '_id.month': 1, '_id.day': 1 } }
+        ]);
+        // Format trend data for frontend
+        const revenueTrend = revenueTrendRaw.map(g => ({ month: labelFormatter(g._id), total: g.total }));
+        const expenseTrend = expenseTrendRaw.map(g => ({ month: labelFormatter(g._id), total: g.total }));
+
+        // 6. Revenue Breakdown by Plan
         const revenueByPlan = await Payment.aggregate([
-            { $match: { paymentDate: { $gte: startDate, $lte: endDate }, status: 'completed', userSubscription: { $exists: true } } },
-            { $lookup: { // Join with UserSubscription
-                from: 'usersubscriptions',
-                localField: 'userSubscription',
-                foreignField: '_id',
-                as: 'subDetails'
-            }},
-            { $unwind: '$subDetails' },
+            { $match: { paymentDate: { $gte: startDate, $lte: endDate }, status: 'completed', subscriptionPlan: { $exists: true } } }, // Ensure subscriptionPlan field exists
             { $lookup: { // Join with SubscriptionPlan
                 from: 'subscriptionplans',
-                localField: 'subDetails.plan',
+                localField: 'subscriptionPlan', // Use the direct field from Payment model
                 foreignField: '_id',
                 as: 'planDetails'
             }},
@@ -95,23 +127,45 @@ exports.getDashboardData = async (req, res, next) => {
             }},
             { $project: {
                 _id: 0,
-                planName: '$_id',
-                totalAmount: 1,
+                planName: '$_id', // Keep planName for consistency if frontend expects it
+                revenue: '$totalAmount', // Rename totalAmount to revenue
                 count: 1
             }},
-            { $sort: { totalAmount: -1 } }
+            { $sort: { revenue: -1 } } // Sort by revenue
         ]);
 
-        // 7. Recent Payments (limit 5)
+        // 7. Expenses Breakdown by Category
+        const expensesByCategory = await Expense.aggregate([
+            { $match: { date: { $gte: startDate, $lte: endDate } } },
+            { $group: {
+                _id: '$category',
+                total: { $sum: '$amount' }
+            }},
+            { $project: {
+                _id: 0,
+                category: '$_id',
+                total: 1
+            }},
+            { $sort: { total: -1 } }
+        ]);
+
+        // 8. Recent Payments (limit 5)
         const recentPayments = await Payment.find({ paymentDate: { $gte: startDate, $lte: endDate } })
             .populate('user', 'name email')
             .sort({ paymentDate: -1 })
-            .limit(5);
+            .limit(5)
+            .select('paymentDate user description amount status'); // Select specific fields
 
-        // 8. Recent Expenses (limit 5)
+        // 9. Recent Expenses (limit 5)
         const recentExpenses = await Expense.find({ date: { $gte: startDate, $lte: endDate } })
             .sort({ date: -1 })
-            .limit(5);
+            .limit(5)
+            .select('date category description amount status'); // Select specific fields
+
+        // 10. Fetch all Subscription Plans details for the subscription tab
+        const subscriptionPlans = await SubscriptionPlan.find({})
+            .select('name price duration subscriberCount _id') // Select necessary fields
+            .lean(); // Use lean for plain JS objects
 
         // --- Assemble Dashboard Data ---
         const dashboardData = {
@@ -121,18 +175,43 @@ exports.getDashboardData = async (req, res, next) => {
                 netProfit,
                 newSubscriptions,
                 activeSubscriptions,
+                // Add other summary fields if needed, e.g., outstanding payments
+                // outstandingPayments: await Payment.aggregate([...]) // Example
                 dateRange: { start: startDate.toISOString(), end: endDate.toISOString(), label: range }
             },
-            revenueByPlan,
-            recentPayments,
-            recentExpenses
+            revenueByPlan, // Now uses 'revenue' field
+            expensesByCategory, // Added expenses by category
+            recentTransactions: { // Group recent items
+                payments: recentPayments.map(p => ({ // Map to consistent structure if needed
+                    id: p._id,
+                    date: p.paymentDate,
+                    customer: p.user?.name, // Handle potential null user
+                    description: p.description,
+                    amount: p.amount,
+                    status: p.status
+                })),
+                expenses: recentExpenses.map(e => ({ // Map to consistent structure
+                    id: e._id,
+                    date: e.date,
+                    category: e.category,
+                    description: e.description,
+                    amount: e.amount,
+                    status: e.status
+                }))
+            },
+            trends: {
+                revenue: revenueTrend,
+                expenses: expenseTrend
+            },
+            subscriptionPlans // Added subscription plans list
         };
 
         res.status(200).json(dashboardData);
 
     } catch (error) {
         console.error('Error fetching financial dashboard data:', error);
-        next(new ApiError(500, 'Error fetching dashboard data')); // Pass error to global handler
+        // Simply pass the error to the global handler
+        next(error);
     }
 };
 
@@ -181,7 +260,8 @@ exports.getAllPayments = async (req, res, next) => {
 
     } catch (error) {
         console.error('Error fetching payments:', error);
-        next(error); // Pass potential BadRequestError or others
+        // Simply pass the error to the global handler
+        next(error); 
     }
 };
 
@@ -206,7 +286,8 @@ exports.getPaymentById = async (req, res, next) => {
         res.status(200).json(payment);
     } catch (error) {
         console.error('Error fetching payment by ID:', error);
-        next(error); // Pass potential NotFoundError or others
+        // Simply pass the error to the global handler
+        next(error); 
     }
 };
 
@@ -257,8 +338,8 @@ exports.recordManualPayment = async (req, res, next) => {
 
     } catch (error) {
         console.error('Error recording manual payment:', error);
-        // Mongoose validation errors handled globally
-        next(error); // Pass NotFoundError, BadRequestError, or others
+        // Simply pass the error to the global handler
+        next(error); 
     }
 };
 
@@ -298,7 +379,8 @@ exports.getAllExpenses = async (req, res, next) => {
 
     } catch (error) {
         console.error('Error fetching expenses:', error);
-        next(error); // Pass potential BadRequestError or others
+        // Simply pass the error to the global handler
+        next(error); 
     }
 };
 
@@ -321,7 +403,8 @@ exports.getExpenseById = async (req, res, next) => {
         res.status(200).json(expense);
     } catch (error) {
         console.error('Error fetching expense by ID:', error);
-        next(error); // Pass potential NotFoundError or others
+        // Simply pass the error to the global handler
+        next(error); 
     }
 };
 
@@ -349,8 +432,8 @@ exports.recordExpense = async (req, res, next) => {
 
     } catch (error) {
         console.error('Error recording expense:', error);
-        // Mongoose validation errors handled globally
-        next(error); // Pass potential validation errors or others
+        // Simply pass the error to the global handler
+        next(error); 
     }
 };
 
@@ -384,8 +467,8 @@ exports.updateExpense = async (req, res, next) => {
 
     } catch (error) {
         console.error('Error updating expense:', error);
-        // Mongoose validation errors handled globally
-        next(error); // Pass NotFoundError or others
+        // Simply pass the error to the global handler
+        next(error); 
     }
 };
 
@@ -411,6 +494,7 @@ exports.deleteExpense = async (req, res, next) => {
 
     } catch (error) {
         console.error('Error deleting expense:', error);
-        next(error); // Pass NotFoundError or others
+        // Simply pass the error to the global handler
+        next(error); 
     }
 };
diff --git a/backend/src/errors/index.js b/backend/src/errors/index.js
new file mode 100644
index 0000000..65c3e75
--- /dev/null
+++ b/backend/src/errors/index.js
@@ -0,0 +1,6 @@
+module.exports = {
+  UnauthorizedError: require('./UnauthorizedError'),
+  ForbiddenError: require('./ForbiddenError'),
+  BadRequestError: require('./BadRequestError'),
+  NotFoundError: require('./NotFoundError'),
+};
\ No newline at end of file
diff --git a/backend/src/middleware/authMiddleware.js b/backend/src/middleware/authMiddleware.js
index 796f2d0..89992f8 100644
--- a/backend/src/middleware/authMiddleware.js
+++ b/backend/src/middleware/authMiddleware.js
@@ -1,42 +1,61 @@
 // backend/src/middleware/authMiddleware.js
 const jwt = require('jsonwebtoken');
 const User = require('../models/User');
+const { UnauthorizedError, ForbiddenError } = require('../errors'); // Import custom errors
+const config = require('../config'); // Import the centralized config
 
 // Protect routes
 exports.protect = async (req, res, next) => {
   let token;
-  
+
   // Check for token in headers
   if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
     try {
       // Get token from header
       token = req.headers.authorization.split(' ')[1];
-      
+
       // Verify token
-      const decoded = jwt.verify(token, process.env.JWT_SECRET);
-      
+      const decoded = jwt.verify(token, config.jwtSecret); // Use config.jwtSecret
+
       // Get user from the token
       req.user = await User.findById(decoded.id).select('-password');
-      
+
+      if (!req.user) {
+        // If user associated with token doesn't exist anymore
+        return next(new UnauthorizedError('User belonging to this token does no longer exist'));
+      }
+
       next();
     } catch (error) {
-      console.error(error);
-      res.status(401).json({ message: 'Not authorized, token failed' });
+      // Catch JWT errors specifically, let global handler manage response
+      // Use the specific error types for better handling in the global handler
+      if (error instanceof jwt.JsonWebTokenError || error instanceof jwt.TokenExpiredError) {
+          return next(error); // Pass JWT specific errors to the global handler
+      } else {
+          // Pass other unexpected errors
+          return next(new UnauthorizedError('Not authorized, token processing failed'));
+      }
     }
   }
-  
+
   if (!token) {
-    res.status(401).json({ message: 'Not authorized, no token' });
+    // Let global handler manage response
+    return next(new UnauthorizedError('Not authorized, no token'));
   }
 };
 
 // Role authorization
 exports.authorize = (...roles) => {
   return (req, res, next) => {
-    if (!req.user || !roles.includes(req.user.role)) {
-      return res.status(403).json({
-        message: `Role ${req.user ? req.user.role : 'undefined'} is not authorized to access this resource`
-      });
+    // Ensure protect middleware runs first, so req.user exists
+    if (!req.user) {
+        // This should ideally not happen if protect runs first, but as a safeguard
+        return next(new UnauthorizedError('Not authorized to access this resource'));
+    }
+    // Check if the user's role is included in the allowed roles
+    if (!roles.includes(req.user.role)) {
+      // Let global handler manage response
+      return next(new ForbiddenError(`Role ${req.user.role} is not authorized to access this resource`));
     }
     next();
   };
diff --git a/backend/src/middleware/roleMiddleware.js b/backend/src/middleware/roleMiddleware.js
deleted file mode 100644
index 2f31e9a..0000000
--- a/backend/src/middleware/roleMiddleware.js
+++ /dev/null
@@ -1,28 +0,0 @@
-// Middleware factory to check if user has one of the allowed roles
-const roleMiddleware = (allowedRoles) => {
-  return (req, res, next) => {
-    // Ensure req.user exists (should be set by authMiddleware)
-    if (!req.user || !req.user.role) {
-      return res.status(401).json({ message: 'Authentication required or user role not found' });
-    }
-
-    const userRole = req.user.role;
-
-    // Check if the user's role is included in the allowed roles
-    // Convert allowedRoles to lowercase for case-insensitive comparison if needed,
-    // or ensure consistency in role naming (e.g., 'financial_manager' vs 'Financial Manager')
-    // Assuming roles in the database match the strings in allowedRoles exactly for now.
-    if (allowedRoles.includes(userRole)) {
-      next(); // User has the required role, proceed to the next middleware/controller
-    } else {
-      console.warn(`Role access denied for user ${req.user.id} with role '${userRole}'. Required: ${allowedRoles.join(' or ')}`);
-      return res.status(403).json({ message: 'Forbidden: Insufficient permissions' });
-    }
-  };
-};
-
-// Export the middleware factory function as the default export
-module.exports = roleMiddleware;
-
-// Example refactor for isFinancialManager middleware using the new roleMiddleware
-exports.isFinancialManager = roleMiddleware(['financial_manager', 'admin']);
\ No newline at end of file
diff --git a/backend/src/middleware/validationErrorHandler.js b/backend/src/middleware/validationErrorHandler.js
new file mode 100644
index 0000000..c634501
--- /dev/null
+++ b/backend/src/middleware/validationErrorHandler.js
@@ -0,0 +1,16 @@
+// backend/src/middleware/validationErrorHandler.js
+const { validationResult } = require('express-validator');
+const { BadRequestError } = require('../errors'); // Import custom error
+
+const handleValidationErrors = (req, res, next) => {
+  const errors = validationResult(req);
+  if (!errors.isEmpty()) {
+    // Extract specific error messages
+    const errorMessages = errors.array().map(err => err.msg);
+    // Throw a BadRequestError with the validation messages
+    throw new BadRequestError('Validation failed', errorMessages);
+  }
+  next();
+};
+
+module.exports = { handleValidationErrors };
diff --git a/backend/src/models/SubscriptionPlan.js b/backend/src/models/SubscriptionPlan.js
index c0e5535..f8a940c 100644
--- a/backend/src/models/SubscriptionPlan.js
+++ b/backend/src/models/SubscriptionPlan.js
@@ -32,7 +32,6 @@ const subscriptionPlanSchema = new mongoose.Schema({
 });
 
 // Indexes
-subscriptionPlanSchema.index({ name: 1 }); // Already implicitly indexed due to unique: true
 subscriptionPlanSchema.index({ price: 1 }); // Index for sorting/querying by price
 
 module.exports = mongoose.model('SubscriptionPlan', subscriptionPlanSchema);
\ No newline at end of file
diff --git a/backend/src/models/User.js b/backend/src/models/User.js
index 1c0e04a..6574eac 100644
--- a/backend/src/models/User.js
+++ b/backend/src/models/User.js
@@ -31,7 +31,6 @@ const userSchema =  new mongoose.Schema({
 });
 
 // Indexes
-userSchema.index({ email: 1 }); // Already implicitly indexed due to unique: true
 userSchema.index({ role: 1 }); // Add index for role if queried often
 
 //Encrypting Password Before Saving
diff --git a/backend/src/routes/attendanceRoutes.js b/backend/src/routes/attendanceRoutes.js
index fc5fff9..4cee86c 100644
--- a/backend/src/routes/attendanceRoutes.js
+++ b/backend/src/routes/attendanceRoutes.js
@@ -9,16 +9,8 @@ const {
   getAttendanceSummary
 } = require('../controllers/attendanceController');
 const { protect, authorize } = require('../middleware/authMiddleware');
-const { body, validationResult } = require('express-validator'); // Import validator
-
-// Middleware to handle validation errors
-const handleValidationErrors = (req, res, next) => {
-  const errors = validationResult(req);
-  if (!errors.isEmpty()) {
-    return res.status(400).json({ errors: errors.array() });
-  }
-  next();
-};
+const { body } = require('express-validator'); // Import body
+const { handleValidationErrors } = require('../middleware/validationErrorHandler'); // Import shared handler
 
 // Validation for updating attendance
 const updateAttendanceValidation = [
@@ -40,8 +32,8 @@ router.get('/', getMyAttendance);
 router.get('/all', authorize('admin'), getAllAttendance);
 router.put('/:id', 
   authorize('admin'), 
-  updateAttendanceValidation, // Add validation
-  handleValidationErrors, // Handle errors
+  updateAttendanceValidation, 
+  handleValidationErrors, // Use shared handler
   updateAttendance
 );
 router.get('/summary', authorize('admin'), getAttendanceSummary);
diff --git a/backend/src/routes/authRoutes.js b/backend/src/routes/authRoutes.js
index fdcdfae..a5fcc61 100644
--- a/backend/src/routes/authRoutes.js
+++ b/backend/src/routes/authRoutes.js
@@ -2,7 +2,8 @@ const express = require('express');
 const router = express.Router();
 const { registerUser, loginUser, getMe } = require('../controllers/authController');
 const { protect } = require('../middleware/authMiddleware');
-const { body, validationResult } = require('express-validator'); // Import validator
+const { body } = require('express-validator'); // Import only body
+const { handleValidationErrors } = require('../middleware/validationErrorHandler'); // Import the new handler
 
 // Validation middleware for registration
 const registerValidation = [
@@ -20,18 +21,8 @@ const loginValidation = [
   body('password', 'Password is required').exists(),
 ];
 
-// Middleware to handle validation errors
-const handleValidationErrors = (req, res, next) => {
-  const errors = validationResult(req);
-  if (!errors.isEmpty()) {
-    // Use 400 for validation errors
-    return res.status(400).json({ errors: errors.array() });
-  }
-  next();
-};
-
-router.post('/register', registerValidation, handleValidationErrors, registerUser);
-router.post('/login', loginValidation, handleValidationErrors, loginUser);
+router.post('/register', registerValidation, handleValidationErrors, registerUser); // Use imported handler
+router.post('/login', loginValidation, handleValidationErrors, loginUser); // Use imported handler
 router.get('/me', protect, getMe);
 
 module.exports = router;
\ No newline at end of file
diff --git a/backend/src/routes/financialRoutes.js b/backend/src/routes/financialRoutes.js
index 973b8c3..fdd4c81 100644
--- a/backend/src/routes/financialRoutes.js
+++ b/backend/src/routes/financialRoutes.js
@@ -1,15 +1,16 @@
 const express = require('express');
 const financialController = require('../controllers/financialController');
-const authMiddleware = require('../middleware/authMiddleware');
-const roleMiddleware = require('../middleware/roleMiddleware');
+// Import protect and authorize from authMiddleware
+const { protect, authorize } = require('../middleware/authMiddleware'); 
+// Remove roleMiddleware import
 
 const router = express.Router();
 
 // GET /api/financials/dashboard - Protected for Financial Manager and Admin
 router.get(
     '/dashboard',
-    authMiddleware.protect, // Use the protect method, not the entire middleware object
-    roleMiddleware(['financial_manager', 'admin']), // Ensure user has the correct role
+    protect, // Use protect directly
+    authorize('financial_manager', 'admin'), // Use authorize directly
     financialController.getDashboardData
 );
 
diff --git a/backend/src/routes/performanceRoutes.js b/backend/src/routes/performanceRoutes.js
index 846b64c..14f7118 100644
--- a/backend/src/routes/performanceRoutes.js
+++ b/backend/src/routes/performanceRoutes.js
@@ -10,16 +10,8 @@ const {
   getPerformanceSummary
 } = require('../controllers/performanceController');
 const { protect, authorize } = require('../middleware/authMiddleware');
-const { body, validationResult } = require('express-validator'); // Import validator
-
-// Middleware to handle validation errors
-const handleValidationErrors = (req, res, next) => {
-  const errors = validationResult(req);
-  if (!errors.isEmpty()) {
-    return res.status(400).json({ errors: errors.array() });
-  }
-  next();
-};
+const { body } = require('express-validator'); // Import body
+const { handleValidationErrors } = require('../middleware/validationErrorHandler'); // Import shared handler
 
 // Validation for creating/updating performance reviews
 const performanceValidation = [
@@ -42,8 +34,8 @@ router.get('/my-reviews', getMyPerformanceReviews);
 router.route('/')
   .post(
     authorize('admin'), 
-    performanceValidation, // Add validation
-    handleValidationErrors, // Handle errors
+    performanceValidation, 
+    handleValidationErrors, // Use shared handler
     createPerformanceReview
   )
   .get(authorize('admin'), getPerformanceReviews);
@@ -54,8 +46,8 @@ router.route('/:id')
   .get(getPerformanceReviewById) // Access controlled in controller
   .put(
     authorize('admin'), 
-    performanceValidation, // Add validation (can reuse or create specific update validation)
-    handleValidationErrors, // Handle errors
+    performanceValidation, 
+    handleValidationErrors, // Use shared handler
     updatePerformanceReview
   )
   .delete(authorize('admin'), deletePerformanceReview);
diff --git a/backend/src/routes/subscriptionPlanRoutes.js b/backend/src/routes/subscriptionPlanRoutes.js
index 14d5532..4c96e21 100644
--- a/backend/src/routes/subscriptionPlanRoutes.js
+++ b/backend/src/routes/subscriptionPlanRoutes.js
@@ -1,24 +1,18 @@
 const express = require('express');
 const router = express.Router();
-const authMiddleware = require('../middleware/authMiddleware');
-const roleMiddleware = require('../middleware/roleMiddleware');
+// Use authorize directly from authMiddleware
+const { protect, authorize } = require('../middleware/authMiddleware'); 
 const subscriptionPlanController = require('../controllers/SubscriptionPlanController');
-const { body, validationResult } = require('express-validator'); // Import validator
-
-// Middleware to handle validation errors
-const handleValidationErrors = (req, res, next) => {
-  const errors = validationResult(req);
-  if (!errors.isEmpty()) {
-    return res.status(400).json({ errors: errors.array() });
-  }
-  next();
-};
+const { body } = require('express-validator'); // Import only body
+// Import shared validation error handler
+const { handleValidationErrors } = require('../middleware/validationErrorHandler'); 
 
 // Validation for creating/updating subscription plans
 const planValidation = [
   body('name', 'Plan name is required').notEmpty().trim().escape(),
   body('description').optional().trim().escape(),
-  body('price', 'Price must be a valid number').isFloat({ gt: 0 }),
+  // Ensure price validation matches the refined model (Number, min: 0)
+  body('price', 'Price must be a non-negative number').isFloat({ min: 0 }), 
   body('duration', 'Duration is required (e.g., 1 month, 3 months)').notEmpty().trim().escape(),
   body('features').optional().isArray().withMessage('Features must be an array of strings'),
   body('features.*').optional().isString().trim().escape(), // Validate each item in the array
@@ -30,10 +24,10 @@ router.get('/', subscriptionPlanController.getSubscriptionPlans);
 // POST create a new subscription plan (Financial Manager or Admin only)
 router.post(
     '/',
-    authMiddleware.protect,
-    roleMiddleware(['financial_manager', 'admin']),
-    planValidation, // Add validation
-    handleValidationErrors, // Handle errors
+    protect, // Use protect directly
+    authorize('financial_manager', 'admin'), // Use authorize from authMiddleware
+    planValidation, 
+    handleValidationErrors, // Use shared handler
     subscriptionPlanController.createSubscriptionPlan
 );
 
@@ -43,18 +37,18 @@ router.get('/:id', subscriptionPlanController.getSubscriptionPlanById);
 // PUT update a subscription plan (Financial Manager or Admin only)
 router.put(
     '/:id',
-    authMiddleware.protect,
-    roleMiddleware(['financial_manager', 'admin']),
-    planValidation, // Add validation
-    handleValidationErrors, // Handle errors
+    protect,
+    authorize('financial_manager', 'admin'),
+    planValidation, 
+    handleValidationErrors, // Use shared handler
     subscriptionPlanController.updateSubscriptionPlan
 );
 
 // DELETE a subscription plan (Financial Manager or Admin only)
 router.delete(
     '/:id',
-    authMiddleware.protect,
-    roleMiddleware(['financial_manager', 'admin']),
+    protect,
+    authorize('financial_manager', 'admin'),
     subscriptionPlanController.deleteSubscriptionPlan
 );
 
diff --git a/backend/src/routes/userRoutes.js b/backend/src/routes/userRoutes.js
index 3626e98..b9d7bbc 100644
--- a/backend/src/routes/userRoutes.js
+++ b/backend/src/routes/userRoutes.js
@@ -10,16 +10,8 @@ const {
   deleteUserProfile
 } = require('../controllers/userController');
 const { protect, authorize } = require('../middleware/authMiddleware');
-const { body, validationResult } = require('express-validator'; // Import validator
-
-// Middleware to handle validation errors (can be moved to a shared utility)
-const handleValidationErrors = (req, res, next) => {
-  const errors = validationResult(req);
-  if (!errors.isEmpty()) {
-    return res.status(400).json({ errors: errors.array() });
-  }
-  next();
-};
+const { body } = require('express-validator'); // Import only body
+const { handleValidationErrors } = require('../middleware/validationErrorHandler'); // Import shared handler
 
 // Validation for updating user profile
 const updateProfileValidation = [
@@ -32,7 +24,7 @@ const updateProfileValidation = [
 // User profile routes - all users can access their own profile
 router.route('/profile')
   .get(protect, getUserProfile)
-  .put(protect, updateProfileValidation, handleValidationErrors, updateUserProfile) // Add validation here
+  .put(protect, updateProfileValidation, handleValidationErrors, updateUserProfile) // Use shared handler
   .delete(protect, deleteUserProfile);
 
 // Admin routes - only accessible by admins
diff --git a/backend/src/routes/userSubscriptionRoutes.js b/backend/src/routes/userSubscriptionRoutes.js
index fd1ebe8..552a818 100644
--- a/backend/src/routes/userSubscriptionRoutes.js
+++ b/backend/src/routes/userSubscriptionRoutes.js
@@ -1,24 +1,10 @@
 const express = require('express');
 const router = express.Router();
-const authMiddleware = require('../middleware/authMiddleware');
-const roleMiddleware = require('../middleware/roleMiddleware');
+const { protect, authorize } = require('../middleware/authMiddleware'); 
 const userSubscriptionController = require('../controllers/UserSubscriptionController');
-const { body, validationResult } = require('express-validator'); // Import validator
-
-// Middleware for protecting routes
-const { protect } = authMiddleware;
-
-// Middleware for checking roles
-const requireAdminOrFinancialManager = roleMiddleware(['admin', 'financial_manager']);
-
-// Middleware to handle validation errors
-const handleValidationErrors = (req, res, next) => {
-  const errors = validationResult(req);
-  if (!errors.isEmpty()) {
-    return res.status(400).json({ errors: errors.array() });
-  }
-  next();
-};
+const { body } = require('express-validator'); // Import only body
+// Import shared validation error handler
+const { handleValidationErrors } = require('../middleware/validationErrorHandler'); 
 
 // Validation for creating a user subscription
 const createUserSubscriptionValidation = [
@@ -40,7 +26,7 @@ const updateUserSubscriptionValidation = [
 router.get(
     '/', 
     protect, 
-    requireAdminOrFinancialManager, 
+    authorize('admin', 'financial_manager'), // Use authorize directly
     userSubscriptionController.getAllActiveSubscriptions
 );
 
@@ -48,9 +34,9 @@ router.get(
 router.post(
     '/', 
     protect, 
-    requireAdminOrFinancialManager, 
-    createUserSubscriptionValidation, // Add validation
-    handleValidationErrors, // Handle errors
+    authorize('admin', 'financial_manager'), // Use authorize directly
+    createUserSubscriptionValidation, 
+    handleValidationErrors, // Use shared handler
     userSubscriptionController.createUserSubscription
 );
 
@@ -74,9 +60,9 @@ router.get(
 router.put(
     '/:id', 
     protect, 
-    requireAdminOrFinancialManager, 
-    updateUserSubscriptionValidation, // Add validation
-    handleValidationErrors, // Handle errors
+    authorize('admin', 'financial_manager'), // Use authorize directly
+    updateUserSubscriptionValidation, 
+    handleValidationErrors, // Use shared handler
     userSubscriptionController.updateUserSubscription
 );
 
@@ -84,7 +70,7 @@ router.put(
 router.delete(
     '/:id', 
     protect, 
-    requireAdminOrFinancialManager, 
+    authorize('admin', 'financial_manager'), // Use authorize directly
     userSubscriptionController.cancelUserSubscription
 );
 
diff --git a/backend/src/scripts/seedFinancialData.js b/backend/src/scripts/seedFinancialData.js
index bdb5b68..5fb38cd 100644
--- a/backend/src/scripts/seedFinancialData.js
+++ b/backend/src/scripts/seedFinancialData.js
@@ -150,13 +150,75 @@ const seedFinancialData = async () => {
     console.log('Creating user subscriptions...');
     
     // Get current date for subscription calculations
-    const currentDate = new Date(); // Use the actual current date
-    const sixMonthsAgo = new Date(currentDate.getFullYear(), currentDate.getMonth() - 6, currentDate.getDate());
-    
+    const currentDate = new Date(2025, 3, 26); // Set a fixed current date for consistency (April 26, 2025)
+    const currentMonthStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
+    const currentYearStart = new Date(currentDate.getFullYear(), 0, 1);
+
+    console.log(`Current Date set to: ${currentDate.toDateString()}`);
+    console.log(`Generating data for the period up to ${currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}...`);
+
     // Clear existing user subscriptions 
     await UserSubscription.deleteMany({});
+    await SubscriptionPlan.deleteMany({});
+    
+    // --- Ensure Roles Exist ---
+    const roles = ['admin', 'financial_manager', 'staff', 'customer'];
+    for (const role of roles) {
+      const existingRole = await User.findOne({ role });
+      if (!existingRole) {
+        const newUser = new User({
+          name: `${role} User`,
+          email: `${role}@example.com`,
+          password: 'Password123!',
+          role,
+          createdAt: new Date()
+        });
+        await newUser.save();
+        console.log(`Created test ${role} user: ${newUser.name}`);
+      }
+    }
+
+    // --- Create Subscription Plans ---
+    const subscriptionPlans = [
+      {
+        name: 'Basic',
+        price: '49.99',
+        description: 'Basic waste collection service with weekly pickup and app access.',
+        duration: 'Monthly'
+      },
+      {
+        name: 'Standard',
+        price: '79.99',
+        description: 'Enhanced service with twice-weekly pickup, recycling options, and advanced app features.',
+        duration: 'Monthly'
+      },
+      {
+        name: 'Premium',
+        price: '99.99',
+        description: 'Premium service with unlimited pickup, priority service, recycling and composting options, and full app features.',
+        duration: 'Monthly'
+      },
+      {
+        name: 'Business',
+        price: '199.99',
+        description: 'Comprehensive waste management solution for small to medium businesses with daily collection and dedicated support.',
+        duration: 'Monthly'
+      }
+    ];
     
-    // Create realistic distribution of plans among users
+    // Create plans if they don't exist
+    for (const plan of subscriptionPlans) {
+      const existingPlan = await SubscriptionPlan.findOne({ name: plan.name });
+      
+      if (existingPlan) {
+        console.log(`Subscription plan ${plan.name} already exists.`);
+      } else {
+        await SubscriptionPlan.create(plan);
+        console.log(`Created subscription plan: ${plan.name}`);
+      }
+    }
+
+    // --- Create Users and Subscriptions ---
     for (const user of users) {
       // Randomly select a plan with weighted distribution
       // Premium and Business plans are less common
@@ -176,7 +238,7 @@ const seedFinancialData = async () => {
       const selectedPlan = allPlans[selectedPlanIndex];
       
       // Random start date between 6 months ago and now
-      const startDate = randomDate(sixMonthsAgo, currentDate);
+      const startDate = randomDate(currentYearStart, currentDate);
       
       // Determine duration based on plan
       let durationInMonths = 1; // Default monthly
@@ -220,124 +282,56 @@ const seedFinancialData = async () => {
         selectedPlan._id, 
         { $inc: { subscriberCount: 1 } }
       );
-    }
-    
-    // 3. Create payment records
-    console.log('Generating payment history...');
-    
-    // Clear existing payments
-    await Payment.deleteMany({});
-    
-    // Get all active subscriptions
-    const activeSubscriptions = await UserSubscription.find({ status: 'active' })
-      .populate('user')
-      .populate('subscriptionPlan');
-    
-    // Generate payment history for each active subscription
-    for (const subscription of activeSubscriptions) {
-      // Calculate how many payment cycles have occurred up to the current date
-      const startDate = new Date(subscription.startDate);
-      // Ensure we cover cycles potentially ending *in* the current month
-      const monthsElapsed = Math.max(0, Math.floor((currentDate.getTime() - startDate.getTime()) / (30 * 24 * 60 * 60 * 1000))); // Approximate months
-      const paymentCyclesToGenerate = monthsElapsed + 1; // Generate for current cycle too
-
-      // Generate a payment for each billing cycle that has occurred or is current
-      for (let i = 0; i < paymentCyclesToGenerate; i++) {
-        const paymentDate = addMonths(startDate, i);
-
-        // Only create payments up to the current date
-        if (paymentDate > currentDate) continue;
-        
-        // Determine payment amount based on plan price
-        const price = parseFloat(subscription.subscriptionPlan.price);
-        if (isNaN(price)) {
-          console.error(`Invalid price for subscription plan: ${subscription.subscriptionPlan.name}`);
-          continue; // Skip this payment if the price is invalid
-        }
-        const amount = price;
-        
-        // Generate some overdue and pending payments (10% chance)
-        const status = Math.random() > 0.9 
-          ? randomElement(['pending', 'failed']) 
-          : 'completed';
-        
-        // Create payment record
-        const payment = new Payment({
-          user: subscription.user._id,
-          amount,
-          description: `${subscription.subscriptionPlan.name} Plan - ${subscription.subscriptionPlan.duration}`,
-          paymentDate,
-          status,
-          paymentMethod: randomElement(['credit_card', 'debit_card', 'bank_transfer', 'paypal']),
-          subscriptionPlan: subscription.subscriptionPlan._id
+    } // End user creation loop
+
+    // --- Guarantee some subscriptions started THIS MONTH ---
+    console.log('\\nEnsuring some subscriptions started this month...');
+    const currentMonthUsers = await User.find({ role: 'customer' }).limit(3); // Get a few customers
+    const currentMonthPlan = await SubscriptionPlan.findOne({ name: 'Standard Monthly' }); // Use a specific plan
+
+    if (currentMonthUsers.length > 0 && currentMonthPlan) {
+      for (const user of currentMonthUsers) {
+        // Check if user already has an active sub this month to avoid duplicates
+        const existingSub = await UserSubscription.findOne({ 
+          user: user._id, 
+          startDate: { $gte: currentMonthStart, $lte: currentDate } 
         });
         
-        await payment.save();
+        if (!existingSub) {
+          const newSubStartDate = addDays(currentMonthStart, Math.floor(Math.random() * (currentDate.getDate()))); // Random day this month
+          const newSubEndDate = addMonths(newSubStartDate, 1); // Assuming monthly plan
+          
+          const newUserSub = new UserSubscription({
+            user: user._id,
+            plan: currentMonthPlan._id,
+            startDate: newSubStartDate,
+            endDate: newSubEndDate,
+            status: 'active',
+            billingCycle: currentMonthPlan.duration,
+          });
+          await newUserSub.save();
+          console.log(`Created a new subscription for ${user.name} starting ${newSubStartDate.toLocaleDateString()}`);
+
+          // --- Also create a corresponding PAYMENT for this new subscription ---
+          const paymentForNewSub = new Payment({
+            user: user._id,
+            amount: currentMonthPlan.price,
+            paymentDate: newSubStartDate, // Pay on the start date
+            status: 'completed',
+            paymentMethod: randomElement(['credit_card', 'paypal']),
+            description: `Payment for ${currentMonthPlan.name} subscription`,
+            userSubscription: newUserSub._id // Link payment to the subscription
+          });
+          await paymentForNewSub.save();
+          console.log(`Created corresponding payment for ${user.name}'s new subscription.`);
+        }
       }
-      
-      console.log(`Created payment history for ${subscription.user.name}`);
-    }
-    
-    // Guarantee at least 3 completed payments for the current month
-    const currentMonthStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
-    const validPlans = allPlans.filter(p => !isNaN(parseFloat(p.price)));
-    for (let i = 0; i < 3; i++) {
-      const randomUser = randomElement(users);
-      const randomPlan = randomElement(validPlans);
-      if (!randomPlan) continue; // skip if no valid plan
-      const payment = new Payment({
-        user: randomUser._id,
-        amount: parseFloat(randomPlan.price),
-        description: `${randomPlan.name} Plan - ${randomPlan.duration}`,
-        paymentDate: addDays(currentMonthStart, Math.floor(Math.random() * (currentDate.getDate()))),
-        status: 'completed',
-        paymentMethod: randomElement(['credit_card', 'debit_card', 'bank_transfer', 'cash', 'paypal', 'other']),
-        subscriptionPlan: randomPlan._id
-      });
-      await payment.save();
+    } else {
+      console.log('Could not find users or Standard Monthly plan to guarantee current month subscriptions.');
     }
-    
-    // 4. Create some one-time payments not related to subscriptions
-    console.log('Generating one-time payments...');
-
-    // Define default one-time payment descriptions
-    const oneTimePaymentDescriptions = [
-      'Service fee',
-      'Consultation fee',
-      'Setup fee',
-      'Installation fee',
-      'Penalty fee'
-    ];
 
-    // Generate a larger variety of one-time payments for diverse revenue streams
-    const oneTimePaymentCount = 100;
-    for (let i = 0; i < oneTimePaymentCount; i++) {
-      const randomUser = randomElement(users);
-      const paymentDate = randomDate(sixMonthsAgo, currentDate);
-      const amount = randomNumber(30, 500); // expanded range for larger payments
-      const oneTimeDescriptions = [
-        ...oneTimePaymentDescriptions,
-        'Emergency pickup service',
-        'Late payment fee',
-        'Bulk waste disposal fee',
-        'Additional recycling service'
-      ];
-      const payment = new Payment({
-        user: randomUser._id,
-        amount,
-        description: randomElement(oneTimeDescriptions),
-        paymentDate,
-        status: randomElement(['completed','completed','completed','pending','failed']),
-        paymentMethod: randomElement(['credit_card', 'debit_card', 'bank_transfer', 'cash', 'paypal', 'other']),
-        subscriptionPlan: null
-      });
-      
-      await payment.save();
-    }
-    
-    console.log('Created one-time payments');
-    
-    // 5. Create expense records
+
+    // --- Generate Expenses ---
     console.log('Generating expense records...');
     
     // Clear existing expenses
@@ -357,6 +351,16 @@ const seedFinancialData = async () => {
       { category: 'taxes', frequency: 0.02, min: 500, max: 5000 },
     ];
     
+    // Expense descriptions for each category
+    const expenseDescriptions = {
+      fuel: ['Vehicle refueling', 'Truck fleet fuel', 'Collection vehicle diesel', 'Transportation fuel'],
+      maintenance: ['Vehicle maintenance', 'Equipment repair', 'Bin repair services', 'Facility maintenance', 'Machinery servicing'],
+      salaries: ['Staff payroll', 'Employee benefits', 'Contractor payments', 'Overtime payments', 'Management salaries'],
+      utilities: ['Electricity bill', 'Water services', 'Internet and phone', 'Gas bill', 'Waste facility utilities'],
+      equipment: ['New sorting equipment', 'Replacement bins', 'Office equipment', 'Safety equipment', 'Processing machinery'],
+      office: ['Office supplies', 'Stationery', 'Cleaning supplies', 'Break room supplies', 'Small equipment
+    ];
+    
     // Expense descriptions for each category
     const expenseDescriptions = {
       fuel: ['Vehicle refueling', 'Truck fleet fuel', 'Collection vehicle diesel', 'Transportation fuel'],
@@ -372,70 +376,121 @@ const seedFinancialData = async () => {
     };
     
     // Generate monthly expenses for each category for the past 12 months up to the current month
-    const firstExpenseMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() - 11, 1); // Start 11 months before
+    // Ensure we cover the start of the current year and the last few months explicitly
+    const firstExpenseMonth = new Date(currentDate.getFullYear(), 0, 1); // Start from Jan of the current year
 
-    for (let monthOffset = 0; monthOffset <= 11; monthOffset++) {
+    // Generate for Jan 2025 up to the current month (April 2025)
+    for (let monthOffset = 0; monthOffset <= currentDate.getMonth(); monthOffset++) {
       const targetMonthDate = addMonths(firstExpenseMonth, monthOffset);
-      // Ensure we don't generate for future months beyond the current one
-      if (targetMonthDate.getFullYear() > currentDate.getFullYear() || 
-          (targetMonthDate.getFullYear() === currentDate.getFullYear() && targetMonthDate.getMonth() > currentDate.getMonth())) {
-          continue;
-      }
+      const daysInMonth = new Date(targetMonthDate.getFullYear(), targetMonthDate.getMonth() + 1, 0).getDate();
+      const monthEndDay = (targetMonthDate.getFullYear() === currentDate.getFullYear() && targetMonthDate.getMonth() === currentDate.getMonth())
+                          ? currentDate.getDate() // Use current day for the current month
+                          : daysInMonth; // Use last day for past months
+
+      console.log(`Generating expenses for ${targetMonthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}...`);
 
       // For each expense category
       for (const expenseCat of expenseCategories) {
         // Create 2-5 expenses per category per month for richer data
         const numExpenses = randomNumber(2, 5);
-
         for (let i = 0; i < numExpenses; i++) {
-          // Generate a random date within the target month, but not exceeding the current date
-          const daysInMonth = new Date(targetMonthDate.getFullYear(), targetMonthDate.getMonth() + 1, 0).getDate();
-          const randomDay = randomNumber(1, daysInMonth);
-          let expenseDate = new Date(targetMonthDate.getFullYear(), targetMonthDate.getMonth(), randomDay);
-
-          // If this is the current month, ensure the date is not in the future
-          if (targetMonthDate.getFullYear() === currentDate.getFullYear() && targetMonthDate.getMonth() === currentDate.getMonth()) {
-            expenseDate.setDate(Math.min(randomDay, currentDate.getDate()));
-          }
+          const randomDay = randomNumber(1, monthEndDay); // Ensure date is within the valid range for the month
+          const expenseDate = new Date(targetMonthDate.getFullYear(), targetMonthDate.getMonth(), randomDay);
           
-          // Ensure expenseDate is not before sixMonthsAgo (optional, but keeps consistency)
-          if (expenseDate < sixMonthsAgo) expenseDate = new Date(sixMonthsAgo);
+          // Skip if the generated date is in the future relative to currentDate (shouldn't happen with logic above, but good safeguard)
+          if (expenseDate > currentDate) continue;
 
-          const amount = randomNumber(expenseCat.min, expenseCat.max);
-          const description = randomElement(expenseDescriptions[expenseCat.category]);
-          
           const expense = new Expense({
             category: expenseCat.category,
-            amount,
-            description: `${description} - ${expenseDate.toLocaleDateString('en-US', { month: 'long' })}`,
+            amount: randomNumber(expenseCat.min, expenseCat.max),
+            description: randomElement(expenseDescriptions[expenseCat.category]),
             date: expenseDate,
-            createdBy: financialManager._id,
-            status: randomElement(['approved', 'approved', 'approved', 'approved', 'pending']), // 80% approved
+            createdBy: financialManager._id, // Assign to the financial manager
+            status: randomElement(['pending', 'approved', 'rejected']), // Random status
             paymentMethod: randomElement(['company_account', 'credit_card', 'bank_transfer'])
           });
-          
           await expense.save();
         }
       }
-      
-      console.log(`Created expenses for ${targetMonthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}`);
     }
-    
-    // Guarantee at least 3 approved expenses for the current month
-    const expenseCategoriesList = ['fuel', 'maintenance', 'salaries', 'utilities', 'equipment', 'office', 'rent', 'marketing', 'insurance', 'taxes'];
+
+    // Generate monthly payments for each plan for the past 12 months up to the current month
+    // Ensure we cover the start of the current year and the last few months explicitly
+    const firstPaymentMonth = new Date(currentDate.getFullYear(), 0, 1); // Start from Jan of the current year
+
+    // Generate for Jan 2025 up to the current month (April 2025)
+    for (let monthOffset = 0; monthOffset <= currentDate.getMonth(); monthOffset++) {
+      const targetMonthDate = addMonths(firstPaymentMonth, monthOffset);
+      const daysInMonth = new Date(targetMonthDate.getFullYear(), targetMonthDate.getMonth() + 1, 0).getDate();
+      const monthEndDay = (targetMonthDate.getFullYear() === currentDate.getFullYear() && targetMonthDate.getMonth() === currentDate.getMonth())
+                          ? currentDate.getDate() // Use current day for the current month
+                          : daysInMonth; // Use last day for past months
+
+      console.log(`Generating payments for ${targetMonthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}...`);
+
+      // For each subscription plan
+      for (const plan of subscriptionPlans) {
+        // Find active subscriptions for this plan
+        const activeSubs = await UserSubscription.find({ plan: plan._id, status: 'active' });
+        
+        // Create payments for a subset of active subscribers each month
+        const numPayments = Math.min(activeSubs.length, randomNumber(5, 15)); // Simulate payments from 5-15 active users
+        
+        for (let i = 0; i < numPayments; i++) {
+          const sub = activeSubs[i]; // Select a subscriber
+          if (!sub) continue; // Skip if no subscriber found (shouldn't happen if activeSubs exist)
+
+          const randomDay = randomNumber(1, monthEndDay); // Ensure date is within the valid range for the month
+          const paymentDate = new Date(targetMonthDate.getFullYear(), targetMonthDate.getMonth(), randomDay);
+
+          // Skip if the generated date is in the future relative to currentDate
+          if (paymentDate > currentDate) continue;
+
+          const payment = new Payment({
+            user: sub.user,
+            userSubscription: sub._id,
+            amount: plan.price,
+            paymentDate: paymentDate,
+            status: randomElement(['completed', 'pending', 'failed']), // Random status
+            paymentMethod: randomElement(['credit_card', 'paypal', 'bank_transfer'])
+          });
+          await payment.save();
+        }
+      }
+    }
+
+    // Guarantee at least 3 approved expenses and 3 completed payments for the CURRENT month (April 2025)
+    console.log(`Ensuring some data exists for the current month (${currentMonthStart.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })})...`);
+    const expenseCategoriesList = expenseCategories.map(ec => ec.category); // Get list of category names
     for (let i = 0; i < 3; i++) {
       const expense = new Expense({
         category: randomElement(expenseCategoriesList),
         amount: randomNumber(200, 2000),
-        description: `Seeded expense for dashboard (${i + 1})`,
-        date: addDays(currentMonthStart, Math.floor(Math.random() * (currentDate.getDate()))),
+        description: `Guaranteed expense for current month (${i + 1})`,
+        date: addDays(currentMonthStart, randomNumber(0, currentDate.getDate() - 1)), // Random day within current month up to today
         createdBy: financialManager._id,
         status: 'approved',
         paymentMethod: randomElement(['company_account', 'credit_card', 'bank_transfer'])
       });
       await expense.save();
     }
-    
+
+    const activeSubsCurrent = await UserSubscription.find({ status: 'active' }).limit(3);
+    for (let i = 0; i < Math.min(3, activeSubsCurrent.length); i++) {
+      const sub = activeSubsCurrent[i];
+      const plan = await SubscriptionPlan.findById(sub.plan);
+      if (!plan) continue;
+      const payment = new Payment({
+        user: sub.user,
+        userSubscription: sub._id,
+        amount: plan.price,
+        paymentDate: addDays(currentMonthStart, randomNumber(0, currentDate.getDate() - 1)), // Random day within current month up to today
+        status: 'completed',
+        paymentMethod: randomElement(['credit_card', 'paypal', 'bank_transfer'])
+      });
+      await payment.save();
+    }
+
     // Calculate and log summary statistics
     const totalPayments = await Payment.countDocuments();
     const totalExpenses = await Expense.countDocuments();
diff --git a/backend/src/server.js b/backend/src/server.js
index ca1f980..aa0edf8 100644
--- a/backend/src/server.js
+++ b/backend/src/server.js
@@ -9,8 +9,11 @@ const rateLimit = require('express-rate-limit'); // Import rate-limit
 require('dotenv').config();
 const path = require('path');
 const fs = require('fs');
+const config = require('./config'); // Import the centralized config
 const ApiError = require('./errors/ApiError'); // Import base custom error
+const { UnauthorizedError, ForbiddenError, BadRequestError, NotFoundError } = require('./errors'); // Import specific errors
 const multer = require('multer'); // Import multer
+const { JsonWebTokenError, TokenExpiredError } = require('jsonwebtoken'); // Import JWT errors
 
 const app = express();
 
@@ -27,8 +30,8 @@ app.use(compression()); // Add compression middleware
 
 // Rate Limiting (apply before routes)
 const limiter = rateLimit({
-  windowMs: 15 * 60 * 1000, // 15 minutes
-  max: 100, // Limit each IP to 100 requests per windowMs
+  windowMs: config.rateLimitWindowMs, // Use config value
+  max: config.rateLimitMax,         // Use config value
   standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers
   legacyHeaders: false, // Disable the `X-RateLimit-*` headers
   message: 'Too many requests from this IP, please try again after 15 minutes'
@@ -76,17 +79,23 @@ if (!fs.existsSync(uploadDir)) {
 app.use('/uploads', express.static(path.join(__dirname, '../uploads')));
 
 // Connect to MongoDB
-const MONGODB_URI = process.env.MONGODB_URI;
 mongoose
-  .connect(MONGODB_URI)
+  .connect(config.mongodbUri) // Use config value
   .then(() => console.log('Connected to MongoDB'))
-  .catch((err) => console.error('MongoDB connection error:', err));
+  .catch((err) => {
+    console.error('MongoDB connection error:', err);
+    process.exit(1); // Exit if DB connection fails
+  });
 
 // Global Error Handler
 app.use((err, req, res, next) => {
-  console.error('ERROR:', err.message);
-  // console.error(err.stack); // Uncomment for detailed stack trace during development
+  // Log the error with more context
+  console.error(`[${new Date().toISOString()}] ${req.method} ${req.originalUrl} - ERROR: ${err.message}`);
+  if (!(err instanceof ApiError)) { // Log stack for unexpected errors
+     console.error(err.stack);
+  }
 
+  // Handle custom ApiErrors
   if (err instanceof ApiError) {
     return res.status(err.statusCode).json({ message: err.message });
   }
@@ -94,32 +103,46 @@ app.use((err, req, res, next) => {
   // Handle Mongoose validation errors
   if (err.name === 'ValidationError') {
       const messages = Object.values(err.errors).map(val => val.message);
-      return res.status(400).json({ message: 'Validation Error', errors: messages });
+      const badRequestError = new BadRequestError('Validation Error', messages);
+      return res.status(badRequestError.statusCode).json({ message: badRequestError.message, errors: badRequestError.errors });
   }
   // Handle Mongoose duplicate key errors
   if (err.code === 11000) {
       const field = Object.keys(err.keyValue)[0];
       const value = err.keyValue[field];
-      return res.status(400).json({ message: `Duplicate field value entered for ${field}: ${value}. Please use another value.` });
+      const badRequestError = new BadRequestError(`Duplicate field value entered for ${field}: ${value}. Please use another value.`);
+      return res.status(badRequestError.statusCode).json({ message: badRequestError.message });
   }
   // Handle Mongoose cast errors (e.g., invalid ObjectId)
   if (err.name === 'CastError') {
-      return res.status(400).json({ message: `Invalid ${err.path}: ${err.value}` });
+      const badRequestError = new BadRequestError(`Invalid ${err.path}: ${err.value}`);
+      return res.status(badRequestError.statusCode).json({ message: badRequestError.message });
   }
 
   // Handle Multer errors (e.g., file size limit)
   if (err instanceof multer.MulterError) {
-    return res.status(400).json({ message: `File upload error: ${err.message}` });
+    const badRequestError = new BadRequestError(`File upload error: ${err.message}`);
+    return res.status(badRequestError.statusCode).json({ message: badRequestError.message });
   }
   // Handle custom file type errors from multer filter
-  if (err.message.startsWith('Invalid file type')) {
-    return res.status(400).json({ message: err.message });
+  if (err.message && err.message.startsWith('Invalid file type')) { // Check if err.message exists
+    const badRequestError = new BadRequestError(err.message);
+    return res.status(badRequestError.statusCode).json({ message: badRequestError.message });
+  }
+
+  // Handle JWT errors
+  if (err instanceof JsonWebTokenError || err instanceof TokenExpiredError) {
+    const unauthorizedError = new UnauthorizedError('Not authorized, token failed or expired');
+    return res.status(unauthorizedError.statusCode).json({ message: unauthorizedError.message });
   }
 
-  // Default to 500 for other unhandled errors
-  res.status(500).json({ message: 'Internal Server Error' });
+
+  // Default 500 handler for other unhandled errors
+  // Check if response headers have already been sent
+  if (!res.headersSent) {
+     res.status(500).json({ message: 'Internal Server Error' });
+  }
 });
 
 // Start server
-const PORT = process.env.PORT || 5000;
-app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
\ No newline at end of file
+app.listen(config.port, () => console.log(`Server running on port ${config.port}`)); // Use config value
\ No newline at end of file
diff --git a/frontend/index.html b/frontend/index.html
index 59670fc..5f97c75 100644
--- a/frontend/index.html
+++ b/frontend/index.html
@@ -2,7 +2,7 @@
 <html lang="en">
   <head>
     <meta charset="UTF-8" />
-    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
+    <link rel="icon" type="image/svg+xml" href="https://fonts.gstatic.com/s/i/short-term/release/materialsymbolsoutlined/recycling/default/24px.svg" />
     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
     <title>SmartBin</title>
   </head>
diff --git a/frontend/package-lock.json b/frontend/package-lock.json
index 6c5baae..a250a35 100644
--- a/frontend/package-lock.json
+++ b/frontend/package-lock.json
@@ -8,12 +8,18 @@
       "name": "frontend",
       "version": "0.0.0",
       "dependencies": {
+        "@fortawesome/fontawesome-svg-core": "^6.7.2",
+        "@fortawesome/free-brands-svg-icons": "^6.7.2",
+        "@fortawesome/free-solid-svg-icons": "^6.7.2",
+        "@fortawesome/react-fontawesome": "^0.2.2",
         "axios": "^1.8.4",
         "chart.js": "^4.4.9",
         "react": "^19.0.0",
         "react-chartjs-2": "^5.3.0",
         "react-dom": "^19.0.0",
-        "react-router-dom": "^7.4.0"
+        "react-router-dom": "^7.4.0",
+        "react-transition-group": "^4.4.5",
+        "recharts": "^2.15.3"
       },
       "devDependencies": {
         "@eslint/js": "^9.21.0",
@@ -265,6 +271,18 @@
         "@babel/core": "^7.0.0-0"
       }
     },
+    "node_modules/@babel/runtime": {
+      "version": "7.27.0",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.27.0.tgz",
+      "integrity": "sha512-VtPOkrdPHZsKc/clNqyi9WUA8TINkZ4cGk63UUE3u4pmB2k+ZMQRDuIOagv8UVd6j7k0T3+RRIb7beKTebNbcw==",
+      "license": "MIT",
+      "dependencies": {
+        "regenerator-runtime": "^0.14.0"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
     "node_modules/@babel/template": {
       "version": "7.26.9",
       "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.26.9.tgz",
@@ -899,6 +917,64 @@
         "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
       }
     },
+    "node_modules/@fortawesome/fontawesome-common-types": {
+      "version": "6.7.2",
+      "resolved": "https://registry.npmjs.org/@fortawesome/fontawesome-common-types/-/fontawesome-common-types-6.7.2.tgz",
+      "integrity": "sha512-Zs+YeHUC5fkt7Mg1l6XTniei3k4bwG/yo3iFUtZWd/pMx9g3fdvkSK9E0FOC+++phXOka78uJcYb8JaFkW52Xg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/@fortawesome/fontawesome-svg-core": {
+      "version": "6.7.2",
+      "resolved": "https://registry.npmjs.org/@fortawesome/fontawesome-svg-core/-/fontawesome-svg-core-6.7.2.tgz",
+      "integrity": "sha512-yxtOBWDrdi5DD5o1pmVdq3WMCvnobT0LU6R8RyyVXPvFRd2o79/0NCuQoCjNTeZz9EzA9xS3JxNWfv54RIHFEA==",
+      "license": "MIT",
+      "dependencies": {
+        "@fortawesome/fontawesome-common-types": "6.7.2"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/@fortawesome/free-brands-svg-icons": {
+      "version": "6.7.2",
+      "resolved": "https://registry.npmjs.org/@fortawesome/free-brands-svg-icons/-/free-brands-svg-icons-6.7.2.tgz",
+      "integrity": "sha512-zu0evbcRTgjKfrr77/2XX+bU+kuGfjm0LbajJHVIgBWNIDzrhpRxiCPNT8DW5AdmSsq7Mcf9D1bH0aSeSUSM+Q==",
+      "license": "(CC-BY-4.0 AND MIT)",
+      "dependencies": {
+        "@fortawesome/fontawesome-common-types": "6.7.2"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/@fortawesome/free-solid-svg-icons": {
+      "version": "6.7.2",
+      "resolved": "https://registry.npmjs.org/@fortawesome/free-solid-svg-icons/-/free-solid-svg-icons-6.7.2.tgz",
+      "integrity": "sha512-GsBrnOzU8uj0LECDfD5zomZJIjrPhIlWU82AHwa2s40FKH+kcxQaBvBo3Z4TxyZHIyX8XTDxsyA33/Vx9eFuQA==",
+      "license": "(CC-BY-4.0 AND MIT)",
+      "dependencies": {
+        "@fortawesome/fontawesome-common-types": "6.7.2"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/@fortawesome/react-fontawesome": {
+      "version": "0.2.2",
+      "resolved": "https://registry.npmjs.org/@fortawesome/react-fontawesome/-/react-fontawesome-0.2.2.tgz",
+      "integrity": "sha512-EnkrprPNqI6SXJl//m29hpaNzOp1bruISWaOiRtkMi/xSvHJlzc2j2JAYS7egxt/EbjSNV/k6Xy0AQI6vB2+1g==",
+      "license": "MIT",
+      "dependencies": {
+        "prop-types": "^15.8.1"
+      },
+      "peerDependencies": {
+        "@fortawesome/fontawesome-svg-core": "~1 || ~6",
+        "react": ">=16.3"
+      }
+    },
     "node_modules/@humanfs/core": {
       "version": "0.19.1",
       "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
@@ -1341,6 +1417,69 @@
       "integrity": "sha512-4Kh9a6B2bQciAhf7FSuMRRkUWecJgJu9nPnx3yzpsfXX/c50REIqpHY4C82bXP90qrLtXtkDxTZosYO3UpOwlA==",
       "license": "MIT"
     },
+    "node_modules/@types/d3-array": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/@types/d3-array/-/d3-array-3.2.1.tgz",
+      "integrity": "sha512-Y2Jn2idRrLzUfAKV2LyRImR+y4oa2AntrgID95SHJxuMUrkNXmanDSed71sRNZysveJVt1hLLemQZIady0FpEg==",
+      "license": "MIT"
+    },
+    "node_modules/@types/d3-color": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/@types/d3-color/-/d3-color-3.1.3.tgz",
+      "integrity": "sha512-iO90scth9WAbmgv7ogoq57O9YpKmFBbmoEoCHDB2xMBY0+/KVrqAaCDyCE16dUspeOvIxFFRI+0sEtqDqy2b4A==",
+      "license": "MIT"
+    },
+    "node_modules/@types/d3-ease": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/@types/d3-ease/-/d3-ease-3.0.2.tgz",
+      "integrity": "sha512-NcV1JjO5oDzoK26oMzbILE6HW7uVXOHLQvHshBUW4UMdZGfiY6v5BeQwh9a9tCzv+CeefZQHJt5SRgK154RtiA==",
+      "license": "MIT"
+    },
+    "node_modules/@types/d3-interpolate": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/@types/d3-interpolate/-/d3-interpolate-3.0.4.tgz",
+      "integrity": "sha512-mgLPETlrpVV1YRJIglr4Ez47g7Yxjl1lj7YKsiMCb27VJH9W8NVM6Bb9d8kkpG/uAQS5AmbA48q2IAolKKo1MA==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/d3-color": "*"
+      }
+    },
+    "node_modules/@types/d3-path": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/@types/d3-path/-/d3-path-3.1.1.tgz",
+      "integrity": "sha512-VMZBYyQvbGmWyWVea0EHs/BwLgxc+MKi1zLDCONksozI4YJMcTt8ZEuIR4Sb1MMTE8MMW49v0IwI5+b7RmfWlg==",
+      "license": "MIT"
+    },
+    "node_modules/@types/d3-scale": {
+      "version": "4.0.9",
+      "resolved": "https://registry.npmjs.org/@types/d3-scale/-/d3-scale-4.0.9.tgz",
+      "integrity": "sha512-dLmtwB8zkAeO/juAMfnV+sItKjlsw2lKdZVVy6LRr0cBmegxSABiLEpGVmSJJ8O08i4+sGR6qQtb6WtuwJdvVw==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/d3-time": "*"
+      }
+    },
+    "node_modules/@types/d3-shape": {
+      "version": "3.1.7",
+      "resolved": "https://registry.npmjs.org/@types/d3-shape/-/d3-shape-3.1.7.tgz",
+      "integrity": "sha512-VLvUQ33C+3J+8p+Daf+nYSOsjB4GXp19/S/aGo60m9h1v6XaxjiT82lKVWJCfzhtuZ3yD7i/TPeC/fuKLLOSmg==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/d3-path": "*"
+      }
+    },
+    "node_modules/@types/d3-time": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/@types/d3-time/-/d3-time-3.0.4.tgz",
+      "integrity": "sha512-yuzZug1nkAAaBlBBikKZTgzCeA+k1uy4ZFwWANOfKw5z5LRhV0gNA7gNkKm7HoK+HRN0wX3EkxGk0fpbWhmB7g==",
+      "license": "MIT"
+    },
+    "node_modules/@types/d3-timer": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/@types/d3-timer/-/d3-timer-3.0.2.tgz",
+      "integrity": "sha512-Ps3T8E8dZDam6fUyNiMkekK3XUsaUEik+idO9/YjPtfj2qruF8tFBXS7XhtE4iIXBLxhmLjP3SXpLhVf21I9Lw==",
+      "license": "MIT"
+    },
     "node_modules/@types/estree": {
       "version": "1.0.6",
       "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz",
@@ -1599,6 +1738,15 @@
         "pnpm": ">=8"
       }
     },
+    "node_modules/clsx": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
+      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
     "node_modules/color-convert": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
@@ -1673,9 +1821,129 @@
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
       "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
-      "dev": true,
       "license": "MIT"
     },
+    "node_modules/d3-array": {
+      "version": "3.2.4",
+      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
+      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
+      "license": "ISC",
+      "dependencies": {
+        "internmap": "1 - 2"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-color": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
+      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-ease": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
+      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-format": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
+      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-interpolate": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
+      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
+      "license": "ISC",
+      "dependencies": {
+        "d3-color": "1 - 3"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-path": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
+      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-scale": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
+      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
+      "license": "ISC",
+      "dependencies": {
+        "d3-array": "2.10.0 - 3",
+        "d3-format": "1 - 3",
+        "d3-interpolate": "1.2.0 - 3",
+        "d3-time": "2.1.1 - 3",
+        "d3-time-format": "2 - 4"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-shape": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
+      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
+      "license": "ISC",
+      "dependencies": {
+        "d3-path": "^3.1.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-time": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
+      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
+      "license": "ISC",
+      "dependencies": {
+        "d3-array": "2 - 3"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-time-format": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
+      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
+      "license": "ISC",
+      "dependencies": {
+        "d3-time": "1 - 3"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/d3-timer": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
+      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=12"
+      }
+    },
     "node_modules/debug": {
       "version": "4.4.0",
       "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
@@ -1694,6 +1962,12 @@
         }
       }
     },
+    "node_modules/decimal.js-light": {
+      "version": "2.5.1",
+      "resolved": "https://registry.npmjs.org/decimal.js-light/-/decimal.js-light-2.5.1.tgz",
+      "integrity": "sha512-qIMFpTMZmny+MMIitAB6D7iVPEorVw6YQRWkvarTkT4tBeSLLiHzcwj6q0MmYSFCiVpiqPJTJEYIrpcPzVEIvg==",
+      "license": "MIT"
+    },
     "node_modules/deep-is": {
       "version": "0.1.4",
       "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
@@ -1710,6 +1984,16 @@
         "node": ">=0.4.0"
       }
     },
+    "node_modules/dom-helpers": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/dom-helpers/-/dom-helpers-5.2.1.tgz",
+      "integrity": "sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/runtime": "^7.8.7",
+        "csstype": "^3.0.2"
+      }
+    },
     "node_modules/dunder-proto": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
@@ -2018,6 +2302,12 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/eventemitter3": {
+      "version": "4.0.7",
+      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
+      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
+      "license": "MIT"
+    },
     "node_modules/fast-deep-equal": {
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
@@ -2025,6 +2315,15 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/fast-equals": {
+      "version": "5.2.2",
+      "resolved": "https://registry.npmjs.org/fast-equals/-/fast-equals-5.2.2.tgz",
+      "integrity": "sha512-V7/RktU11J3I36Nwq2JnZEM7tNm17eBJz+u25qdxBZeCKiX6BkVSZQjwWIr+IobgnZy+ag73tTZgZi7tr0LrBw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
     "node_modules/fast-json-stable-stringify": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
@@ -2320,6 +2619,15 @@
         "node": ">=0.8.19"
       }
     },
+    "node_modules/internmap": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
+      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=12"
+      }
+    },
     "node_modules/is-extglob": {
       "version": "2.1.1",
       "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
@@ -2354,7 +2662,6 @@
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
       "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
-      "dev": true,
       "license": "MIT"
     },
     "node_modules/js-yaml": {
@@ -2457,6 +2764,12 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/lodash": {
+      "version": "4.17.21",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
+      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
+      "license": "MIT"
+    },
     "node_modules/lodash.merge": {
       "version": "4.6.2",
       "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
@@ -2464,6 +2777,18 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/loose-envify": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
+      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
+      "license": "MIT",
+      "dependencies": {
+        "js-tokens": "^3.0.0 || ^4.0.0"
+      },
+      "bin": {
+        "loose-envify": "cli.js"
+      }
+    },
     "node_modules/lru-cache": {
       "version": "5.1.1",
       "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
@@ -2557,6 +2882,15 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/object-assign": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
+      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/optionator": {
       "version": "0.9.4",
       "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
@@ -2686,6 +3020,17 @@
         "node": ">= 0.8.0"
       }
     },
+    "node_modules/prop-types": {
+      "version": "15.8.1",
+      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
+      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
+      "license": "MIT",
+      "dependencies": {
+        "loose-envify": "^1.4.0",
+        "object-assign": "^4.1.1",
+        "react-is": "^16.13.1"
+      }
+    },
     "node_modules/proxy-from-env": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
@@ -2733,6 +3078,12 @@
         "react": "^19.0.0"
       }
     },
+    "node_modules/react-is": {
+      "version": "16.13.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
+      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
+      "license": "MIT"
+    },
     "node_modules/react-refresh": {
       "version": "0.14.2",
       "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.14.2.tgz",
@@ -2783,6 +3134,81 @@
         "react-dom": ">=18"
       }
     },
+    "node_modules/react-smooth": {
+      "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/react-smooth/-/react-smooth-4.0.4.tgz",
+      "integrity": "sha512-gnGKTpYwqL0Iii09gHobNolvX4Kiq4PKx6eWBCYYix+8cdw+cGo3do906l1NBPKkSWx1DghC1dlWG9L2uGd61Q==",
+      "license": "MIT",
+      "dependencies": {
+        "fast-equals": "^5.0.1",
+        "prop-types": "^15.8.1",
+        "react-transition-group": "^4.4.5"
+      },
+      "peerDependencies": {
+        "react": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
+        "react-dom": "^16.8.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
+      }
+    },
+    "node_modules/react-transition-group": {
+      "version": "4.4.5",
+      "resolved": "https://registry.npmjs.org/react-transition-group/-/react-transition-group-4.4.5.tgz",
+      "integrity": "sha512-pZcd1MCJoiKiBR2NRxeCRg13uCXbydPnmB4EOeRrY7480qNWO8IIgQG6zlDkm6uRMsURXPuKq0GWtiM59a5Q6g==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@babel/runtime": "^7.5.5",
+        "dom-helpers": "^5.0.1",
+        "loose-envify": "^1.4.0",
+        "prop-types": "^15.6.2"
+      },
+      "peerDependencies": {
+        "react": ">=16.6.0",
+        "react-dom": ">=16.6.0"
+      }
+    },
+    "node_modules/recharts": {
+      "version": "2.15.3",
+      "resolved": "https://registry.npmjs.org/recharts/-/recharts-2.15.3.tgz",
+      "integrity": "sha512-EdOPzTwcFSuqtvkDoaM5ws/Km1+WTAO2eizL7rqiG0V2UVhTnz0m7J2i0CjVPUCdEkZImaWvXLbZDS2H5t6GFQ==",
+      "license": "MIT",
+      "dependencies": {
+        "clsx": "^2.0.0",
+        "eventemitter3": "^4.0.1",
+        "lodash": "^4.17.21",
+        "react-is": "^18.3.1",
+        "react-smooth": "^4.0.4",
+        "recharts-scale": "^0.4.4",
+        "tiny-invariant": "^1.3.1",
+        "victory-vendor": "^36.6.8"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "peerDependencies": {
+        "react": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0",
+        "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0 || ^19.0.0"
+      }
+    },
+    "node_modules/recharts-scale": {
+      "version": "0.4.5",
+      "resolved": "https://registry.npmjs.org/recharts-scale/-/recharts-scale-0.4.5.tgz",
+      "integrity": "sha512-kivNFO+0OcUNu7jQquLXAxz1FIwZj8nrj+YkOKc5694NbjCvcT6aSZiIzNzd2Kul4o4rTto8QVR9lMNtxD4G1w==",
+      "license": "MIT",
+      "dependencies": {
+        "decimal.js-light": "^2.4.1"
+      }
+    },
+    "node_modules/recharts/node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "license": "MIT"
+    },
+    "node_modules/regenerator-runtime": {
+      "version": "0.14.1",
+      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.14.1.tgz",
+      "integrity": "sha512-dYnhHh0nJoMfnkZs6GmmhFknAGRrLznOu5nc9ML+EJxGvrx6H7teuevqVqCuPcPK//3eDrrjQhehXVx9cnkGdw==",
+      "license": "MIT"
+    },
     "node_modules/resolve-from": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
@@ -2913,6 +3339,12 @@
         "node": ">=8"
       }
     },
+    "node_modules/tiny-invariant": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/tiny-invariant/-/tiny-invariant-1.3.3.tgz",
+      "integrity": "sha512-+FbBPE1o9QAYvviau/qC5SE3caw21q3xkvWKBtja5vgqOWIHHJ3ioaq1VPfn/Szqctz2bU/oYeKd9/z5BL+PVg==",
+      "license": "MIT"
+    },
     "node_modules/turbo-stream": {
       "version": "2.4.0",
       "resolved": "https://registry.npmjs.org/turbo-stream/-/turbo-stream-2.4.0.tgz",
@@ -2973,6 +3405,28 @@
         "punycode": "^2.1.0"
       }
     },
+    "node_modules/victory-vendor": {
+      "version": "36.9.2",
+      "resolved": "https://registry.npmjs.org/victory-vendor/-/victory-vendor-36.9.2.tgz",
+      "integrity": "sha512-PnpQQMuxlwYdocC8fIJqVXvkeViHYzotI+NJrCuav0ZYFoq912ZHBk3mCeuj+5/VpodOjPe1z0Fk2ihgzlXqjQ==",
+      "license": "MIT AND ISC",
+      "dependencies": {
+        "@types/d3-array": "^3.0.3",
+        "@types/d3-ease": "^3.0.0",
+        "@types/d3-interpolate": "^3.0.1",
+        "@types/d3-scale": "^4.0.2",
+        "@types/d3-shape": "^3.1.0",
+        "@types/d3-time": "^3.0.0",
+        "@types/d3-timer": "^3.0.0",
+        "d3-array": "^3.1.6",
+        "d3-ease": "^3.0.1",
+        "d3-interpolate": "^3.0.1",
+        "d3-scale": "^4.0.2",
+        "d3-shape": "^3.1.0",
+        "d3-time": "^3.0.0",
+        "d3-timer": "^3.0.1"
+      }
+    },
     "node_modules/vite": {
       "version": "6.2.2",
       "resolved": "https://registry.npmjs.org/vite/-/vite-6.2.2.tgz",
diff --git a/frontend/package.json b/frontend/package.json
index 416522f..6fe7241 100644
--- a/frontend/package.json
+++ b/frontend/package.json
@@ -10,12 +10,18 @@
     "preview": "vite preview"
   },
   "dependencies": {
+    "@fortawesome/fontawesome-svg-core": "^6.7.2",
+    "@fortawesome/free-brands-svg-icons": "^6.7.2",
+    "@fortawesome/free-solid-svg-icons": "^6.7.2",
+    "@fortawesome/react-fontawesome": "^0.2.2",
     "axios": "^1.8.4",
     "chart.js": "^4.4.9",
     "react": "^19.0.0",
     "react-chartjs-2": "^5.3.0",
     "react-dom": "^19.0.0",
-    "react-router-dom": "^7.4.0"
+    "react-router-dom": "^7.4.0",
+    "react-transition-group": "^4.4.5",
+    "recharts": "^2.15.3"
   },
   "devDependencies": {
     "@eslint/js": "^9.21.0",
diff --git a/frontend/src/App.jsx b/frontend/src/App.jsx
index dc419c7..526de56 100644
--- a/frontend/src/App.jsx
+++ b/frontend/src/App.jsx
@@ -1,6 +1,7 @@
 // src/App.jsx
-import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
+import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';
 import { AuthProvider, useAuth } from './contexts/AuthContext';
+import { useState, useEffect, useRef } from 'react';
 import LandingPage from './pages/LandingPage';
 import Login from './pages/auth/Login';
 import Register from './pages/auth/Register';
@@ -8,12 +9,27 @@ import DashboardLayout from './components/layouts/DashboardLayout';
 import ProfilePage from './pages/profile/ProfilePage';
 import './App.css';
 
-// Protected route component
+// Loading Indicator component
+const LoadingSpinner = () => {
+  return <div className="loading-indicator"></div>;
+};
+
+// Protected route component with enhanced loading state
 const ProtectedRoute = ({ children }) => {
   const { user, loading } = useAuth();
+  const [isLoading, setIsLoading] = useState(true);
+  
+  useEffect(() => {
+    // Simulate a minimum loading time for better UX
+    const timer = setTimeout(() => {
+      setIsLoading(false);
+    }, 600);
+    
+    return () => clearTimeout(timer);
+  }, []);
 
-  // Show loading state
-  if (loading) return <div>Loading...</div>;
+  // Show enhanced loading state
+  if (loading || isLoading) return <LoadingSpinner />;
 
   // Redirect to login if not authenticated
   if (!user) return <Navigate to="/login" />;
@@ -21,10 +37,38 @@ const ProtectedRoute = ({ children }) => {
   return children;
 };
 
+// Custom hook for animating page transitions
+const usePageTransition = () => {
+  const [displayLocation, setDisplayLocation] = useState(null);
+  const [transitionStage, setTransitionStage] = useState("fadeIn");
+  const location = useLocation();
+
+  useEffect(() => {
+    if (location !== displayLocation) {
+      setTransitionStage("fadeOut");
+    }
+  }, [location, displayLocation]);
+
+  useEffect(() => {
+    if (transitionStage === "fadeOut") {
+      const timeout = setTimeout(() => {
+        setTransitionStage("fadeIn");
+        setDisplayLocation(location);
+      }, 50); // Reduced from 300ms to 50ms for snappier navigation
+      
+      return () => clearTimeout(timeout);
+    }
+  }, [transitionStage, location, displayLocation]);
+
+  return { transitionStage, displayLocation: displayLocation || location };
+};
+
 function AppContent() {
+  const { transitionStage, displayLocation } = usePageTransition();
+  
   return (
-    <Router>
-      <Routes>
+    <div className={`page-transition ${transitionStage}`}>
+      <Routes location={displayLocation}>
         {/* Public routes */}
         <Route path="/" element={<LandingPage />} />
         <Route path="/login" element={<Login />} />
@@ -37,14 +81,16 @@ function AppContent() {
           </ProtectedRoute>
         } />
       </Routes>
-    </Router>
+    </div>
   );
 }
 
 function App() {
   return (
     <AuthProvider>
-      <AppContent />
+      <Router>
+        <AppContent />
+      </Router>
     </AuthProvider>
   );
 }
diff --git a/frontend/src/components/dashboard/Header.css b/frontend/src/components/dashboard/Header.css
index 08e41f3..4e60b9e 100644
--- a/frontend/src/components/dashboard/Header.css
+++ b/frontend/src/components/dashboard/Header.css
@@ -1,105 +1,264 @@
 /* frontend/src/components/dashboard/Header.css */
-/* Dashboard Header - Reset and fix */
 .dashboard-header {
   display: flex;
   justify-content: space-between;
   align-items: center;
   width: 100%;
   height: 70px;
-  background-color: #3e4b2e; /* Updated to match sidebar color */
-  border-bottom: 1px solid #4a5a37;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
+  background-color: #ffffff;
+  border-bottom: 1px solid #f0f0f0;
   padding: 0 25px;
   box-sizing: border-box;
   position: sticky;
   top: 0;
-  z-index: 100;
+  z-index: 99;
+  box-shadow: 0 2px 15px rgba(0, 0, 0, 0.03);
+  animation: fadeIn 0.5s ease forwards;
 }
 
 /* Left side with title */
 .header-left {
   display: flex;
   align-items: center;
+  animation: slideRight 0.5s ease forwards;
+  animation-delay: 0.1s;
+  opacity: 0;
 }
 
 .header-left h2 {
   margin: 0;
-  font-size: 1.2rem;
-  color: #ffffff; /* Updated for better contrast */
+  font-size: 1.5rem;
+  font-weight: 600;
+  color: #2e7d32;
+  letter-spacing: -0.5px;
+  position: relative;
+}
+
+.header-left h2::after {
+  content: '';
+  position: absolute;
+  bottom: -4px;
+  left: 0;
+  width: 0;
+  height: 2px;
+  background-color: #2e7d32;
+  transition: width 0.4s ease;
+}
+
+.header-left h2:hover::after {
+  width: 100%;
 }
 
 /* Right side with user info and logout */
 .header-right {
   display: flex;
   align-items: center;
-  margin-left: auto; /* This pushes it to the right */
+  animation: slideLeft 0.5s ease forwards;
+  animation-delay: 0.2s;
+  opacity: 0;
 }
 
 /* User information container */
 .user-info {
   display: flex;
   flex-direction: column;
-  margin-right: 15px;
+  margin-right: 20px;
   text-align: right;
+  animation: fadeIn 0.3s ease forwards;
+  animation-delay: 0.3s;
+  opacity: 0;
 }
 
 /* Username display */
 .user-info span:first-child {
   font-weight: 500;
-  color: #ffffff; /* Updated for better contrast */
+  color: #333;
+  font-size: 0.95rem;
+  transition: transform 0.2s ease;
+}
+
+.user-info:hover span:first-child {
+  transform: translateY(-2px);
 }
 
 /* User role display */
 .user-role {
   font-size: 0.8rem;
-  color: #e0e0e0; /* Updated for better contrast */
+  color: #757575;
+  margin-top: 2px;
 }
 
 /* Logout button */
 .logout-button {
-  padding: 6px 12px;
-  background-color: #4ea14a; /* Updated to match theme */
-  color: white;
-  border: none;
+  padding: 8px 16px;
+  background-color: transparent;
+  color: #2e7d32;
+  border: 1px solid #2e7d32;
   border-radius: 4px;
+  font-size: 0.875rem;
+  font-weight: 500;
   cursor: pointer;
-  transition: background-color 0.3s;
+  transition: all 0.3s ease;
+  position: relative;
+  overflow: hidden;
+  z-index: 1;
+}
+
+.logout-button::before {
+  content: '';
+  position: absolute;
+  top: 0;
+  left: -100%;
+  width: 100%;
+  height: 100%;
+  background-color: rgba(46, 125, 50, 0.2);
+  transition: all 0.3s ease;
+  z-index: -1;
 }
 
 .logout-button:hover {
-  background-color: #3c8a38; /* Darker version for hover */
+  background-color: rgba(46, 125, 50, 0.08);
+  transform: translateY(-3px);
+  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
+}
+
+.logout-button:hover::before {
+  left: 0;
 }
 
-.user-menu {
+/* Modern user actions styles */
+.user-actions {
   display: flex;
   align-items: center;
+  background: #fff;
+  border-radius: 18px;
+  box-shadow: 0 2px 12px rgba(46, 125, 50, 0.07);
+  padding: 8px 18px 8px 20px;
+  gap: 18px;
+  margin-left: 18px;
+  min-width: 260px;
 }
 
-.user-menu .user-info {
-  margin-right: 15px;
-  text-align: right;
+.user-info-modern {
+  display: flex;
+  flex-direction: column;
+  align-items: flex-end;
+  margin-right: 0;
+  line-height: 1.1;
+}
+
+.user-name {
+  font-weight: 600;
+  color: #222;
+  font-size: 1rem;
+  letter-spacing: -0.5px;
 }
 
-.user-menu .username {
+.user-role-modern {
+  font-size: 0.82rem;
+  color: #7cb342;
   font-weight: 500;
-  color: #ffffff; /* Updated for better contrast */
+  text-transform: capitalize;
 }
 
-.user-menu .role {
-  font-size: 0.8rem;
-  color: #e0e0e0; /* Updated for better contrast */
+.header-divider {
+  width: 1px;
+  height: 32px;
+  background: #e0e0e0;
+  margin: 0 14px;
+  border-radius: 2px;
+}
+
+.header-notifications-link-modern {
+  position: relative;
+  display: flex;
+  align-items: center;
+  color: #4e6cef;
+  margin-right: 0;
+  margin-left: 0;
+  transition: color 0.2s;
 }
 
-.user-menu button {
-  background-color: #4ea14a; /* Updated to match theme */
-  color: white;
+.header-notifications-link-modern:hover {
+  color: #2e7d32;
+}
+
+.header-notifications-link-modern .notification-badge {
+  position: absolute;
+  top: -7px;
+  right: -10px;
+  z-index: 2;
+}
+
+.logout-button-modern {
+  margin-left: 10px;
+  padding: 7px 18px;
+  background: #fff0f0;
+  color: #e53935;
   border: none;
-  padding: 8px 15px;
-  border-radius: 4px;
+  border-radius: 8px;
+  font-size: 0.97rem;
+  font-weight: 600;
   cursor: pointer;
-  transition: background-color 0.3s;
+  box-shadow: 0 1px 4px rgba(229, 57, 53, 0.07);
+  transition: background 0.2s, color 0.2s, box-shadow 0.2s;
+}
+
+.logout-button-modern:hover {
+  background: #ffeaea;
+  color: #b71c1c;
+  box-shadow: 0 2px 8px rgba(229, 57, 53, 0.13);
+}
+
+/* Add responsive styles for small screens */
+@media screen and (max-width: 768px) {
+  .dashboard-header {
+    padding: 0 15px;
+  }
+  
+  .header-left h2 {
+    font-size: 1.2rem;
+  }
+  
+  .user-info {
+    margin-right: 12px;
+  }
+  
+  .logout-button {
+    padding: 6px 12px;
+    font-size: 0.8rem;
+  }
+
+  .user-actions {
+    padding: 6px 8px 6px 10px;
+    gap: 10px;
+    min-width: 0;
+  }
+  .user-info-modern {
+    font-size: 0.92rem;
+  }
+  .header-divider {
+    height: 24px;
+    margin: 0 7px;
+  }
+  .logout-button-modern {
+    padding: 6px 10px;
+    font-size: 0.85rem;
+  }
+}
+
+/* Header animations */
+@keyframes fadeIn {
+  from { opacity: 0; transform: translateY(-10px); }
+  to { opacity: 1; transform: translateY(0); }
+}
+
+@keyframes slideRight {
+  from { opacity: 0; transform: translateX(-20px); }
+  to { opacity: 1; transform: translateX(0); }
 }
 
-.user-menu button:hover {
-  background-color: #3c8a38; /* Darker version for hover */
+@keyframes slideLeft {
+  from { opacity: 0; transform: translateX(20px); }
+  to { opacity: 1; transform: translateX(0); }
 }
\ No newline at end of file
diff --git a/frontend/src/components/dashboard/Header.jsx b/frontend/src/components/dashboard/Header.jsx
index e28a0fd..66a2e13 100644
--- a/frontend/src/components/dashboard/Header.jsx
+++ b/frontend/src/components/dashboard/Header.jsx
@@ -2,22 +2,34 @@
 import React from 'react';
 import { useAuth } from '../../contexts/AuthContext';
 import './Header.css';
+import { Link } from 'react-router-dom';
+import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
+import { faBell } from "@fortawesome/free-solid-svg-icons";
+import { NotificationBadge } from '../ui/AnimatedComponents';
 
 function Header() {
   const { user, logout } = useAuth();
+  // Notification count (should come from backend in production)
+  const notificationCount = 2;
 
   return (
     <header className="dashboard-header">
       <div className="header-left">
         <h2>SmartBin Dashboard</h2>
       </div>
-      
-      <div className="header-right">
-        <div className="user-info">
-          <span>{user?.name || 'User'}</span>
-          <span className="user-role">{user?.role || 'Guest'}</span>
+      <div className="user-actions">
+        <div className="user-info-modern">
+          <span className="user-name">{user?.name || 'User'}</span>
+          <span className="user-role-modern">{user?.role || 'Guest'}</span>
         </div>
-        <button onClick={logout} className="logout-button">Logout</button>
+        <div className="header-divider" />
+        {/* Notification icon between user info and logout */}
+        <Link to="/dashboard/notifications" className="header-notifications-link-modern">
+          <FontAwesomeIcon icon={faBell} size="lg" />
+          <NotificationBadge count={notificationCount} />
+        </Link>
+        <div className="header-divider" />
+        <button onClick={logout} className="logout-button-modern">Logout</button>
       </div>
     </header>
   );
diff --git a/frontend/src/components/dashboard/Sidebar.css b/frontend/src/components/dashboard/Sidebar.css
index 44d13d2..f772b8a 100644
--- a/frontend/src/components/dashboard/Sidebar.css
+++ b/frontend/src/components/dashboard/Sidebar.css
@@ -10,140 +10,294 @@
 
 body {
     min-height: 100%;
-    background: #f3f5f0;
+    background: #f8f9fa;
 }
 
-nav .sidebar {
-    position: fixed;
-    top: 0;
-    left: 0;
-    height: 100%;
-    width: 260px;
-    padding: 20px 0;
-    background-color: #c3ceb6;
-    box-shadow: 0 5px 1px rgba(27, 27, 27, 0.1);
-    transition: all 0.4s ease;
-    text-decoration: none;
+/* Clean, minimalist sidebar inspired by modern UI/UX research */
+.sidebar {
+  position: fixed;
+  left: 0;
+  top: 0;
+  height: 100vh;
+  width: 260px;
+  background-color: #ffffff;
+  box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
+  display: flex;
+  flex-direction: column;
+  transition: width 0.3s ease;
+  z-index: 1000;
+  font-family: "Poppins", sans-serif;
+  overflow-y: auto;
 }
 
-.sidebar .logo {
-    display: flex;
-    align-items: center;
-    margin: 0 24px 30px;
-    cursor: pointer;
+.sidebar.collapsed {
+  width: 72px;
 }
 
-.logo .logo-name {
-    color: #141a17;
-    font-size: 22px;
-    font-weight: 500;
-    margin-left: 20px;
+.sidebar::-webkit-scrollbar {
+  width: 4px;
 }
 
-.sidebar .sidebar-content {
-    display: flex;
-    height: 100%;
-    flex-direction: column;
-    justify-content: space-between;
-    padding: 30px 16px;
+.sidebar::-webkit-scrollbar-track {
+  background: transparent;
 }
 
-.sidebar-content .list {
-    list-style: none;
-    padding: 0;
-    margin: 0;
+.sidebar::-webkit-scrollbar-thumb {
+  background: #e0e0e0;
+  border-radius: 10px;
+}
+
+/* HEADER */
+.sidebar-header {
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  height: 70px;
+  padding: 0 20px;
+  border-bottom: 1px solid #f0f0f0;
+}
+
+.brand {
+  display: flex;
+  align-items: center;
+  gap: 10px;
+}
+
+.brand-icon {
+  color: #4CAF50;
+  font-size: 24px;
+}
+
+.brand-name {
+  font-size: 20px;
+  font-weight: 600;
+  color: #4CAF50;
+}
+
+.toggle-button {
+  background: transparent;
+  border: none;
+  color: #888;
+  font-size: 16px;
+  cursor: pointer;
+  width: 32px;
+  height: 32px;
+  border-radius: 4px;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+}
+
+.toggle-button:hover {
+  color: #4CAF50;
+  background: rgba(76, 175, 80, 0.08);
+}
+
+/* USER PROFILE */
+.user-profile {
+  display: flex;
+  align-items: center;
+  padding: 20px;
+  gap: 12px;
+  border-bottom: 1px solid #f0f0f0;
+}
+
+.avatar {
+  width: 40px;
+  height: 40px;
+  border-radius: 50%;
+  background: #e8f5e9;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  font-size: 18px;
+  font-weight: 500;
+  color: #4CAF50;
+}
+
+.user-info {
+  display: flex;
+  flex-direction: column;
+}
+
+.user-info .name {
+  font-size: 14px;
+  font-weight: 600;
+  margin: 0;
+  color: #333;
+}
+
+.user-info .role {
+  font-size: 12px;
+  color: #888;
+  margin: 0;
+  text-transform: capitalize;
+}
+
+/* NOTIFICATIONS */
+.notifications-link {
+  display: flex;
+  align-items: center;
+  gap: 12px;
+  padding: 10px 20px;
+  text-decoration: none;
+  color: #888;
+  position: relative;
+  border-bottom: 1px solid #f0f0f0;
+}
+
+.notifications-link:hover {
+  background-color: rgba(76, 175, 80, 0.08);
+  color: #4CAF50;
+}
+
+.badge {
+  position: absolute;
+  top: 8px;
+  left: 30px;
+  background: #FF5722;
+  color: white;
+  font-size: 10px;
+  font-weight: 600;
+  height: 16px;
+  width: 16px;
+  border-radius: 50%;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+}
+
+.sidebar.collapsed .badge {
+  left: 40px;
+}
+
+.notification-label {
+  font-size: 13px;
+  color: #333;
+}
+
+/* NAVIGATION */
+.navigation {
+  flex: 1;
+  padding: 20px 0;
+  overflow-y: auto;
+}
+
+.navigation::-webkit-scrollbar {
+  width: 4px;
+}
+
+.navigation::-webkit-scrollbar-track {
+  background: transparent;
+}
+
+.navigation::-webkit-scrollbar-thumb {
+  background: #e0e0e0;
+  border-radius: 10px;
+}
+
+.nav-section {
+  margin-bottom: 20px;
+}
+
+.section-title {
+  font-size: 11px;
+  font-weight: 600;
+  color: #888;
+  padding: 0 20px;
+  margin: 0 0 8px;
+  letter-spacing: 0.5px;
 }
 
-.sidebar-content .list-item {
-    list-style: none;
-    margin: 8px 0;
-    border-radius: 12px; 
-    width: 90%;
-    height: 50px;
-    border: 2px solid transparent;
-    cursor: pointer;
+.nav-items {
+  list-style: none;
+  padding: 0;
+  margin: 0;
 }
 
-.sidebar-content .list-item a {
-    display: flex;
-    align-items: center;
-    padding: 14px 16px;
-    background-color: #88afa1;
-    border-radius: 12px;
-    height: 100%;
-    text-decoration: none;
-    transition: background-color 0.3s ease, transform 0.2s ease;
+.nav-item {
+  margin: 2px 0;
 }
 
-.sidebar-content .list-item:hover a {
-    background-color: rgb(130, 150, 106);
-    transform: scale(1.02);
+.nav-item a {
+  display: flex;
+  align-items: center;
+  gap: 12px;
+  padding: 10px 20px;
+  color: #555;
+  text-decoration: none;
+  transition: all 0.2s ease;
+  border-left: 3px solid transparent;
 }
 
-/* Update the nav-icon style to make icons more visible */
-.nav-icon {
-    margin-right: 14px;
-    font-size: 20px;
-    color: #141a17; /* Dark color for visibility */
-    transition: color 0.3s ease;
-    display: inline-block; /* Ensure proper display */
-    width: 20px;
-    text-align: center;
+.sidebar.collapsed .nav-item a {
+  padding: 10px 0;
+  justify-content: center;
 }
 
-/* Also ensure FontAwesome icons are properly sized and visible */
-.sidebar-content .list-item a .nav-icon {
-    display: inline-block;
-    width: 20px;
-    text-align: center;
+.nav-item a:hover {
+  background-color: rgba(76, 175, 80, 0.08);
+  color: #4CAF50;
 }
 
-/* Ensure active nav items show icons clearly */
-.sidebar-content .list-item a.active .nav-icon {
-    color: #141a17;
+.nav-item a.active {
+  background-color: #e8f5e9;
+  color: #4CAF50;
+  border-left: 3px solid #4CAF50;
 }
 
-.link {
-    font-size: 16px;
-    color: #141a17;
-    font-weight: 400;
+.sidebar.collapsed .nav-item a.active {
+  border-left: none;
+  border-right: 3px solid #4CAF50;
 }
 
-.sidebar-content .list-item:hover .nav-icon {
-    color: #141a17;
+.nav-item svg {
+  font-size: 18px;
+  width: 18px;
 }
 
-.bottom-content {
-    margin-top: auto;
-    padding-top: 20px;
+/* FOOTER */
+.sidebar-footer {
+  padding: 15px 20px;
+  border-top: 1px solid #f0f0f0;
 }
 
-.social-icons {
-    display: flex;
-    justify-content: space-between;
-    align-items: center;
-    margin: 10px 0 10px 10px;
-    padding-right: 30px;
+.logout-button {
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  gap: 10px;
+  width: 100%;
+  padding: 10px 0;
+  background-color: #ffebee;
+  color: #f44336;
+  border: none;
+  border-radius: 6px;
+  font-size: 14px;
+  font-weight: 500;
+  cursor: pointer;
+  transition: all 0.2s ease;
+  margin-bottom: 15px;
 }
 
-.social-icons .icon {
-    font-size: 24px;
-    color: #4ea14a;
-    margin-right: 10px;
-    transition: color 0.3s ease;
+.logout-button:hover {
+  background-color: #ffcdd2;
 }
 
-/* Make social icons more visible too */
-.social-icons .icon svg {
-    width: 24px;
-    height: 24px;
-    display: inline-block;
+.social-links {
+  display: flex;
+  justify-content: center;
+  gap: 15px;
+  margin-top: 15px;
 }
 
-.social-icons .icon svg path {
-    fill: #4ea14a !important;
+.social-links a {
+  color: #888;
+  font-size: 16px;
+  transition: all 0.2s ease;
 }
 
-.social-icons .icon:hover {
-    color: #141a17;
+social-links a:hover {
+  color: #4CAF50;
+  transform: translateY(-2px);
 }
diff --git a/frontend/src/components/dashboard/Sidebar.jsx b/frontend/src/components/dashboard/Sidebar.jsx
index 26ac85c..bbb00c3 100644
--- a/frontend/src/components/dashboard/Sidebar.jsx
+++ b/frontend/src/components/dashboard/Sidebar.jsx
@@ -1,5 +1,5 @@
 // frontend/src/components/dashboard/Sidebar.jsx
-import React from 'react';
+import React, { useState } from 'react';
 import { Link, useLocation } from 'react-router-dom';
 import { useAuth } from '../../contexts/AuthContext';
 import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
@@ -12,45 +12,50 @@ import {
 
 import {
   faGaugeHigh,
+  faUser,
   faFileLines,
   faMoneyBillTransfer,
-  faUser,
   faCreditCard,
-  faChartLine,
-  faCalendarDays,
   faMoneyBill,
-  faFileSignature,
   faTruck,
   faRecycle,
+  faCalendarDays,
   faScroll,
+  faFileSignature,
   faUsers,
+  faChartLine,
   faCog,
   faClipboardList,
   faListCheck,
-  faTrophy
+  faTrophy,
+  faBars,
+  faBell
 } from "@fortawesome/free-solid-svg-icons";
+import { NotificationBadge } from '../ui/AnimatedComponents';
 
 library.add(
   faFacebook, 
   faInstagram, 
   faTwitter,
   faGaugeHigh,
+  faUser,
   faFileLines,
   faMoneyBillTransfer,
-  faUser,
   faCreditCard,
-  faChartLine,
-  faCalendarDays,
   faMoneyBill,
-  faFileSignature,
   faTruck,
   faRecycle,
+  faCalendarDays,
   faScroll,
+  faFileSignature,
   faUsers,
+  faChartLine,
   faCog,
   faClipboardList,
   faListCheck,
-  faTrophy
+  faTrophy,
+  faBars,
+  faBell
 );
 
 import './Sidebar.css';
@@ -58,84 +63,141 @@ import './Sidebar.css';
 function Sidebar() {
   const { user } = useAuth();
   const location = useLocation();
-
-  // Define navigation items with FontAwesome icons
+  const [collapsed, setCollapsed] = useState(false);
+  
+  // Get first letter of name for avatar
+  const getInitials = (name) => {
+    return name ? name.charAt(0).toUpperCase() : 'U';
+  };
+  
+  // Define navigation items by role
   const getNavItems = () => {
-    const commonItems = [
-      { path: '/dashboard', label: 'Dashboard', icon: faGaugeHigh },
-      { path: '/dashboard/profile', label: 'My Profile', icon: faUser },
-    ];
-
     const roleSpecificItems = {
-      customer: [ // Updated role name
-        { path: '/dashboard/collection-history', label: 'Collection History', icon: faCalendarDays },
-        { path: '/dashboard/financial-history', label: 'Financial History', icon: faMoneyBill },
-        { path: '/dashboard/complaints', label: 'Complaints', icon: faFileSignature },
-        { path: '/dashboard/pickup-requests', label: 'Pickup Requests', icon: faTruck },
-        { path: '/dashboard/available-garbage', label: 'Available Garbage', icon: faRecycle },
-        { path: '/dashboard/purchase-history', label: 'Purchase History', icon: faScroll },
+      financial_manager: [
+        { section: 'MAIN', items: [
+          { path: '/dashboard', label: 'Dashboard', icon: faGaugeHigh },
+          { path: '/dashboard/profile', label: 'My Profile', icon: faUser },
+        ]},
+        { section: 'FINANCE', items: [
+          { path: '/dashboard/subscription-plans', label: 'Subscription Plans', icon: faFileLines },
+          { path: '/dashboard/budget-allocation', label: 'Budget Allocation', icon: faMoneyBillTransfer },
+          { path: '/dashboard/payments', label: 'Payments', icon: faCreditCard },
+        ]},
+        { section: 'STAFF', items: [
+          { path: '/dashboard/salary', label: 'Salary', icon: faMoneyBill },
+        ]},
       ],
-      admin: [
-        { path: '/dashboard/users', label: 'User Management', icon: faUsers },
-        { path: '/dashboard/statistics', label: 'Statistics', icon: faChartLine },
-        { path: '/dashboard/settings', label: 'System Settings', icon: faCog },
+      customer: [
+        { section: 'MAIN', items: [
+          { path: '/dashboard', label: 'Dashboard', icon: faGaugeHigh },
+          { path: '/dashboard/profile', label: 'My Profile', icon: faUser },
+        ]},
+        { section: 'SERVICES', items: [
+          { path: '/dashboard/pickup-requests', label: 'Pickup Requests', icon: faTruck },
+          { path: '/dashboard/available-garbage', label: 'Available Garbage', icon: faRecycle },
+        ]},
+        { section: 'HISTORY', items: [
+          { path: '/dashboard/collection-history', label: 'Collection History', icon: faCalendarDays },
+          { path: '/dashboard/financial-history', label: 'Financial History', icon: faMoneyBill },
+          { path: '/dashboard/purchase-history', label: 'Purchase History', icon: faScroll },
+        ]},
+        { section: 'SUPPORT', items: [
+          { path: '/dashboard/complaints', label: 'Complaints', icon: faFileSignature },
+        ]},
       ],
-      // Maintaining the database role name format (with underscore)
-      financial_manager: [
-        { path: '/dashboard/subscription-plans', label: 'Subscription Plans', icon: faFileLines },
-        { path: '/dashboard/budget-allocation', label: 'Budget Allocation', icon: faMoneyBillTransfer },
-        { path: '/dashboard/salary', label: 'Salary', icon: faUser },
-        { path: '/dashboard/payments', label: 'Payments', icon: faCreditCard },
+      admin: [
+        { section: 'MAIN', items: [
+          { path: '/dashboard', label: 'Dashboard', icon: faGaugeHigh },
+          { path: '/dashboard/profile', label: 'My Profile', icon: faUser },
+        ]},
+        { section: 'ADMINISTRATION', items: [
+          { path: '/dashboard/users', label: 'User Management', icon: faUsers },
+          { path: '/dashboard/statistics', label: 'Statistics', icon: faChartLine },
+          { path: '/dashboard/settings', label: 'System Settings', icon: faCog },
+        ]},
       ],
       staff: [
-        { path: '/dashboard/attendance', label: 'Attendance', icon: faClipboardList },
-        { path: '/dashboard/tasks', label: 'Tasks', icon: faListCheck },
-        { path: '/dashboard/performance', label: 'Performance', icon: faTrophy },
-      ],
+        { section: 'MAIN', items: [
+          { path: '/dashboard', label: 'Dashboard', icon: faGaugeHigh },
+          { path: '/dashboard/profile', label: 'My Profile', icon: faUser },
+        ]},
+        { section: 'MY WORK', items: [
+          { path: '/dashboard/attendance', label: 'Attendance', icon: faClipboardList },
+          { path: '/dashboard/tasks', label: 'Tasks', icon: faListCheck },
+          { path: '/dashboard/performance', label: 'Performance', icon: faTrophy },
+        ]},
+      ]
     };
 
-    return [
-      ...commonItems,
-      ...(roleSpecificItems[user?.role] || []),
-    ];
+    // Default to financial_manager if role not found or undefined
+    return roleSpecificItems[user?.role || 'financial_manager'] || roleSpecificItems.financial_manager;
   };
 
   const navItems = getNavItems();
 
   return (
-    <nav>
-      <div className="sidebar">
-        <div className="logo">
-          <img src="#" alt="logo" className="logo-img" />
-          <span className="logo-name">SmartBin</span>
-        </div>
-        
-        <div className="sidebar-content">
-          <ul className="list">
-            {navItems.map((item) => (
-              <li key={item.path} className="list-item">
-                <Link 
-                  to={item.path} 
-                  className={`nav-link ${location.pathname === item.path ? 'active' : ''}`}
-                >
-                  <FontAwesomeIcon icon={item.icon} className="nav-icon" />
-                  <span className="link">{item.label}</span>
-                </Link>
-              </li>
-            ))}
-            {/* Removed duplicate conditional rendering block */}
-          </ul>
-          
-          <div className="bottom-content">
-            <div className="social-icons">
-              <a href="#" className="icon"><FontAwesomeIcon icon={faFacebook} /></a>
-              <a href="#" className="icon"><FontAwesomeIcon icon={faInstagram} /></a>
-              <a href="#" className="icon"><FontAwesomeIcon icon={faTwitter} /></a>
-            </div>
+    <aside className={`sidebar ${collapsed ? 'collapsed' : ''}`}>
+      <div className="sidebar-header">
+        {!collapsed && (
+          <div className="brand">
+            <FontAwesomeIcon icon={faRecycle} className="brand-icon" />
+            <span className="brand-name">SmartBin</span>
+          </div>
+        )}
+        <button 
+          className="toggle-button" 
+          onClick={() => setCollapsed(!collapsed)}
+        >
+          <FontAwesomeIcon icon={faBars} />
+        </button>
+      </div>
+      
+      {user && (
+        <div className="user-profile">
+          <div className="avatar">
+            {getInitials(user?.name)}
           </div>
+          {!collapsed && (
+            <div className="user-info">
+              <h3 className="name">{user?.name || 'Financial Manager'}</h3>
+              <p className="role">{(user?.role || 'financial_manager').replace('_', ' ')}</p>
+            </div>
+          )}
         </div>
+      )}
+
+      <nav className="navigation">
+        {navItems.map((section, idx) => (
+          <div key={idx} className="nav-section">
+            {!collapsed && <h3 className="section-title">{section.section}</h3>}
+            <ul className="nav-items">
+              {section.items.map((item) => (
+                <li key={item.path} className="nav-item">
+                  <Link 
+                    to={item.path}
+                    className={location.pathname === item.path ? 'active' : ''}
+                  >
+                    <FontAwesomeIcon icon={item.icon} />
+                    {!collapsed && <span>{item.label}</span>}
+                  </Link>
+                </li>
+              ))}
+            </ul>
+          </div>
+        ))}
+      </nav>
+      
+      <div className="sidebar-footer">
+        {/* Notification icon moved to header, so remove from sidebar */}
+        {!collapsed && (
+          <div className="social-links">
+            <a href="#"><FontAwesomeIcon icon={faFacebook} /></a>
+            <a href="#"><FontAwesomeIcon icon={faInstagram} /></a>
+            <a href="#"><FontAwesomeIcon icon={faTwitter} /></a>
+          </div>
+        )}
       </div>
-    </nav>
+    </aside>
   );
 }
 
diff --git a/frontend/src/components/financial/FinancialDashboard.css b/frontend/src/components/financial/FinancialDashboard.css
index 610ce14..7a5b7b6 100644
--- a/frontend/src/components/financial/FinancialDashboard.css
+++ b/frontend/src/components/financial/FinancialDashboard.css
@@ -28,61 +28,115 @@
     display: flex;
     align-items: center;
     gap: 10px;
+    position: relative;
 }
 
 .date-range-selector label {
     font-weight: 500;
 }
 
-.date-range-selector select {
+/* Custom dropdown styles */
+.custom-dropdown {
+    position: relative;
+    min-width: 160px;
+}
+
+.dropdown-toggle {
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    width: 100%;
     padding: 8px 12px;
+    background-color: #fff;
     border: 1px solid #ddd;
     border-radius: 4px;
-    background-color: white;
     font-size: 0.9rem;
+    cursor: pointer;
+    transition: all 0.2s;
+    text-align: left;
+    color: #222;
 }
 
-.export-btn {
-    padding: 8px 16px;
-    background-color: #3e4b2e;
-    color: white;
-    border: none;
+.dropdown-toggle:hover {
+    border-color: #3e4b2e;
+}
+
+.dropdown-toggle svg {
+    margin-left: 8px;
+    font-size: 0.8rem;
+}
+
+.dropdown-menu {
+    position: absolute;
+    top: calc(100% + 5px);
+    left: 0;
+    width: 100%;
+    background-color: white;
+    border: 1px solid #ddd;
     border-radius: 4px;
+    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
+    z-index: 1050;
+    overflow: hidden;
+}
+
+.dropdown-item {
+    padding: 8px 12px;
     cursor: pointer;
-    font-size: 0.9rem;
     transition: background-color 0.2s;
+    color: #222;
+    background-color: #fff;
 }
 
-.export-btn:hover {
-    background-color: #4a5a37;
+.dropdown-item:hover {
+    background-color: #f5f7fa;
+}
+
+.dropdown-item.active {
+    background-color: #3e4b2e;
+    color: #fff;
+    font-weight: 500;
 }
 
 .dashboard-tabs {
     display: flex;
-    border-bottom: 1px solid #ddd;
     margin-bottom: 20px;
+    background: #fff;
+    border-radius: 8px;
+    padding: 5px;
+    gap: 5px;
+    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
     overflow-x: auto;
 }
 
 .dashboard-tabs button {
-    padding: 10px 20px;
+    flex: 1;
+    padding: 10px 15px;
     background: none;
     border: none;
-    border-bottom: 2px solid transparent;
-    font-size: 1rem;
+    border-radius: 6px;
+    font-size: 0.95rem;
     cursor: pointer;
     transition: all 0.2s;
     color: #777;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    gap: 8px;
     white-space: nowrap;
 }
 
+.dashboard-tabs button svg {
+    font-size: 1.1rem;
+}
+
 .dashboard-tabs button:hover {
     color: #3e4b2e;
+    background-color: #f5f7fa;
 }
 
 .dashboard-tabs button.active {
-    color: #3e4b2e;
-    border-bottom: 2px solid #3e4b2e;
+    color: #fff;
+    background-color: #3e4b2e;
     font-weight: 500;
 }
 
@@ -154,6 +208,13 @@
     position: relative;
 }
 
+.chart-title {
+    text-align: center;
+    font-size: 0.9rem;
+    color: #666;
+    margin-top: 10px;
+}
+
 .recent-transactions, .subscription-plans {
     background-color: white;
     border-radius: 8px;
@@ -253,7 +314,6 @@
 }
 
 /* Add this after the .error style */
-
 .no-data-message {
     height: 300px;
     display: flex;
@@ -271,6 +331,32 @@
     padding: 20px;
 }
 
+/* Recharts customizations */
+.recharts-default-tooltip {
+    background-color: rgba(255, 255, 255, 0.9) !important;
+    border: none !important;
+    border-radius: 8px !important;
+    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15) !important;
+    padding: 10px 14px !important;
+}
+
+.recharts-tooltip-label {
+    font-weight: 600 !important;
+    margin-bottom: 5px !important;
+}
+
+.recharts-tooltip-item {
+    padding: 2px 0 !important;
+}
+
+.recharts-cartesian-axis-tick-value {
+    font-size: 12px;
+}
+
+.recharts-legend-item-text {
+    font-size: 13px;
+}
+
 /* Responsive adjustments */
 @media (max-width: 768px) {
     .dashboard-header {
@@ -296,4 +382,14 @@
     .export-btn {
         width: 100%;
     }
+    
+    .dashboard-tabs {
+        padding: 3px;
+        gap: 3px;
+    }
+    
+    .dashboard-tabs button {
+        padding: 8px 12px;
+        font-size: 0.9rem;
+    }
 }
diff --git a/frontend/src/components/financial/FinancialDashboard.jsx b/frontend/src/components/financial/FinancialDashboard.jsx
index 3aa7f73..b19c29a 100644
--- a/frontend/src/components/financial/FinancialDashboard.jsx
+++ b/frontend/src/components/financial/FinancialDashboard.jsx
@@ -1,35 +1,36 @@
-import React, { useState, useEffect, useContext } from 'react';
+import React, { useState, useEffect, useContext, useRef } from 'react';
+import { Link } from 'react-router-dom';
 import AuthContext from '../../contexts/AuthContext';
 import financialApi from '../../services/financialApi'; // Import specific financialApi
-import { Line, Bar, Doughnut } from 'react-chartjs-2';
+// Replace Chart.js imports with Recharts
 import {
-  Chart as ChartJS,
-  CategoryScale,
-  LinearScale,
-  PointElement,
-  LineElement,
-  BarElement,
-  ArcElement,
-  Title,
+  ResponsiveContainer,
+  LineChart,
+  Line,
+  BarChart,
+  Bar,
+  PieChart,
+  Pie,
+  Cell,
+  XAxis,
+  YAxis,
+  CartesianGrid,
   Tooltip,
   Legend,
-  Colors
-} from 'chart.js';
+  Label,
+  Sector
+} from 'recharts';
+import { 
+  faChartPie, 
+  faMoneyBillTrendUp, 
+  faArrowTrendDown, 
+  faUsers,
+  faChevronDown
+} from '@fortawesome/free-solid-svg-icons';
+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
 import './FinancialDashboard.css';
 
-ChartJS.register(
-  CategoryScale,
-  LinearScale,
-  PointElement,
-  LineElement,
-  BarElement,
-  ArcElement,
-  Title,
-  Tooltip,
-  Legend,
-  Colors
-);
-
+// Keep your currency formatter
 const formatCurrency = (amount) => {
   const numericAmount = Number(amount);
   if (isNaN(numericAmount)) {
@@ -41,6 +42,7 @@ const formatCurrency = (amount) => {
   }).format(numericAmount);
 };
 
+// Keep your date formatter
 const formatDate = (dateString) => {
   if (!dateString) return 'N/A';
   try {
@@ -61,8 +63,25 @@ const FinancialDashboard = () => {
   const [error, setError] = useState(null);
   const [dateRange, setDateRange] = useState('month');
   const [activeTab, setActiveTab] = useState('overview');
+  const [activePieIndex, setActivePieIndex] = useState(0);
+  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
+  const dropdownRef = useRef(null);
   const { user } = useContext(AuthContext);
 
+  // Close dropdown when clicking outside
+  useEffect(() => {
+    const handleClickOutside = (event) => {
+      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
+        setIsDropdownOpen(false);
+      }
+    };
+
+    document.addEventListener('mousedown', handleClickOutside);
+    return () => {
+      document.removeEventListener('mousedown', handleClickOutside);
+    };
+  }, []);
+
   useEffect(() => {
     const fetchDashboardData = async () => {
       if (!user || (user.role !== 'financial_manager' && user.role !== 'admin')) {
@@ -72,7 +91,8 @@ const FinancialDashboard = () => {
       }
       try {
         setLoading(true);
-        const response = await financialApi.getDashboardData(dateRange); // Use financialApi
+        // Use financialApi consistently
+        const response = await financialApi.getDashboardData(dateRange);
         setDashboardData(response.data);
         setError(null);
       } catch (err) {
@@ -84,11 +104,17 @@ const FinancialDashboard = () => {
     };
 
     fetchDashboardData();
-  }, [user, dateRange]);
+  }, [user, dateRange]); // Keep dependencies
 
   const prepareChartData = () => {
-    if (!dashboardData) {
-      return { revenueExpenseData: {}, planRevenueData: {}, expenseCategoryData: {}, planSubscriptionData: {} };
+    if (!dashboardData || !dashboardData.summary) { // Check for summary object
+      return {
+        revenueExpenseData: [],
+        planRevenueData: [],
+        expenseCategoryData: [],
+        planSubscriptionData: [], // Keep this if used elsewhere, otherwise remove
+        hasData: false
+      };
     }
 
     // Generate complete set of labels based on date range
@@ -101,48 +127,40 @@ const FinancialDashboard = () => {
     (dashboardData.trends?.expenses || []).forEach(item => expenseTrendMap.set(item.month, item.total));
 
     const today = new Date();
-    
-    // Generate complete set of labels based on dateRange
+
+    // Generate complete set of labels based on dateRange (month)
     if (dateRange === 'month') {
-      // For month: days 1-current day of month
       const daysInMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();
       const currentDay = Math.min(today.getDate(), daysInMonth);
-      
       for (let i = 1; i <= currentDay; i++) {
         const dayStr = i.toString();
         completeLabels.push(dayStr);
         if (!revenueTrendMap.has(dayStr)) revenueTrendMap.set(dayStr, 0);
         if (!expenseTrendMap.has(dayStr)) expenseTrendMap.set(dayStr, 0);
       }
-    } else if (dateRange === 'last3months') {
-      // For last 3 months: get the previous 3 months including current
+    } 
+    // Generate complete set of labels based on dateRange (last3months)
+    else if (dateRange === 'last3months') {
       const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
       const currentMonth = today.getMonth();
       const currentYear = today.getFullYear();
-      
-      // Loop through the last 3 months (including current)
       for (let i = 0; i < 3; i++) {
-        // Calculate month index (handling year wrap-around)
         let monthIndex = currentMonth - 2 + i;
         let year = currentYear;
-        
         if (monthIndex < 0) {
           monthIndex += 12;
           year -= 1;
         }
-        
         const monthLabel = `${monthNames[monthIndex]}-${year}`;
         completeLabels.push(monthLabel);
-        
-        // For all months, initialize with available data or 0
         if (!revenueTrendMap.has(monthLabel)) revenueTrendMap.set(monthLabel, 0);
         if (!expenseTrendMap.has(monthLabel)) expenseTrendMap.set(monthLabel, 0);
       }
-    } else { // year
-      // For year: Jan-current month
+    } 
+    // Generate complete set of labels based on dateRange (year)
+    else { // year
       const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
       const year = today.getFullYear();
-      
       for (let i = 0; i <= today.getMonth(); i++) {
         const monthLabel = `${monthNames[i]}-${year}`;
         completeLabels.push(monthLabel);
@@ -151,95 +169,99 @@ const FinancialDashboard = () => {
       }
     }
 
-    // Use our complete labels for the chart with values from maps (will be 0 for missing data)
-    const revenueExpenseData = {
-      labels: completeLabels,
-      datasets: [
-        {
-          label: 'Revenue',
-          data: completeLabels.map(label => revenueTrendMap.get(label)),
-          borderColor: 'rgba(75, 192, 192, 1)',
-          backgroundColor: 'rgba(75, 192, 192, 0.2)',
-          tension: 0.4,
-          spanGaps: true
-        },
-        {
-          label: 'Expenses',
-          data: completeLabels.map(label => expenseTrendMap.get(label)),
-          borderColor: 'rgba(255, 99, 132, 1)',
-          backgroundColor: 'rgba(255, 99, 132, 0.2)',
-          tension: 0.4,
-          spanGaps: true
-        }
-      ]
-    };
-
-    // Check if there's any non-null data to display
-    const allZeroValues = revenueExpenseData.datasets.every(dataset => 
-      dataset.data.every(value => value === 0 || value === null)
-    );
-
-    // For other chart data, keep the original logic
-    const planRevenueLabels = dashboardData.revenueByPlan?.map(item => item.plan) || [];
-    const planRevenueData = {
-      labels: planRevenueLabels,
-      datasets: [{
-        label: 'Revenue',
-        data: dashboardData.revenueByPlan?.map(item => item.revenue) || [],
-        borderWidth: 1
-      }]
-    };
-
-    const expenseCategoryLabels = dashboardData.expensesByCategory?.map(item => item.category) || [];
-    const expenseCategoryData = {
-      labels: expenseCategoryLabels,
-      datasets: [{
-        label: 'Expenses by Category',
-        data: dashboardData.expensesByCategory?.map(item => item.total) || [],
-        borderWidth: 1
-      }]
+    // Prepare data for Recharts Line chart
+    const revenueExpenseData = completeLabels.map(label => ({
+      name: label,
+      revenue: revenueTrendMap.get(label) || 0, // Ensure 0 if undefined
+      expenses: expenseTrendMap.get(label) || 0 // Ensure 0 if undefined
+    }));
+
+    const hasData = revenueExpenseData.some(item => item.revenue > 0 || item.expenses > 0);
+
+    // Prepare data for Revenue by Plan Pie chart
+    const planRevenueData = dashboardData.revenueByPlan?.map(item => ({
+      name: item.planName, // Use planName from backend
+      value: item.revenue   // Use revenue from backend
+    })) || [];
+
+    // Prepare data for Expenses by Category Bar chart
+    const expenseCategoryData = dashboardData.expensesByCategory?.map(item => ({
+      name: item.category.charAt(0).toUpperCase() + item.category.slice(1), // Capitalize first letter
+      value: item.total     // Use total from backend
+    })) || [];
+
+    // Prepare data for Subscriptions by Plan Pie chart (using revenueByPlan data)
+    const planSubscriptionData = dashboardData.revenueByPlan?.map(item => ({
+      name: item.planName, // Use planName from backend
+      value: item.count    // Use count from backend for subscription count by plan
+    })) || [];
+
+
+    return {
+      revenueExpenseData,
+      planRevenueData,
+      expenseCategoryData,
+      planSubscriptionData, // Now represents count by plan
+      hasData
     };
+  };
 
-    const planSubscriptionLabels = dashboardData.revenueByPlan?.map(item => item.plan) || [];
-    const planSubscriptionData = {
-      labels: planSubscriptionLabels,
-      datasets: [{
-        label: 'Subscriptions (by Revenue)',
-        data: dashboardData.revenueByPlan?.map(item => item.revenue) || [],
-        borderWidth: 1
-      }]
-    };
+  const { revenueExpenseData, planRevenueData, expenseCategoryData, planSubscriptionData, hasData } = prepareChartData();
 
-    return { 
-      revenueExpenseData, 
-      planRevenueData, 
-      expenseCategoryData, 
-      planSubscriptionData, 
-      allZeroValues 
-    };
+  // Custom colors for charts
+  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658'];
+  
+  // Active Pie Chart animation
+  const onPieEnter = (_, index) => {
+    setActivePieIndex(index);
   };
+  
+  const renderActiveShape = (props) => {
+    const { cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle,
+      fill, payload, percent, value } = props;
+    const sin = Math.sin(-midAngle * Math.PI / 180);
+    const cos = Math.cos(-midAngle * Math.PI / 180);
+    const sx = cx + (outerRadius + 10) * cos;
+    const sy = cy + (outerRadius + 10) * sin;
+    const mx = cx + (outerRadius + 30) * cos;
+    const my = cy + (outerRadius + 30) * sin;
+    const ex = mx + (cos >= 0 ? 1 : -1) * 22;
+    const ey = my;
+    const textAnchor = cos >= 0 ? 'start' : 'end';
 
-  const { revenueExpenseData, planRevenueData, expenseCategoryData, planSubscriptionData, allZeroValues } = prepareChartData();
-
-  const commonChartOptions = {
-    responsive: true,
-    maintainAspectRatio: false,
-    plugins: {
-      legend: {
-        position: 'top',
-      },
-      title: {
-        display: true,
-      },
-      colors: {
-        enabled: true
-      }
-    },
-    scales: {
-      y: {
-        beginAtZero: true
-      }
-    }
+    return (
+      <g>
+        <text x={cx} y={cy} dy={8} textAnchor="middle" fill={fill} fontSize={14}>
+          {payload.name}
+        </text>
+        <Sector
+          cx={cx}
+          cy={cy}
+          innerRadius={innerRadius}
+          outerRadius={outerRadius}
+          startAngle={startAngle}
+          endAngle={endAngle}
+          fill={fill}
+        />
+        <Sector
+          cx={cx}
+          cy={cy}
+          startAngle={startAngle}
+          endAngle={endAngle}
+          innerRadius={outerRadius + 6}
+          outerRadius={outerRadius + 10}
+          fill={fill}
+        />
+        <path d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`} stroke={fill} fill="none" />
+        <circle cx={ex} cy={ey} r={2} fill={fill} stroke="none" />
+        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} textAnchor={textAnchor} fill="#333" fontSize={12}>
+          {`${formatCurrency(value)}`}
+        </text>
+        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} dy={18} textAnchor={textAnchor} fill="#999" fontSize={12}>
+          {`(${(percent * 100).toFixed(2)}%)`}
+        </text>
+      </g>
+    );
   };
 
   // Get the appropriate chart title based on the selected date range
@@ -256,28 +278,7 @@ const FinancialDashboard = () => {
     }
   };
 
-  const lineChartOptions = { 
-    ...commonChartOptions, 
-    plugins: { 
-      ...commonChartOptions.plugins, 
-      title: { 
-        display: true, 
-        text: getChartTitle() 
-      } 
-    } 
-  };
-
-  const doughnutOptions = {
-    responsive: true,
-    maintainAspectRatio: false,
-    plugins: {
-      legend: { position: 'right' },
-      title: { display: true, text: 'Distribution' },
-      colors: { enabled: true }
-    }
-  };
-  const barChartOptions = { ...commonChartOptions, plugins: { ...commonChartOptions.plugins, legend: { display: false }, title: { display: true, text: 'Expenses by Category' } } };
-
+  // Check loading/error/nodata states using summary object
   if (loading) {
     return <div className="loading">Loading Financial Dashboard...</div>;
   }
@@ -286,19 +287,21 @@ const FinancialDashboard = () => {
     return <div className="error">Error: {error}</div>;
   }
 
-  if (!dashboardData) {
+  // Check if essential summary data is missing
+  if (!dashboardData || !dashboardData.summary) {
     return <div className="loading">No data available.</div>;
   }
 
+  // Check for genuinely empty data based on summary and arrays
   const isEmptyData =
-    dashboardData.activeSubscriptions === 0 &&
-    (dashboardData.totalRevenue?.period || 0) === 0 &&
-    (dashboardData.totalExpenses?.period || 0) === 0 &&
-    (dashboardData.outstandingPayments || 0) === 0 &&
+    (dashboardData.summary.activeSubscriptions || 0) === 0 &&
+    (dashboardData.summary.totalRevenue || 0) === 0 &&
+    (dashboardData.summary.totalExpenses || 0) === 0 &&
+    // (dashboardData.summary.outstandingPayments || 0) === 0 && // Uncomment if outstandingPayments is added
     Array.isArray(dashboardData.revenueByPlan) && dashboardData.revenueByPlan.length === 0 &&
     Array.isArray(dashboardData.expensesByCategory) && dashboardData.expensesByCategory.length === 0;
 
-  if (isEmptyData) {
+  if (isEmptyData && !hasData) { // Also check if trend data is empty
     return (
       <div className="empty-state">
         <p>No financial data available for this period.</p>
@@ -314,22 +317,60 @@ const FinancialDashboard = () => {
     </span>
   );
 
+  // Function to handle date range selection
+  const handleDateRangeChange = (value) => {
+    setDateRange(value);
+    setIsDropdownOpen(false);
+  };
+
+  // Get label for selected date range
+  const getDateRangeLabel = () => {
+    switch(dateRange) {
+      case 'month': return 'This Month';
+      case 'last3months': return 'Last 3 Months';
+      case 'year': return 'This Year';
+      default: return 'This Month';
+    }
+  };
+
   return (
     <div className="financial-dashboard">
       <div className="dashboard-header">
         <h2>Financial Dashboard</h2>
         <div className="dashboard-controls">
-          <div className="date-range-selector">
-            <label htmlFor="date-range">Time Period:</label>
-            <select
-              id="date-range"
-              value={dateRange}
-              onChange={(e) => setDateRange(e.target.value)}
-            >
-              <option value="month">This Month</option>
-              <option value="last3months">Last 3 Months</option>
-              <option value="year">This Year</option>
-            </select>
+          <div className="date-range-selector" ref={dropdownRef}>
+            <label>Time Period:</label>
+            <div className="custom-dropdown">
+              <button 
+                className="dropdown-toggle" 
+                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
+              >
+                {getDateRangeLabel()}
+                <FontAwesomeIcon icon={faChevronDown} />
+              </button>
+              {isDropdownOpen && (
+                <div className="dropdown-menu">
+                  <div 
+                    className={`dropdown-item ${dateRange === 'month' ? 'active' : ''}`}
+                    onClick={() => handleDateRangeChange('month')}
+                  >
+                    This Month
+                  </div>
+                  <div 
+                    className={`dropdown-item ${dateRange === 'last3months' ? 'active' : ''}`}
+                    onClick={() => handleDateRangeChange('last3months')}
+                  >
+                    Last 3 Months
+                  </div>
+                  <div 
+                    className={`dropdown-item ${dateRange === 'year' ? 'active' : ''}`}
+                    onClick={() => handleDateRangeChange('year')}
+                  >
+                    This Year
+                  </div>
+                </div>
+              )}
+            </div>
           </div>
           <button
             className="export-btn"
@@ -345,25 +386,25 @@ const FinancialDashboard = () => {
           className={activeTab === 'overview' ? 'active' : ''}
           onClick={() => setActiveTab('overview')}
         >
-          Overview
+          <FontAwesomeIcon icon={faChartPie} /> Overview
         </button>
         <button
           className={activeTab === 'revenue' ? 'active' : ''}
           onClick={() => setActiveTab('revenue')}
         >
-          Revenue
+          <FontAwesomeIcon icon={faMoneyBillTrendUp} /> Revenue
         </button>
         <button
           className={activeTab === 'expenses' ? 'active' : ''}
           onClick={() => setActiveTab('expenses')}
         >
-          Expenses
+          <FontAwesomeIcon icon={faArrowTrendDown} /> Expenses
         </button>
         <button
           className={activeTab === 'subscriptions' ? 'active' : ''}
           onClick={() => setActiveTab('subscriptions')}
         >
-          Subscriptions
+          <FontAwesomeIcon icon={faUsers} /> Subscriptions
         </button>
       </div>
 
@@ -372,48 +413,80 @@ const FinancialDashboard = () => {
           <div className="dashboard-grid">
             <div className="dashboard-card highlight">
               <h3>Total Revenue</h3>
-              <p>{formatCurrency(dashboardData.totalRevenue?.period || 0)}</p>
+              {/* Access summary data correctly */}
+              <p>{formatCurrency(dashboardData.summary.totalRevenue || 0)}</p>
               {renderPeriodSubtitle()}
             </div>
             <div className="dashboard-card highlight">
               <h3>Total Expenses</h3>
-              <p>{formatCurrency(dashboardData.totalExpenses?.period || 0)}</p>
+              {/* Access summary data correctly */}
+              <p>{formatCurrency(dashboardData.summary.totalExpenses || 0)}</p>
               {renderPeriodSubtitle()}
             </div>
             <div className="dashboard-card highlight">
               <h3>Net Profit</h3>
-              <p>{formatCurrency((dashboardData.totalRevenue?.period || 0) - (dashboardData.totalExpenses?.period || 0))}</p>
+              {/* Access summary data correctly */}
+              <p>{formatCurrency(dashboardData.summary.netProfit || 0)}</p>
               {renderPeriodSubtitle()}
             </div>
             <div className="dashboard-card">
               <h3>Active Subscriptions</h3>
-              <p>{dashboardData.activeSubscriptions || 0}</p>
+              {/* Access summary data correctly */}
+              <p>{dashboardData.summary.activeSubscriptions || 0}</p>
               <span className="card-subtitle">Total Active</span>
             </div>
-            <div className="dashboard-card">
+            {/* Remove Outstanding Payments card if not implemented in backend */}
+            {/* <div className="dashboard-card">
               <h3>Outstanding Payments</h3>
-              <p>{formatCurrency(dashboardData.outstandingPayments || 0)}</p>
+              <p>{formatCurrency(dashboardData.summary.outstandingPayments || 0)}</p>
               <span className="card-subtitle">Pending Collection</span>
-            </div>
-            <div className="dashboard-card">
+            </div> */}
+            {/* Subscription Revenue card might need adjustment based on backend data */}
+            {/* <div className="dashboard-card">
               <h3>Subscription Revenue</h3>
               <p>{formatCurrency(dashboardData.totalRevenue?.subscriptions || 0)}</p>
               {renderPeriodSubtitle()}
-            </div>
+            </div> */}
           </div>
 
           <div className="dashboard-charts">
             <div className="chart-container">
-              {allZeroValues ? (
+              {!hasData ? (
                 <div className="no-data-message">
                   <p>No revenue or expense data available for {dateRange === 'month' ? 'this month' : dateRange === 'last3months' ? 'last 3 months' : 'this year'}.</p>
                 </div>
               ) : (
                 <div className="chart-wrapper">
-                  <Line
-                    data={revenueExpenseData}
-                    options={lineChartOptions}
-                  />
+                  <ResponsiveContainer width="100%" height={300}>
+                    <LineChart
+                      data={revenueExpenseData} // Use correctly prepared data
+                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
+                    >
+                      <CartesianGrid strokeDasharray="3 3" />
+                      <XAxis dataKey="name" />
+                      <YAxis />
+                      <Tooltip formatter={(value) => formatCurrency(value)} />
+                      <Legend />
+                      <Line
+                        type="monotone"
+                        dataKey="revenue"
+                        name="Revenue"
+                        stroke="#4caf50"
+                        strokeWidth={2}
+                        activeDot={{ r: 8 }}
+                        dot={{ strokeWidth: 2 }}
+                      />
+                      <Line
+                        type="monotone"
+                        dataKey="expenses"
+                        name="Expenses"
+                        stroke="#f44336"
+                        strokeWidth={2}
+                        dot={{ strokeWidth: 2 }}
+                      />
+                    </LineChart>
+                  </ResponsiveContainer>
+                  <div className="chart-title">{getChartTitle()}</div>
                 </div>
               )}
             </div>
@@ -426,29 +499,49 @@ const FinancialDashboard = () => {
           <div className="dashboard-grid">
             <div className="dashboard-card highlight">
               <h3>Total Revenue</h3>
-              <p>{formatCurrency(dashboardData.totalRevenue?.period || 0)}</p>
+              {/* Access summary data correctly */}
+              <p>{formatCurrency(dashboardData.summary.totalRevenue || 0)}</p>
               {renderPeriodSubtitle()}
             </div>
-            <div className="dashboard-card">
+            {/* Remove Revenue Growth card if not implemented */}
+            {/* <div className="dashboard-card">
               <h3>Revenue Growth</h3>
               <p>{(dashboardData.revenueGrowthPercentage || 0).toFixed(1)}%</p>
               <span className="card-subtitle">From Previous Period</span>
-            </div>
-            <div className="dashboard-card">
+            </div> */}
+            {/* Remove Average Revenue card if not implemented */}
+            {/* <div className="dashboard-card">
               <h3>Average Revenue</h3>
               <p>{formatCurrency(dashboardData.averageDailyRevenue || 0)}</p>
               <span className="card-subtitle">Per Day (in Period)</span>
-            </div>
+            </div> */}
           </div>
 
           <div className="dashboard-charts">
             <div className="chart-container">
               <h3>Revenue by Subscription Plan</h3>
               <div className="chart-wrapper">
-                <Doughnut
-                  data={planRevenueData}
-                  options={{ ...doughnutOptions, plugins: { ...doughnutOptions.plugins, title: { display: true, text: 'Revenue by Subscription Plan' } } }}
-                />
+                <ResponsiveContainer width="100%" height={300}>
+                  <PieChart>
+                    <Pie
+                      activeIndex={activePieIndex}
+                      activeShape={renderActiveShape}
+                      data={planRevenueData} // Use correctly prepared data
+                      cx="50%"
+                      cy="50%"
+                      innerRadius={70}
+                      outerRadius={90}
+                      paddingAngle={5}
+                      dataKey="value"
+                      onMouseEnter={onPieEnter}
+                    >
+                      {planRevenueData.map((entry, index) => (
+                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
+                      ))}
+                    </Pie>
+                    <Tooltip formatter={(value) => formatCurrency(value)} />
+                  </PieChart>
+                </ResponsiveContainer>
               </div>
             </div>
           </div>
@@ -467,6 +560,7 @@ const FinancialDashboard = () => {
                   </tr>
                 </thead>
                 <tbody>
+                  {/* Use recentTransactions.payments from backend */}
                   {dashboardData.recentTransactions?.payments?.length > 0 ? (
                     dashboardData.recentTransactions.payments.map((payment) => (
                       <tr key={payment.id}>
@@ -492,29 +586,50 @@ const FinancialDashboard = () => {
           <div className="dashboard-grid">
             <div className="dashboard-card highlight">
               <h3>Total Expenses</h3>
-              <p>{formatCurrency(dashboardData.totalExpenses?.period || 0)}</p>
+              {/* Access summary data correctly */}
+              <p>{formatCurrency(dashboardData.summary.totalExpenses || 0)}</p>
               {renderPeriodSubtitle()}
             </div>
+            {/* Adjust Largest Category card if needed */}
             <div className="dashboard-card">
               <h3>Largest Category</h3>
-              <p>{dashboardData.largestExpenseCategory?.category || 'N/A'}</p>
-              <span className="card-subtitle">{formatCurrency(dashboardData.largestExpenseCategory?.total || 0)}</span>
+              <p>{dashboardData.expensesByCategory?.[0]?.category || 'N/A'}</p>
+              <span className="card-subtitle">{formatCurrency(dashboardData.expensesByCategory?.[0]?.total || 0)}</span>
             </div>
-            <div className="dashboard-card">
+            {/* Remove Budget Status card if not implemented */}
+            {/* <div className="dashboard-card">
               <h3>Budget Status</h3>
               <p>N/A</p>
               <span className="card-subtitle">Budget data needed</span>
-            </div>
+            </div> */}
           </div>
 
           <div className="dashboard-charts">
             <div className="chart-container">
               <h3>Expenses by Category</h3>
               <div className="chart-wrapper">
-                <Bar
-                  data={expenseCategoryData}
-                  options={barChartOptions}
-                />
+                <ResponsiveContainer width="100%" height={300}>
+                  <BarChart
+                    data={expenseCategoryData} // Use correctly prepared data
+                    margin={{ top: 20, right: 30, left: 20, bottom: 70 }} // Adjusted bottom margin
+                  >
+                    <CartesianGrid strokeDasharray="3 3" />
+                    <XAxis
+                      dataKey="name"
+                      angle={-45}
+                      textAnchor="end"
+                      height={70} // Keep height for angled labels
+                      interval={0} // Show all labels
+                    />
+                    <YAxis />
+                    <Tooltip formatter={(value) => formatCurrency(value)} />
+                    <Bar dataKey="value" name="Amount" radius={[5, 5, 0, 0]}>
+                      {expenseCategoryData.map((entry, index) => (
+                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
+                      ))}
+                    </Bar>
+                  </BarChart>
+                </ResponsiveContainer>
               </div>
             </div>
           </div>
@@ -533,11 +648,13 @@ const FinancialDashboard = () => {
                   </tr>
                 </thead>
                 <tbody>
+                  {/* Use recentTransactions.expenses from backend */}
                   {dashboardData.recentTransactions?.expenses?.length > 0 ? (
                     dashboardData.recentTransactions.expenses.map((expense) => (
                       <tr key={expense.id}>
                         <td>{formatDate(expense.date)}</td>
-                        <td>{expense.category}</td>
+                        {/* Capitalize first letter of category */}
+                        <td>{expense.category.charAt(0).toUpperCase() + expense.category.slice(1)}</td>
                         <td>{expense.description || 'N/A'}</td>
                         <td>{formatCurrency(expense.amount)}</td>
                         <td><span className={`status ${expense.status?.toLowerCase()}`}>{expense.status}</span></td>
@@ -558,29 +675,50 @@ const FinancialDashboard = () => {
           <div className="dashboard-grid">
             <div className="dashboard-card highlight">
               <h3>Active Subscriptions</h3>
-              <p>{dashboardData.activeSubscriptions || 0}</p>
+              {/* Access summary data correctly */}
+              <p>{dashboardData.summary.activeSubscriptions || 0}</p>
               <span className="card-subtitle">Total</span>
             </div>
             <div className="dashboard-card">
               <h3>New Subscriptions</h3>
-              <p>{dashboardData.newSubscriptions || 0}</p>
+              {/* Access summary data correctly */}
+              <p>{dashboardData.summary.newSubscriptions || 0}</p>
               {renderPeriodSubtitle()}
             </div>
-            <div className="dashboard-card">
+            {/* Remove Cancellations card if not implemented */}
+            {/* <div className="dashboard-card">
               <h3>Cancellations</h3>
               <p>{dashboardData.cancellations || 0}</p>
               {renderPeriodSubtitle()}
-            </div>
+            </div> */}
           </div>
 
           <div className="dashboard-charts">
             <div className="chart-container">
-              <h3>Subscriptions by Plan</h3>
+              {/* Changed title to reflect data source */}
+              <h3>Subscriptions by Plan (Count)</h3>
               <div className="chart-wrapper">
-                <Doughnut
-                  data={planSubscriptionData}
-                  options={{ ...doughnutOptions, plugins: { ...doughnutOptions.plugins, title: { display: true, text: 'Subscriptions by Revenue' } } }}
-                />
+                <ResponsiveContainer width="100%" height={300}>
+                  <PieChart>
+                    <Pie
+                      data={planSubscriptionData} // Use data prepared for subscription counts
+                      cx="50%"
+                      cy="50%"
+                      labelLine={false}
+                      outerRadius={100}
+                      fill="#8884d8"
+                      dataKey="value" // 'value' now holds the count
+                      label={({ name, percent, value }) => `${name}: ${value} (${(percent * 100).toFixed(0)}%)`} // Show count and percentage
+                    >
+                      {planSubscriptionData.map((entry, index) => (
+                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
+                      ))}
+                    </Pie>
+                    {/* Tooltip formatter for count */}
+                    <Tooltip formatter={(value) => `${value} subscribers`} />
+                    <Legend layout="vertical" verticalAlign="middle" align="right" />
+                  </PieChart>
+                </ResponsiveContainer>
               </div>
             </div>
           </div>
@@ -598,9 +736,11 @@ const FinancialDashboard = () => {
                   </tr>
                 </thead>
                 <tbody>
+                  {/* Use subscriptionPlans from backend */}
                   {dashboardData.subscriptionPlans?.length > 0 ? (
                     dashboardData.subscriptionPlans.map((plan) => (
-                      <tr key={plan.id}>
+                      // Use plan._id for key if available, otherwise plan.name
+                      <tr key={plan._id || plan.name}>
                         <td>{plan.name}</td>
                         <td>{formatCurrency(plan.price)}</td>
                         <td>{plan.duration}</td>
@@ -614,7 +754,8 @@ const FinancialDashboard = () => {
               </table>
             </div>
             <div className="view-all">
-              <button className="view-all-btn" onClick={() => window.location.href = '/dashboard/subscription-plans'}>Manage Subscription Plans</button>
+              {/* Link to manage plans */}
+              <Link to="/dashboard/subscription-plans" className="view-all-btn">Manage Subscription Plans</Link>
             </div>
           </div>
         </>
diff --git a/frontend/src/components/layouts/DashboardLayout.css b/frontend/src/components/layouts/DashboardLayout.css
index e1c8942..3d967aa 100644
--- a/frontend/src/components/layouts/DashboardLayout.css
+++ b/frontend/src/components/layouts/DashboardLayout.css
@@ -4,41 +4,95 @@
   height: 100vh;
   width: 100%;
   overflow: hidden;
+  background-color: #f8f9fa;
 }
 
 .dashboard-main {
   flex: 1;
-  margin-left: 260px; /* Width of sidebar */
+  margin-left: 280px; /* Updated to match new sidebar width */
   display: flex;
   flex-direction: column;
-  width: calc(100% - 260px); /* Ensure proper width calculation */
+  width: calc(100% - 280px); /* Updated to match new sidebar width */
   overflow: hidden;
+  transition: margin-left 0.3s ease, width 0.3s ease;
 }
 
 .dashboard-content-area {
   flex: 1;
   overflow-y: auto;
-  padding: 20px;
-  background-color: #eaefea;
+  padding: 24px;
+  background-color: #f8f9fa;
+  animation: fadeInUp 0.5s ease forwards;
 }
 
 /* Ensure only one component renders at a time */
 .dashboard-content {
   background-color: white;
-  border-radius: 8px;
-  padding: 20px;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
-  margin-bottom: 20px;
+  border-radius: 12px;
+  padding: 24px;
+  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.04);
+  margin-bottom: 24px;
+  animation: cardAppear 0.5s cubic-bezier(0.22, 1, 0.36, 1) forwards;
+  transition: transform 0.3s ease, box-shadow 0.3s ease;
 }
 
+.dashboard-content:hover {
+  transform: translateY(-4px);
+  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
+}
+
+/* Create a staggered animation effect for multiple content blocks */
+.dashboard-content:nth-child(1) { animation-delay: 0.1s; }
+.dashboard-content:nth-child(2) { animation-delay: 0.2s; }
+.dashboard-content:nth-child(3) { animation-delay: 0.3s; }
+.dashboard-content:nth-child(4) { animation-delay: 0.4s; }
+
 /* Fix header placement */
 .dashboard-main header {
   width: 100%;
-  z-index: 10;
-  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
+  z-index: 95;
 }
 
 /* Make main content area take remaining height */
 .dashboard-main main {
   flex: 1;
+}
+
+/* Responsive adjustments */
+@media screen and (max-width: 768px) {
+  .dashboard-main {
+    margin-left: 0;
+    width: 100%;
+  }
+  
+  .dashboard-content-area {
+    padding: 16px;
+  }
+  
+  .dashboard-content {
+    padding: 16px;
+  }
+}
+
+/* Dashboard content animations */
+@keyframes fadeInUp {
+  from {
+    opacity: 0;
+    transform: translateY(20px);
+  }
+  to {
+    opacity: 1;
+    transform: translateY(0);
+  }
+}
+
+@keyframes cardAppear {
+  0% {
+    opacity: 0;
+    transform: translateY(20px) scale(0.97);
+  }
+  100% {
+    opacity: 1;
+    transform: translateY(0) scale(1);
+  }
 }
\ No newline at end of file
diff --git a/frontend/src/components/layouts/DashboardLayout.jsx b/frontend/src/components/layouts/DashboardLayout.jsx
index 6fac2b4..360d8d0 100644
--- a/frontend/src/components/layouts/DashboardLayout.jsx
+++ b/frontend/src/components/layouts/DashboardLayout.jsx
@@ -1,6 +1,6 @@
 // frontend/src/components/layouts/DashboardLayout.jsx
 import React from 'react';
-import { Routes, Route, Link } from 'react-router-dom';
+import { Routes, Route } from 'react-router-dom';
 import { useAuth } from '../../contexts/AuthContext';
 import Header from '../dashboard/Header';
 import Sidebar from '../dashboard/Sidebar';
@@ -10,6 +10,8 @@ import ProfilePage from '../../pages/profile/ProfilePage';
 // Import new staff components
 import AttendanceTracker from '../staff/AttendanceTracker';
 import PerformanceMetrics from '../staff/PerformanceMetrics';
+// Import the dedicated NotFound page
+import NotFoundPage from '../../pages/NotFound'; 
 import './DashboardLayout.css';
 
 // Placeholder dashboard components for different roles
@@ -28,15 +30,6 @@ const DashboardHome = ({ user }) => {
   );
 };
 
-// Inline NotFound component
-const NotFoundPage = () => (
-  <div className="dashboard-content" style={{ textAlign: 'center', marginTop: '50px' }}>
-    <h1>404 - Page Not Found</h1>
-    <p>Sorry, the page you are looking for does not exist.</p>
-    <Link to="/dashboard">Go back to Dashboard</Link>
-  </div>
-);
-
 function DashboardLayout() {
   const { user } = useAuth();
 
@@ -90,8 +83,8 @@ function DashboardLayout() {
               </>
             )}
             
-            {/* Fallback route */}
-            <Route path="*" element={<NotFoundPage />} /> {/* Use the inline NotFound component */}
+            {/* Fallback route - Use the imported NotFoundPage */}
+            <Route path="*" element={<NotFoundPage />} /> 
           </Routes>
         </main>
       </div>
diff --git a/frontend/src/components/ui/AnimatedComponents.css b/frontend/src/components/ui/AnimatedComponents.css
new file mode 100644
index 0000000..b215b51
--- /dev/null
+++ b/frontend/src/components/ui/AnimatedComponents.css
@@ -0,0 +1,211 @@
+/* Animated Card */
+.animated-card {
+  background-color: white;
+  border-radius: 12px;
+  padding: 20px;
+  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.04);
+  margin-bottom: 20px;
+  opacity: 0;
+  transform: translateY(20px);
+  animation: card-appear 0.5s cubic-bezier(0.22, 1, 0.36, 1) forwards;
+  transition: transform 0.3s ease, box-shadow 0.3s ease;
+}
+
+.animated-card.visible {
+  opacity: 1;
+  transform: translateY(0);
+}
+
+.animated-card:hover {
+  transform: translateY(-4px);
+  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
+}
+
+@keyframes card-appear {
+  0% {
+    opacity: 0;
+    transform: translateY(20px) scale(0.97);
+  }
+  100% {
+    opacity: 1;
+    transform: translateY(0) scale(1);
+  }
+}
+
+/* Ripple Button */
+.ripple-button {
+  position: relative;
+  overflow: hidden;
+  padding: 10px 20px;
+  background-color: #2e7d32;
+  color: white;
+  border: none;
+  border-radius: 4px;
+  font-weight: 500;
+  font-size: 0.875rem;
+  cursor: pointer;
+  transition: all 0.3s ease;
+  outline: none;
+}
+
+.ripple-button:hover {
+  transform: translateY(-2px);
+  box-shadow: 0 4px 10px rgba(46, 125, 50, 0.3);
+}
+
+.ripple-button:active {
+  transform: translateY(0);
+}
+
+.ripple-button .content {
+  position: relative;
+  z-index: 1;
+}
+
+.ripple-button .ripple {
+  position: absolute;
+  border-radius: 50%;
+  background-color: rgba(255, 255, 255, 0.5);
+  transform: scale(0);
+  animation: ripple 0.5s linear;
+  z-index: 0;
+}
+
+@keyframes ripple {
+  to {
+    transform: scale(4);
+    opacity: 0;
+  }
+}
+
+/* Animated Icon */
+.animated-icon {
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  width: 40px;
+  height: 40px;
+  border-radius: 8px;
+  background-color: rgba(46, 125, 50, 0.1);
+  color: #2e7d32;
+  font-size: 1.2rem;
+  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
+}
+
+.animated-icon:hover {
+  transform: translateY(-3px) rotate(8deg);
+  background-color: rgba(46, 125, 50, 0.2);
+  box-shadow: 0 5px 15px rgba(46, 125, 50, 0.2);
+}
+
+/* Count Up */
+.count-up {
+  font-size: 2.5rem;
+  font-weight: 600;
+  color: #2e7d32;
+  display: inline-block;
+}
+
+/* Progress Bar */
+.progress-container {
+  width: 100%;
+  height: 8px;
+  background-color: #f0f0f0;
+  border-radius: 4px;
+  overflow: hidden;
+  margin: 10px 0;
+}
+
+.progress-bar {
+  height: 100%;
+  background-color: #2e7d32;
+  border-radius: 4px;
+  transition: width 1s cubic-bezier(0.22, 1, 0.36, 1);
+}
+
+/* Fade In */
+.fade-in {
+  opacity: 0;
+  animation: fade-in-animation forwards;
+}
+
+.fade-in.visible {
+  opacity: 1;
+}
+
+@keyframes fade-in-animation {
+  from { opacity: 0; transform: translateY(10px); }
+  to { opacity: 1; transform: translateY(0); }
+}
+
+/* Notification Badge */
+.notification-badge {
+  display: inline-flex;
+  align-items: center;
+  justify-content: center;
+  min-width: 20px;
+  height: 20px;
+  padding: 0 6px;
+  border-radius: 10px;
+  background-color: #f44336;
+  color: white;
+  font-size: 0.75rem;
+  font-weight: 600;
+}
+
+.notification-badge.pulse {
+  animation: badge-pulse 1s ease;
+}
+
+@keyframes badge-pulse {
+  0% { transform: scale(1); }
+  50% { transform: scale(1.2); }
+  100% { transform: scale(1); }
+}
+
+/* Floating action buttons */
+.floating-action-btn {
+  position: fixed;
+  bottom: 24px;
+  right: 24px;
+  width: 56px;
+  height: 56px;
+  border-radius: 50%;
+  background-color: #2e7d32;
+  color: white;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
+  cursor: pointer;
+  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
+  z-index: 100;
+}
+
+.floating-action-btn:hover {
+  transform: translateY(-4px) scale(1.05);
+  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.25);
+}
+
+/* Shake animation for errors or notifications */
+.shake {
+  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
+  transform: translate3d(0, 0, 0);
+}
+
+@keyframes shake {
+  10%, 90% { transform: translate3d(-1px, 0, 0); }
+  20%, 80% { transform: translate3d(2px, 0, 0); }
+  30%, 50%, 70% { transform: translate3d(-4px, 0, 0); }
+  40%, 60% { transform: translate3d(4px, 0, 0); }
+}
+
+/* Hover lift effect for clickable cards */
+.hover-lift {
+  transition: all 0.3s ease;
+}
+
+.hover-lift:hover {
+  transform: translateY(-6px);
+  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
+}
\ No newline at end of file
diff --git a/frontend/src/components/ui/AnimatedComponents.jsx b/frontend/src/components/ui/AnimatedComponents.jsx
new file mode 100644
index 0000000..383b6fc
--- /dev/null
+++ b/frontend/src/components/ui/AnimatedComponents.jsx
@@ -0,0 +1,173 @@
+import React, { useEffect, useState } from 'react';
+import './AnimatedComponents.css';
+
+// Animated card component with hover effects and staggered animation
+export const AnimatedCard = ({ children, delay = 0, className = '', ...props }) => {
+  const [isVisible, setIsVisible] = useState(false);
+  
+  useEffect(() => {
+    const timer = setTimeout(() => {
+      setIsVisible(true);
+    }, delay);
+    
+    return () => clearTimeout(timer);
+  }, [delay]);
+  
+  return (
+    <div 
+      className={`animated-card ${isVisible ? 'visible' : ''} ${className}`}
+      style={{ animationDelay: `${delay}ms` }}
+      {...props}
+    >
+      {children}
+    </div>
+  );
+};
+
+// Animated button with ripple effect
+export const RippleButton = ({ children, className = '', ...props }) => {
+  const [coords, setCoords] = useState({ x: -1, y: -1 });
+  const [isRippling, setIsRippling] = useState(false);
+
+  useEffect(() => {
+    if (coords.x !== -1 && coords.y !== -1) {
+      setIsRippling(true);
+      setTimeout(() => setIsRippling(false), 500);
+    } else {
+      setIsRippling(false);
+    }
+  }, [coords]);
+
+  useEffect(() => {
+    if (!isRippling) setCoords({ x: -1, y: -1 });
+  }, [isRippling]);
+
+  const handleClick = (e) => {
+    const rect = e.target.getBoundingClientRect();
+    setCoords({
+      x: e.clientX - rect.left,
+      y: e.clientY - rect.top
+    });
+    props.onClick && props.onClick(e);
+  };
+
+  return (
+    <button
+      className={`ripple-button ${className}`}
+      onClick={handleClick}
+      {...props}
+    >
+      {isRippling && (
+        <span
+          className="ripple"
+          style={{
+            left: coords.x,
+            top: coords.y
+          }}
+        />
+      )}
+      <span className="content">{children}</span>
+    </button>
+  );
+};
+
+// Animated icon with hover effects
+export const AnimatedIcon = ({ icon, className = '', ...props }) => {
+  return (
+    <div className={`animated-icon ${className}`} {...props}>
+      {icon}
+    </div>
+  );
+};
+
+// Animated count that increments from 0
+export const CountUp = ({ end, duration = 2000, className = '', ...props }) => {
+  const [count, setCount] = useState(0);
+  
+  useEffect(() => {
+    let startTimestamp = null;
+    const step = (timestamp) => {
+      if (!startTimestamp) startTimestamp = timestamp;
+      const progress = Math.min((timestamp - startTimestamp) / duration, 1);
+      setCount(Math.floor(progress * end));
+      
+      if (progress < 1) {
+        window.requestAnimationFrame(step);
+      }
+    };
+    
+    window.requestAnimationFrame(step);
+  }, [end, duration]);
+  
+  return (
+    <span className={`count-up ${className}`} {...props}>
+      {count}
+    </span>
+  );
+};
+
+// Animated progress bar
+export const ProgressBar = ({ progress, className = '', ...props }) => {
+  const [width, setWidth] = useState(0);
+  
+  useEffect(() => {
+    setWidth(0);
+    setTimeout(() => setWidth(progress), 50);
+  }, [progress]);
+  
+  return (
+    <div className={`progress-container ${className}`} {...props}>
+      <div 
+        className="progress-bar"
+        style={{ width: `${width}%` }}
+      />
+    </div>
+  );
+};
+
+// Fade in element on mount
+export const FadeIn = ({ children, delay = 0, duration = 500, className = '', ...props }) => {
+  const [isVisible, setIsVisible] = useState(false);
+  
+  useEffect(() => {
+    const timer = setTimeout(() => {
+      setIsVisible(true);
+    }, delay);
+    
+    return () => clearTimeout(timer);
+  }, [delay]);
+  
+  return (
+    <div 
+      className={`fade-in ${isVisible ? 'visible' : ''} ${className}`}
+      style={{ 
+        animationDelay: `${delay}ms`,
+        animationDuration: `${duration}ms`
+      }}
+      {...props}
+    >
+      {children}
+    </div>
+  );
+};
+
+// Animated notification badge
+export const NotificationBadge = ({ count = 0, className = '', ...props }) => {
+  const [animate, setAnimate] = useState(false);
+  
+  useEffect(() => {
+    if (count > 0) {
+      setAnimate(true);
+      const timer = setTimeout(() => setAnimate(false), 1000);
+      return () => clearTimeout(timer);
+    }
+  }, [count]);
+  
+  if (count === 0) return null;
+  
+  return (
+    <span className={`notification-badge ${animate ? 'pulse' : ''} ${className}`} {...props}>
+      {count}
+    </span>
+  );
+};
\ No newline at end of file
diff --git a/frontend/src/components/ui/Logo/Logo.css b/frontend/src/components/ui/Logo/Logo.css
new file mode 100644
index 0000000..0746dc4
--- /dev/null
+++ b/frontend/src/components/ui/Logo/Logo.css
@@ -0,0 +1,53 @@
+.logo-container {
+  display: flex;
+  align-items: center;
+  gap: 10px;
+  text-decoration: none;
+}
+
+.logo-icon {
+  width: 40px;
+  height: 40px;
+  color: #4CAF50;
+}
+
+.logo-text {
+  font-size: 1.5rem;
+  font-weight: 700;
+  color: #4CAF50;
+  letter-spacing: 0.5px;
+}
+
+.logo-text span {
+  color: #2E7D32;
+}
+
+/* Logo size variations */
+.logo-small .logo-icon {
+  width: 24px;
+  height: 24px;
+}
+
+.logo-small .logo-text {
+  font-size: 1.1rem;
+}
+
+.logo-large .logo-icon {
+  width: 48px;
+  height: 48px;
+}
+
+.logo-large .logo-text {
+  font-size: 1.8rem;
+}
+
+@media (max-width: 768px) {
+  .logo-text {
+    font-size: 1.2rem;
+  }
+  
+  .logo-icon {
+    width: 30px;
+    height: 30px;
+  }
+}
\ No newline at end of file
diff --git a/frontend/src/components/ui/Logo/Logo.jsx b/frontend/src/components/ui/Logo/Logo.jsx
new file mode 100644
index 0000000..562778a
--- /dev/null
+++ b/frontend/src/components/ui/Logo/Logo.jsx
@@ -0,0 +1,22 @@
+import React from 'react';
+import { Link } from 'react-router-dom';
+import './Logo.css';
+
+const Logo = ({ size = 'medium', linkTo = '/' }) => {
+  return (
+    <Link to={linkTo} className={`logo-container logo-${size}`}>
+      <svg 
+        className="logo-icon"
+        xmlns="http://www.w3.org/2000/svg" 
+        viewBox="0 0 24 24"
+        fill="currentColor"
+      >
+        {/* Recycling bin icon */}
+        <path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" />
+      </svg>
+      <div className="logo-text">Smart<span>Bin</span></div>
+    </Link>
+  );
+};
+
+export default Logo;
\ No newline at end of file
diff --git a/frontend/src/index.css b/frontend/src/index.css
index 08a3ac9..4fb6278 100644
--- a/frontend/src/index.css
+++ b/frontend/src/index.css
@@ -11,13 +11,74 @@
   text-rendering: optimizeLegibility;
   -webkit-font-smoothing: antialiased;
   -moz-osx-font-smoothing: grayscale;
+
+  /* SmartBin theme colors */
+  --primary-color: #2e7d32;
+  --primary-light: rgba(46, 125, 50, 0.12);
+  --primary-hover: rgba(46, 125, 50, 0.08);
+  --text-color: #333333;
+  --text-light: #757575;
+  --bg-color: #f8f9fa;
+  --card-bg: #ffffff;
+  --border-color: #f0f0f0;
+  --shadow-sm: 0 2px 12px rgba(0, 0, 0, 0.04);
+  --shadow-md: 0 4px 15px rgba(0, 0, 0, 0.08);
+  --shadow-lg: 0 8px 30px rgba(0, 0, 0, 0.12);
+}
+
+/* Updated page transition effects */
+.page-transition {
+  opacity: 1;
+  transition: 300ms ease-in-out;
+  transition-property: opacity, transform;
+}
+
+.page-transition.fadeIn {
+  opacity: 1;
+  transform: translateY(0) scale(1);
+}
+
+.page-transition.fadeOut {
+  opacity: 0;
+  transform: translateY(20px) scale(0.98);
+}
+
+/* Loading indicator animation */
+.loading-indicator {
+  width: 40px;
+  height: 40px;
+  border: 3px solid var(--border-color);
+  border-radius: 50%;
+  border-top-color: var(--primary-color);
+  animation: spin 1s ease-in-out infinite;
+  margin: 40px auto;
+}
+
+@keyframes spin {
+  to { transform: rotate(360deg); }
+}
+
+/* Pulse animation for interactive elements */
+@keyframes pulse-light {
+  0% { box-shadow: 0 0 0 0 rgba(46, 125, 50, 0.4); }
+  70% { box-shadow: 0 0 0 10px rgba(46, 125, 50, 0); }
+  100% { box-shadow: 0 0 0 0 rgba(46, 125, 50, 0); }
+}
+
+/* Enhanced focus states for better accessibility */
+:focus {
+  outline: 2px solid var(--primary-color);
+  outline-offset: 2px;
 }
 
 a {
   font-weight: 500;
   color: #646cff;
   text-decoration: inherit;
+  position: relative;
+  transition: all 0.2s ease;
 }
+
 a:hover {
   color: #535bf2;
 }
@@ -28,6 +89,8 @@ body {
   place-items: center;
   min-width: 320px;
   min-height: 100vh;
+  color: var(--text-color);
+  background-color: var(--bg-color);
 }
 
 h1 {
@@ -44,16 +107,34 @@ button {
   font-family: inherit;
   background-color: #1a1a1a;
   cursor: pointer;
-  transition: border-color 0.25s;
+  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
 }
+
 button:hover {
   border-color: #646cff;
+  transform: translateY(-2px);
+  box-shadow: var(--shadow-sm);
+}
+
+button:active {
+  transform: translateY(0);
 }
+
 button:focus,
 button:focus-visible {
   outline: 4px auto -webkit-focus-ring-color;
 }
 
+/* Card hover effect for all card-like elements */
+.card-hover {
+  transition: all 0.3s ease;
+}
+
+.card-hover:hover {
+  transform: translateY(-4px);
+  box-shadow: var(--shadow-md);
+}
+
 @media (prefers-color-scheme: light) {
   :root {
     color: #213547;
diff --git a/frontend/src/pages/LandingPage.jsx b/frontend/src/pages/LandingPage.jsx
index a639a35..d3abf96 100644
--- a/frontend/src/pages/LandingPage.jsx
+++ b/frontend/src/pages/LandingPage.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import { Link } from 'react-router-dom';
 import { useAuth } from '../contexts/AuthContext';
+import Logo from '../components/ui/Logo/Logo';
 import './LandingPage.css';
 
 function LandingPage() {
@@ -9,7 +10,7 @@ function LandingPage() {
   return (
     <div className="landing-page">
       <header className="header">
-        <div className="logo">SmartBin</div>
+        <Logo />
         <nav>
           {user ? (
             <Link to="/dashboard" className="dashboard-button">Dashboard</Link>
diff --git a/frontend/src/utils/api.js b/frontend/src/utils/api.js
deleted file mode 100644
index e69de29..0000000
diff --git a/package-lock.json b/package-lock.json
index 8b6f731..c5b6c1b 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -8,7 +8,8 @@
         "@fortawesome/fontawesome-svg-core": "^6.7.2",
         "@fortawesome/free-brands-svg-icons": "^6.7.2",
         "@fortawesome/free-solid-svg-icons": "^6.7.2",
-        "@fortawesome/react-fontawesome": "^0.2.2"
+        "@fortawesome/react-fontawesome": "^0.2.2",
+        "express-validator": "^7.2.1"
       }
     },
     "node_modules/@fortawesome/fontawesome-common-types": {
@@ -69,12 +70,31 @@
         "react": ">=16.3"
       }
     },
+    "node_modules/express-validator": {
+      "version": "7.2.1",
+      "resolved": "https://registry.npmjs.org/express-validator/-/express-validator-7.2.1.tgz",
+      "integrity": "sha512-CjNE6aakfpuwGaHQZ3m8ltCG2Qvivd7RHtVMS/6nVxOM7xVGqr4bhflsm4+N5FP5zI7Zxp+Hae+9RE+o8e3ZOQ==",
+      "license": "MIT",
+      "dependencies": {
+        "lodash": "^4.17.21",
+        "validator": "~13.12.0"
+      },
+      "engines": {
+        "node": ">= 8.0.0"
+      }
+    },
     "node_modules/js-tokens": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
       "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
       "license": "MIT"
     },
+    "node_modules/lodash": {
+      "version": "4.17.21",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
+      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
+      "license": "MIT"
+    },
     "node_modules/loose-envify": {
       "version": "1.4.0",
       "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
@@ -122,6 +142,15 @@
       "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
       "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
       "license": "MIT"
+    },
+    "node_modules/validator": {
+      "version": "13.12.0",
+      "resolved": "https://registry.npmjs.org/validator/-/validator-13.12.0.tgz",
+      "integrity": "sha512-c1Q0mCiPlgdTVVVIJIrBuxNicYE+t/7oKeI9MWLj3fh/uq2Pxh/3eeWbVZ4OcGW1TUf53At0njHw5SMdA3tmMg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.10"
+      }
     }
   }
 }
diff --git a/package.json b/package.json
deleted file mode 100644
index 03ba9a7..0000000
--- a/package.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "dependencies": {
-    "@fortawesome/fontawesome-svg-core": "^6.7.2",
-    "@fortawesome/free-brands-svg-icons": "^6.7.2",
-    "@fortawesome/free-solid-svg-icons": "^6.7.2",
-    "@fortawesome/react-fontawesome": "^0.2.2"
-  }
-}
diff --git a/temp_collect_backend.ps1 b/temp_collect_backend.ps1
deleted file mode 100644
index 6873e40..0000000
--- a/temp_collect_backend.ps1
+++ /dev/null
@@ -1,30 +0,0 @@
-$outputFile = 'c:\y2s2ITP\SmartBin\all_the_backend_code.txt';
-$backendRoot = 'c:\y2s2ITP\SmartBin\backend';
-$includeDirs = @('src', 'tests');
-$includeFiles = @('package.json');
-
-# Clear or create the output file
-if (Test-Path $outputFile) { Clear-Content -Path $outputFile } else { New-Item -Path $outputFile -ItemType File -Force | Out-Null }
-
-# Add package.json
-$pkgJsonPath = Join-Path $backendRoot $includeFiles[0];
-if (Test-Path $pkgJsonPath) {
-    Add-Content -Path $outputFile -Value ('// File: ' + $pkgJsonPath);
-    Get-Content $pkgJsonPath -Raw | Add-Content -Path $outputFile;
-    Add-Content -Path $outputFile -Value ([Environment]::NewLine + [Environment]::NewLine);
-}
-
-# Process .js files in specified directories
-foreach ($dir in $includeDirs) {
-    $currentDir = Join-Path $backendRoot $dir;
-    if (Test-Path $currentDir -PathType Container) {
-        Get-ChildItem -Path $currentDir -Recurse -Filter *.js | ForEach-Object {
-            $filePath = $_.FullName;
-            Add-Content -Path $outputFile -Value ('// File: ' + $filePath);
-            Get-Content $filePath -Raw | Add-Content -Path $outputFile;
-            Add-Content -Path $outputFile -Value ([Environment]::NewLine + [Environment]::NewLine);
-        }
-    }
-}
-
-Write-Host ('Backend code collected into ' + $outputFile)
diff --git a/temp_collect_frontend.ps1 b/temp_collect_frontend.ps1
deleted file mode 100644
index fb54415..0000000
--- a/temp_collect_frontend.ps1
+++ /dev/null
@@ -1,33 +0,0 @@
-$outputFile = 'c:\y2s2ITP\SmartBin\all_the_frontend_code.txt';
-$frontendRoot = 'c:\y2s2ITP\SmartBin\frontend';
-$includeFilesRoot = @('package.json', 'index.html', 'vite.config.js', 'eslint.config.js');
-$includeDirs = @('src');
-$includeExtensions = @('*.js', '*.jsx', '*.css');
-
-# Clear or create the output file
-if (Test-Path $outputFile) { Clear-Content -Path $outputFile } else { New-Item -Path $outputFile -ItemType File -Force | Out-Null }
-
-# Add specific files from the frontend root
-foreach ($file in $includeFilesRoot) {
-    $filePath = Join-Path $frontendRoot $file;
-    if (Test-Path $filePath) {
-        Add-Content -Path $outputFile -Value ('// File: ' + $filePath);
-        Get-Content $filePath -Raw | Add-Content -Path $outputFile;
-        Add-Content -Path $outputFile -Value ([Environment]::NewLine + [Environment]::NewLine);
-    }
-}
-
-# Process files in specified directories with specific extensions
-foreach ($dir in $includeDirs) {
-    $currentDir = Join-Path $frontendRoot $dir;
-    if (Test-Path $currentDir -PathType Container) {
-        Get-ChildItem -Path $currentDir -Recurse -Include $includeExtensions | ForEach-Object {
-            $filePath = $_.FullName;
-            Add-Content -Path $outputFile -Value ('// File: ' + $filePath);
-            Get-Content $filePath -Raw | Add-Content -Path $outputFile;
-            Add-Content -Path $outputFile -Value ([Environment]::NewLine + [Environment]::NewLine);
-        }
-    }
-}
-
-Write-Host ('Frontend code collected into ' + $outputFile)
