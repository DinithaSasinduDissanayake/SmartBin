--- File: .\frontend\package.json ---

{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@fortawesome/fontawesome-svg-core": "^6.7.2",
    "@fortawesome/free-brands-svg-icons": "^6.7.2",
    "@fortawesome/free-solid-svg-icons": "^6.7.2",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@mui/icons-material": "^7.0.2",
    "@mui/material": "^7.0.2",
    "@mui/x-date-pickers": "^8.1.0",
    "@sendgrid/mail": "^8.1.5",
    "@stripe/react-stripe-js": "^3.7.0",
    "@stripe/stripe-js": "^2.4.0",
    "axios": "^1.8.4",
    "chart.js": "^4.4.9",
    "date-fns": "^4.1.0",
    "docx": "^9.4.1",
    "file-saver": "^2.0.5",
    "jspdf": "^3.0.1",
    "jspdf-autotable": "^5.0.2",
    "leaflet": "^1.9.4",
    "react": "^19.0.0",
    "react-chartjs-2": "^5.3.0",
    "react-datepicker": "^8.3.0",
    "react-dom": "^19.0.0",
    "react-leaflet": "^5.0.0",
    "react-router-dom": "^7.4.0",
    "react-transition-group": "^4.4.5",
    "recharts": "^2.15.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@shadcn/ui": "^0.0.4",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.3",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.5",
    "vite": "^6.2.0"
  }
}


--- End File: .\frontend\package.json ---


--- File Not Found: .\frontend\tailwind.config.js ---


--- File Not Found: .\frontend\postcss.config.cjs ---


--- File: .\frontend\vite.config.js ---

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  server: { // Add this server configuration
    proxy: {
      // Proxy /api requests to your backend server
      '/api': {
        target: 'http://localhost:5000', // Your backend server address
        changeOrigin: true, // Recommended for virtual hosted sites
        secure: false,      // Optional: Set to false if backend uses http
      },
    },
  },
})


--- End File: .\frontend\vite.config.js ---


--- File: .\frontend\src\index.css ---

/* Import our global CSS variables */
@import url('./variables.css');

/* Import our theme styles */
@import url('./styles/themeStyles.css');

/* Base styles and resets */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 16px;
  scroll-behavior: smooth;
}

body {
  font-family: var(--font-family);
  line-height: 1.5;
  font-weight: var(--font-weight-regular);
  color: var(--text-primary);
  background-color: var(--bg-default);
  min-height: 100vh;
  min-width: 320px;
  
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Typography */
h1, h2, h3, h4, h5, h6 {
  margin-bottom: 0.5em;
  font-weight: var(--font-weight-medium);
  line-height: 1.2;
  color: var(--text-primary);
}

h1 {
  font-size: var(--font-size-xxl);
}

h2 {
  font-size: var(--font-size-xl);
}

h3 {
  font-size: var(--font-size-lg);
}

p {
  margin-bottom: 1rem;
}

a {
  color: var(--primary-color);
  text-decoration: none;
  transition: color var(--transition-speed-fast) ease;
}

a:hover {
  color: var(--primary-dark);
  text-decoration: underline;
}

/* Focus styling for accessibility */
:focus {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}

/* Button styling */
button {
  cursor: pointer;
  font-family: var(--font-family);
  font-weight: var(--font-weight-medium);
  border-radius: var(--border-radius-md);
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: var(--font-size-md);
  background-color: var(--bg-light);
  transition: all var(--transition-speed-normal) var(--transition-ease);
}

button:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-sm);
}

button:active {
  transform: translateY(0);
}

button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Form controls */
input, select, textarea {
  font-family: var(--font-family);
  font-size: var(--font-size-md);
  padding: 0.5rem 0.75rem;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius-sm);
  background-color: var(--bg-paper);
  transition: border-color var(--transition-speed-fast) ease;
}

input:focus, select:focus, textarea:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px rgba(62, 75, 46, 0.1);
}

/* Common component styles */
.card {
  background-color: var(--bg-paper);
  border-radius: var(--border-radius-lg);
  padding: var(--card-padding);
  box-shadow: var(--shadow-md);
  transition: all var(--transition-speed-normal) ease;
}

.card-hover:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-lg);
}

/* Page transitions */
.page-transition {
  opacity: 1;
  transition: var(--transition-speed-normal) var(--transition-ease);
  transition-property: opacity, transform;
}

.page-transition.fadeIn {
  opacity: 1;
  transform: translateY(0) scale(1);
}

.page-transition.fadeOut {
  opacity: 0;
  transform: translateY(20px) scale(0.98);
}

/* Loading indicator */
.loading-indicator {
  width: 40px;
  height: 40px;
  border: 3px solid var(--border-light);
  border-radius: 50%;
  border-top-color: var(--primary-color);
  animation: spin 1s ease-in-out infinite;
  margin: 40px auto;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Animations */
@keyframes pulse-light {
  0% { box-shadow: 0 0 0 0 rgba(62, 75, 46, 0.4); }
  70% { box-shadow: 0 0 0 10px rgba(62, 75, 46, 0); }
  100% { box-shadow: 0 0 0 0 rgba(62, 75, 46, 0); }
}

@keyframes fade-in {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slide-in {
  from { transform: translateY(-20px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

/* Common utility classes */
.text-center { text-align: center; }
.text-right { text-align: right; }
.text-left { text-align: left; }

.mb-0 { margin-bottom: 0; }
.mb-1 { margin-bottom: var(--space-sm); }
.mb-2 { margin-bottom: var(--space-md); }
.mb-3 { margin-bottom: var(--space-lg); }

.mt-0 { margin-top: 0; }
.mt-1 { margin-top: var(--space-sm); }
.mt-2 { margin-top: var(--space-md); }
.mt-3 { margin-top: var(--space-lg); }

.p-0 { padding: 0; }
.p-1 { padding: var(--space-sm); }
.p-2 { padding: var(--space-md); }
.p-3 { padding: var(--space-lg); }

.w-100 { width: 100%; }
.h-100 { height: 100%; }

.d-flex { display: flex; }
.flex-column { flex-direction: column; }
.justify-content-between { justify-content: space-between; }
.align-items-center { align-items: center; }
.flex-wrap { flex-wrap: wrap; }


--- End File: .\frontend\src\index.css ---


--- File Not Found: .\frontend\src\main.jsx ---


--- File: .\frontend\src\App.jsx ---

// src/App.jsx
import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { AuthProvider, useAuth } from './contexts/AuthContext';
import { useState, useEffect, useRef } from 'react';
import { ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import muiTheme from './muiTheme';
import LandingPage from './pages/LandingPage';
import Login from './pages/auth/Login';
import Register from './pages/auth/Register';
import DashboardLayout from './components/layouts/DashboardLayout';
import ProfilePage from './pages/profile/ProfilePage';
import SubscriptionPlansPage from './pages/subscription/SubscriptionPlansPage';
import PaymentDemonstrationPage from './components/financial/PaymentDemonstrationPage';
import ShadcnExperimentPage from './pages/experimental/ShadcnExperimentPage';
import AceternityExperimentPage from './pages/experimental/AceternityExperimentPage';
import CustomerScheduleDisplay from './components/CustomerScheduleDisplay';
import EquipmentManagement from './components/EquipmentManagement';
import ResourceManagement from './components/ResourceManagement';
import ResourcesDisplay from './components/ResourcesDisplay';
import ScheduleDisplay from './components/ScheduleDisplay';
import ScheduleManagement from './components/ScheduleManagement';
import ToolManagement from './components/ToolManagement';
// Import new pickup components
import PickupForm from './components/PickupForm';
import MyBinDetails from './components/MyBinDetails';
import PickupDetails from './components/PickupDetails';
import PickupRequests from './components/PickupRequests';
import PickupRequestDetails from './components/PickupRequestDetails';
// Import recycling components
import RecycleForm from './components/recycling/RecycleForm';
import RequestList from './components/recycling/RequestList';
import './App.css';

// Loading Indicator component
const LoadingSpinner = () => {
  return <div className="loading-indicator"></div>;
};

// Protected route component with enhanced loading state
const ProtectedRoute = ({ children }) => {
  const { user, loading } = useAuth();
  const [isLoading, setIsLoading] = useState(true);
  
  useEffect(() => {
    // Simulate a minimum loading time for better UX
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 600);
    
    return () => clearTimeout(timer);
  }, []);

  // Show enhanced loading state
  if (loading || isLoading) return <LoadingSpinner />;

  // Redirect to login if not authenticated
  if (!user) return <Navigate to="/login" />;

  return children;
};

// Custom hook for animating page transitions
const usePageTransition = () => {
  const [displayLocation, setDisplayLocation] = useState(null);
  const [transitionStage, setTransitionStage] = useState("fadeIn");
  const location = useLocation();

  useEffect(() => {
    if (location !== displayLocation) {
      setTransitionStage("fadeOut");
    }
  }, [location, displayLocation]);

  useEffect(() => {
    if (transitionStage === "fadeOut") {
      const timeout = setTimeout(() => {
        setTransitionStage("fadeIn");
        setDisplayLocation(location);
      }, 50); // Reduced from 300ms to 50ms for snappier navigation
      
      return () => clearTimeout(timeout);
    }
  }, [transitionStage, location, displayLocation]);

  return { transitionStage, displayLocation: displayLocation || location };
};

function AppContent() {
  const { transitionStage, displayLocation } = usePageTransition();
  
  return (
    <div className={`page-transition ${transitionStage}`}>
      <Routes location={displayLocation}>
        {/* Public routes */}
        <Route path="/" element={<LandingPage />} />
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        
        {/* Experimental UI pages - public for easy access */}
        <Route path="/shadcn-experiment" element={<ShadcnExperimentPage />} />
        <Route path="/aceternity-experiment" element={<AceternityExperimentPage />} />
        
        {/* Payment demonstration - made public for easy testing */}
        <Route path="/payment-demo" element={<PaymentDemonstrationPage />} />
        
        {/* --- PICKUP RELATED ROUTES --- */}
        <Route path="/request-pickup" element={
          <ProtectedRoute>
            <PickupForm />
          </ProtectedRoute>
        } />
        <Route path="/my-bin-details" element={
          <ProtectedRoute>
            <MyBinDetails />
          </ProtectedRoute>
        } />
        <Route path="/pickup/:id" element={
          <ProtectedRoute>
            <PickupDetails />
          </ProtectedRoute>
        } />
        {/* Admin routes for pickup request management */}
        <Route path="/pickup-requests" element={
          <ProtectedRoute>
            <PickupRequests />
          </ProtectedRoute>
        } />
        <Route path="/pickup-request/:id" element={
          <ProtectedRoute>
            <PickupRequestDetails />
          </ProtectedRoute>
        } />
        {/* --- END PICKUP RELATED ROUTES --- */}
        
        {/* --- TEMPORARY PREVIEW ROUTES --- */}
        <Route path="/preview/customer-schedule-display" element={<CustomerScheduleDisplay />} />
        <Route path="/preview/equipment-management" element={<EquipmentManagement />} />
        <Route path="/preview/resource-management" element={<ResourceManagement />} />
        <Route path="/preview/resources-display" element={<ResourcesDisplay />} />
        <Route path="/preview/schedule-display" element={<ScheduleDisplay />} />
        <Route path="/preview/schedule-management" element={<ScheduleManagement />} />
        <Route path="/preview/tool-management" element={<ToolManagement />} />
        {/* --- END TEMPORARY PREVIEW ROUTES --- */}
        
        {/* Subscription route */}
        <Route path="/subscription-plans" element={
          <ProtectedRoute>
            <SubscriptionPlansPage />
          </ProtectedRoute>
        } />
        
        {/* Protected routes - all dashboard routes should be nested here */}
        <Route path="/dashboard/*" element={
          <ProtectedRoute>
            <DashboardLayout />
          </ProtectedRoute>
        } />
        {/* Recycling feature routes inside dashboard */}
        <Route path="/dashboard/recycle-request" element={
          <ProtectedRoute>
            <RecycleForm />
          </ProtectedRoute>
        } />
        <Route path="/dashboard/my-requests" element={
          <ProtectedRoute>
            <RequestList />
          </ProtectedRoute>
        } />
      </Routes>
    </div>
  );
}

function App() {
  return (
    <AuthProvider>
      <ThemeProvider theme={muiTheme}>
        <CssBaseline />
        <AppContent />
      </ThemeProvider>
    </AuthProvider>
  );
}

export default App;


--- End File: .\frontend\src\App.jsx ---


--- File: .\frontend\src\pages\experimental\ShadcnExperimentPage.jsx ---

// frontend/src/pages/experimental/ShadcnExperimentPage.jsx
import React, { useState } from 'react';
import { 
  Box, 
  Button as MuiButton, 
  TextField, 
  Card, 
  CardContent, 
  Typography, 
  Switch,
  Snackbar,
  Alert,
  Paper
} from '@mui/material';

// CSS for shadcn-like styling
import './ShadcnExperimentPage.css';

/**
 * This is an experimental page for testing shadcn/ui components
 * alongside our existing Material UI components
 */
const ShadcnExperimentPage = () => {
  const [count, setCount] = useState(0);
  const [inputValue, setInputValue] = useState('');
  const [switchValue, setSwitchValue] = useState(false);
  const [snackbarOpen, setSnackbarOpen] = useState(false);

  const handleIncrement = () => {
    setCount(count + 1);
  };

  const handleShowSnackbar = () => {
    setSnackbarOpen(true);
  };

  const handleCloseSnackbar = () => {
    setSnackbarOpen(false);
  };

  return (
    <Box sx={{ p: 4, maxWidth: 1200, mx: 'auto' }}>
      <Paper sx={{ p: 3, mb: 4 }}>
        <Typography variant="h4" gutterBottom>
          Shadcn/UI Experiment Page
        </Typography>
        <Typography variant="body1" paragraph>
          This page demonstrates how shadcn/ui components would look alongside our existing Material UI components.
          You can use this page to experiment with the shadcn/ui design system and decide if it's right for your project.
        </Typography>
      </Paper>

      <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' }, gap: 4 }}>
        {/* Material UI Components */}
        <Card variant="outlined" sx={{ height: '100%' }}>
          <CardContent>
            <Typography variant="h5" color="primary" gutterBottom>
              Material UI Components (Current)
            </Typography>
            
            <Box sx={{ mb: 3 }}>
              <Typography variant="subtitle1" gutterBottom>Buttons</Typography>
              <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
                <MuiButton variant="contained" color="primary">Primary</MuiButton>
                <MuiButton variant="outlined" color="primary">Secondary</MuiButton>
                <MuiButton variant="text">Text</MuiButton>
              </Box>
            </Box>
            
            <Box sx={{ mb: 3 }}>
              <Typography variant="subtitle1" gutterBottom>Input</Typography>
              <TextField 
                label="Material UI Input" 
                variant="outlined" 
                fullWidth 
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                sx={{ mb: 2 }}
              />
            </Box>
            
            <Box sx={{ mb: 3 }}>
              <Typography variant="subtitle1" gutterBottom>Counter</Typography>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <MuiButton variant="contained" onClick={handleIncrement}>
                  Count: {count}
                </MuiButton>
              </Box>
            </Box>
            
            <Box sx={{ mb: 3 }}>
              <Typography variant="subtitle1" gutterBottom>Switch</Typography>
              <Switch 
                checked={switchValue} 
                onChange={() => setSwitchValue(!switchValue)} 
              />
              <Typography variant="body2" component="span" sx={{ ml: 1 }}>
                {switchValue ? 'On' : 'Off'}
              </Typography>
            </Box>
            
            <Box>
              <Typography variant="subtitle1" gutterBottom>Notification</Typography>
              <MuiButton variant="contained" color="secondary" onClick={handleShowSnackbar}>
                Show Notification
              </MuiButton>
            </Box>
          </CardContent>
        </Card>

        {/* Shadcn UI Styled Components */}
        <div className="shadcn-card">
          <div className="shadcn-card-content">
            <h2 className="shadcn-heading">Shadcn UI Styled Components</h2>
            
            <div className="shadcn-section">
              <h3 className="shadcn-subtitle">Buttons</h3>
              <div className="shadcn-button-group">
                <button className="shadcn-button shadcn-button-primary">Primary</button>
                <button className="shadcn-button shadcn-button-outline">Secondary</button>
                <button className="shadcn-button shadcn-button-ghost">Text</button>
              </div>
            </div>
            
            <div className="shadcn-section">
              <h3 className="shadcn-subtitle">Input</h3>
              <div className="shadcn-form-item">
                <label className="shadcn-label">Shadcn UI Input</label>
                <input 
                  type="text" 
                  className="shadcn-input" 
                  placeholder="Type here..." 
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                />
              </div>
            </div>
            
            <div className="shadcn-section">
              <h3 className="shadcn-subtitle">Counter</h3>
              <button className="shadcn-button shadcn-button-primary" onClick={handleIncrement}>
                Count: {count}
              </button>
            </div>
            
            <div className="shadcn-section">
              <h3 className="shadcn-subtitle">Switch</h3>
              <div className="shadcn-switch-container">
                <label className="shadcn-switch">
                  <input 
                    type="checkbox" 
                    checked={switchValue} 
                    onChange={() => setSwitchValue(!switchValue)} 
                  />
                  <span className="shadcn-switch-slider"></span>
                </label>
                <span className="shadcn-switch-label">{switchValue ? 'On' : 'Off'}</span>
              </div>
            </div>
            
            <div className="shadcn-section">
              <h3 className="shadcn-subtitle">Notification</h3>
              <button 
                className="shadcn-button shadcn-button-secondary"
                onClick={handleShowSnackbar}
              >
                Show Notification
              </button>
            </div>
          </div>
        </div>
      </Box>

      {/* MUI Snackbar for notifications */}
      <Snackbar 
        open={snackbarOpen} 
        autoHideDuration={4000} 
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert onClose={handleCloseSnackbar} severity="success">
          This is a notification message!
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default ShadcnExperimentPage;

--- End File: .\frontend\src\pages\experimental\ShadcnExperimentPage.jsx ---


