diff --git a/frontend/src/components/common/DateRangePicker.jsx b/frontend/src/components/common/DateRangePicker.jsx
new file mode 100644
index 0000000..41d4d36
--- /dev/null
+++ b/frontend/src/components/common/DateRangePicker.jsx
@@ -0,0 +1,172 @@
+import React, { useState } from 'react';
+import { TextField, IconButton, Box, Paper, Popover, Button } from '@mui/material';
+import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
+import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
+import { format } from 'date-fns';
+import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
+
+/**
+ * DateRangePicker Component
+ * 
+ * A reusable component for selecting a date range with start and end dates
+ * 
+ * @param {Date} startDate - Initial start date
+ * @param {Date} endDate - Initial end date
+ * @param {Function} onDateChange - Callback function that receives the new start and end dates
+ * @param {Object} sx - Additional style properties for the component
+ */
+const DateRangePicker = ({ startDate, endDate, onDateChange, sx }) => {
+  const [anchorEl, setAnchorEl] = useState(null);
+  const [tempStartDate, setTempStartDate] = useState(startDate);
+  const [tempEndDate, setTempEndDate] = useState(endDate);
+  
+  const open = Boolean(anchorEl);
+  
+  // Format date for display in the input field
+  const formatDisplayDate = (start, end) => {
+    return `${format(start, 'MMM dd, yyyy')} - ${format(end, 'MMM dd, yyyy')}`;
+  };
+  
+  const handleOpen = (event) => {
+    setAnchorEl(event.currentTarget);
+  };
+  
+  const handleClose = () => {
+    setAnchorEl(null);
+    // Reset temp dates to current selected dates when canceling
+    setTempStartDate(startDate);
+    setTempEndDate(endDate);
+  };
+  
+  const handleApply = () => {
+    // Ensure end date is not before start date
+    if (tempEndDate < tempStartDate) {
+      setTempEndDate(tempStartDate);
+    }
+    
+    // Call the onDateChange callback with the new dates
+    onDateChange(tempStartDate, tempEndDate);
+    handleClose();
+  };
+  
+  // Predefined date ranges
+  const dateRanges = [
+    { label: 'Today', getRange: () => {
+      const today = new Date();
+      return [today, today];
+    }},
+    { label: 'Last 7 Days', getRange: () => {
+      const end = new Date();
+      const start = new Date();
+      start.setDate(start.getDate() - 6);
+      return [start, end];
+    }},
+    { label: 'Last 30 Days', getRange: () => {
+      const end = new Date();
+      const start = new Date();
+      start.setDate(start.getDate() - 29);
+      return [start, end];
+    }},
+    { label: 'This Month', getRange: () => {
+      const now = new Date();
+      const start = new Date(now.getFullYear(), now.getMonth(), 1);
+      const end = new Date();
+      return [start, end];
+    }},
+    { label: 'Last Month', getRange: () => {
+      const now = new Date();
+      const start = new Date(now.getFullYear(), now.getMonth() - 1, 1);
+      const end = new Date(now.getFullYear(), now.getMonth(), 0);
+      return [start, end];
+    }}
+  ];
+  
+  const applyPresetRange = (rangeIndex) => {
+    const [start, end] = dateRanges[rangeIndex].getRange();
+    setTempStartDate(start);
+    setTempEndDate(end);
+  };
+
+  return (
+    <Box sx={{ display: 'inline-block', ...sx }}>
+      <TextField
+        value={formatDisplayDate(startDate, endDate)}
+        InputProps={{
+          readOnly: true,
+          endAdornment: (
+            <IconButton onClick={handleOpen} edge="end">
+              <CalendarTodayIcon />
+            </IconButton>
+          )
+        }}
+        onClick={handleOpen}
+        sx={{ cursor: 'pointer' }}
+      />
+      
+      <Popover
+        open={open}
+        anchorEl={anchorEl}
+        onClose={handleClose}
+        anchorOrigin={{
+          vertical: 'bottom',
+          horizontal: 'left',
+        }}
+        transformOrigin={{
+          vertical: 'top',
+          horizontal: 'left',
+        }}
+      >
+        <Paper sx={{ p: 2, width: 320 }}>
+          <LocalizationProvider dateAdapter={AdapterDateFns}>
+            <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
+              <DatePicker
+                label="Start Date"
+                value={tempStartDate}
+                onChange={(newDate) => setTempStartDate(newDate)}
+                slotProps={{ textField: { size: 'small', fullWidth: true } }}
+              />
+              <DatePicker
+                label="End Date"
+                value={tempEndDate}
+                onChange={(newDate) => setTempEndDate(newDate)}
+                minDate={tempStartDate}
+                slotProps={{ textField: { size: 'small', fullWidth: true } }}
+              />
+            </Box>
+          </LocalizationProvider>
+          
+          <Box sx={{ mb: 2 }}>
+            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
+              {dateRanges.map((range, index) => (
+                <Button 
+                  key={index} 
+                  variant="outlined" 
+                  size="small"
+                  onClick={() => applyPresetRange(index)}
+                >
+                  {range.label}
+                </Button>
+              ))}
+            </Box>
+          </Box>
+          
+          <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 1 }}>
+            <Button onClick={handleClose} size="small">
+              Cancel
+            </Button>
+            <Button 
+              onClick={handleApply} 
+              variant="contained" 
+              size="small"
+              disabled={!tempStartDate || !tempEndDate}
+            >
+              Apply
+            </Button>
+          </Box>
+        </Paper>
+      </Popover>
+    </Box>
+  );
+};
+
+export default DateRangePicker;
\ No newline at end of file
diff --git a/frontend/src/components/layouts/DashboardLayout.jsx b/frontend/src/components/layouts/DashboardLayout.jsx
index 419e665..91911db 100644
--- a/frontend/src/components/layouts/DashboardLayout.jsx
+++ b/frontend/src/components/layouts/DashboardLayout.jsx
@@ -31,7 +31,12 @@ import PaymentsPage from '../../pages/payments/PaymentsPage';
 // Import Admin specific pages
 import UserManagementPage from '../../pages/admin/UserManagementPage';
 import StatisticsPage from '../../pages/statistics/StatisticsPage';
-import SystemSettingsPage from '../../pages/admin/SystemSettingsPage'; // Import the System Settings page
+import SystemSettingsPage from '../../pages/admin/SystemSettingsPage';
+
+// Import Staff specific pages
+import StaffAttendancePage from '../../pages/staff/StaffAttendancePage';
+import StaffPayslipsPage from '../../pages/staff/StaffPayslipsPage';
+import StaffPerformancePage from '../../pages/staff/StaffPerformancePage';
 
 import './DashboardLayout.css';
 
@@ -89,11 +94,13 @@ function DashboardLayout() {
               </>
             )}
 
-            {/* Staff routes */}
+            {/* Staff routes - match exact paths from sidebar navigation */}
             {user?.role === 'staff' && (
               <>
-                <Route path="/my-payslips" element={<StaffPayslipViewPage />} />
-                <Route path="/my-performance" element={<div className="dashboard-content"><h2>My Performance</h2></div>} />
+                <Route path="/attendance" element={<StaffAttendancePage />} />
+                <Route path="/tasks" element={<div className="dashboard-content"><h2>Task Management</h2><p>Task management features coming soon!</p></div>} />
+                <Route path="/my-payslips" element={<StaffPayslipsPage />} />
+                <Route path="/performance" element={<StaffPerformancePage />} />
                 <Route path="/complaints" element={<AllComplaintsPage />} />
               </>
             )}
diff --git a/frontend/src/pages/staff/StaffAttendancePage.jsx b/frontend/src/pages/staff/StaffAttendancePage.jsx
new file mode 100644
index 0000000..22a86e1
--- /dev/null
+++ b/frontend/src/pages/staff/StaffAttendancePage.jsx
@@ -0,0 +1,322 @@
+import React, { useState, useEffect } from 'react';
+import { format, parseISO, isToday } from 'date-fns';
+import attendanceApi from '../../services/attendanceApi';
+import { Box, Typography, Paper, Button, Chip, Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Alert, CircularProgress, Card, CardContent, Divider } from '@mui/material';
+import AccessTimeIcon from '@mui/icons-material/AccessTime';
+import HistoryIcon from '@mui/icons-material/History';
+import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
+import DateRangePicker from '../../components/common/DateRangePicker';
+
+/**
+ * Staff Attendance Page
+ * 
+ * Allows staff members to:
+ * - Check in/out for their shifts
+ * - View their attendance history with filtering
+ * - See attendance statistics and status
+ */
+const StaffAttendancePage = () => {
+  const [attendanceHistory, setAttendanceHistory] = useState([]);
+  const [loading, setLoading] = useState(true);
+  const [checkInLoading, setCheckInLoading] = useState(false);
+  const [checkOutLoading, setCheckOutLoading] = useState(false);
+  const [error, setError] = useState('');
+  const [todayRecord, setTodayRecord] = useState(null);
+  const [dateRange, setDateRange] = useState({
+    startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days
+    endDate: new Date()
+  });
+  
+  // Calculate stats from attendance history
+  const stats = {
+    present: attendanceHistory.filter(record => record.status === 'Present').length,
+    late: attendanceHistory.filter(record => record.status === 'Late').length,
+    absent: attendanceHistory.filter(record => record.status === 'Absent').length,
+    onLeave: attendanceHistory.filter(record => record.status === 'On Leave').length
+  };
+
+  // Fetch attendance history whenever date range changes
+  useEffect(() => {
+    const fetchAttendanceHistory = async () => {
+      setLoading(true);
+      setError('');
+      try {
+        const formattedStartDate = format(dateRange.startDate, 'yyyy-MM-dd');
+        const formattedEndDate = format(dateRange.endDate, 'yyyy-MM-dd');
+        
+        const response = await attendanceApi.getMyAttendance(formattedStartDate, formattedEndDate);
+        if (response && response.data) {
+          setAttendanceHistory(response.data);
+          
+          // Check if there's a record for today
+          const todayEntry = response.data.find(record => isToday(new Date(record.date)));
+          setTodayRecord(todayEntry || null);
+        }
+      } catch (err) {
+        console.error('Error fetching attendance history:', err);
+        setError(err.response?.data?.message || 'Failed to load attendance history. Please try again.');
+      } finally {
+        setLoading(false);
+      }
+    };
+    
+    fetchAttendanceHistory();
+  }, [dateRange]);
+  
+  // Handle Check In
+  const handleCheckIn = async () => {
+    setCheckInLoading(true);
+    setError('');
+    try {
+      const response = await attendanceApi.checkIn();
+      if (response && response.data) {
+        // Update today's record in state
+        setTodayRecord(response.data);
+        
+        // Refresh attendance history
+        const formattedStartDate = format(dateRange.startDate, 'yyyy-MM-dd');
+        const formattedEndDate = format(dateRange.endDate, 'yyyy-MM-dd');
+        const historyResponse = await attendanceApi.getMyAttendance(formattedStartDate, formattedEndDate);
+        if (historyResponse && historyResponse.data) {
+          setAttendanceHistory(historyResponse.data);
+        }
+      }
+    } catch (err) {
+      console.error('Error checking in:', err);
+      setError(err.response?.data?.message || 'Failed to check in. Please try again.');
+    } finally {
+      setCheckInLoading(false);
+    }
+  };
+  
+  // Handle Check Out
+  const handleCheckOut = async () => {
+    setCheckOutLoading(true);
+    setError('');
+    try {
+      const response = await attendanceApi.checkOut();
+      if (response && response.data) {
+        // Update today's record in state
+        setTodayRecord(response.data);
+        
+        // Refresh attendance history
+        const formattedStartDate = format(dateRange.startDate, 'yyyy-MM-dd');
+        const formattedEndDate = format(dateRange.endDate, 'yyyy-MM-dd');
+        const historyResponse = await attendanceApi.getMyAttendance(formattedStartDate, formattedEndDate);
+        if (historyResponse && historyResponse.data) {
+          setAttendanceHistory(historyResponse.data);
+        }
+      }
+    } catch (err) {
+      console.error('Error checking out:', err);
+      setError(err.response?.data?.message || 'Failed to check out. Please try again.');
+    } finally {
+      setCheckOutLoading(false);
+    }
+  };
+
+  // Get status chip color
+  const getStatusChipColor = (status) => {
+    switch (status) {
+      case 'Present': return 'success';
+      case 'Late': return 'warning';
+      case 'Absent': return 'error';
+      case 'On Leave': return 'info';
+      default: return 'default';
+    }
+  };
+
+  // Format time for display
+  const formatTime = (dateTimeString) => {
+    if (!dateTimeString) return '—';
+    return format(new Date(dateTimeString), 'hh:mm a');
+  };
+
+  return (
+    <div className="staff-attendance-page">
+      <Typography variant="h4" component="h1" gutterBottom>
+        My Attendance
+      </Typography>
+
+      {/* Error message if any */}
+      {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}
+      
+      {/* Today's status and check-in/out actions */}
+      <Card sx={{ mb: 4 }}>
+        <CardContent>
+          <Typography variant="h6" gutterBottom>
+            <CalendarTodayIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
+            Today's Attendance
+          </Typography>
+          
+          <Grid container spacing={3} sx={{ mt: 1 }}>
+            <Grid item xs={12} md={7}>
+              <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
+                <Typography variant="body1" gutterBottom>
+                  {todayRecord ? (
+                    <>
+                      <strong>Status:</strong>{' '}
+                      <Chip 
+                        label={todayRecord.status || 'Not Set'} 
+                        color={getStatusChipColor(todayRecord.status)}
+                        size="small"
+                      />
+                    </>
+                  ) : (
+                    'Not checked in yet today.'
+                  )}
+                </Typography>
+                
+                {todayRecord && (
+                  <>
+                    <Box sx={{ display: 'flex', gap: 4, mt: 1 }}>
+                      <Typography variant="body2">
+                        <strong>Check-in:</strong> {formatTime(todayRecord.checkInTime)}
+                      </Typography>
+                      <Typography variant="body2">
+                        <strong>Check-out:</strong> {formatTime(todayRecord.checkOutTime)}
+                      </Typography>
+                    </Box>
+                    {todayRecord.notes && (
+                      <Typography variant="body2" sx={{ mt: 1 }}>
+                        <strong>Notes:</strong> {todayRecord.notes}
+                      </Typography>
+                    )}
+                  </>
+                )}
+              </Box>
+            </Grid>
+            
+            <Grid item xs={12} md={5}>
+              <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2, height: '100%', alignItems: 'center' }}>
+                {!todayRecord || !todayRecord.checkInTime ? (
+                  <Button
+                    variant="contained"
+                    color="primary"
+                    onClick={handleCheckIn}
+                    disabled={checkInLoading}
+                    startIcon={checkInLoading ? <CircularProgress size={20} /> : <AccessTimeIcon />}
+                  >
+                    Check In
+                  </Button>
+                ) : !todayRecord.checkOutTime ? (
+                  <Button
+                    variant="contained"
+                    color="secondary"
+                    onClick={handleCheckOut}
+                    disabled={checkOutLoading}
+                    startIcon={checkOutLoading ? <CircularProgress size={20} /> : <AccessTimeIcon />}
+                  >
+                    Check Out
+                  </Button>
+                ) : (
+                  <Chip label="Shift Completed" color="success" />
+                )}
+              </Box>
+            </Grid>
+          </Grid>
+        </CardContent>
+      </Card>
+
+      {/* Attendance statistics summary */}
+      <Box sx={{ mb: 4 }}>
+        <Typography variant="h6" gutterBottom>
+          <HistoryIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
+          Attendance Summary
+        </Typography>
+        
+        <Grid container spacing={2}>
+          <Grid item xs={6} sm={3}>
+            <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'success.light', color: 'white' }}>
+              <Typography variant="h4">{stats.present}</Typography>
+              <Typography variant="body2">Present</Typography>
+            </Paper>
+          </Grid>
+          <Grid item xs={6} sm={3}>
+            <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'warning.light', color: 'white' }}>
+              <Typography variant="h4">{stats.late}</Typography>
+              <Typography variant="body2">Late</Typography>
+            </Paper>
+          </Grid>
+          <Grid item xs={6} sm={3}>
+            <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'error.light', color: 'white' }}>
+              <Typography variant="h4">{stats.absent}</Typography>
+              <Typography variant="body2">Absent</Typography>
+            </Paper>
+          </Grid>
+          <Grid item xs={6} sm={3}>
+            <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'info.light', color: 'white' }}>
+              <Typography variant="h4">{stats.onLeave}</Typography>
+              <Typography variant="body2">On Leave</Typography>
+            </Paper>
+          </Grid>
+        </Grid>
+      </Box>
+      
+      {/* Attendance History with Date Range Picker */}
+      <Box sx={{ mb: 3 }}>
+        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
+          <Typography variant="h6">
+            <HistoryIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
+            Attendance History
+          </Typography>
+          
+          <DateRangePicker 
+            startDate={dateRange.startDate}
+            endDate={dateRange.endDate}
+            onDateChange={(start, end) => setDateRange({ startDate: start, endDate: end })}
+          />
+        </Box>
+        
+        {loading ? (
+          <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
+            <CircularProgress />
+          </Box>
+        ) : attendanceHistory.length > 0 ? (
+          <TableContainer component={Paper}>
+            <Table>
+              <TableHead>
+                <TableRow>
+                  <TableCell>Date</TableCell>
+                  <TableCell>Status</TableCell>
+                  <TableCell>Check In</TableCell>
+                  <TableCell>Check Out</TableCell>
+                  <TableCell>Hours Worked</TableCell>
+                  <TableCell>Notes</TableCell>
+                </TableRow>
+              </TableHead>
+              <TableBody>
+                {attendanceHistory.map((record) => (
+                  <TableRow key={record._id}>
+                    <TableCell>{format(new Date(record.date), 'dd MMM yyyy')}</TableCell>
+                    <TableCell>
+                      <Chip 
+                        label={record.status} 
+                        color={getStatusChipColor(record.status)}
+                        size="small"
+                      />
+                    </TableCell>
+                    <TableCell>{formatTime(record.checkInTime)}</TableCell>
+                    <TableCell>{formatTime(record.checkOutTime)}</TableCell>
+                    <TableCell>
+                      {record.checkInTime && record.checkOutTime ? (
+                        `${((new Date(record.checkOutTime) - new Date(record.checkInTime)) / (1000 * 60 * 60)).toFixed(2)} hrs`
+                      ) : '—'}
+                    </TableCell>
+                    <TableCell>{record.notes || '—'}</TableCell>
+                  </TableRow>
+                ))}
+              </TableBody>
+            </Table>
+          </TableContainer>
+        ) : (
+          <Paper sx={{ p: 3, textAlign: 'center', bgcolor: 'background.default' }}>
+            <Typography>No attendance records found for the selected period.</Typography>
+          </Paper>
+        )}
+      </Box>
+    </div>
+  );
+};
+
+export default StaffAttendancePage;
\ No newline at end of file
diff --git a/frontend/src/pages/staff/StaffPayslipsPage.jsx b/frontend/src/pages/staff/StaffPayslipsPage.jsx
new file mode 100644
index 0000000..02239d9
--- /dev/null
+++ b/frontend/src/pages/staff/StaffPayslipsPage.jsx
@@ -0,0 +1,326 @@
+import React, { useState, useEffect } from 'react';
+import { format } from 'date-fns';
+import { useAuth } from '../../contexts/AuthContext';
+import payrollApi from '../../services/payrollApi';
+import { 
+  Box, 
+  Typography, 
+  Paper, 
+  Button, 
+  Grid, 
+  Card, 
+  CardContent,
+  Table, 
+  TableBody, 
+  TableCell, 
+  TableContainer, 
+  TableHead, 
+  TableRow, 
+  Alert, 
+  CircularProgress,
+  Chip,
+  Accordion,
+  AccordionSummary,
+  AccordionDetails,
+  Divider
+} from '@mui/material';
+import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
+import DownloadIcon from '@mui/icons-material/Download';
+import ReceiptIcon from '@mui/icons-material/Receipt';
+import PaymentIcon from '@mui/icons-material/Payment';
+
+/**
+ * Staff Payslips Page
+ * 
+ * Displays payroll history for the logged-in staff member
+ * Allows downloading of payslips
+ */
+const StaffPayslipsPage = () => {
+  const { user } = useAuth();
+  const [payrollHistory, setPayrollHistory] = useState([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState('');
+  const [selectedPayroll, setSelectedPayroll] = useState(null);
+  const [downloadingId, setDownloadingId] = useState(null);
+
+  // Fetch payroll history when component mounts
+  useEffect(() => {
+    const fetchPayrollHistory = async () => {
+      if (!user || !user._id) return;
+      
+      setLoading(true);
+      setError('');
+      try {
+        const response = await payrollApi.getStaffPayrollHistory(user._id);
+        if (response && response.data) {
+          setPayrollHistory(response.data);
+        }
+      } catch (err) {
+        console.error('Error fetching payroll history:', err);
+        setError(err.response?.data?.message || 'Failed to load payroll history. Please try again.');
+      } finally {
+        setLoading(false);
+      }
+    };
+    
+    fetchPayrollHistory();
+  }, [user]);
+
+  // Handle payslip download
+  const handleDownloadPayslip = async (payrollId) => {
+    setDownloadingId(payrollId);
+    try {
+      // In a real implementation, this would call an API endpoint that returns a PDF blob
+      // For now, we'll just simulate a download with a timeout
+      await new Promise(resolve => setTimeout(resolve, 1500));
+      
+      // Alert the user that this is a placeholder
+      alert('This is a placeholder for payslip download functionality. In a real implementation, this would download your payslip as a PDF.');
+    } catch (err) {
+      console.error('Error downloading payslip:', err);
+      alert('Failed to download payslip. Please try again later.');
+    } finally {
+      setDownloadingId(null);
+    }
+  };
+
+  // Handle view payslip details
+  const handleViewPayslip = async (payrollId) => {
+    try {
+      const response = await payrollApi.getPayrollLogById(payrollId);
+      if (response && response.data) {
+        setSelectedPayroll(response.data);
+      }
+    } catch (err) {
+      console.error('Error fetching payroll details:', err);
+      alert('Failed to load payroll details. Please try again.');
+    }
+  };
+
+  // Format currency for display
+  const formatCurrency = (amount) => {
+    return new Intl.NumberFormat('en-US', {
+      style: 'currency',
+      currency: 'USD'
+    }).format(amount);
+  };
+
+  // Format date for display
+  const formatDate = (dateString) => {
+    if (!dateString) return 'N/A';
+    return format(new Date(dateString), 'dd MMM yyyy');
+  };
+
+  // Get payment status chip color
+  const getPaymentStatusColor = (status) => {
+    switch (status.toLowerCase()) {
+      case 'paid': return 'success';
+      case 'pending': return 'warning';
+      case 'processing': return 'info';
+      default: return 'default';
+    }
+  };
+
+  return (
+    <div className="staff-payslips-page">
+      <Typography variant="h4" component="h1" gutterBottom>
+        My Payslips
+      </Typography>
+      
+      {/* Error message if any */}
+      {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}
+      
+      {/* Summary of upcoming payment if available */}
+      {payrollHistory.length > 0 && payrollHistory[0].status === 'pending' && (
+        <Card sx={{ mb: 4 }}>
+          <CardContent>
+            <Typography variant="h6" gutterBottom>
+              <PaymentIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
+              Next Payment
+            </Typography>
+            
+            <Grid container spacing={3}>
+              <Grid item xs={12} md={8}>
+                <Typography variant="body1">
+                  <strong>Period:</strong> {formatDate(payrollHistory[0].periodStart)} - {formatDate(payrollHistory[0].periodEnd)}
+                </Typography>
+                <Typography variant="body1" mt={1}>
+                  <strong>Net Pay:</strong> {formatCurrency(payrollHistory[0].netPay)}
+                </Typography>
+                {payrollHistory[0].expectedPaymentDate && (
+                  <Typography variant="body1" mt={1}>
+                    <strong>Expected Payment Date:</strong> {formatDate(payrollHistory[0].expectedPaymentDate)}
+                  </Typography>
+                )}
+              </Grid>
+              <Grid item xs={12} md={4}>
+                <Box sx={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', height: '100%' }}>
+                  <Chip 
+                    label={payrollHistory[0].status.charAt(0).toUpperCase() + payrollHistory[0].status.slice(1)} 
+                    color={getPaymentStatusColor(payrollHistory[0].status)}
+                  />
+                </Box>
+              </Grid>
+            </Grid>
+          </CardContent>
+        </Card>
+      )}
+      
+      {/* Payroll History */}
+      <Card>
+        <CardContent>
+          <Typography variant="h6" gutterBottom>
+            <ReceiptIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
+            Payroll History
+          </Typography>
+          
+          {loading ? (
+            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
+              <CircularProgress />
+            </Box>
+          ) : payrollHistory.length > 0 ? (
+            <TableContainer component={Paper} sx={{ mt: 2 }}>
+              <Table>
+                <TableHead>
+                  <TableRow>
+                    <TableCell>Pay Period</TableCell>
+                    <TableCell>Payment Date</TableCell>
+                    <TableCell>Gross Pay</TableCell>
+                    <TableCell>Net Pay</TableCell>
+                    <TableCell>Status</TableCell>
+                    <TableCell>Actions</TableCell>
+                  </TableRow>
+                </TableHead>
+                <TableBody>
+                  {payrollHistory.map((payroll) => (
+                    <TableRow key={payroll._id}>
+                      <TableCell>{formatDate(payroll.periodStart)} - {formatDate(payroll.periodEnd)}</TableCell>
+                      <TableCell>{formatDate(payroll.paymentDate) || 'Pending'}</TableCell>
+                      <TableCell>{formatCurrency(payroll.grossPay)}</TableCell>
+                      <TableCell>{formatCurrency(payroll.netPay)}</TableCell>
+                      <TableCell>
+                        <Chip 
+                          label={payroll.status.charAt(0).toUpperCase() + payroll.status.slice(1)} 
+                          color={getPaymentStatusColor(payroll.status)}
+                          size="small"
+                        />
+                      </TableCell>
+                      <TableCell>
+                        <Box sx={{ display: 'flex', gap: 1 }}>
+                          <Button 
+                            size="small" 
+                            variant="outlined" 
+                            onClick={() => handleViewPayslip(payroll._id)}
+                          >
+                            View
+                          </Button>
+                          <Button 
+                            size="small" 
+                            variant="outlined"
+                            color="secondary"
+                            startIcon={downloadingId === payroll._id ? <CircularProgress size={16} /> : <DownloadIcon />}
+                            onClick={() => handleDownloadPayslip(payroll._id)}
+                            disabled={downloadingId === payroll._id || payroll.status !== 'paid'}
+                          >
+                            Payslip
+                          </Button>
+                        </Box>
+                      </TableCell>
+                    </TableRow>
+                  ))}
+                </TableBody>
+              </Table>
+            </TableContainer>
+          ) : (
+            <Paper sx={{ p: 3, textAlign: 'center', bgcolor: 'background.default' }}>
+              <Typography>No payroll records found.</Typography>
+            </Paper>
+          )}
+        </CardContent>
+      </Card>
+      
+      {/* Selected Payroll Details */}
+      {selectedPayroll && (
+        <Card sx={{ mt: 4 }}>
+          <CardContent>
+            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
+              <Typography variant="h6">
+                Payslip Details
+              </Typography>
+              <Button 
+                variant="contained" 
+                color="secondary"
+                startIcon={<DownloadIcon />}
+                onClick={() => handleDownloadPayslip(selectedPayroll._id)}
+                disabled={downloadingId === selectedPayroll._id || selectedPayroll.status !== 'paid'}
+              >
+                Download Payslip
+              </Button>
+            </Box>
+            
+            <Grid container spacing={3}>
+              <Grid item xs={12} md={6}>
+                <Typography variant="subtitle1" gutterBottom>Payment Information</Typography>
+                <Paper variant="outlined" sx={{ p: 2, height: '100%' }}>
+                  <Typography variant="body2"><strong>Pay Period:</strong> {formatDate(selectedPayroll.periodStart)} - {formatDate(selectedPayroll.periodEnd)}</Typography>
+                  <Typography variant="body2" mt={1}><strong>Payment Date:</strong> {formatDate(selectedPayroll.paymentDate) || 'Pending'}</Typography>
+                  <Typography variant="body2" mt={1}><strong>Payment Method:</strong> {selectedPayroll.paymentMethod || 'Direct Deposit'}</Typography>
+                  {selectedPayroll.transactionRef && (
+                    <Typography variant="body2" mt={1}><strong>Transaction Reference:</strong> {selectedPayroll.transactionRef}</Typography>
+                  )}
+                </Paper>
+              </Grid>
+              
+              <Grid item xs={12} md={6}>
+                <Typography variant="subtitle1" gutterBottom>Earnings Summary</Typography>
+                <Paper variant="outlined" sx={{ p: 2, height: '100%' }}>
+                  <Typography variant="body2"><strong>Base Salary:</strong> {formatCurrency(selectedPayroll.basePay || 0)}</Typography>
+                  <Typography variant="body2" mt={1}><strong>Overtime:</strong> {formatCurrency(selectedPayroll.overtime || 0)}</Typography>
+                  <Typography variant="body2" mt={1}><strong>Bonus:</strong> {formatCurrency(selectedPayroll.bonus || 0)}</Typography>
+                  <Divider sx={{ my: 1 }} />
+                  <Typography variant="body2"><strong>Gross Pay:</strong> {formatCurrency(selectedPayroll.grossPay)}</Typography>
+                </Paper>
+              </Grid>
+              
+              <Grid item xs={12} md={6}>
+                <Typography variant="subtitle1" gutterBottom>Deductions</Typography>
+                <Paper variant="outlined" sx={{ p: 2, height: '100%' }}>
+                  <Typography variant="body2"><strong>Tax:</strong> {formatCurrency(selectedPayroll.taxDeductions || 0)}</Typography>
+                  <Typography variant="body2" mt={1}><strong>Insurance:</strong> {formatCurrency(selectedPayroll.insuranceDeductions || 0)}</Typography>
+                  <Typography variant="body2" mt={1}><strong>Other Deductions:</strong> {formatCurrency(selectedPayroll.otherDeductions || 0)}</Typography>
+                  <Divider sx={{ my: 1 }} />
+                  <Typography variant="body2"><strong>Total Deductions:</strong> {formatCurrency((selectedPayroll.taxDeductions || 0) + (selectedPayroll.insuranceDeductions || 0) + (selectedPayroll.otherDeductions || 0))}</Typography>
+                </Paper>
+              </Grid>
+              
+              <Grid item xs={12} md={6}>
+                <Typography variant="subtitle1" gutterBottom>Net Pay</Typography>
+                <Paper variant="outlined" sx={{ p: 2, bgcolor: 'success.light', color: 'white', height: '100%' }}>
+                  <Typography variant="h5" align="center" gutterBottom>{formatCurrency(selectedPayroll.netPay)}</Typography>
+                  <Typography variant="body2" align="center">
+                    {selectedPayroll.status === 'paid' ? 'Paid' : 'Pending payment'}
+                  </Typography>
+                </Paper>
+              </Grid>
+              
+              {selectedPayroll.notes && (
+                <Grid item xs={12}>
+                  <Accordion>
+                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>
+                      <Typography>Additional Notes</Typography>
+                    </AccordionSummary>
+                    <AccordionDetails>
+                      <Typography>{selectedPayroll.notes}</Typography>
+                    </AccordionDetails>
+                  </Accordion>
+                </Grid>
+              )}
+            </Grid>
+          </CardContent>
+        </Card>
+      )}
+    </div>
+  );
+};
+
+export default StaffPayslipsPage;
\ No newline at end of file
diff --git a/frontend/src/pages/staff/StaffPerformancePage.jsx b/frontend/src/pages/staff/StaffPerformancePage.jsx
new file mode 100644
index 0000000..68c67be
--- /dev/null
+++ b/frontend/src/pages/staff/StaffPerformancePage.jsx
@@ -0,0 +1,423 @@
+import React, { useState, useEffect } from 'react';
+import { format } from 'date-fns';
+import { useAuth } from '../../contexts/AuthContext';
+import performanceApi from '../../services/performanceApi';
+import { 
+  Box, 
+  Typography, 
+  Paper, 
+  Grid, 
+  Card, 
+  CardContent,
+  Table, 
+  TableBody, 
+  TableCell, 
+  TableContainer, 
+  TableHead, 
+  TableRow, 
+  Alert, 
+  CircularProgress,
+  Chip,
+  Rating,
+  LinearProgress,
+  List,
+  ListItem,
+  ListItemIcon,
+  ListItemText,
+  Divider,
+  Button
+} from '@mui/material';
+import StarIcon from '@mui/icons-material/Star';
+import AssessmentIcon from '@mui/icons-material/Assessment';
+import TrendingUpIcon from '@mui/icons-material/TrendingUp';
+import CheckCircleIcon from '@mui/icons-material/CheckCircle';
+import WarningIcon from '@mui/icons-material/Warning';
+import SchoolIcon from '@mui/icons-material/School';
+import QueryBuilderIcon from '@mui/icons-material/QueryBuilder';
+import PieChartIcon from '@mui/icons-material/PieChart';
+
+/**
+ * Staff Performance Page
+ * 
+ * Displays performance reviews and metrics for the logged-in staff member
+ * Shows historical performance data and improvement areas
+ */
+const StaffPerformancePage = () => {
+  const { user } = useAuth();
+  const [performanceReviews, setPerformanceReviews] = useState([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState('');
+  const [selectedReview, setSelectedReview] = useState(null);
+
+  // Fetch performance reviews when component mounts
+  useEffect(() => {
+    const fetchPerformanceReviews = async () => {
+      setLoading(true);
+      setError('');
+      try {
+        const response = await performanceApi.getMyReviews();
+        if (response && response.data) {
+          setPerformanceReviews(response.data);
+          
+          // Set the most recent review as selected by default
+          if (response.data.length > 0) {
+            setSelectedReview(response.data[0]);
+          }
+        }
+      } catch (err) {
+        console.error('Error fetching performance reviews:', err);
+        setError(err.response?.data?.message || 'Failed to load performance reviews. Please try again.');
+      } finally {
+        setLoading(false);
+      }
+    };
+    
+    fetchPerformanceReviews();
+  }, []);
+
+  // Format date for display
+  const formatDate = (dateString) => {
+    if (!dateString) return 'N/A';
+    return format(new Date(dateString), 'dd MMM yyyy');
+  };
+
+  // Calculate performance trends (simplified simulation)
+  const calculateTrends = () => {
+    if (performanceReviews.length < 2) return null;
+    
+    // Sort reviews by date
+    const sortedReviews = [...performanceReviews].sort((a, b) => 
+      new Date(b.reviewDate) - new Date(a.reviewDate)
+    );
+    
+    // Get current and previous ratings
+    const currentRating = sortedReviews[0].rating;
+    const previousRating = sortedReviews[1].rating;
+    
+    // Calculate difference and trend
+    const difference = currentRating - previousRating;
+    const percentChange = ((difference / previousRating) * 100).toFixed(1);
+    
+    return {
+      difference,
+      percentChange,
+      improving: difference > 0,
+      stable: difference === 0,
+      declining: difference < 0
+    };
+  };
+
+  // Get trend info for display
+  const trends = calculateTrends();
+
+  // Calculate overall performance metrics
+  const metrics = {
+    averageRating: performanceReviews.length > 0 
+      ? (performanceReviews.reduce((sum, review) => sum + review.rating, 0) / performanceReviews.length).toFixed(1)
+      : 0,
+    totalReviews: performanceReviews.length,
+    mostRecentRating: performanceReviews.length > 0 ? performanceReviews[0].rating : 0,
+  };
+
+  // Get strengths and weaknesses from the latest review
+  const strengths = selectedReview?.strengths || [];
+  const weaknesses = selectedReview?.weaknesses || [];
+  const goals = selectedReview?.goals || [];
+  const recommendedTraining = selectedReview?.recommendedTraining || [];
+
+  // Function to get color based on rating
+  const getRatingColor = (rating) => {
+    if (rating >= 4.5) return 'success.main';
+    if (rating >= 3.5) return 'success.light';
+    if (rating >= 2.5) return 'warning.light';
+    return 'error.light';
+  };
+
+  return (
+    <div className="staff-performance-page">
+      <Typography variant="h4" component="h1" gutterBottom>
+        My Performance
+      </Typography>
+      
+      {/* Error message if any */}
+      {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}
+      
+      {loading ? (
+        <Box sx={{ display: 'flex', justifyContent: 'center', p: 5 }}>
+          <CircularProgress />
+        </Box>
+      ) : performanceReviews.length === 0 ? (
+        <Alert severity="info" sx={{ mb: 3 }}>
+          No performance reviews found. Your first performance review will appear here once completed.
+        </Alert>
+      ) : (
+        <>
+          {/* Performance Overview */}
+          <Card sx={{ mb: 4 }}>
+            <CardContent>
+              <Typography variant="h6" gutterBottom>
+                <AssessmentIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
+                Performance Overview
+              </Typography>
+              
+              <Grid container spacing={3}>
+                <Grid item xs={12} md={4}>
+                  <Paper sx={{ p: 2, textAlign: 'center', height: '100%' }}>
+                    <Typography variant="subtitle1" gutterBottom>Overall Rating</Typography>
+                    <Box sx={{ display: 'flex', justifyContent: 'center', mb: 1 }}>
+                      <Rating 
+                        value={Number(metrics.averageRating)}
+                        precision={0.1}
+                        readOnly
+                        emptyIcon={<StarIcon style={{ opacity: 0.55 }} fontSize="inherit" />}
+                      />
+                    </Box>
+                    <Typography variant="h3" sx={{ color: getRatingColor(metrics.averageRating) }}>
+                      {metrics.averageRating}
+                    </Typography>
+                    <Typography variant="body2" color="text.secondary">
+                      Based on {metrics.totalReviews} reviews
+                    </Typography>
+                  </Paper>
+                </Grid>
+                
+                <Grid item xs={12} md={4}>
+                  <Paper sx={{ p: 2, textAlign: 'center', height: '100%' }}>
+                    <Typography variant="subtitle1" gutterBottom>Latest Review</Typography>
+                    <Box sx={{ display: 'flex', justifyContent: 'center', mb: 1 }}>
+                      <Rating 
+                        value={selectedReview?.rating || 0}
+                        readOnly
+                        emptyIcon={<StarIcon style={{ opacity: 0.55 }} fontSize="inherit" />}
+                      />
+                    </Box>
+                    <Typography variant="h3" sx={{ color: getRatingColor(selectedReview?.rating || 0) }}>
+                      {selectedReview?.rating.toFixed(1) || 'N/A'}
+                    </Typography>
+                    <Typography variant="body2" color="text.secondary">
+                      {selectedReview?.reviewDate ? formatDate(selectedReview.reviewDate) : 'N/A'}
+                    </Typography>
+                  </Paper>
+                </Grid>
+                
+                <Grid item xs={12} md={4}>
+                  <Paper sx={{ p: 2, textAlign: 'center', height: '100%' }}>
+                    <Typography variant="subtitle1" gutterBottom>Performance Trend</Typography>
+                    {trends ? (
+                      <>
+                        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', mb: 1 }}>
+                          {trends.improving ? (
+                            <TrendingUpIcon sx={{ color: 'success.main', fontSize: 30 }} />
+                          ) : trends.stable ? (
+                            <PieChartIcon sx={{ color: 'info.main', fontSize: 30 }} />
+                          ) : (
+                            <TrendingUpIcon sx={{ color: 'error.main', fontSize: 30, transform: 'rotate(180deg)' }} />
+                          )}
+                        </Box>
+                        <Typography variant="h3" sx={{ 
+                          color: trends.improving ? 'success.main' : trends.stable ? 'info.main' : 'error.main' 
+                        }}>
+                          {trends.improving ? '+' : trends.declining ? '-' : ''}{Math.abs(trends.difference).toFixed(1)}
+                        </Typography>
+                        <Typography variant="body2" color="text.secondary">
+                          {trends.improving 
+                            ? `Improved by ${trends.percentChange}%` 
+                            : trends.stable 
+                              ? 'Maintaining performance' 
+                              : `Decreased by ${Math.abs(trends.percentChange)}%`}
+                        </Typography>
+                      </>
+                    ) : (
+                      <Typography variant="body2" color="text.secondary">
+                        Insufficient data for trend analysis
+                      </Typography>
+                    )}
+                  </Paper>
+                </Grid>
+              </Grid>
+            </CardContent>
+          </Card>
+          
+          {/* Performance Details */}
+          {selectedReview && (
+            <Card sx={{ mb: 4 }}>
+              <CardContent>
+                <Typography variant="h6" gutterBottom>
+                  Latest Performance Review
+                </Typography>
+                
+                <Grid container spacing={3}>
+                  <Grid item xs={12}>
+                    <Paper variant="outlined" sx={{ p: 2 }}>
+                      <Typography variant="subtitle1" gutterBottom>Review Period: {selectedReview.reviewPeriod}</Typography>
+                      <Typography variant="body2" gutterBottom>
+                        <strong>Review Date:</strong> {formatDate(selectedReview.reviewDate)}
+                      </Typography>
+                      
+                      <Typography variant="body1" sx={{ mt: 2 }}>
+                        <strong>Manager Comments:</strong>
+                      </Typography>
+                      <Typography variant="body2" paragraph>
+                        {selectedReview.reviewComments}
+                      </Typography>
+                    </Paper>
+                  </Grid>
+                  
+                  <Grid item xs={12} md={6}>
+                    <Typography variant="subtitle1" gutterBottom>Strengths</Typography>
+                    <Paper variant="outlined" sx={{ p: 2, bgcolor: 'success.light', color: 'success.contrastText', height: '100%' }}>
+                      {strengths.length > 0 ? (
+                        <List dense>
+                          {strengths.map((strength, index) => (
+                            <ListItem key={index}>
+                              <ListItemIcon>
+                                <CheckCircleIcon sx={{ color: 'success.contrastText' }} />
+                              </ListItemIcon>
+                              <ListItemText primary={strength} />
+                            </ListItem>
+                          ))}
+                        </List>
+                      ) : (
+                        <Typography variant="body2">No strengths specified in this review.</Typography>
+                      )}
+                    </Paper>
+                  </Grid>
+                  
+                  <Grid item xs={12} md={6}>
+                    <Typography variant="subtitle1" gutterBottom>Areas for Improvement</Typography>
+                    <Paper variant="outlined" sx={{ p: 2, bgcolor: 'warning.light', color: 'warning.contrastText', height: '100%' }}>
+                      {weaknesses.length > 0 ? (
+                        <List dense>
+                          {weaknesses.map((weakness, index) => (
+                            <ListItem key={index}>
+                              <ListItemIcon>
+                                <WarningIcon sx={{ color: 'warning.contrastText' }} />
+                              </ListItemIcon>
+                              <ListItemText primary={weakness} />
+                            </ListItem>
+                          ))}
+                        </List>
+                      ) : (
+                        <Typography variant="body2">No areas for improvement specified in this review.</Typography>
+                      )}
+                    </Paper>
+                  </Grid>
+                </Grid>
+              </CardContent>
+            </Card>
+          )}
+          
+          {/* Development Plan */}
+          {selectedReview && (
+            <Card sx={{ mb: 4 }}>
+              <CardContent>
+                <Typography variant="h6" gutterBottom>
+                  Development Plan
+                </Typography>
+                
+                <Grid container spacing={3}>
+                  <Grid item xs={12} md={6}>
+                    <Typography variant="subtitle1" gutterBottom>Performance Goals</Typography>
+                    <Paper variant="outlined" sx={{ p: 2, height: '100%' }}>
+                      {goals.length > 0 ? (
+                        <List dense>
+                          {goals.map((goal, index) => (
+                            <ListItem key={index}>
+                              <ListItemIcon>
+                                <TrendingUpIcon color="primary" />
+                              </ListItemIcon>
+                              <ListItemText primary={goal} />
+                            </ListItem>
+                          ))}
+                        </List>
+                      ) : (
+                        <Typography variant="body2">No goals specified in this review.</Typography>
+                      )}
+                    </Paper>
+                  </Grid>
+                  
+                  <Grid item xs={12} md={6}>
+                    <Typography variant="subtitle1" gutterBottom>Recommended Training</Typography>
+                    <Paper variant="outlined" sx={{ p: 2, height: '100%' }}>
+                      {recommendedTraining.length > 0 ? (
+                        <List dense>
+                          {recommendedTraining.map((training, index) => (
+                            <ListItem key={index}>
+                              <ListItemIcon>
+                                <SchoolIcon color="primary" />
+                              </ListItemIcon>
+                              <ListItemText primary={training} />
+                            </ListItem>
+                          ))}
+                        </List>
+                      ) : (
+                        <Typography variant="body2">No training recommendations in this review.</Typography>
+                      )}
+                    </Paper>
+                  </Grid>
+                </Grid>
+              </CardContent>
+            </Card>
+          )}
+          
+          {/* Performance History */}
+          <Card>
+            <CardContent>
+              <Typography variant="h6" gutterBottom>
+                <QueryBuilderIcon sx={{ verticalAlign: 'middle', mr: 1 }} />
+                Performance History
+              </Typography>
+              
+              <TableContainer component={Paper} sx={{ mt: 2 }}>
+                <Table>
+                  <TableHead>
+                    <TableRow>
+                      <TableCell>Review Period</TableCell>
+                      <TableCell>Date</TableCell>
+                      <TableCell>Rating</TableCell>
+                      <TableCell>Actions</TableCell>
+                    </TableRow>
+                  </TableHead>
+                  <TableBody>
+                    {performanceReviews.map((review) => (
+                      <TableRow 
+                        key={review._id}
+                        selected={selectedReview && selectedReview._id === review._id}
+                        hover
+                      >
+                        <TableCell>{review.reviewPeriod}</TableCell>
+                        <TableCell>{formatDate(review.reviewDate)}</TableCell>
+                        <TableCell>
+                          <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                            <Typography sx={{ mr: 1 }}>{review.rating.toFixed(1)}</Typography>
+                            <Rating 
+                              value={review.rating} 
+                              readOnly 
+                              size="small" 
+                              precision={0.5}
+                            />
+                          </Box>
+                        </TableCell>
+                        <TableCell>
+                          <Button 
+                            size="small" 
+                            variant="outlined"
+                            onClick={() => setSelectedReview(review)}
+                          >
+                            View Details
+                          </Button>
+                        </TableCell>
+                      </TableRow>
+                    ))}
+                  </TableBody>
+                </Table>
+              </TableContainer>
+            </CardContent>
+          </Card>
+        </>
+      )}
+    </div>
+  );
+};
+
+export default StaffPerformancePage;
\ No newline at end of file
